--[ 2018.11.19.16.37.23.757.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.37.23.789.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.37.23.804.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.37.23.804.1 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.37.23.804.2 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.37.23.804.3 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.37.23.804.4 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.37.23.804.5 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.37.23.804.6 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.37.23.804.7 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.37.23.820.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.37.23.820.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.37.23.820.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.37.23.820.3 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.37.23.820.4 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.37.23.820.5 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.37.24.429.0 ]--
UpdateTree (AD): 3 0
+ /.log/history.log
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.16.38.16.183.0 ]--
UpdateTree (AD): 1 0
+ /.idea/misc.xml

--[ 2018.11.19.16.38.16.276.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.16.38.16.323.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.16.44.54.794.0 ]--
UpdateTree (AD): 6 0
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/.name
+ /.idea/compiler.xml
+ /.idea/uiDesigner.xml

--[ 2018.11.19.16.44.59.574.0 ]--
DisposeComponent
--[ 2018.11.19.16.44.59.713.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.44.59.733.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.44.59.739.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.44.59.744.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.44.59.747.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.44.59.751.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.44.59.754.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.44.59.757.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.44.59.772.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.44.59.775.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.44.59.777.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.44.59.779.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.44.59.782.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.44.59.785.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.44.59.788.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.44.59.796.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.45.17.628.0 ]--
UpdateTree (AD): 19 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.16.45.17.741.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.45.40.338.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.16.45.40.539.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.16.45.41.119.0 ]--
r 18         return new PSB<>();
--[ 2018.11.19.16.45.41.534.0 ]--
r 18         return new PSBr<>();
--[ 2018.11.19.16.45.41.688.0 ]--
r 18         return new PSBru<>();
--[ 2018.11.19.16.45.42.754.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.42.831.0 ]--
r 18         return new PSBruteForce();
--[ 2018.11.19.16.45.42.924.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.49.842.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.46.02.530.0 ]--
DisposeComponent
--[ 2018.11.19.18.05.58.646.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.18.05.58.708.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/PSKDTree$1.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.18.05.58.708.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.18.05.58.708.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.18.05.58.708.3 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.18.05.58.708.4 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.18.05.58.708.5 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.18.05.58.708.6 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.18.05.58.708.7 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.18.05.58.724.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.18.05.58.724.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.18.05.58.724.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.18.05.58.724.3 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.18.05.58.724.4 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.18.05.58.724.5 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.18.05.58.724.6 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.18.06.02.504.0 ]--
UpdateTree (AD): 9 23
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Point$4.class
- /.git/logs/refs/remotes/origin/master
- /out/production/P05_KDTrees/stdlib.jar
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/algs4.jar
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /.git/refs/remotes/origin/master
- /.git/COMMIT_EDITMSG
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Point.class
+ /.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
+ /.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
+ /.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
+ /.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
+ /.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
+ /.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
+ /.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.18.06.30.170.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.18.06.30.201.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.18.06.30.373.0 ]--
DisposeComponent
--[ 2018.11.19.20.12.43.508.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.20.12.43.977.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.20.12.43.977.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.20.12.43.992.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.20.12.44.008.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.20.12.44.008.1 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.20.12.44.024.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.20.12.44.024.1 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.20.12.44.055.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.20.12.44.071.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.20.12.44.071.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.20.12.44.086.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.20.12.44.102.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.20.12.44.117.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.20.12.44.117.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.20.12.44.164.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.20.12.55.024.0 ]--
UpdateTree (AD): 26 0
+ /.git/logs/refs/remotes/origin/master
+ /.git/refs/remotes/origin/master
+ /.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
+ /.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
+ /.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
+ /.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
+ /.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
+ /.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
+ /.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
+ /.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
+ /.git/objects/68/2820a134168b0d23787b376165bef89b511f00
+ /.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
+ /.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
+ /.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
+ /.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
+ /.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
+ /.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
+ /.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
+ /.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
+ /.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
+ /.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
+ /.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
+ /.git/objects/fe/86b7d30276d409463a9786906238815afa4617
+ /.git/ORIG_HEAD
+ /.git/FETCH_HEAD
+ /.git/COMMIT_EDITMSG

--[ 2018.11.19.20.20.31.073.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar

--[ 2018.11.19.20.20.31.198.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@75f21756
--[ 2018.11.19.20.20.38.355.0 ]--
:/src/PSKDTree.java
r 25         Node newNode = new Node();
--[ 2018.11.19.20.20.43.482.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.20.48.550.0 ]--
UpdateTree (AD): 18 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.20.20.55.705.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.20.20.56.283.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.20.20.58.564.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.58.580.0 ]--
r 18         return new PSKDTree();
--[ 2018.11.19.20.20.58.626.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.59.033.0 ]--
r 18         return new PSKDTree<>() ;
--[ 2018.11.19.20.20.59.970.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.21.03.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.21.34.234.0 ]--
:/src/PSKDTree.java
- 34
--[ 2018.11.19.20.21.34.250.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.34.250.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.262.0 ]--
+ 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT 
r 35                 && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.278.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.293.0 ]--
r 35                         && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.512.0 ]--
r 35                         )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.559.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.621.0 ]--
r 35                 )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.621.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.0 ]--
r 35                 ) && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.184.0 ]--
r 35                 ) {&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.449.0 ]--
+ 35                 ) {
+ 36 &&
r 37 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.449.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.465.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.480.0 ]--
r 37                 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.480.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.496.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.512.0 ]--
r 36                     &&
--[ 2018.11.19.20.21.51.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.527.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.54.995.0 ]--
- 34
r 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.21.55.011.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.55.011.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.572.0 ]--
+ 38                 } 
r 39                 else {
--[ 2018.11.19.20.22.02.587.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.587.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.884.0 ]--
+ 39                 
--[ 2018.11.19.20.22.02.900.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.900.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.634.0 ]--
r 39                 }
--[ 2018.11.19.20.22.03.649.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.649.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.1 ]--
r 39             }
--[ 2018.11.19.20.22.03.696.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.696.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.602.0 ]--
r 39                 }
--[ 2018.11.19.20.22.06.602.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.618.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.226.0 ]--
r 35 
--[ 2018.11.19.20.22.10.242.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.242.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.710.0 ]--
- 35
--[ 2018.11.19.20.22.10.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.724.0 ]--
r 35                  finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.18.740.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.771.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.677.0 ]--
r 35                 finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.19.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.693.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.505.0 ]--
r 35                     finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.20.505.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.521.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.347.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){
--[ 2018.11.19.20.22.29.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.159.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ 
--[ 2018.11.19.20.22.30.175.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.175.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.346.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ /
--[ 2018.11.19.20.22.30.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.378.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.456.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.30.456.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.409.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.31.409.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.424.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.612.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //ou
--[ 2018.11.19.20.22.31.612.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.627.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.32.861.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.877.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.002.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.33.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.018.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //t
--[ 2018.11.19.20.22.33.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.330.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //th
--[ 2018.11.19.20.22.33.346.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.439.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the
--[ 2018.11.19.20.22.33.439.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the 
--[ 2018.11.19.20.22.33.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.596.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the n
--[ 2018.11.19.20.22.33.611.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.611.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.689.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the ne
--[ 2018.11.19.20.22.33.705.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.767.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new
--[ 2018.11.19.20.22.33.767.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.783.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new 
--[ 2018.11.19.20.22.33.908.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new n
--[ 2018.11.19.20.22.34.205.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new no
--[ 2018.11.19.20.22.34.299.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.392.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new nod
--[ 2018.11.19.20.22.34.408.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.408.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.580.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node
--[ 2018.11.19.20.22.34.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.595.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.705.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node 
--[ 2018.11.19.20.22.34.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.720.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.830.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node i
--[ 2018.11.19.20.22.34.830.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.845.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.939.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is
--[ 2018.11.19.20.22.34.955.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.955.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.033.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is 
--[ 2018.11.19.20.22.35.033.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.048.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is t
--[ 2018.11.19.20.22.35.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.548.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to
--[ 2018.11.19.20.22.35.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to 
--[ 2018.11.19.20.22.35.876.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.876.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.954.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to t
--[ 2018.11.19.20.22.35.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.064.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to th
--[ 2018.11.19.20.22.36.064.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.079.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.173.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the
--[ 2018.11.19.20.22.36.173.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.189.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.298.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the 
--[ 2018.11.19.20.22.36.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the l
--[ 2018.11.19.20.22.36.454.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.548.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the le
--[ 2018.11.19.20.22.36.548.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.564.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the lef
--[ 2018.11.19.20.22.36.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.985.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.36.985.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.37.001.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.546.0 ]--
r 35                     ifinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.562.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.562.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.640.0 ]--
r 35                     iffinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.640.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.656.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.749.0 ]--
r 35                     if finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.749.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.577.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.46.593.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.593.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.967.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.22.48.983.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.983.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.999.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.795.0 ]--
r 36                         finger = finger.left;
--[ 2018.11.19.20.22.50.795.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.811.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.778.0 ]--
r 37                     } 
--[ 2018.11.19.20.22.57.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.793.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.730.0 ]--
+ 38                     
--[ 2018.11.19.20.22.59.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.0 ]--
r 38                     e
--[ 2018.11.19.20.22.59.980.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.105.0 ]--
r 38                     el
--[ 2018.11.19.20.23.00.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.183.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.324.0 ]--
r 38                     else
--[ 2018.11.19.20.23.00.340.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.340.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.980.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.121.0 ]--
r 38                     el
--[ 2018.11.19.20.23.01.121.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.136.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.261.0 ]--
r 38                     e
--[ 2018.11.19.20.23.01.261.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.574.0 ]--
r 38                     
--[ 2018.11.19.20.23.01.589.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.0 ]--
r 38                 
--[ 2018.11.19.20.23.01.839.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.261.0 ]--
- 38
--[ 2018.11.19.20.23.03.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.277.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.433.0 ]--
- 38
--[ 2018.11.19.20.23.03.448.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.464.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.478.0 ]--
r 38                     else {
r 39                         finger = finger.right;
r 40                     }
--[ 2018.11.19.20.23.10.478.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.305.0 ]--
r 41                 }
--[ 2018.11.19.20.23.17.305.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.210.0 ]--
+ 42                 
--[ 2018.11.19.20.23.21.210.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.225.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.382.0 ]--
r 42                 e
--[ 2018.11.19.20.23.21.397.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.397.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.600.0 ]--
r 42                 el
--[ 2018.11.19.20.23.21.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.647.0 ]--
r 42                 els
--[ 2018.11.19.20.23.21.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.663.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.725.0 ]--
r 42                 else
--[ 2018.11.19.20.23.21.725.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.319.0 ]--
r 42                 else 
--[ 2018.11.19.20.23.23.334.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.350.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.491.0 ]--
r 42                 else {
--[ 2018.11.19.20.23.23.491.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.959.0 ]--
r 42                 else {/
--[ 2018.11.19.20.23.23.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.975.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.084.0 ]--
r 42                 else {//
--[ 2018.11.19.20.23.24.084.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.100.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.0 ]--
r 42                 else {//t
--[ 2018.11.19.20.23.24.475.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.537.0 ]--
r 42                 else {//th
--[ 2018.11.19.20.23.24.553.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.553.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.647.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.24.662.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.662.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.740.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.24.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.881.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.24.896.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.896.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.959.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.24.959.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.021.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.25.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.037.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.25.162.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.709.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.25.724.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.724.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.818.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.25.818.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.834.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.927.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.25.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.0 ]--
r 42                 else {//the new nod 
--[ 2018.11.19.20.23.26.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.26.474.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.26.630.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.662.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.26.677.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.26.880.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.052.0 ]--
r 42                 else {//the new node is
--[ 2018.11.19.20.23.27.052.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.068.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.646.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.27.646.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.661.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.161.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.28.161.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.177.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.193.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.28.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.239.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.28.239.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.255.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.302.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.28.302.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.318.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.458.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.28.474.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.489.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.692.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.28.692.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.708.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.771.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.28.771.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.786.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.927.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.28.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.114.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.29.114.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.130.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.270.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.29.270.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.286.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.833.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.29.848.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.848.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.005.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.31.021.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.193.0 ]--
r 42                 else {//the c
--[ 2018.11.19.20.23.31.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.427.0 ]--
r 42                 else {//the cu
--[ 2018.11.19.20.23.31.442.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.442.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.583.0 ]--
r 42                 else {//the cur
--[ 2018.11.19.20.23.31.583.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.599.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.724.0 ]--
r 42                 else {//the curr
--[ 2018.11.19.20.23.31.739.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.739.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.927.0 ]--
r 42                 else {//the curre
--[ 2018.11.19.20.23.31.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.021.0 ]--
r 42                 else {//the curren
--[ 2018.11.19.20.23.32.036.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.036.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.130.0 ]--
r 42                 else {//the current
--[ 2018.11.19.20.23.32.145.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.145.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.224.0 ]--
r 42                 else {//the current 
--[ 2018.11.19.20.23.32.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.239.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.471.0 ]--
r 34                 if(f.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.486.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.486.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.0 ]--
r 34                 if(fi.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.674.0 ]--
r 34                 if(fin.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.689.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.689.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.799.0 ]--
r 34                 if(fing.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.814.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.814.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.955.0 ]--
r 34                 if(finge.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.002.0 ]--
r 34                 if(finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.47.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.017.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.345.0 ]--
r 42                 else {//the f 
--[ 2018.11.19.20.23.50.345.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.360.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.0 ]--
r 42                 else {//the fi 
--[ 2018.11.19.20.23.50.470.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.0 ]--
r 42                 else {//the fin 
--[ 2018.11.19.20.23.50.610.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.688.0 ]--
r 42                 else {//the fing 
--[ 2018.11.19.20.23.50.704.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.704.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.798.0 ]--
r 42                 else {//the finge 
--[ 2018.11.19.20.23.50.813.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.813.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.891.0 ]--
r 42                 else {//the finger 
--[ 2018.11.19.20.23.50.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.907.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.313.0 ]--
r 42                 else {//the finger  
--[ 2018.11.19.20.23.51.313.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.329.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.485.0 ]--
r 42                 else {//the finger n 
--[ 2018.11.19.20.23.51.485.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.501.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.579.0 ]--
r 42                 else {//the finger no 
--[ 2018.11.19.20.23.51.594.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.594.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.844.0 ]--
r 42                 else {//the finger nod 
--[ 2018.11.19.20.23.51.860.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.860.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.032.0 ]--
r 42                 else {//the finger node 
--[ 2018.11.19.20.23.52.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.047.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.157.0 ]--
r 42                 else {//the finger node  
--[ 2018.11.19.20.23.52.172.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.172.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.875.0 ]--
r 42                 else {//the finger node i 
--[ 2018.11.19.20.23.53.891.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.985.0 ]--
r 42                 else {//the finger node is 
--[ 2018.11.19.20.23.54.000.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.000.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.094.0 ]--
r 42                 else {//the finger node is  
--[ 2018.11.19.20.23.54.094.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.110.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.23.55.328.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.437.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.23.55.453.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.453.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.969.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.23.55.969.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.984.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.031.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.23.56.031.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.172.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.23.56.187.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.187.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.359.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.23.56.359.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.375.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.453.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.23.56.468.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.765.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.23.58.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.780.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.905.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.23.58.921.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.921.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.062.0 ]--
r 42                 else {//the finger node is a up down  
--[ 2018.11.19.20.23.59.062.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.576.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.24.04.592.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.592.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.076.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.24.05.091.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.123.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.24.05.123.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.138.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.170.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.24.05.170.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.185.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.216.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.24.05.216.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.232.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.248.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.24.05.263.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.263.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.24.05.310.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.341.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.05.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.357.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.529.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.05.544.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.544.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.982.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.05.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.997.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.138.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.232.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.247.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.247.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.419.0 ]--
r 42                 else {//the finger node is an au 
--[ 2018.11.19.20.24.06.435.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.435.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.685.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.841.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.841.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.857.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.966.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.06.966.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.982.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.0 ]--
r 42                 else {//the finger node is an up 
--[ 2018.11.19.20.24.07.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.325.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.07.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.466.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.07.466.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.482.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.606.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.07.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.778.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.07.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.794.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.981.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.07.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.184.0 ]--
r 42                 else {//the finger node is a do 
--[ 2018.11.19.20.24.08.200.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.200.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.325.0 ]--
r 42                 else {//the finger node is a dow 
--[ 2018.11.19.20.24.08.325.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.419.0 ]--
r 42                 else {//the finger node is a down 
--[ 2018.11.19.20.24.08.419.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.434.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.606.0 ]--
r 42                 else {//the finger node is a down  
--[ 2018.11.19.20.24.08.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.700.0 ]--
r 42                 else {//the finger node is a down u 
--[ 2018.11.19.20.24.08.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.716.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.778.0 ]--
r 42                 else {//the finger node is a down up 
--[ 2018.11.19.20.24.08.778.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.044.0 ]--
r 42                 else {//the finger node is a down up  
--[ 2018.11.19.20.24.09.059.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.059.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.840.0 ]--
r 42                 else {//the finger node is a down up p 
--[ 2018.11.19.20.24.09.840.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.856.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.0 ]--
r 42                 else {//the finger node is a down up pa 
--[ 2018.11.19.20.24.09.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.106.0 ]--
r 42                 else {//the finger node is a down up par 
--[ 2018.11.19.20.24.10.106.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.122.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.293.0 ]--
r 42                 else {//the finger node is a down up part 
--[ 2018.11.19.20.24.10.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.309.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.371.0 ]--
r 42                 else {//the finger node is a down up parti 
--[ 2018.11.19.20.24.10.387.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.387.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.559.0 ]--
r 42                 else {//the finger node is a down up partit 
--[ 2018.11.19.20.24.10.559.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.684.0 ]--
r 42                 else {//the finger node is a down up partiti 
--[ 2018.11.19.20.24.10.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.731.0 ]--
r 42                 else {//the finger node is a down up partitio 
--[ 2018.11.19.20.24.10.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.824.0 ]--
r 42                 else {//the finger node is a down up partition 
--[ 2018.11.19.20.24.10.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.0 ]--
r 42                 else {//the finger node is a down up partitioni 
--[ 2018.11.19.20.24.11.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.652.0 ]--
r 42                 else {//the finger node is a down up partitionin 
--[ 2018.11.19.20.24.11.652.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.668.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.762.0 ]--
r 42                 else {//the finger node is a down up partitioning 
--[ 2018.11.19.20.24.11.777.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.824.0 ]--
r 42                 else {//the finger node is a down up partitioning  
--[ 2018.11.19.20.24.11.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.0 ]--
r 42                 else {//the finger node is a down up partitioning n 
--[ 2018.11.19.20.24.11.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.0 ]--
r 42                 else {//the finger node is a down up partitioning no 
--[ 2018.11.19.20.24.12.074.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.105.0 ]--
r 42                 else {//the finger node is a down up partitioning nod 
--[ 2018.11.19.20.24.12.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.0 ]--
r 42                 else {//the finger node is a down up partitioning node 
--[ 2018.11.19.20.24.12.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.277.0 ]--
+ 42                 else {//the finger node is a down up partitioning node
r 43                     
--[ 2018.11.19.20.24.14.293.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.527.0 ]--
+ 43                     
--[ 2018.11.19.20.24.14.527.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.043.0 ]--
r 44                     }
--[ 2018.11.19.20.24.15.058.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.058.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.074.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.105.0 ]--
r 43 
r 44                 }
--[ 2018.11.19.20.24.15.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.0 ]--
r 43     
--[ 2018.11.19.20.24.18.182.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.370.0 ]--
r 43         
--[ 2018.11.19.20.24.18.370.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.386.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.542.0 ]--
r 43             
--[ 2018.11.19.20.24.18.557.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.573.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.0 ]--
r 43                 
--[ 2018.11.19.20.24.18.870.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.245.0 ]--
r 43                     
--[ 2018.11.19.20.24.19.260.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.260.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.0 ]--
+ 43                                         if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 44                         finger = finger.left;
+ 45                     } 
+ 46                     else {
+ 47                         finger = finger.right;
r 48                     }
--[ 2018.11.19.20.24.29.727.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.758.0 ]--
r 43                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 45                     }
--[ 2018.11.19.20.24.29.774.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.774.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.789.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.805.0 ]--
r 43                     if (finger.p.() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.31.820.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.820.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.258.0 ]--
r 43                     if (finger.p.y() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.32.273.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.585.0 ]--
r 43                     if (finger.p.y() >= newNode.p.()){ //the new node is to the left
--[ 2018.11.19.20.24.34.601.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.601.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.695.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the left
--[ 2018.11.19.20.24.34.695.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.725.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the 
--[ 2018.11.19.20.24.36.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.882.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the
--[ 2018.11.19.20.24.36.897.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.897.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.053.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to th
--[ 2018.11.19.20.24.37.069.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.069.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.163.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to t
--[ 2018.11.19.20.24.37.163.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.178.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.288.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to 
--[ 2018.11.19.20.24.37.303.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.303.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.460.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to
--[ 2018.11.19.20.24.37.475.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.491.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.600.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is t
--[ 2018.11.19.20.24.37.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is 
--[ 2018.11.19.20.24.37.772.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.740.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is b
--[ 2018.11.19.20.24.39.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.756.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.834.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is be
--[ 2018.11.19.20.24.39.834.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.850.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.928.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is bel
--[ 2018.11.19.20.24.39.928.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.068.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is belo
--[ 2018.11.19.20.24.40.068.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.084.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.146.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
--[ 2018.11.19.20.24.40.146.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.162.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.0 ]--
r 50             }
--[ 2018.11.19.20.24.57.455.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.606.0 ]--
r 37                     }
--[ 2018.11.19.20.25.21.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.26.18.328.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.18.609.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.19.781.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.19.921.0 ]--
r 33             while(finger.left != null && finger.right != null){
--[ 2018.11.19.20.26.21.374.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.21.499.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.22.108.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.22.233.0 ]--
r 33             while(finger.left != null || finger.right != null){
--[ 2018.11.19.20.28.07.132.0 ]--
r 33             while(finger.left != null || finger.right != null){ 
--[ 2018.11.19.20.28.07.257.0 ]--
r 33             while(finger.left != null || finger.right != null){ /
--[ 2018.11.19.20.28.07.382.0 ]--
r 33             while(finger.left != null || finger.right != null){ //
--[ 2018.11.19.20.28.07.569.0 ]--
r 33             while(finger.left != null || finger.right != null){ //t
--[ 2018.11.19.20.28.07.647.0 ]--
r 33             while(finger.left != null || finger.right != null){ //th
--[ 2018.11.19.20.28.08.100.0 ]--
r 33             while(finger.left != null || finger.right != null){ //thi
--[ 2018.11.19.20.28.08.209.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this
--[ 2018.11.19.20.28.08.334.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this 
--[ 2018.11.19.20.28.08.444.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.08.538.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wi
--[ 2018.11.19.20.28.08.834.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.09.006.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wh
--[ 2018.11.19.20.28.09.162.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whi
--[ 2018.11.19.20.28.09.272.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whil
--[ 2018.11.19.20.28.09.350.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while
--[ 2018.11.19.20.28.09.475.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while 
--[ 2018.11.19.20.28.09.615.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while l
--[ 2018.11.19.20.28.09.772.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while lo
--[ 2018.11.19.20.28.09.912.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loo
--[ 2018.11.19.20.28.10.037.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop
--[ 2018.11.19.20.28.10.131.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.396.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.537.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop wh
--[ 2018.11.19.20.28.10.693.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.818.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop s
--[ 2018.11.19.20.28.10.990.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sh
--[ 2018.11.19.20.28.11.068.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.178.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop show
--[ 2018.11.19.20.28.11.724.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shou
--[ 2018.11.19.20.28.12.052.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shoul
--[ 2018.11.19.20.28.12.115.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should
--[ 2018.11.19.20.28.12.240.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.12.271.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.12.474.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.12.662.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should run
--[ 2018.11.19.20.28.13.380.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.13.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.13.630.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.14.208.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should g
--[ 2018.11.19.20.28.14.349.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ge
--[ 2018.11.19.20.28.14.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get
--[ 2018.11.19.20.28.14.599.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get 
--[ 2018.11.19.20.28.14.708.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get u
--[ 2018.11.19.20.28.14.786.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us
--[ 2018.11.19.20.28.15.005.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us 
--[ 2018.11.19.20.28.15.036.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us t
--[ 2018.11.19.20.28.15.145.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to
--[ 2018.11.19.20.28.15.255.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to 
--[ 2018.11.19.20.28.15.567.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to t
--[ 2018.11.19.20.28.15.661.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to th
--[ 2018.11.19.20.28.15.755.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the
--[ 2018.11.19.20.28.15.802.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the 
--[ 2018.11.19.20.28.15.926.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the b
--[ 2018.11.19.20.28.16.051.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bo
--[ 2018.11.19.20.28.16.161.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bot
--[ 2018.11.19.20.28.16.348.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bott
--[ 2018.11.19.20.28.16.442.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.16.754.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.17.192.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.18.004.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.23.487.0 ]--
+ 51             
--[ 2018.11.19.20.28.24.471.0 ]--
r 51             /
--[ 2018.11.19.20.28.24.565.0 ]--
r 51             //
--[ 2018.11.19.20.28.24.706.0 ]--
r 51             //a
--[ 2018.11.19.20.28.24.877.0 ]--
r 51             //at
--[ 2018.11.19.20.28.25.002.0 ]--
r 51             //at 
--[ 2018.11.19.20.28.25.081.0 ]--
r 51             //at t
--[ 2018.11.19.20.28.25.127.0 ]--
r 51             //at th
--[ 2018.11.19.20.28.25.268.0 ]--
r 51             //at thi
--[ 2018.11.19.20.28.25.330.0 ]--
r 51             //at this
--[ 2018.11.19.20.28.25.440.0 ]--
r 51             //at this 
--[ 2018.11.19.20.28.25.534.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.25.815.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.25.862.0 ]--
r 51             //at this pio
--[ 2018.11.19.20.28.26.205.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.26.330.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.26.502.0 ]--
r 51             //at this po
--[ 2018.11.19.20.28.26.658.0 ]--
r 51             //at this poi
--[ 2018.11.19.20.28.26.736.0 ]--
r 51             //at this poin
--[ 2018.11.19.20.28.26.877.0 ]--
r 51             //at this point
--[ 2018.11.19.20.28.26.987.0 ]--
r 51             //at this point,
--[ 2018.11.19.20.28.27.174.0 ]--
r 51             //at this point, 
--[ 2018.11.19.20.28.27.237.0 ]--
r 51             //at this point, w
--[ 2018.11.19.20.28.27.268.0 ]--
r 51             //at this point, we
--[ 2018.11.19.20.28.27.502.0 ]--
r 51             //at this point, we 
--[ 2018.11.19.20.28.27.627.0 ]--
r 51             //at this point, we a
--[ 2018.11.19.20.28.27.767.0 ]--
r 51             //at this point, we ar
--[ 2018.11.19.20.28.27.892.0 ]--
r 51             //at this point, we are
--[ 2018.11.19.20.28.27.939.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.28.017.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.28.095.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.205.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.486.0 ]--
r 51             //at this point, we are the 
--[ 2018.11.19.20.28.28.705.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.845.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.970.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.29.095.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.29.127.0 ]--
r 51             //at this point, we are a
--[ 2018.11.19.20.28.29.314.0 ]--
r 51             //at this point, we are at
--[ 2018.11.19.20.28.29.423.0 ]--
r 51             //at this point, we are at 
--[ 2018.11.19.20.28.29.501.0 ]--
r 51             //at this point, we are at t
--[ 2018.11.19.20.28.29.595.0 ]--
r 51             //at this point, we are at th
--[ 2018.11.19.20.28.29.673.0 ]--
r 51             //at this point, we are at the
--[ 2018.11.19.20.28.29.720.0 ]--
r 51             //at this point, we are at the 
--[ 2018.11.19.20.28.29.814.0 ]--
r 51             //at this point, we are at the b
--[ 2018.11.19.20.28.29.939.0 ]--
r 51             //at this point, we are at the bo
--[ 2018.11.19.20.28.30.064.0 ]--
r 51             //at this point, we are at the bot
--[ 2018.11.19.20.28.30.204.0 ]--
r 51             //at this point, we are at the bott
--[ 2018.11.19.20.28.30.298.0 ]--
r 51             //at this point, we are at the botto
--[ 2018.11.19.20.28.30.439.0 ]--
r 51             //at this point, we are at the bottom
--[ 2018.11.19.20.28.30.548.0 ]--
r 51             //at this point, we are at the bottom 
--[ 2018.11.19.20.28.30.610.0 ]--
r 51             //at this point, we are at the bottom o
--[ 2018.11.19.20.28.30.798.0 ]--
r 51             //at this point, we are at the bottom of
--[ 2018.11.19.20.28.30.907.0 ]--
r 51             //at this point, we are at the bottom of 
--[ 2018.11.19.20.28.31.001.0 ]--
r 51             //at this point, we are at the bottom of t
--[ 2018.11.19.20.28.31.079.0 ]--
r 51             //at this point, we are at the bottom of th
--[ 2018.11.19.20.28.31.189.0 ]--
r 51             //at this point, we are at the bottom of the
--[ 2018.11.19.20.28.31.329.0 ]--
r 51             //at this point, we are at the bottom of the 
--[ 2018.11.19.20.28.31.501.0 ]--
r 51             //at this point, we are at the bottom of the t
--[ 2018.11.19.20.28.31.673.0 ]--
r 51             //at this point, we are at the bottom of the tr
--[ 2018.11.19.20.28.31.767.0 ]--
r 51             //at this point, we are at the bottom of the tre
--[ 2018.11.19.20.28.31.938.0 ]--
r 51             //at this point, we are at the bottom of the tree
--[ 2018.11.19.20.28.33.157.0 ]--
r 51             //at this point, we are at the bottom of the tree 
--[ 2018.11.19.20.28.33.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (
--[ 2018.11.19.20.28.33.469.0 ]--
r 51             //at this point, we are at the bottom of the tree (f
--[ 2018.11.19.20.28.33.610.0 ]--
r 51             //at this point, we are at the bottom of the tree (fi
--[ 2018.11.19.20.28.33.688.0 ]--
r 51             //at this point, we are at the bottom of the tree (fin
--[ 2018.11.19.20.28.33.922.0 ]--
r 51             //at this point, we are at the bottom of the tree (fing
--[ 2018.11.19.20.28.34.063.0 ]--
r 51             //at this point, we are at the bottom of the tree (finge
--[ 2018.11.19.20.28.34.141.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger
--[ 2018.11.19.20.28.34.235.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger 
--[ 2018.11.19.20.28.34.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger i
--[ 2018.11.19.20.28.34.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is
--[ 2018.11.19.20.28.34.500.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is 
--[ 2018.11.19.20.28.34.750.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is p
--[ 2018.11.19.20.28.34.906.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is po
--[ 2018.11.19.20.28.35.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.35.266.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.35.406.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.35.531.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.35.719.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.35.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting 
--[ 2018.11.19.20.28.36.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.36.172.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.36.297.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.36.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.36.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.36.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poii
--[ 2018.11.19.20.28.37.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.37.453.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.37.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.37.656.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poingi
--[ 2018.11.19.20.28.37.890.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.38.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.38.125.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is point
--[ 2018.11.19.20.28.38.202.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointi
--[ 2018.11.19.20.28.38.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointin
--[ 2018.11.19.20.28.38.374.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing
--[ 2018.11.19.20.28.38.468.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.38.546.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.38.765.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.38.921.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.38.984.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.39.077.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.39.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.39.233.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.39.343.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.515.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the lo
--[ 2018.11.19.20.28.39.827.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.39.983.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.40.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.40.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.40.452.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last n
--[ 2018.11.19.20.28.41.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.41.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.41.389.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.41.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.41.639.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.41.764.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.41.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.42.045.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.42.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.42.295.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.42.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.42.686.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.42.811.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.43.014.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing t
--[ 2018.11.19.20.28.43.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to
--[ 2018.11.19.20.28.43.217.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to 
--[ 2018.11.19.20.28.43.311.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a
--[ 2018.11.19.20.28.43.826.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a 
--[ 2018.11.19.20.28.44.404.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a l
--[ 2018.11.19.20.28.44.560.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a le
--[ 2018.11.19.20.28.44.654.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a lea
--[ 2018.11.19.20.28.44.763.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf
--[ 2018.11.19.20.28.45.060.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf 
--[ 2018.11.19.20.28.45.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf w
--[ 2018.11.19.20.28.45.373.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wi
--[ 2018.11.19.20.28.45.498.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wit
--[ 2018.11.19.20.28.45.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with
--[ 2018.11.19.20.28.45.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with 
--[ 2018.11.19.20.28.46.013.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with n
--[ 2018.11.19.20.28.46.154.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no
--[ 2018.11.19.20.28.47.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no 
--[ 2018.11.19.20.28.47.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no f
--[ 2018.11.19.20.28.47.841.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fu
--[ 2018.11.19.20.28.47.919.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fur
--[ 2018.11.19.20.28.48.091.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furt
--[ 2018.11.19.20.28.48.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furth
--[ 2018.11.19.20.28.48.309.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furthe
--[ 2018.11.19.20.28.48.388.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further
--[ 2018.11.19.20.28.50.481.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further 
--[ 2018.11.19.20.28.50.684.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further l
--[ 2018.11.19.20.28.50.809.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further le
--[ 2018.11.19.20.28.51.106.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further lea
--[ 2018.11.19.20.28.51.403.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leav
--[ 2018.11.19.20.28.51.777.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leave
--[ 2018.11.19.20.28.51.965.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
--[ 2018.11.19.20.28.52.746.0 ]--
+ 52             
--[ 2018.11.19.20.30.20.070.0 ]--
r 52 
--[ 2018.11.19.20.30.52.562.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.52.578.0 ]--
r 36                 }
--[ 2018.11.19.20.30.52.593.0 ]--
r 35                     
--[ 2018.11.19.20.30.54.593.0 ]--
- 35
--[ 2018.11.19.20.30.56.874.0 ]--
+ 35                     
--[ 2018.11.19.20.30.57.155.0 ]--
- 35
- 35
--[ 2018.11.19.20.30.58.436.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.58.451.0 ]--
r 36                 }
--[ 2018.11.19.20.30.58.483.0 ]--
r 35                     
--[ 2018.11.19.20.30.59.029.0 ]--
- 35
- 35
--[ 2018.11.19.20.31.01.872.0 ]--
+ 35                     
--[ 2018.11.19.20.31.06.294.0 ]--
r 35                     i
--[ 2018.11.19.20.31.06.544.0 ]--
r 35                     
--[ 2018.11.19.20.31.07.465.0 ]--
r 35                     f
--[ 2018.11.19.20.31.07.606.0 ]--
r 35                     fi
--[ 2018.11.19.20.31.11.714.0 ]--
r 35                     f
--[ 2018.11.19.20.31.11.949.0 ]--
r 35                     
--[ 2018.11.19.20.31.16.276.0 ]--
r 35                     p
--[ 2018.11.19.20.31.16.369.0 ]--
r 35                     pa
--[ 2018.11.19.20.31.16.588.0 ]--
r 35                     par
--[ 2018.11.19.20.31.16.776.0 ]--
r 35                     pare
--[ 2018.11.19.20.31.16.885.0 ]--
r 35                     paren
--[ 2018.11.19.20.31.16.979.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.17.588.0 ]--
r 35                     parent 
--[ 2018.11.19.20.31.17.994.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.18.666.0 ]--
r 35                     parentD
--[ 2018.11.19.20.31.18.806.0 ]--
r 35                     parentDi
--[ 2018.11.19.20.31.18.978.0 ]--
r 35                     parentDir
--[ 2018.11.19.20.31.20.775.0 ]--
r 35                     parentDir 
--[ 2018.11.19.20.31.20.868.0 ]--
r 35                     parentDir =
--[ 2018.11.19.20.31.20.962.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.24.383.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.24.539.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.24.805.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.25.055.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.25.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.25.930.0 ]--
r 35                     parentDir = LEFTRI
--[ 2018.11.19.20.31.26.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.26.945.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.27.086.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.27.258.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.27.539.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.27.929.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.37.897.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.31.40.333.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.50.801.0 ]--
r 35                     DparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.472.0 ]--
r 35                     DiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.550.0 ]--
r 35                     DirparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.628.0 ]--
r 35                     DireparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.878.0 ]--
r 35                     DirecparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.128.0 ]--
r 35                     DirectparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.253.0 ]--
r 35                     DirectiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.394.0 ]--
r 35                     DirectioparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.425.0 ]--
r 35                     DirectionparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.550.0 ]--
r 35                     Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.799.0 ]--
r 35                     P parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.986.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.549.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.721.0 ]--
r 35                     Pati parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.564.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.736.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.892.0 ]--
r 35                     Par parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.080.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.799.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.970.0 ]--
r 35                     Partio parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.439.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.595.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.251.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.767.0 ]--
r 35                     Partit parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.02.204.0 ]--
r 35                     Partition parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.03.595.0 ]--
r 35                     Partition. parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.06.172.0 ]--
r 35                     Partition.Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.51.646.0 ]--
- 35
--[ 2018.11.19.20.32.59.644.0 ]--
r 52     
--[ 2018.11.19.20.32.59.987.0 ]--
r 52         
--[ 2018.11.19.20.33.00.191.0 ]--
r 52             
--[ 2018.11.19.20.33.00.347.0 ]--
r 52                 
--[ 2018.11.19.20.33.00.972.0 ]--
r 52             
--[ 2018.11.19.20.33.06.627.0 ]--
+ 52             if(finger.dir == Partition.Direction.LEFTRIGHT) {
+ 53                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 54                         finger = finger.left;
+ 55                     }
+ 56                     else {
+ 57                         finger = finger.right;
+ 58                     }
+ 59                 }
+ 60                 else {//the finger node is a down up partitioning node
+ 61                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
+ 62                         finger = finger.left;
+ 63                     }
+ 64                     else {
+ 65                         finger = finger.right;
+ 66                     }
r 67                 }
--[ 2018.11.19.20.33.06.658.0 ]--
- 53
r 53                 if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 54                     finger = finger.left;
r 55                 }
r 56                 else {
r 57                     finger = finger.right;
r 59             }
r 60             else {//the finger node is a down up partitioning node
r 61                 if (finger.p.y() >= newNode.p.y()){ //the new node is below
r 62                     finger = finger.left;
r 63                 }
r 64                 else {
r 65                     finger = finger.right;
+ 67             }
--[ 2018.11.19.20.33.33.964.0 ]--
r 54                     ffinger.left;
--[ 2018.11.19.20.33.34.073.0 ]--
r 54                     finger.left;
--[ 2018.11.19.20.33.36.573.0 ]--
r 54                     finger.left ;
--[ 2018.11.19.20.33.36.651.0 ]--
r 54                     finger.left =;
--[ 2018.11.19.20.33.37.307.0 ]--
r 54                     finger.left = ;
--[ 2018.11.19.20.33.46.602.0 ]--
r 54                     finger.left = n;
--[ 2018.11.19.20.33.46.742.0 ]--
r 54                     finger.left = ne;
--[ 2018.11.19.20.33.46.805.0 ]--
r 54                     finger.left = new;
--[ 2018.11.19.20.33.48.023.0 ]--
r 54                     finger.left = newNode;
--[ 2018.11.19.20.33.53.694.0 ]--
r 57                     finger.
--[ 2018.11.19.20.33.53.850.0 ]--
r 57                     finger.r
--[ 2018.11.19.20.33.53.991.0 ]--
r 57                     finger.ri
--[ 2018.11.19.20.33.54.100.0 ]--
r 57                     finger.rig
--[ 2018.11.19.20.33.54.194.0 ]--
r 57                     finger.righ
--[ 2018.11.19.20.33.54.288.0 ]--
r 57                     finger.right
--[ 2018.11.19.20.33.54.788.0 ]--
r 57                     finger.right 
--[ 2018.11.19.20.33.55.303.0 ]--
r 57                     finger.right =
--[ 2018.11.19.20.33.55.397.0 ]--
r 57                     finger.right = 
--[ 2018.11.19.20.33.55.553.0 ]--
r 57                     finger.right = n
--[ 2018.11.19.20.33.55.709.0 ]--
r 57                     finger.right = ne
--[ 2018.11.19.20.33.56.131.0 ]--
r 57                     finger.right = new
--[ 2018.11.19.20.33.58.052.0 ]--
r 57                     finger.right = newNode
--[ 2018.11.19.20.33.58.912.0 ]--
r 57                     finger.right = newNode;
--[ 2018.11.19.20.34.03.426.0 ]--
r 62                     finger.
--[ 2018.11.19.20.34.03.723.0 ]--
r 62                     finger.l
--[ 2018.11.19.20.34.03.817.0 ]--
r 62                     finger.le
--[ 2018.11.19.20.34.03.942.0 ]--
r 62                     finger.lef
--[ 2018.11.19.20.34.04.098.0 ]--
r 62                     finger.left
--[ 2018.11.19.20.34.04.332.0 ]--
r 62                     finger.left 
--[ 2018.11.19.20.34.04.770.0 ]--
r 62                     finger.left =
--[ 2018.11.19.20.34.04.863.0 ]--
r 62                     finger.left = 
--[ 2018.11.19.20.34.05.004.0 ]--
r 62                     finger.left = n
--[ 2018.11.19.20.34.05.098.0 ]--
r 62                     finger.left = ne
--[ 2018.11.19.20.34.05.191.0 ]--
r 62                     finger.left = new
--[ 2018.11.19.20.34.06.301.0 ]--
r 62                     finger.left = newNode
--[ 2018.11.19.20.34.09.487.0 ]--
r 65                     finger.
--[ 2018.11.19.20.34.10.018.0 ]--
r 65                     finger.r
--[ 2018.11.19.20.34.10.690.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.11.471.0 ]--
r 65                     finger.right=
--[ 2018.11.19.20.34.12.486.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.12.690.0 ]--
r 65                     finger.right 
--[ 2018.11.19.20.34.13.033.0 ]--
r 65                     finger.right =
--[ 2018.11.19.20.34.13.111.0 ]--
r 65                     finger.right = 
--[ 2018.11.19.20.34.13.252.0 ]--
r 65                     finger.right = n
--[ 2018.11.19.20.34.13.408.0 ]--
r 65                     finger.right = ne
--[ 2018.11.19.20.34.13.924.0 ]--
r 65                     finger.right = newNode
--[ 2018.11.19.20.34.14.517.0 ]--
r 65                     finger.right = newNode;
--[ 2018.11.19.20.34.16.798.0 ]--
r 62                     finger.left = newNode;
--[ 2018.11.19.20.34.35.731.0 ]--
r 68     
--[ 2018.11.19.20.34.35.888.0 ]--
r 68         
--[ 2018.11.19.20.34.36.403.0 ]--
r 68         }
--[ 2018.11.19.20.34.36.434.0 ]--
r 30         } else {
--[ 2018.11.19.20.34.36.450.0 ]--
r 33             while (finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.450.1 ]--
r 33             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.465.0 ]--
r 34                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.481.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.497.0 ]--
- 37
r 37                     } else {
--[ 2018.11.19.20.34.36.497.1 ]--
- 40
r 40                 } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.512.0 ]--
r 41                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.528.0 ]--
- 43
r 43                     } else {
--[ 2018.11.19.20.34.36.543.0 ]--
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.559.0 ]--
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.575.0 ]--
- 52
r 52                 } else {
--[ 2018.11.19.20.34.36.575.1 ]--
- 55
r 55             } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.590.0 ]--
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.606.0 ]--
- 58
r 58                 } else {
--[ 2018.11.19.20.36.03.804.0 ]--
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
r 48 
--[ 2018.11.19.20.36.04.898.0 ]--
- 48
--[ 2018.11.19.20.36.07.897.0 ]--
+ 49         
--[ 2018.11.19.20.36.08.147.0 ]--
+ 49                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 50             if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 51                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 52                     finger.left = newNode;
+ 53                 } else {
+ 54                     finger.right = newNode;
+ 55                 }
+ 56             } else {//the finger node is a down up partitioning node
+ 57                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 58                     finger.left = newNode;
+ 59                 } else {
+ 60                     finger.right = newNode;
+ 61                 }
r 62             }
--[ 2018.11.19.20.36.08.194.0 ]--
r 49         //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 50         if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 51             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 52                 finger.left = newNode;
r 53             } else {
r 54                 finger.right = newNode;
r 55             }
r 56         } else {//the finger node is a down up partitioning node
r 57             if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 58                 finger.left = newNode;
r 59             } else {
r 60                 finger.right = newNode;
r 61             }
r 62         }
--[ 2018.11.19.20.36.53.653.0 ]--
- 31
r 31 
--[ 2018.11.19.20.36.55.012.0 ]--
- 31
--[ 2018.11.19.20.36.57.183.0 ]--
+ 28         
--[ 2018.11.19.20.36.57.371.0 ]--
+ 28                     Node finger;
r 29             finger = root;
--[ 2018.11.19.20.36.57.418.0 ]--
r 28         Node finger;
r 29         finger = root;
--[ 2018.11.19.20.37.02.198.0 ]--
r 31             n = newNode;
--[ 2018.11.19.20.37.02.276.0 ]--
r 31             ne = newNode;
--[ 2018.11.19.20.37.02.417.0 ]--
r 31             new = newNode;
--[ 2018.11.19.20.37.03.416.0 ]--
r 31             newNode = newNode;
--[ 2018.11.19.20.37.06.666.0 ]--
r 31             newNode = r;
--[ 2018.11.19.20.37.06.790.0 ]--
r 31             newNode = ro;
--[ 2018.11.19.20.37.06.869.0 ]--
r 31             newNode = roo;
--[ 2018.11.19.20.37.06.962.0 ]--
r 31             newNode = root;
--[ 2018.11.19.20.37.37.190.0 ]--
r 29 
--[ 2018.11.19.20.37.37.456.0 ]--
- 29
--[ 2018.11.19.20.37.41.002.0 ]--
+ 32             
--[ 2018.11.19.20.37.41.580.0 ]--
r 32                     finger = root;
--[ 2018.11.19.20.37.41.611.0 ]--
r 32             finger = root;
--[ 2018.11.19.20.38.13.572.0 ]--
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
r 49 
--[ 2018.11.19.20.38.18.446.0 ]--
+ 48             
--[ 2018.11.19.20.38.18.727.0 ]--
+ 47             }
+ 48                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 49         if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 50             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 51                 finger.left = newNode;
+ 52             } else {
+ 53                 finger.right = newNode;
+ 54             }
+ 55         } else {//the finger node is a down up partitioning node
+ 56             if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 57                 finger.left = newNode;
+ 58             } else {
+ 59                 finger.right = newNode;
r 61         }
--[ 2018.11.19.20.38.18.774.0 ]--
r 48             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 51                     finger.left = newNode;
r 52                 } else {
r 53                     finger.right = newNode;
r 54                 }
r 55             } else {//the finger node is a down up partitioning node
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 57                     finger.left = newNode;
r 58                 } else {
r 59                     finger.right = newNode;
r 60                 }
r 61             }
--[ 2018.11.19.20.38.59.421.0 ]--
r 30             r
--[ 2018.11.19.20.38.59.562.0 ]--
r 30             ro
--[ 2018.11.19.20.38.59.671.0 ]--
r 30             roo
--[ 2018.11.19.20.38.59.749.0 ]--
r 30             root
--[ 2018.11.19.20.39.00.015.0 ]--
r 30             root 
--[ 2018.11.19.20.39.00.390.0 ]--
r 30             root =
--[ 2018.11.19.20.39.00.483.0 ]--
r 30             root = 
--[ 2018.11.19.20.39.00.655.0 ]--
r 30             root = n
--[ 2018.11.19.20.39.00.780.0 ]--
r 30             root = ne
--[ 2018.11.19.20.39.01.608.0 ]--
r 30             root = newNode
--[ 2018.11.19.20.39.01.952.0 ]--
r 30             root = newNode;
--[ 2018.11.19.20.39.26.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.40.13.598.0 ]--
r 67         return p;
--[ 2018.11.19.20.40.14.128.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.15.159.0 ]--
r 67         return p.v;
--[ 2018.11.19.20.40.17.050.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.20.408.0 ]--
r 67         return p.p;
--[ 2018.11.19.20.40.21.408.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.33.483.0 ]--
r 67         return .;
--[ 2018.11.19.20.40.33.874.0 ]--
r 67         return ;
--[ 2018.11.19.20.40.34.046.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.34.171.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.34.296.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.34.389.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.34.561.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.36.124.0 ]--
r 67         return this.p;
--[ 2018.11.19.20.40.38.123.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.38.279.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.38.482.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.38.873.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.39.170.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.48.465.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.48.605.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.48.699.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.48.855.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.49.261.0 ]--
r 67         return this.v;
--[ 2018.11.19.20.40.50.214.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.50.308.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.50.433.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.50.558.0 ]--
r 67         return th;
--[ 2018.11.19.20.42.37.628.0 ]--
r 20     
--[ 2018.11.19.20.42.37.987.0 ]--
r 20         
--[ 2018.11.19.20.42.51.516.0 ]--
r 17     
--[ 2018.11.19.20.42.52.312.0 ]--
r 17     p
--[ 2018.11.19.20.42.52.390.0 ]--
r 17     pr
--[ 2018.11.19.20.42.52.578.0 ]--
r 17     pri
--[ 2018.11.19.20.42.52.718.0 ]--
r 17     priv
--[ 2018.11.19.20.42.52.812.0 ]--
r 17     priva
--[ 2018.11.19.20.42.53.031.0 ]--
r 17     privat
--[ 2018.11.19.20.42.53.203.0 ]--
r 17     private
--[ 2018.11.19.20.42.53.312.0 ]--
r 17     private 
--[ 2018.11.19.20.42.54.312.0 ]--
r 17     private t
--[ 2018.11.19.20.42.54.499.0 ]--
r 17     private tr
--[ 2018.11.19.20.42.54.749.0 ]--
r 17     private tre
--[ 2018.11.19.20.42.54.890.0 ]--
r 17     private tree
--[ 2018.11.19.20.42.55.452.0 ]--
r 17     private tree;
--[ 2018.11.19.20.43.00.607.0 ]--
r 17     private Ptree;
--[ 2018.11.19.20.43.00.779.0 ]--
r 17     private PStree;
--[ 2018.11.19.20.43.01.420.0 ]--
r 17     private PSKtree;
--[ 2018.11.19.20.43.01.982.0 ]--
r 17     private PSKDTreetree;
--[ 2018.11.19.20.43.01.997.0 ]--
r 17     private PSKDTree;
--[ 2018.11.19.20.43.02.669.0 ]--
r 17     private PSKDTree ;
--[ 2018.11.19.20.43.03.356.0 ]--
r 17     private PSKDTree t;
--[ 2018.11.19.20.43.03.544.0 ]--
r 17     private PSKDTree tr;
--[ 2018.11.19.20.43.03.622.0 ]--
r 17     private PSKDTree tre;
--[ 2018.11.19.20.43.03.778.0 ]--
r 17     private PSKDTree tree;
--[ 2018.11.19.20.43.07.918.0 ]--
r 17     private PSKDTree pskdTree;
--[ 2018.11.19.20.43.22.758.0 ]--
r 20         n
--[ 2018.11.19.20.43.22.899.0 ]--
r 20         ne
--[ 2018.11.19.20.43.22.961.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.102.0 ]--
r 20         new 
--[ 2018.11.19.20.43.23.774.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.914.0 ]--
r 20         ne
--[ 2018.11.19.20.43.24.039.0 ]--
r 20         n
--[ 2018.11.19.20.43.24.164.0 ]--
r 20         
--[ 2018.11.19.20.43.24.555.0 ]--
r 20         p
--[ 2018.11.19.20.43.25.117.0 ]--
r 20         ps
--[ 2018.11.19.20.43.25.476.0 ]--
r 20         pskdTree
--[ 2018.11.19.20.43.25.945.0 ]--
r 20         pskdTree 
--[ 2018.11.19.20.43.26.461.0 ]--
r 20         pskdTree =
--[ 2018.11.19.20.43.26.617.0 ]--
r 20         pskdTree = 
--[ 2018.11.19.20.43.27.257.0 ]--
r 20         pskdTree = n
--[ 2018.11.19.20.43.27.366.0 ]--
r 20         pskdTree = ne
--[ 2018.11.19.20.43.27.429.0 ]--
r 20         pskdTree = new
--[ 2018.11.19.20.43.27.570.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.28.101.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.28.382.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.28.679.0 ]--
r 20         pskdTree = new psk
--[ 2018.11.19.20.43.29.257.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.29.288.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.29.538.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.29.788.0 ]--
r 20         pskdTree = new P
--[ 2018.11.19.20.43.29.960.0 ]--
r 20         pskdTree = new PS
--[ 2018.11.19.20.43.30.491.0 ]--
r 20         pskdTree = new PSKDTree
--[ 2018.11.19.20.43.30.506.0 ]--
r 20         pskdTree = new PSKDTree()
--[ 2018.11.19.20.43.31.397.0 ]--
r 20         pskdTree = new PSKDTree();
--[ 2018.11.19.20.43.35.177.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.35.177.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@694598b6
--[ 2018.11.19.20.43.38.586.0 ]--
r 67         return n;
--[ 2018.11.19.20.43.38.586.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.602.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.805.0 ]--
r 67         return nu;
--[ 2018.11.19.20.43.38.805.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.820.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.992.0 ]--
r 67         return nul;
--[ 2018.11.19.20.43.39.008.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.008.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.102.0 ]--
r 67         return null;
--[ 2018.11.19.20.43.39.117.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.117.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.23.407.0 ]--
- 20
--[ 2018.11.19.20.44.24.594.0 ]--
- 17
--[ 2018.11.19.20.44.27.984.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.33.697.0 ]--
r 65         return ;
--[ 2018.11.19.20.44.34.931.0 ]--
r 65         return r;
--[ 2018.11.19.20.44.35.103.0 ]--
r 65         return ro;
--[ 2018.11.19.20.44.35.212.0 ]--
r 65         return roo;
--[ 2018.11.19.20.44.35.321.0 ]--
r 65         return root;
--[ 2018.11.19.20.44.35.415.0 ]--
r 65         return root.;
--[ 2018.11.19.20.44.35.681.0 ]--
r 65         return root.v;
--[ 2018.11.19.20.44.43.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.46.23.260.0 ]--
r 65         i
--[ 2018.11.19.20.46.23.369.0 ]--
r 65         if
--[ 2018.11.19.20.46.23.463.0 ]--
r 65         if 
--[ 2018.11.19.20.46.24.494.0 ]--
r 65         if ()
--[ 2018.11.19.20.46.29.945.0 ]--
r 65         if (t)
--[ 2018.11.19.20.46.30.008.0 ]--
r 65         if (th)
--[ 2018.11.19.20.46.30.164.0 ]--
r 65         if (thi)
--[ 2018.11.19.20.46.30.242.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.30.398.0 ]--
r 65         if (this,)
--[ 2018.11.19.20.46.30.961.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.31.429.0 ]--
r 65         if (this.)
--[ 2018.11.19.20.46.32.086.0 ]--
r 65         if (this.i)
--[ 2018.11.19.20.46.32.164.0 ]--
r 65         if (this.is)
--[ 2018.11.19.20.46.32.633.0 ]--
r 65         if (this.isEmpty)
--[ 2018.11.19.20.46.32.648.0 ]--
r 65         if (this.isEmpty())
--[ 2018.11.19.20.46.33.773.0 ]--
r 65         if (this.isEmpty()) 
--[ 2018.11.19.20.46.34.007.0 ]--
r 65         if (this.isEmpty()) {
--[ 2018.11.19.20.46.34.241.0 ]--
+ 66 
+ 67 }
--[ 2018.11.19.20.46.34.257.0 ]--
r 67         }
--[ 2018.11.19.20.46.34.273.0 ]--
r 66             
--[ 2018.11.19.20.46.35.663.0 ]--
r 66             r
--[ 2018.11.19.20.46.35.788.0 ]--
r 66             re
--[ 2018.11.19.20.46.35.928.0 ]--
r 66             ret
--[ 2018.11.19.20.46.36.038.0 ]--
r 66             retu
--[ 2018.11.19.20.46.36.147.0 ]--
r 66             retur
--[ 2018.11.19.20.46.36.272.0 ]--
r 66             return
--[ 2018.11.19.20.46.36.366.0 ]--
r 66             return 
--[ 2018.11.19.20.46.50.050.0 ]--
r 106     public boolean isEmpty() { return f; }
--[ 2018.11.19.20.46.50.191.0 ]--
r 106     public boolean isEmpty() { return fa; }
--[ 2018.11.19.20.46.50.347.0 ]--
r 106     public boolean isEmpty() { return fal; }
--[ 2018.11.19.20.46.50.456.0 ]--
r 106     public boolean isEmpty() { return fals; }
--[ 2018.11.19.20.46.50.550.0 ]--
r 106     public boolean isEmpty() { return false; }
--[ 2018.11.19.20.46.51.237.0 ]--
r 66             return
--[ 2018.11.19.20.46.52.893.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.46.52.893.1 ]--
CompilationStatus (AEW): 0 33 0
[Ljava.lang.String;@588d3b4b
--[ 2018.11.19.20.47.00.441.0 ]--
r 66             return 
--[ 2018.11.19.20.47.00.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.457.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.0 ]--
r 66             return t
--[ 2018.11.19.20.47.00.722.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.738.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.910.0 ]--
r 66             return tr
--[ 2018.11.19.20.47.00.926.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.926.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.004.0 ]--
r 66             return tru
--[ 2018.11.19.20.47.01.004.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.019.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.129.0 ]--
r 66             return true
--[ 2018.11.19.20.47.01.129.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.144.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.269.0 ]--
r 66             return true;
--[ 2018.11.19.20.47.01.269.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.285.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.222.0 ]--
+ 68         
--[ 2018.11.19.20.47.02.222.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.238.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.425.0 ]--
r 68         r
--[ 2018.11.19.20.47.02.425.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.519.0 ]--
r 68         re
--[ 2018.11.19.20.47.02.519.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.535.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.691.0 ]--
r 68         ret
--[ 2018.11.19.20.47.02.706.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.706.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.0 ]--
r 68         retu
--[ 2018.11.19.20.47.03.066.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.0 ]--
r 68         retur
--[ 2018.11.19.20.47.03.159.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.237.0 ]--
r 68         return
--[ 2018.11.19.20.47.03.253.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.253.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.331.0 ]--
r 68         return 
--[ 2018.11.19.20.47.03.331.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.347.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.456.0 ]--
r 68         return f
--[ 2018.11.19.20.47.03.472.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.472.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.487.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.659.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.03.675.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.675.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.03.769.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.847.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.03.862.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.862.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.940.0 ]--
r 68         return false
--[ 2018.11.19.20.47.03.956.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.956.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.0 ]--
r 68         return false;
--[ 2018.11.19.20.47.04.237.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.987.0 ]--
r 68         return false
--[ 2018.11.19.20.47.04.987.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.003.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.128.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.05.128.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.143.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.268.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.05.268.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.284.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.362.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.05.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.393.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.503.0 ]--
r 68         return f
--[ 2018.11.19.20.47.05.503.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.518.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.768.0 ]--
r 68         return 
--[ 2018.11.19.20.47.05.768.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.096.0 ]--
r 68         return n
--[ 2018.11.19.20.47.06.112.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.299.0 ]--
r 68         return nu
--[ 2018.11.19.20.47.06.315.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.315.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.549.0 ]--
r 68         return nul
--[ 2018.11.19.20.47.06.565.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.565.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.659.0 ]--
r 68         return null
--[ 2018.11.19.20.47.06.674.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.674.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.815.0 ]--
r 68         return null;
--[ 2018.11.19.20.47.06.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.830.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.08.752.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.0 ]--
r 66             return n;
--[ 2018.11.19.20.47.12.321.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.0 ]--
r 66             return nu;
--[ 2018.11.19.20.47.12.540.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.728.0 ]--
r 66             return nul;
--[ 2018.11.19.20.47.12.728.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.743.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.837.0 ]--
r 66             return null;
--[ 2018.11.19.20.47.12.853.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.853.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.16.279.0 ]--
r 107     public boolean isEmpty() { return r; }
--[ 2018.11.19.20.49.16.497.0 ]--
r 107     public boolean isEmpty() { return ro; }
--[ 2018.11.19.20.49.17.294.0 ]--
r 107     public boolean isEmpty() { return roo; }
--[ 2018.11.19.20.49.17.513.0 ]--
r 107     public boolean isEmpty() { return root; }
--[ 2018.11.19.20.49.18.216.0 ]--
r 107     public boolean isEmpty() { return root=; }
--[ 2018.11.19.20.49.18.341.0 ]--
r 107     public boolean isEmpty() { return root==; }
--[ 2018.11.19.20.49.18.872.0 ]--
r 107     public boolean isEmpty() { return root==n; }
--[ 2018.11.19.20.49.19.012.0 ]--
r 107     public boolean isEmpty() { return root==nu; }
--[ 2018.11.19.20.49.19.231.0 ]--
r 107     public boolean isEmpty() { return root==nul; }
--[ 2018.11.19.20.49.19.340.0 ]--
r 107     public boolean isEmpty() { return root==null; }
--[ 2018.11.19.20.49.25.542.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.38.155.0 ]--
+ 107     public boolean isEmpty() { 
r 108         return root==null; }
--[ 2018.11.19.20.49.38.655.0 ]--
+ 108         
--[ 2018.11.19.20.49.40.623.0 ]--
r 108         S
--[ 2018.11.19.20.49.40.904.0 ]--
r 108         St
--[ 2018.11.19.20.49.41.061.0 ]--
r 108         Std
--[ 2018.11.19.20.49.41.545.0 ]--
r 108         StdOut
--[ 2018.11.19.20.49.42.170.0 ]--
r 108         StdOut.
--[ 2018.11.19.20.49.42.467.0 ]--
r 108         StdOut.p
--[ 2018.11.19.20.49.42.576.0 ]--
r 108         StdOut.pr
--[ 2018.11.19.20.49.42.623.0 ]--
r 108         StdOut.pri
--[ 2018.11.19.20.49.42.748.0 ]--
r 108         StdOut.prin
--[ 2018.11.19.20.49.42.873.0 ]--
r 108         StdOut.println
--[ 2018.11.19.20.49.42.888.0 ]--
r 108         StdOut.println()
--[ 2018.11.19.20.49.42.888.1 ]--
r 108         StdOut.println();
--[ 2018.11.19.20.49.44.310.0 ]--
r 108         StdOut.println(r);
--[ 2018.11.19.20.49.44.419.0 ]--
r 108         StdOut.println(ro);
--[ 2018.11.19.20.49.44.544.0 ]--
r 108         StdOut.println(roo);
--[ 2018.11.19.20.49.44.653.0 ]--
r 108         StdOut.println(root);
--[ 2018.11.19.20.49.45.747.0 ]--
r 107     public boolean isEmpty() {
--[ 2018.11.19.20.49.47.668.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.54.131.0 ]--
r 108         StdOut.println("root);
--[ 2018.11.19.20.49.54.506.0 ]--
r 108         StdOut.println("Hroot);
--[ 2018.11.19.20.49.54.600.0 ]--
r 108         StdOut.println("Heroot);
--[ 2018.11.19.20.49.54.803.0 ]--
r 108         StdOut.println("Heyroot);
--[ 2018.11.19.20.49.55.256.0 ]--
r 108         StdOut.println("Hey"root);
--[ 2018.11.19.20.49.55.897.0 ]--
r 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.49.58.255.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.06.978.0 ]--
- 108
--[ 2018.11.19.20.50.11.852.0 ]--
+ 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.50.21.428.0 ]--
r 108         StdOut.println(root==null);
--[ 2018.11.19.20.50.23.724.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.32.667.0 ]--
- 108
--[ 2018.11.19.20.50.57.037.0 ]--
+ 31             
--[ 2018.11.19.20.50.57.677.0 ]--
r 31             S
--[ 2018.11.19.20.50.57.974.0 ]--
r 31             St
--[ 2018.11.19.20.50.58.240.0 ]--
r 31             Std
--[ 2018.11.19.20.50.58.771.0 ]--
r 31             StdOut
--[ 2018.11.19.20.50.59.380.0 ]--
r 31             StdOut.
--[ 2018.11.19.20.50.59.630.0 ]--
r 31             StdOut.p
--[ 2018.11.19.20.50.59.770.0 ]--
r 31             StdOut.pr
--[ 2018.11.19.20.50.59.802.0 ]--
r 31             StdOut.pri
--[ 2018.11.19.20.50.59.989.0 ]--
r 31             StdOut.prin
--[ 2018.11.19.20.51.00.083.0 ]--
r 31             StdOut.println
--[ 2018.11.19.20.51.00.098.0 ]--
r 31             StdOut.println()
--[ 2018.11.19.20.51.00.114.0 ]--
r 31             StdOut.println();
--[ 2018.11.19.20.51.00.801.0 ]--
r 31             StdOut.println(f);
--[ 2018.11.19.20.51.00.895.0 ]--
r 31             StdOut.println(fi);
--[ 2018.11.19.20.51.01.020.0 ]--
r 31             StdOut.println(fin);
--[ 2018.11.19.20.51.01.129.0 ]--
r 31             StdOut.println(fing);
--[ 2018.11.19.20.51.01.301.0 ]--
r 31             StdOut.println(finge);
--[ 2018.11.19.20.51.01.333.0 ]--
r 31             StdOut.println(finger);
--[ 2018.11.19.20.51.03.910.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.11.945.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.12.226.0 ]--
r 31             StdOut.println(finger.v);
--[ 2018.11.19.20.51.14.241.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.16.622.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.16.888.0 ]--
r 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.18.856.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.22.749.0 ]--
- 31
--[ 2018.11.19.20.51.28.857.0 ]--
+ 31             
--[ 2018.11.19.20.51.29.654.0 ]--
- 31
--[ 2018.11.19.20.51.30.341.0 ]--
+ 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.33.590.0 ]--
r 31             StdOut.println(finger.left);
--[ 2018.11.19.20.51.36.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.43.795.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.47.079.0 ]--
r 31             StdOut.println(finger.left != null);
--[ 2018.11.19.20.51.49.906.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.13.528.0 ]--
r 32             while (finger.left = null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.16.512.0 ]--
r 32             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.28.900.0 ]--
- 31
--[ 2018.11.19.20.52.42.600.0 ]--
+ 46             
--[ 2018.11.19.20.52.43.209.0 ]--
r 46             S
--[ 2018.11.19.20.52.43.490.0 ]--
r 46             St
--[ 2018.11.19.20.52.43.724.0 ]--
r 46             Std
--[ 2018.11.19.20.52.44.240.0 ]--
r 46             StdOut
--[ 2018.11.19.20.52.44.896.0 ]--
r 46             StdOut.
--[ 2018.11.19.20.52.45.193.0 ]--
r 46             StdOut.p
--[ 2018.11.19.20.52.45.318.0 ]--
r 46             StdOut.pr
--[ 2018.11.19.20.52.45.396.0 ]--
r 46             StdOut.pri
--[ 2018.11.19.20.52.45.443.0 ]--
r 46             StdOut.prin
--[ 2018.11.19.20.52.45.552.0 ]--
r 46             StdOut.println
--[ 2018.11.19.20.52.45.568.0 ]--
r 46             StdOut.println()
--[ 2018.11.19.20.52.45.583.0 ]--
r 46             StdOut.println();
--[ 2018.11.19.20.52.46.458.0 ]--
r 46             StdOut.println(f);
--[ 2018.11.19.20.52.46.536.0 ]--
r 46             StdOut.println(fi);
--[ 2018.11.19.20.52.46.645.0 ]--
r 46             StdOut.println(fin);
--[ 2018.11.19.20.52.46.755.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.47.098.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.47.426.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.520.0 ]--
r 46             StdOut.println(fing.di);
--[ 2018.11.19.20.52.47.786.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.926.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.48.020.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.48.254.0 ]--
r 46             StdOut.println(finge);
--[ 2018.11.19.20.52.48.270.0 ]--
r 46             StdOut.println(finger);
--[ 2018.11.19.20.52.48.598.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.52.48.879.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.52.48.989.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.52.49.082.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.52.52.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.58.713.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.52.59.541.0 ]--
r 46             StdOut.println(finger.v;
--[ 2018.11.19.20.53.00.104.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.53.00.354.0 ]--
r 46             StdOut.println(finger.p;
--[ 2018.11.19.20.53.02.103.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.02.103.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@e960696
--[ 2018.11.19.20.53.03.734.0 ]--
r 46             StdOut.println(finger.p);
--[ 2018.11.19.20.53.03.750.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.03.750.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.10.785.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.11.597.0 ]--
r 46             StdOut.println(finger.v);
--[ 2018.11.19.20.53.13.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.19.150.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.19.306.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.53.19.494.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.53.19.681.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.53.21.743.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.23.902.0 ]--
- 46
--[ 2018.11.19.20.53.27.354.0 ]--
+ 26         
--[ 2018.11.19.20.53.27.604.0 ]--
r 26         n
--[ 2018.11.19.20.53.27.713.0 ]--
r 26         ne
--[ 2018.11.19.20.53.27.791.0 ]--
r 26         new
--[ 2018.11.19.20.53.28.588.0 ]--
r 26         newN
--[ 2018.11.19.20.53.28.682.0 ]--
r 26         newNo
--[ 2018.11.19.20.53.28.791.0 ]--
r 26         newNod
--[ 2018.11.19.20.53.28.994.0 ]--
r 26         newNode
--[ 2018.11.19.20.53.29.088.0 ]--
r 26         newNode.
--[ 2018.11.19.20.53.33.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.35.555.0 ]--
r 26         newNode.dir=
--[ 2018.11.19.20.53.36.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.37.508.0 ]--
r 26         newNode.dir 
--[ 2018.11.19.20.53.37.789.0 ]--
r 26         newNode.dir =
--[ 2018.11.19.20.53.37.883.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.38.914.0 ]--
r 26         newNode.dir = l
--[ 2018.11.19.20.53.39.336.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.40.554.0 ]--
r 26         newNode.dir = P
--[ 2018.11.19.20.53.40.788.0 ]--
r 26         newNode.dir = Pa
--[ 2018.11.19.20.53.41.054.0 ]--
r 26         newNode.dir = Par
--[ 2018.11.19.20.53.42.772.0 ]--
r 26         newNode.dir = Partition
--[ 2018.11.19.20.53.43.663.0 ]--
r 26         newNode.dir = Partition.
--[ 2018.11.19.20.53.43.866.0 ]--
r 26         newNode.dir = Partition.D
--[ 2018.11.19.20.53.44.006.0 ]--
r 26         newNode.dir = Partition.Di
--[ 2018.11.19.20.53.44.116.0 ]--
r 26         newNode.dir = Partition.Dir
--[ 2018.11.19.20.53.44.319.0 ]--
r 26         newNode.dir = Partition.Direction
--[ 2018.11.19.20.53.44.834.0 ]--
r 26         newNode.dir = Partition.Direction.
--[ 2018.11.19.20.53.45.709.0 ]--
r 26         newNode.dir = Partition.Direction.L
--[ 2018.11.19.20.53.46.365.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.53.47.443.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.53.58.316.0 ]--
r 26 
--[ 2018.11.19.20.53.59.034.0 ]--
- 26
--[ 2018.11.19.20.54.01.409.0 ]--
+ 29             
--[ 2018.11.19.20.54.02.065.0 ]--
r 29             n
--[ 2018.11.19.20.54.02.315.0 ]--
r 29             ne
--[ 2018.11.19.20.54.02.424.0 ]--
r 29             new
--[ 2018.11.19.20.54.04.064.0 ]--
r 29             ne
--[ 2018.11.19.20.54.04.252.0 ]--
r 29             n
--[ 2018.11.19.20.54.04.892.0 ]--
r 29             
--[ 2018.11.19.20.54.05.173.0 ]--
- 29
--[ 2018.11.19.20.54.06.642.0 ]--
+ 28             
--[ 2018.11.19.20.54.07.267.0 ]--
r 28             n
--[ 2018.11.19.20.54.08.142.0 ]--
r 28             newNode
--[ 2018.11.19.20.54.08.766.0 ]--
r 28             newNode.
--[ 2018.11.19.20.54.09.407.0 ]--
r 28             newNode.d
--[ 2018.11.19.20.54.09.500.0 ]--
r 28             newNode.di
--[ 2018.11.19.20.54.09.672.0 ]--
r 28             newNode.dir
--[ 2018.11.19.20.54.10.360.0 ]--
r 28             newNode.dir 
--[ 2018.11.19.20.54.10.531.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.10.672.0 ]--
r 28             newNode.dir ==
--[ 2018.11.19.20.54.11.031.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.11.344.0 ]--
r 28             newNode.dir = 
--[ 2018.11.19.20.54.12.000.0 ]--
r 28             newNode.dir = P
--[ 2018.11.19.20.54.12.156.0 ]--
r 28             newNode.dir = Pa
--[ 2018.11.19.20.54.12.609.0 ]--
r 28             newNode.dir = Par
--[ 2018.11.19.20.54.12.875.0 ]--
r 28             newNode.dir = Part
--[ 2018.11.19.20.54.13.781.0 ]--
r 28             newNode.dir = Parti
--[ 2018.11.19.20.54.14.578.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.609.0 ]--
r 28             newNode.dir = LEFTRIGHT
--[ 2018.11.19.20.54.14.624.0 ]--
r 28             newNode.dir = .LEFTRIGHT
--[ 2018.11.19.20.54.14.656.0 ]--
r 28             newNode.dir = Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.687.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.15.843.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.32.917.0 ]--
+ 50                     
--[ 2018.11.19.20.54.33.073.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.34.854.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.010.0 ]--
r 50                     fi.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.198.0 ]--
r 50                     fin.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.291.0 ]--
r 50                     fing.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.479.0 ]--
r 50                     finge.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.541.0 ]--
r 50                     finger.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.44.649.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.45.383.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.50.616.0 ]--
+ 53                     
--[ 2018.11.19.20.54.50.788.0 ]--
+ 53                                         newNode.dir = Partition.Direction.LEFTRIGHT;
r 54 
--[ 2018.11.19.20.54.50.819.0 ]--
r 53                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.52.037.0 ]--
- 54
--[ 2018.11.19.20.54.56.302.0 ]--
+ 54 
--[ 2018.11.19.20.54.56.708.0 ]--
- 53
r 53                     
--[ 2018.11.19.20.54.57.333.0 ]--
- 53
--[ 2018.11.19.20.54.58.083.0 ]--
r 50                     
--[ 2018.11.19.20.54.58.473.0 ]--
- 50
--[ 2018.11.19.20.55.00.910.0 ]--
+ 49                 
--[ 2018.11.19.20.55.01.145.0 ]--
+ 49                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 50 
--[ 2018.11.19.20.55.01.176.0 ]--
r 49                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.02.035.0 ]--
- 50
--[ 2018.11.19.20.55.04.566.0 ]--
+ 56                 
--[ 2018.11.19.20.55.04.832.0 ]--
+ 56                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 57 
--[ 2018.11.19.20.55.04.863.0 ]--
r 56                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.05.690.0 ]--
- 57
--[ 2018.11.19.20.55.07.409.0 ]--
r 56                 newNode.dir = Partition.Direction.D;
--[ 2018.11.19.20.55.07.596.0 ]--
r 56                 newNode.dir = Partition.Direction.Do;
--[ 2018.11.19.20.55.07.721.0 ]--
r 56                 newNode.dir = Partition.Direction.Dow;
--[ 2018.11.19.20.55.07.877.0 ]--
r 56                 newNode.dir = Partition.Direction.Down;
--[ 2018.11.19.20.55.08.175.0 ]--
r 56                 newNode.dir = Partition.Direction.DOWNUP;
--[ 2018.11.19.20.55.13.689.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.55.41.749.0 ]--
DisposeComponent
