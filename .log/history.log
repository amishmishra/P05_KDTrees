--[ 2018.11.19.16.37.23.757.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.37.23.789.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.37.23.804.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.37.23.804.1 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.37.23.804.2 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.37.23.804.3 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.37.23.804.4 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.37.23.804.5 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.37.23.804.6 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.37.23.804.7 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.37.23.820.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.37.23.820.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.37.23.820.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.37.23.820.3 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.37.23.820.4 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.37.23.820.5 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.37.24.429.0 ]--
UpdateTree (AD): 3 0
+ /.log/history.log
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.16.38.16.183.0 ]--
UpdateTree (AD): 1 0
+ /.idea/misc.xml

--[ 2018.11.19.16.38.16.276.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.16.38.16.323.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.16.44.54.794.0 ]--
UpdateTree (AD): 6 0
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/.name
+ /.idea/compiler.xml
+ /.idea/uiDesigner.xml

--[ 2018.11.19.16.44.59.574.0 ]--
DisposeComponent
--[ 2018.11.19.16.44.59.713.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.44.59.733.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.44.59.739.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.44.59.744.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.44.59.747.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.44.59.751.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.44.59.754.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.44.59.757.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.44.59.772.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.44.59.775.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.44.59.777.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.44.59.779.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.44.59.782.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.44.59.785.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.44.59.788.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.44.59.796.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.45.17.628.0 ]--
UpdateTree (AD): 19 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.16.45.17.741.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.45.40.338.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.16.45.40.539.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.16.45.41.119.0 ]--
r 18         return new PSB<>();
--[ 2018.11.19.16.45.41.534.0 ]--
r 18         return new PSBr<>();
--[ 2018.11.19.16.45.41.688.0 ]--
r 18         return new PSBru<>();
--[ 2018.11.19.16.45.42.754.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.42.831.0 ]--
r 18         return new PSBruteForce();
--[ 2018.11.19.16.45.42.924.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.49.842.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.46.02.530.0 ]--
DisposeComponent
--[ 2018.11.19.18.05.58.646.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.18.05.58.708.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/PSKDTree$1.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.18.05.58.708.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.18.05.58.708.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.18.05.58.708.3 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.18.05.58.708.4 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.18.05.58.708.5 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.18.05.58.708.6 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.18.05.58.708.7 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.18.05.58.724.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.18.05.58.724.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.18.05.58.724.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.18.05.58.724.3 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.18.05.58.724.4 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.18.05.58.724.5 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.18.05.58.724.6 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.18.06.02.504.0 ]--
UpdateTree (AD): 9 23
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Point$4.class
- /.git/logs/refs/remotes/origin/master
- /out/production/P05_KDTrees/stdlib.jar
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/algs4.jar
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /.git/refs/remotes/origin/master
- /.git/COMMIT_EDITMSG
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Point.class
+ /.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
+ /.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
+ /.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
+ /.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
+ /.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
+ /.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
+ /.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.18.06.30.170.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.18.06.30.201.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.18.06.30.373.0 ]--
DisposeComponent
--[ 2018.11.19.20.12.43.508.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.20.12.43.977.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.20.12.43.977.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.20.12.43.992.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.20.12.44.008.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.20.12.44.008.1 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.20.12.44.024.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.20.12.44.024.1 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.20.12.44.055.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.20.12.44.071.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.20.12.44.071.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.20.12.44.086.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.20.12.44.102.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.20.12.44.117.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.20.12.44.117.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.20.12.44.164.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.20.12.55.024.0 ]--
UpdateTree (AD): 26 0
+ /.git/logs/refs/remotes/origin/master
+ /.git/refs/remotes/origin/master
+ /.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
+ /.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
+ /.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
+ /.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
+ /.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
+ /.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
+ /.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
+ /.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
+ /.git/objects/68/2820a134168b0d23787b376165bef89b511f00
+ /.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
+ /.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
+ /.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
+ /.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
+ /.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
+ /.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
+ /.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
+ /.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
+ /.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
+ /.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
+ /.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
+ /.git/objects/fe/86b7d30276d409463a9786906238815afa4617
+ /.git/ORIG_HEAD
+ /.git/FETCH_HEAD
+ /.git/COMMIT_EDITMSG

--[ 2018.11.19.20.20.31.073.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar

--[ 2018.11.19.20.20.31.198.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@75f21756
--[ 2018.11.19.20.20.38.355.0 ]--
:/src/PSKDTree.java
r 25         Node newNode = new Node();
--[ 2018.11.19.20.20.43.482.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.20.48.550.0 ]--
UpdateTree (AD): 18 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.20.20.55.705.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.20.20.56.283.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.20.20.58.564.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.58.580.0 ]--
r 18         return new PSKDTree();
--[ 2018.11.19.20.20.58.626.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.59.033.0 ]--
r 18         return new PSKDTree<>() ;
--[ 2018.11.19.20.20.59.970.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.21.03.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.21.34.234.0 ]--
:/src/PSKDTree.java
- 34
--[ 2018.11.19.20.21.34.250.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.34.250.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.262.0 ]--
+ 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT 
r 35                 && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.278.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.293.0 ]--
r 35                         && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.512.0 ]--
r 35                         )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.559.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.621.0 ]--
r 35                 )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.621.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.0 ]--
r 35                 ) && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.184.0 ]--
r 35                 ) {&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.449.0 ]--
+ 35                 ) {
+ 36 &&
r 37 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.449.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.465.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.480.0 ]--
r 37                 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.480.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.496.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.512.0 ]--
r 36                     &&
--[ 2018.11.19.20.21.51.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.527.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.54.995.0 ]--
- 34
r 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.21.55.011.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.55.011.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.572.0 ]--
+ 38                 } 
r 39                 else {
--[ 2018.11.19.20.22.02.587.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.587.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.884.0 ]--
+ 39                 
--[ 2018.11.19.20.22.02.900.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.900.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.634.0 ]--
r 39                 }
--[ 2018.11.19.20.22.03.649.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.649.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.1 ]--
r 39             }
--[ 2018.11.19.20.22.03.696.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.696.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.602.0 ]--
r 39                 }
--[ 2018.11.19.20.22.06.602.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.618.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.226.0 ]--
r 35 
--[ 2018.11.19.20.22.10.242.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.242.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.710.0 ]--
- 35
--[ 2018.11.19.20.22.10.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.724.0 ]--
r 35                  finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.18.740.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.771.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.677.0 ]--
r 35                 finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.19.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.693.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.505.0 ]--
r 35                     finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.20.505.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.521.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.347.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){
--[ 2018.11.19.20.22.29.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.159.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ 
--[ 2018.11.19.20.22.30.175.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.175.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.346.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ /
--[ 2018.11.19.20.22.30.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.378.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.456.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.30.456.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.409.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.31.409.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.424.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.612.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //ou
--[ 2018.11.19.20.22.31.612.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.627.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.32.861.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.877.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.002.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.33.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.018.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //t
--[ 2018.11.19.20.22.33.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.330.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //th
--[ 2018.11.19.20.22.33.346.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.439.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the
--[ 2018.11.19.20.22.33.439.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the 
--[ 2018.11.19.20.22.33.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.596.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the n
--[ 2018.11.19.20.22.33.611.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.611.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.689.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the ne
--[ 2018.11.19.20.22.33.705.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.767.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new
--[ 2018.11.19.20.22.33.767.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.783.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new 
--[ 2018.11.19.20.22.33.908.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new n
--[ 2018.11.19.20.22.34.205.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new no
--[ 2018.11.19.20.22.34.299.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.392.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new nod
--[ 2018.11.19.20.22.34.408.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.408.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.580.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node
--[ 2018.11.19.20.22.34.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.595.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.705.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node 
--[ 2018.11.19.20.22.34.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.720.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.830.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node i
--[ 2018.11.19.20.22.34.830.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.845.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.939.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is
--[ 2018.11.19.20.22.34.955.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.955.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.033.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is 
--[ 2018.11.19.20.22.35.033.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.048.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is t
--[ 2018.11.19.20.22.35.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.548.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to
--[ 2018.11.19.20.22.35.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to 
--[ 2018.11.19.20.22.35.876.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.876.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.954.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to t
--[ 2018.11.19.20.22.35.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.064.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to th
--[ 2018.11.19.20.22.36.064.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.079.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.173.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the
--[ 2018.11.19.20.22.36.173.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.189.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.298.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the 
--[ 2018.11.19.20.22.36.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the l
--[ 2018.11.19.20.22.36.454.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.548.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the le
--[ 2018.11.19.20.22.36.548.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.564.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the lef
--[ 2018.11.19.20.22.36.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.985.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.36.985.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.37.001.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.546.0 ]--
r 35                     ifinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.562.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.562.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.640.0 ]--
r 35                     iffinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.640.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.656.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.749.0 ]--
r 35                     if finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.749.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.577.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.46.593.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.593.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.967.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.22.48.983.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.983.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.999.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.795.0 ]--
r 36                         finger = finger.left;
--[ 2018.11.19.20.22.50.795.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.811.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.778.0 ]--
r 37                     } 
--[ 2018.11.19.20.22.57.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.793.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.730.0 ]--
+ 38                     
--[ 2018.11.19.20.22.59.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.0 ]--
r 38                     e
--[ 2018.11.19.20.22.59.980.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.105.0 ]--
r 38                     el
--[ 2018.11.19.20.23.00.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.183.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.324.0 ]--
r 38                     else
--[ 2018.11.19.20.23.00.340.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.340.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.980.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.121.0 ]--
r 38                     el
--[ 2018.11.19.20.23.01.121.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.136.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.261.0 ]--
r 38                     e
--[ 2018.11.19.20.23.01.261.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.574.0 ]--
r 38                     
--[ 2018.11.19.20.23.01.589.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.0 ]--
r 38                 
--[ 2018.11.19.20.23.01.839.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.261.0 ]--
- 38
--[ 2018.11.19.20.23.03.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.277.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.433.0 ]--
- 38
--[ 2018.11.19.20.23.03.448.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.464.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.478.0 ]--
r 38                     else {
r 39                         finger = finger.right;
r 40                     }
--[ 2018.11.19.20.23.10.478.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.305.0 ]--
r 41                 }
--[ 2018.11.19.20.23.17.305.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.210.0 ]--
+ 42                 
--[ 2018.11.19.20.23.21.210.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.225.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.382.0 ]--
r 42                 e
--[ 2018.11.19.20.23.21.397.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.397.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.600.0 ]--
r 42                 el
--[ 2018.11.19.20.23.21.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.647.0 ]--
r 42                 els
--[ 2018.11.19.20.23.21.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.663.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.725.0 ]--
r 42                 else
--[ 2018.11.19.20.23.21.725.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.319.0 ]--
r 42                 else 
--[ 2018.11.19.20.23.23.334.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.350.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.491.0 ]--
r 42                 else {
--[ 2018.11.19.20.23.23.491.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.959.0 ]--
r 42                 else {/
--[ 2018.11.19.20.23.23.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.975.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.084.0 ]--
r 42                 else {//
--[ 2018.11.19.20.23.24.084.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.100.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.0 ]--
r 42                 else {//t
--[ 2018.11.19.20.23.24.475.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.537.0 ]--
r 42                 else {//th
--[ 2018.11.19.20.23.24.553.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.553.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.647.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.24.662.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.662.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.740.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.24.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.881.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.24.896.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.896.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.959.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.24.959.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.021.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.25.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.037.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.25.162.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.709.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.25.724.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.724.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.818.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.25.818.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.834.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.927.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.25.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.0 ]--
r 42                 else {//the new nod 
--[ 2018.11.19.20.23.26.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.26.474.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.26.630.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.662.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.26.677.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.26.880.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.052.0 ]--
r 42                 else {//the new node is
--[ 2018.11.19.20.23.27.052.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.068.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.646.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.27.646.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.661.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.161.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.28.161.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.177.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.193.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.28.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.239.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.28.239.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.255.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.302.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.28.302.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.318.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.458.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.28.474.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.489.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.692.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.28.692.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.708.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.771.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.28.771.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.786.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.927.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.28.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.114.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.29.114.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.130.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.270.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.29.270.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.286.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.833.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.29.848.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.848.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.005.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.31.021.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.193.0 ]--
r 42                 else {//the c
--[ 2018.11.19.20.23.31.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.427.0 ]--
r 42                 else {//the cu
--[ 2018.11.19.20.23.31.442.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.442.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.583.0 ]--
r 42                 else {//the cur
--[ 2018.11.19.20.23.31.583.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.599.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.724.0 ]--
r 42                 else {//the curr
--[ 2018.11.19.20.23.31.739.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.739.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.927.0 ]--
r 42                 else {//the curre
--[ 2018.11.19.20.23.31.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.021.0 ]--
r 42                 else {//the curren
--[ 2018.11.19.20.23.32.036.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.036.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.130.0 ]--
r 42                 else {//the current
--[ 2018.11.19.20.23.32.145.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.145.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.224.0 ]--
r 42                 else {//the current 
--[ 2018.11.19.20.23.32.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.239.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.471.0 ]--
r 34                 if(f.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.486.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.486.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.0 ]--
r 34                 if(fi.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.674.0 ]--
r 34                 if(fin.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.689.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.689.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.799.0 ]--
r 34                 if(fing.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.814.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.814.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.955.0 ]--
r 34                 if(finge.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.002.0 ]--
r 34                 if(finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.47.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.017.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.345.0 ]--
r 42                 else {//the f 
--[ 2018.11.19.20.23.50.345.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.360.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.0 ]--
r 42                 else {//the fi 
--[ 2018.11.19.20.23.50.470.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.0 ]--
r 42                 else {//the fin 
--[ 2018.11.19.20.23.50.610.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.688.0 ]--
r 42                 else {//the fing 
--[ 2018.11.19.20.23.50.704.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.704.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.798.0 ]--
r 42                 else {//the finge 
--[ 2018.11.19.20.23.50.813.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.813.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.891.0 ]--
r 42                 else {//the finger 
--[ 2018.11.19.20.23.50.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.907.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.313.0 ]--
r 42                 else {//the finger  
--[ 2018.11.19.20.23.51.313.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.329.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.485.0 ]--
r 42                 else {//the finger n 
--[ 2018.11.19.20.23.51.485.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.501.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.579.0 ]--
r 42                 else {//the finger no 
--[ 2018.11.19.20.23.51.594.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.594.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.844.0 ]--
r 42                 else {//the finger nod 
--[ 2018.11.19.20.23.51.860.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.860.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.032.0 ]--
r 42                 else {//the finger node 
--[ 2018.11.19.20.23.52.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.047.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.157.0 ]--
r 42                 else {//the finger node  
--[ 2018.11.19.20.23.52.172.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.172.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.875.0 ]--
r 42                 else {//the finger node i 
--[ 2018.11.19.20.23.53.891.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.985.0 ]--
r 42                 else {//the finger node is 
--[ 2018.11.19.20.23.54.000.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.000.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.094.0 ]--
r 42                 else {//the finger node is  
--[ 2018.11.19.20.23.54.094.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.110.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.23.55.328.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.437.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.23.55.453.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.453.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.969.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.23.55.969.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.984.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.031.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.23.56.031.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.172.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.23.56.187.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.187.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.359.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.23.56.359.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.375.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.453.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.23.56.468.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.765.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.23.58.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.780.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.905.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.23.58.921.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.921.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.062.0 ]--
r 42                 else {//the finger node is a up down  
--[ 2018.11.19.20.23.59.062.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.576.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.24.04.592.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.592.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.076.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.24.05.091.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.123.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.24.05.123.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.138.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.170.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.24.05.170.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.185.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.216.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.24.05.216.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.232.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.248.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.24.05.263.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.263.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.24.05.310.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.341.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.05.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.357.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.529.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.05.544.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.544.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.982.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.05.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.997.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.138.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.232.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.247.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.247.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.419.0 ]--
r 42                 else {//the finger node is an au 
--[ 2018.11.19.20.24.06.435.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.435.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.685.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.841.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.841.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.857.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.966.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.06.966.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.982.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.0 ]--
r 42                 else {//the finger node is an up 
--[ 2018.11.19.20.24.07.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.325.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.07.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.466.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.07.466.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.482.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.606.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.07.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.778.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.07.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.794.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.981.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.07.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.184.0 ]--
r 42                 else {//the finger node is a do 
--[ 2018.11.19.20.24.08.200.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.200.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.325.0 ]--
r 42                 else {//the finger node is a dow 
--[ 2018.11.19.20.24.08.325.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.419.0 ]--
r 42                 else {//the finger node is a down 
--[ 2018.11.19.20.24.08.419.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.434.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.606.0 ]--
r 42                 else {//the finger node is a down  
--[ 2018.11.19.20.24.08.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.700.0 ]--
r 42                 else {//the finger node is a down u 
--[ 2018.11.19.20.24.08.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.716.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.778.0 ]--
r 42                 else {//the finger node is a down up 
--[ 2018.11.19.20.24.08.778.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.044.0 ]--
r 42                 else {//the finger node is a down up  
--[ 2018.11.19.20.24.09.059.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.059.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.840.0 ]--
r 42                 else {//the finger node is a down up p 
--[ 2018.11.19.20.24.09.840.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.856.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.0 ]--
r 42                 else {//the finger node is a down up pa 
--[ 2018.11.19.20.24.09.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.106.0 ]--
r 42                 else {//the finger node is a down up par 
--[ 2018.11.19.20.24.10.106.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.122.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.293.0 ]--
r 42                 else {//the finger node is a down up part 
--[ 2018.11.19.20.24.10.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.309.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.371.0 ]--
r 42                 else {//the finger node is a down up parti 
--[ 2018.11.19.20.24.10.387.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.387.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.559.0 ]--
r 42                 else {//the finger node is a down up partit 
--[ 2018.11.19.20.24.10.559.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.684.0 ]--
r 42                 else {//the finger node is a down up partiti 
--[ 2018.11.19.20.24.10.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.731.0 ]--
r 42                 else {//the finger node is a down up partitio 
--[ 2018.11.19.20.24.10.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.824.0 ]--
r 42                 else {//the finger node is a down up partition 
--[ 2018.11.19.20.24.10.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.0 ]--
r 42                 else {//the finger node is a down up partitioni 
--[ 2018.11.19.20.24.11.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.652.0 ]--
r 42                 else {//the finger node is a down up partitionin 
--[ 2018.11.19.20.24.11.652.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.668.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.762.0 ]--
r 42                 else {//the finger node is a down up partitioning 
--[ 2018.11.19.20.24.11.777.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.824.0 ]--
r 42                 else {//the finger node is a down up partitioning  
--[ 2018.11.19.20.24.11.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.0 ]--
r 42                 else {//the finger node is a down up partitioning n 
--[ 2018.11.19.20.24.11.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.0 ]--
r 42                 else {//the finger node is a down up partitioning no 
--[ 2018.11.19.20.24.12.074.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.105.0 ]--
r 42                 else {//the finger node is a down up partitioning nod 
--[ 2018.11.19.20.24.12.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.0 ]--
r 42                 else {//the finger node is a down up partitioning node 
--[ 2018.11.19.20.24.12.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.277.0 ]--
+ 42                 else {//the finger node is a down up partitioning node
r 43                     
--[ 2018.11.19.20.24.14.293.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.527.0 ]--
+ 43                     
--[ 2018.11.19.20.24.14.527.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.043.0 ]--
r 44                     }
--[ 2018.11.19.20.24.15.058.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.058.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.074.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.105.0 ]--
r 43 
r 44                 }
--[ 2018.11.19.20.24.15.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.0 ]--
r 43     
--[ 2018.11.19.20.24.18.182.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.370.0 ]--
r 43         
--[ 2018.11.19.20.24.18.370.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.386.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.542.0 ]--
r 43             
--[ 2018.11.19.20.24.18.557.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.573.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.0 ]--
r 43                 
--[ 2018.11.19.20.24.18.870.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.245.0 ]--
r 43                     
--[ 2018.11.19.20.24.19.260.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.260.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.0 ]--
+ 43                                         if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 44                         finger = finger.left;
+ 45                     } 
+ 46                     else {
+ 47                         finger = finger.right;
r 48                     }
--[ 2018.11.19.20.24.29.727.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.758.0 ]--
r 43                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 45                     }
--[ 2018.11.19.20.24.29.774.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.774.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.789.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.805.0 ]--
r 43                     if (finger.p.() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.31.820.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.820.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.258.0 ]--
r 43                     if (finger.p.y() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.32.273.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.585.0 ]--
r 43                     if (finger.p.y() >= newNode.p.()){ //the new node is to the left
--[ 2018.11.19.20.24.34.601.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.601.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.695.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the left
--[ 2018.11.19.20.24.34.695.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.725.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the 
--[ 2018.11.19.20.24.36.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.882.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the
--[ 2018.11.19.20.24.36.897.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.897.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.053.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to th
--[ 2018.11.19.20.24.37.069.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.069.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.163.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to t
--[ 2018.11.19.20.24.37.163.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.178.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.288.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to 
--[ 2018.11.19.20.24.37.303.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.303.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.460.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to
--[ 2018.11.19.20.24.37.475.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.491.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.600.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is t
--[ 2018.11.19.20.24.37.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is 
--[ 2018.11.19.20.24.37.772.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.740.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is b
--[ 2018.11.19.20.24.39.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.756.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.834.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is be
--[ 2018.11.19.20.24.39.834.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.850.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.928.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is bel
--[ 2018.11.19.20.24.39.928.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.068.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is belo
--[ 2018.11.19.20.24.40.068.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.084.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.146.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
--[ 2018.11.19.20.24.40.146.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.162.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.0 ]--
r 50             }
--[ 2018.11.19.20.24.57.455.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.606.0 ]--
r 37                     }
--[ 2018.11.19.20.25.21.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.26.18.328.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.18.609.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.19.781.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.19.921.0 ]--
r 33             while(finger.left != null && finger.right != null){
--[ 2018.11.19.20.26.21.374.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.21.499.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.22.108.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.22.233.0 ]--
r 33             while(finger.left != null || finger.right != null){
--[ 2018.11.19.20.28.07.132.0 ]--
r 33             while(finger.left != null || finger.right != null){ 
--[ 2018.11.19.20.28.07.257.0 ]--
r 33             while(finger.left != null || finger.right != null){ /
--[ 2018.11.19.20.28.07.382.0 ]--
r 33             while(finger.left != null || finger.right != null){ //
--[ 2018.11.19.20.28.07.569.0 ]--
r 33             while(finger.left != null || finger.right != null){ //t
--[ 2018.11.19.20.28.07.647.0 ]--
r 33             while(finger.left != null || finger.right != null){ //th
--[ 2018.11.19.20.28.08.100.0 ]--
r 33             while(finger.left != null || finger.right != null){ //thi
--[ 2018.11.19.20.28.08.209.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this
--[ 2018.11.19.20.28.08.334.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this 
--[ 2018.11.19.20.28.08.444.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.08.538.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wi
--[ 2018.11.19.20.28.08.834.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.09.006.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wh
--[ 2018.11.19.20.28.09.162.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whi
--[ 2018.11.19.20.28.09.272.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whil
--[ 2018.11.19.20.28.09.350.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while
--[ 2018.11.19.20.28.09.475.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while 
--[ 2018.11.19.20.28.09.615.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while l
--[ 2018.11.19.20.28.09.772.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while lo
--[ 2018.11.19.20.28.09.912.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loo
--[ 2018.11.19.20.28.10.037.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop
--[ 2018.11.19.20.28.10.131.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.396.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.537.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop wh
--[ 2018.11.19.20.28.10.693.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.818.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop s
--[ 2018.11.19.20.28.10.990.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sh
--[ 2018.11.19.20.28.11.068.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.178.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop show
--[ 2018.11.19.20.28.11.724.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shou
--[ 2018.11.19.20.28.12.052.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shoul
--[ 2018.11.19.20.28.12.115.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should
--[ 2018.11.19.20.28.12.240.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.12.271.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.12.474.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.12.662.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should run
--[ 2018.11.19.20.28.13.380.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.13.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.13.630.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.14.208.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should g
--[ 2018.11.19.20.28.14.349.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ge
--[ 2018.11.19.20.28.14.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get
--[ 2018.11.19.20.28.14.599.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get 
--[ 2018.11.19.20.28.14.708.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get u
--[ 2018.11.19.20.28.14.786.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us
--[ 2018.11.19.20.28.15.005.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us 
--[ 2018.11.19.20.28.15.036.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us t
--[ 2018.11.19.20.28.15.145.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to
--[ 2018.11.19.20.28.15.255.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to 
--[ 2018.11.19.20.28.15.567.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to t
--[ 2018.11.19.20.28.15.661.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to th
--[ 2018.11.19.20.28.15.755.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the
--[ 2018.11.19.20.28.15.802.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the 
--[ 2018.11.19.20.28.15.926.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the b
--[ 2018.11.19.20.28.16.051.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bo
--[ 2018.11.19.20.28.16.161.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bot
--[ 2018.11.19.20.28.16.348.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bott
--[ 2018.11.19.20.28.16.442.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.16.754.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.17.192.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.18.004.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.23.487.0 ]--
+ 51             
--[ 2018.11.19.20.28.24.471.0 ]--
r 51             /
--[ 2018.11.19.20.28.24.565.0 ]--
r 51             //
--[ 2018.11.19.20.28.24.706.0 ]--
r 51             //a
--[ 2018.11.19.20.28.24.877.0 ]--
r 51             //at
--[ 2018.11.19.20.28.25.002.0 ]--
r 51             //at 
--[ 2018.11.19.20.28.25.081.0 ]--
r 51             //at t
--[ 2018.11.19.20.28.25.127.0 ]--
r 51             //at th
--[ 2018.11.19.20.28.25.268.0 ]--
r 51             //at thi
--[ 2018.11.19.20.28.25.330.0 ]--
r 51             //at this
--[ 2018.11.19.20.28.25.440.0 ]--
r 51             //at this 
--[ 2018.11.19.20.28.25.534.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.25.815.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.25.862.0 ]--
r 51             //at this pio
--[ 2018.11.19.20.28.26.205.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.26.330.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.26.502.0 ]--
r 51             //at this po
--[ 2018.11.19.20.28.26.658.0 ]--
r 51             //at this poi
--[ 2018.11.19.20.28.26.736.0 ]--
r 51             //at this poin
--[ 2018.11.19.20.28.26.877.0 ]--
r 51             //at this point
--[ 2018.11.19.20.28.26.987.0 ]--
r 51             //at this point,
--[ 2018.11.19.20.28.27.174.0 ]--
r 51             //at this point, 
--[ 2018.11.19.20.28.27.237.0 ]--
r 51             //at this point, w
--[ 2018.11.19.20.28.27.268.0 ]--
r 51             //at this point, we
--[ 2018.11.19.20.28.27.502.0 ]--
r 51             //at this point, we 
--[ 2018.11.19.20.28.27.627.0 ]--
r 51             //at this point, we a
--[ 2018.11.19.20.28.27.767.0 ]--
r 51             //at this point, we ar
--[ 2018.11.19.20.28.27.892.0 ]--
r 51             //at this point, we are
--[ 2018.11.19.20.28.27.939.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.28.017.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.28.095.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.205.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.486.0 ]--
r 51             //at this point, we are the 
--[ 2018.11.19.20.28.28.705.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.845.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.970.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.29.095.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.29.127.0 ]--
r 51             //at this point, we are a
--[ 2018.11.19.20.28.29.314.0 ]--
r 51             //at this point, we are at
--[ 2018.11.19.20.28.29.423.0 ]--
r 51             //at this point, we are at 
--[ 2018.11.19.20.28.29.501.0 ]--
r 51             //at this point, we are at t
--[ 2018.11.19.20.28.29.595.0 ]--
r 51             //at this point, we are at th
--[ 2018.11.19.20.28.29.673.0 ]--
r 51             //at this point, we are at the
--[ 2018.11.19.20.28.29.720.0 ]--
r 51             //at this point, we are at the 
--[ 2018.11.19.20.28.29.814.0 ]--
r 51             //at this point, we are at the b
--[ 2018.11.19.20.28.29.939.0 ]--
r 51             //at this point, we are at the bo
--[ 2018.11.19.20.28.30.064.0 ]--
r 51             //at this point, we are at the bot
--[ 2018.11.19.20.28.30.204.0 ]--
r 51             //at this point, we are at the bott
--[ 2018.11.19.20.28.30.298.0 ]--
r 51             //at this point, we are at the botto
--[ 2018.11.19.20.28.30.439.0 ]--
r 51             //at this point, we are at the bottom
--[ 2018.11.19.20.28.30.548.0 ]--
r 51             //at this point, we are at the bottom 
--[ 2018.11.19.20.28.30.610.0 ]--
r 51             //at this point, we are at the bottom o
--[ 2018.11.19.20.28.30.798.0 ]--
r 51             //at this point, we are at the bottom of
--[ 2018.11.19.20.28.30.907.0 ]--
r 51             //at this point, we are at the bottom of 
--[ 2018.11.19.20.28.31.001.0 ]--
r 51             //at this point, we are at the bottom of t
--[ 2018.11.19.20.28.31.079.0 ]--
r 51             //at this point, we are at the bottom of th
--[ 2018.11.19.20.28.31.189.0 ]--
r 51             //at this point, we are at the bottom of the
--[ 2018.11.19.20.28.31.329.0 ]--
r 51             //at this point, we are at the bottom of the 
--[ 2018.11.19.20.28.31.501.0 ]--
r 51             //at this point, we are at the bottom of the t
--[ 2018.11.19.20.28.31.673.0 ]--
r 51             //at this point, we are at the bottom of the tr
--[ 2018.11.19.20.28.31.767.0 ]--
r 51             //at this point, we are at the bottom of the tre
--[ 2018.11.19.20.28.31.938.0 ]--
r 51             //at this point, we are at the bottom of the tree
--[ 2018.11.19.20.28.33.157.0 ]--
r 51             //at this point, we are at the bottom of the tree 
--[ 2018.11.19.20.28.33.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (
--[ 2018.11.19.20.28.33.469.0 ]--
r 51             //at this point, we are at the bottom of the tree (f
--[ 2018.11.19.20.28.33.610.0 ]--
r 51             //at this point, we are at the bottom of the tree (fi
--[ 2018.11.19.20.28.33.688.0 ]--
r 51             //at this point, we are at the bottom of the tree (fin
--[ 2018.11.19.20.28.33.922.0 ]--
r 51             //at this point, we are at the bottom of the tree (fing
--[ 2018.11.19.20.28.34.063.0 ]--
r 51             //at this point, we are at the bottom of the tree (finge
--[ 2018.11.19.20.28.34.141.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger
--[ 2018.11.19.20.28.34.235.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger 
--[ 2018.11.19.20.28.34.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger i
--[ 2018.11.19.20.28.34.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is
--[ 2018.11.19.20.28.34.500.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is 
--[ 2018.11.19.20.28.34.750.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is p
--[ 2018.11.19.20.28.34.906.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is po
--[ 2018.11.19.20.28.35.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.35.266.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.35.406.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.35.531.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.35.719.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.35.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting 
--[ 2018.11.19.20.28.36.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.36.172.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.36.297.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.36.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.36.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.36.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poii
--[ 2018.11.19.20.28.37.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.37.453.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.37.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.37.656.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poingi
--[ 2018.11.19.20.28.37.890.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.38.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.38.125.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is point
--[ 2018.11.19.20.28.38.202.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointi
--[ 2018.11.19.20.28.38.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointin
--[ 2018.11.19.20.28.38.374.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing
--[ 2018.11.19.20.28.38.468.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.38.546.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.38.765.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.38.921.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.38.984.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.39.077.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.39.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.39.233.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.39.343.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.515.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the lo
--[ 2018.11.19.20.28.39.827.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.39.983.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.40.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.40.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.40.452.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last n
--[ 2018.11.19.20.28.41.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.41.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.41.389.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.41.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.41.639.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.41.764.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.41.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.42.045.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.42.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.42.295.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.42.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.42.686.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.42.811.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.43.014.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing t
--[ 2018.11.19.20.28.43.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to
--[ 2018.11.19.20.28.43.217.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to 
--[ 2018.11.19.20.28.43.311.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a
--[ 2018.11.19.20.28.43.826.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a 
--[ 2018.11.19.20.28.44.404.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a l
--[ 2018.11.19.20.28.44.560.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a le
--[ 2018.11.19.20.28.44.654.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a lea
--[ 2018.11.19.20.28.44.763.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf
--[ 2018.11.19.20.28.45.060.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf 
--[ 2018.11.19.20.28.45.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf w
--[ 2018.11.19.20.28.45.373.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wi
--[ 2018.11.19.20.28.45.498.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wit
--[ 2018.11.19.20.28.45.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with
--[ 2018.11.19.20.28.45.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with 
--[ 2018.11.19.20.28.46.013.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with n
--[ 2018.11.19.20.28.46.154.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no
--[ 2018.11.19.20.28.47.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no 
--[ 2018.11.19.20.28.47.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no f
--[ 2018.11.19.20.28.47.841.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fu
--[ 2018.11.19.20.28.47.919.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fur
--[ 2018.11.19.20.28.48.091.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furt
--[ 2018.11.19.20.28.48.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furth
--[ 2018.11.19.20.28.48.309.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furthe
--[ 2018.11.19.20.28.48.388.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further
--[ 2018.11.19.20.28.50.481.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further 
--[ 2018.11.19.20.28.50.684.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further l
--[ 2018.11.19.20.28.50.809.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further le
--[ 2018.11.19.20.28.51.106.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further lea
--[ 2018.11.19.20.28.51.403.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leav
--[ 2018.11.19.20.28.51.777.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leave
--[ 2018.11.19.20.28.51.965.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
--[ 2018.11.19.20.28.52.746.0 ]--
+ 52             
--[ 2018.11.19.20.30.20.070.0 ]--
r 52 
--[ 2018.11.19.20.30.52.562.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.52.578.0 ]--
r 36                 }
--[ 2018.11.19.20.30.52.593.0 ]--
r 35                     
--[ 2018.11.19.20.30.54.593.0 ]--
- 35
--[ 2018.11.19.20.30.56.874.0 ]--
+ 35                     
--[ 2018.11.19.20.30.57.155.0 ]--
- 35
- 35
--[ 2018.11.19.20.30.58.436.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.58.451.0 ]--
r 36                 }
--[ 2018.11.19.20.30.58.483.0 ]--
r 35                     
--[ 2018.11.19.20.30.59.029.0 ]--
- 35
- 35
--[ 2018.11.19.20.31.01.872.0 ]--
+ 35                     
--[ 2018.11.19.20.31.06.294.0 ]--
r 35                     i
--[ 2018.11.19.20.31.06.544.0 ]--
r 35                     
--[ 2018.11.19.20.31.07.465.0 ]--
r 35                     f
--[ 2018.11.19.20.31.07.606.0 ]--
r 35                     fi
--[ 2018.11.19.20.31.11.714.0 ]--
r 35                     f
--[ 2018.11.19.20.31.11.949.0 ]--
r 35                     
--[ 2018.11.19.20.31.16.276.0 ]--
r 35                     p
--[ 2018.11.19.20.31.16.369.0 ]--
r 35                     pa
--[ 2018.11.19.20.31.16.588.0 ]--
r 35                     par
--[ 2018.11.19.20.31.16.776.0 ]--
r 35                     pare
--[ 2018.11.19.20.31.16.885.0 ]--
r 35                     paren
--[ 2018.11.19.20.31.16.979.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.17.588.0 ]--
r 35                     parent 
--[ 2018.11.19.20.31.17.994.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.18.666.0 ]--
r 35                     parentD
--[ 2018.11.19.20.31.18.806.0 ]--
r 35                     parentDi
--[ 2018.11.19.20.31.18.978.0 ]--
r 35                     parentDir
--[ 2018.11.19.20.31.20.775.0 ]--
r 35                     parentDir 
--[ 2018.11.19.20.31.20.868.0 ]--
r 35                     parentDir =
--[ 2018.11.19.20.31.20.962.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.24.383.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.24.539.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.24.805.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.25.055.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.25.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.25.930.0 ]--
r 35                     parentDir = LEFTRI
--[ 2018.11.19.20.31.26.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.26.945.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.27.086.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.27.258.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.27.539.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.27.929.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.37.897.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.31.40.333.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.50.801.0 ]--
r 35                     DparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.472.0 ]--
r 35                     DiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.550.0 ]--
r 35                     DirparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.628.0 ]--
r 35                     DireparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.878.0 ]--
r 35                     DirecparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.128.0 ]--
r 35                     DirectparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.253.0 ]--
r 35                     DirectiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.394.0 ]--
r 35                     DirectioparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.425.0 ]--
r 35                     DirectionparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.550.0 ]--
r 35                     Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.799.0 ]--
r 35                     P parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.986.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.549.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.721.0 ]--
r 35                     Pati parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.564.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.736.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.892.0 ]--
r 35                     Par parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.080.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.799.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.970.0 ]--
r 35                     Partio parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.439.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.595.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.251.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.767.0 ]--
r 35                     Partit parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.02.204.0 ]--
r 35                     Partition parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.03.595.0 ]--
r 35                     Partition. parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.06.172.0 ]--
r 35                     Partition.Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.51.646.0 ]--
- 35
--[ 2018.11.19.20.32.59.644.0 ]--
r 52     
--[ 2018.11.19.20.32.59.987.0 ]--
r 52         
--[ 2018.11.19.20.33.00.191.0 ]--
r 52             
--[ 2018.11.19.20.33.00.347.0 ]--
r 52                 
--[ 2018.11.19.20.33.00.972.0 ]--
r 52             
--[ 2018.11.19.20.33.06.627.0 ]--
+ 52             if(finger.dir == Partition.Direction.LEFTRIGHT) {
+ 53                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 54                         finger = finger.left;
+ 55                     }
+ 56                     else {
+ 57                         finger = finger.right;
+ 58                     }
+ 59                 }
+ 60                 else {//the finger node is a down up partitioning node
+ 61                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
+ 62                         finger = finger.left;
+ 63                     }
+ 64                     else {
+ 65                         finger = finger.right;
+ 66                     }
r 67                 }
--[ 2018.11.19.20.33.06.658.0 ]--
- 53
r 53                 if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 54                     finger = finger.left;
r 55                 }
r 56                 else {
r 57                     finger = finger.right;
r 59             }
r 60             else {//the finger node is a down up partitioning node
r 61                 if (finger.p.y() >= newNode.p.y()){ //the new node is below
r 62                     finger = finger.left;
r 63                 }
r 64                 else {
r 65                     finger = finger.right;
+ 67             }
--[ 2018.11.19.20.33.33.964.0 ]--
r 54                     ffinger.left;
--[ 2018.11.19.20.33.34.073.0 ]--
r 54                     finger.left;
--[ 2018.11.19.20.33.36.573.0 ]--
r 54                     finger.left ;
--[ 2018.11.19.20.33.36.651.0 ]--
r 54                     finger.left =;
--[ 2018.11.19.20.33.37.307.0 ]--
r 54                     finger.left = ;
--[ 2018.11.19.20.33.46.602.0 ]--
r 54                     finger.left = n;
--[ 2018.11.19.20.33.46.742.0 ]--
r 54                     finger.left = ne;
--[ 2018.11.19.20.33.46.805.0 ]--
r 54                     finger.left = new;
--[ 2018.11.19.20.33.48.023.0 ]--
r 54                     finger.left = newNode;
--[ 2018.11.19.20.33.53.694.0 ]--
r 57                     finger.
--[ 2018.11.19.20.33.53.850.0 ]--
r 57                     finger.r
--[ 2018.11.19.20.33.53.991.0 ]--
r 57                     finger.ri
--[ 2018.11.19.20.33.54.100.0 ]--
r 57                     finger.rig
--[ 2018.11.19.20.33.54.194.0 ]--
r 57                     finger.righ
--[ 2018.11.19.20.33.54.288.0 ]--
r 57                     finger.right
--[ 2018.11.19.20.33.54.788.0 ]--
r 57                     finger.right 
--[ 2018.11.19.20.33.55.303.0 ]--
r 57                     finger.right =
--[ 2018.11.19.20.33.55.397.0 ]--
r 57                     finger.right = 
--[ 2018.11.19.20.33.55.553.0 ]--
r 57                     finger.right = n
--[ 2018.11.19.20.33.55.709.0 ]--
r 57                     finger.right = ne
--[ 2018.11.19.20.33.56.131.0 ]--
r 57                     finger.right = new
--[ 2018.11.19.20.33.58.052.0 ]--
r 57                     finger.right = newNode
--[ 2018.11.19.20.33.58.912.0 ]--
r 57                     finger.right = newNode;
--[ 2018.11.19.20.34.03.426.0 ]--
r 62                     finger.
--[ 2018.11.19.20.34.03.723.0 ]--
r 62                     finger.l
--[ 2018.11.19.20.34.03.817.0 ]--
r 62                     finger.le
--[ 2018.11.19.20.34.03.942.0 ]--
r 62                     finger.lef
--[ 2018.11.19.20.34.04.098.0 ]--
r 62                     finger.left
--[ 2018.11.19.20.34.04.332.0 ]--
r 62                     finger.left 
--[ 2018.11.19.20.34.04.770.0 ]--
r 62                     finger.left =
--[ 2018.11.19.20.34.04.863.0 ]--
r 62                     finger.left = 
--[ 2018.11.19.20.34.05.004.0 ]--
r 62                     finger.left = n
--[ 2018.11.19.20.34.05.098.0 ]--
r 62                     finger.left = ne
--[ 2018.11.19.20.34.05.191.0 ]--
r 62                     finger.left = new
--[ 2018.11.19.20.34.06.301.0 ]--
r 62                     finger.left = newNode
--[ 2018.11.19.20.34.09.487.0 ]--
r 65                     finger.
--[ 2018.11.19.20.34.10.018.0 ]--
r 65                     finger.r
--[ 2018.11.19.20.34.10.690.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.11.471.0 ]--
r 65                     finger.right=
--[ 2018.11.19.20.34.12.486.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.12.690.0 ]--
r 65                     finger.right 
--[ 2018.11.19.20.34.13.033.0 ]--
r 65                     finger.right =
--[ 2018.11.19.20.34.13.111.0 ]--
r 65                     finger.right = 
--[ 2018.11.19.20.34.13.252.0 ]--
r 65                     finger.right = n
--[ 2018.11.19.20.34.13.408.0 ]--
r 65                     finger.right = ne
--[ 2018.11.19.20.34.13.924.0 ]--
r 65                     finger.right = newNode
--[ 2018.11.19.20.34.14.517.0 ]--
r 65                     finger.right = newNode;
--[ 2018.11.19.20.34.16.798.0 ]--
r 62                     finger.left = newNode;
--[ 2018.11.19.20.34.35.731.0 ]--
r 68     
--[ 2018.11.19.20.34.35.888.0 ]--
r 68         
--[ 2018.11.19.20.34.36.403.0 ]--
r 68         }
--[ 2018.11.19.20.34.36.434.0 ]--
r 30         } else {
--[ 2018.11.19.20.34.36.450.0 ]--
r 33             while (finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.450.1 ]--
r 33             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.465.0 ]--
r 34                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.481.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.497.0 ]--
- 37
r 37                     } else {
--[ 2018.11.19.20.34.36.497.1 ]--
- 40
r 40                 } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.512.0 ]--
r 41                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.528.0 ]--
- 43
r 43                     } else {
--[ 2018.11.19.20.34.36.543.0 ]--
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.559.0 ]--
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.575.0 ]--
- 52
r 52                 } else {
--[ 2018.11.19.20.34.36.575.1 ]--
- 55
r 55             } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.590.0 ]--
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.606.0 ]--
- 58
r 58                 } else {
--[ 2018.11.19.20.36.03.804.0 ]--
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
r 48 
--[ 2018.11.19.20.36.04.898.0 ]--
- 48
--[ 2018.11.19.20.36.07.897.0 ]--
+ 49         
--[ 2018.11.19.20.36.08.147.0 ]--
+ 49                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 50             if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 51                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 52                     finger.left = newNode;
+ 53                 } else {
+ 54                     finger.right = newNode;
+ 55                 }
+ 56             } else {//the finger node is a down up partitioning node
+ 57                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 58                     finger.left = newNode;
+ 59                 } else {
+ 60                     finger.right = newNode;
+ 61                 }
r 62             }
--[ 2018.11.19.20.36.08.194.0 ]--
r 49         //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 50         if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 51             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 52                 finger.left = newNode;
r 53             } else {
r 54                 finger.right = newNode;
r 55             }
r 56         } else {//the finger node is a down up partitioning node
r 57             if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 58                 finger.left = newNode;
r 59             } else {
r 60                 finger.right = newNode;
r 61             }
r 62         }
--[ 2018.11.19.20.36.53.653.0 ]--
- 31
r 31 
--[ 2018.11.19.20.36.55.012.0 ]--
- 31
--[ 2018.11.19.20.36.57.183.0 ]--
+ 28         
--[ 2018.11.19.20.36.57.371.0 ]--
+ 28                     Node finger;
r 29             finger = root;
--[ 2018.11.19.20.36.57.418.0 ]--
r 28         Node finger;
r 29         finger = root;
--[ 2018.11.19.20.37.02.198.0 ]--
r 31             n = newNode;
--[ 2018.11.19.20.37.02.276.0 ]--
r 31             ne = newNode;
--[ 2018.11.19.20.37.02.417.0 ]--
r 31             new = newNode;
--[ 2018.11.19.20.37.03.416.0 ]--
r 31             newNode = newNode;
--[ 2018.11.19.20.37.06.666.0 ]--
r 31             newNode = r;
--[ 2018.11.19.20.37.06.790.0 ]--
r 31             newNode = ro;
--[ 2018.11.19.20.37.06.869.0 ]--
r 31             newNode = roo;
--[ 2018.11.19.20.37.06.962.0 ]--
r 31             newNode = root;
--[ 2018.11.19.20.37.37.190.0 ]--
r 29 
--[ 2018.11.19.20.37.37.456.0 ]--
- 29
--[ 2018.11.19.20.37.41.002.0 ]--
+ 32             
--[ 2018.11.19.20.37.41.580.0 ]--
r 32                     finger = root;
--[ 2018.11.19.20.37.41.611.0 ]--
r 32             finger = root;
--[ 2018.11.19.20.38.13.572.0 ]--
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
r 49 
--[ 2018.11.19.20.38.18.446.0 ]--
+ 48             
--[ 2018.11.19.20.38.18.727.0 ]--
+ 47             }
+ 48                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 49         if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 50             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 51                 finger.left = newNode;
+ 52             } else {
+ 53                 finger.right = newNode;
+ 54             }
+ 55         } else {//the finger node is a down up partitioning node
+ 56             if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 57                 finger.left = newNode;
+ 58             } else {
+ 59                 finger.right = newNode;
r 61         }
--[ 2018.11.19.20.38.18.774.0 ]--
r 48             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 51                     finger.left = newNode;
r 52                 } else {
r 53                     finger.right = newNode;
r 54                 }
r 55             } else {//the finger node is a down up partitioning node
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 57                     finger.left = newNode;
r 58                 } else {
r 59                     finger.right = newNode;
r 60                 }
r 61             }
--[ 2018.11.19.20.38.59.421.0 ]--
r 30             r
--[ 2018.11.19.20.38.59.562.0 ]--
r 30             ro
--[ 2018.11.19.20.38.59.671.0 ]--
r 30             roo
--[ 2018.11.19.20.38.59.749.0 ]--
r 30             root
--[ 2018.11.19.20.39.00.015.0 ]--
r 30             root 
--[ 2018.11.19.20.39.00.390.0 ]--
r 30             root =
--[ 2018.11.19.20.39.00.483.0 ]--
r 30             root = 
--[ 2018.11.19.20.39.00.655.0 ]--
r 30             root = n
--[ 2018.11.19.20.39.00.780.0 ]--
r 30             root = ne
--[ 2018.11.19.20.39.01.608.0 ]--
r 30             root = newNode
--[ 2018.11.19.20.39.01.952.0 ]--
r 30             root = newNode;
--[ 2018.11.19.20.39.26.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.40.13.598.0 ]--
r 67         return p;
--[ 2018.11.19.20.40.14.128.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.15.159.0 ]--
r 67         return p.v;
--[ 2018.11.19.20.40.17.050.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.20.408.0 ]--
r 67         return p.p;
--[ 2018.11.19.20.40.21.408.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.33.483.0 ]--
r 67         return .;
--[ 2018.11.19.20.40.33.874.0 ]--
r 67         return ;
--[ 2018.11.19.20.40.34.046.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.34.171.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.34.296.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.34.389.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.34.561.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.36.124.0 ]--
r 67         return this.p;
--[ 2018.11.19.20.40.38.123.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.38.279.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.38.482.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.38.873.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.39.170.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.48.465.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.48.605.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.48.699.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.48.855.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.49.261.0 ]--
r 67         return this.v;
--[ 2018.11.19.20.40.50.214.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.50.308.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.50.433.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.50.558.0 ]--
r 67         return th;
--[ 2018.11.19.20.42.37.628.0 ]--
r 20     
--[ 2018.11.19.20.42.37.987.0 ]--
r 20         
--[ 2018.11.19.20.42.51.516.0 ]--
r 17     
--[ 2018.11.19.20.42.52.312.0 ]--
r 17     p
--[ 2018.11.19.20.42.52.390.0 ]--
r 17     pr
--[ 2018.11.19.20.42.52.578.0 ]--
r 17     pri
--[ 2018.11.19.20.42.52.718.0 ]--
r 17     priv
--[ 2018.11.19.20.42.52.812.0 ]--
r 17     priva
--[ 2018.11.19.20.42.53.031.0 ]--
r 17     privat
--[ 2018.11.19.20.42.53.203.0 ]--
r 17     private
--[ 2018.11.19.20.42.53.312.0 ]--
r 17     private 
--[ 2018.11.19.20.42.54.312.0 ]--
r 17     private t
--[ 2018.11.19.20.42.54.499.0 ]--
r 17     private tr
--[ 2018.11.19.20.42.54.749.0 ]--
r 17     private tre
--[ 2018.11.19.20.42.54.890.0 ]--
r 17     private tree
--[ 2018.11.19.20.42.55.452.0 ]--
r 17     private tree;
--[ 2018.11.19.20.43.00.607.0 ]--
r 17     private Ptree;
--[ 2018.11.19.20.43.00.779.0 ]--
r 17     private PStree;
--[ 2018.11.19.20.43.01.420.0 ]--
r 17     private PSKtree;
--[ 2018.11.19.20.43.01.982.0 ]--
r 17     private PSKDTreetree;
--[ 2018.11.19.20.43.01.997.0 ]--
r 17     private PSKDTree;
--[ 2018.11.19.20.43.02.669.0 ]--
r 17     private PSKDTree ;
--[ 2018.11.19.20.43.03.356.0 ]--
r 17     private PSKDTree t;
--[ 2018.11.19.20.43.03.544.0 ]--
r 17     private PSKDTree tr;
--[ 2018.11.19.20.43.03.622.0 ]--
r 17     private PSKDTree tre;
--[ 2018.11.19.20.43.03.778.0 ]--
r 17     private PSKDTree tree;
--[ 2018.11.19.20.43.07.918.0 ]--
r 17     private PSKDTree pskdTree;
--[ 2018.11.19.20.43.22.758.0 ]--
r 20         n
--[ 2018.11.19.20.43.22.899.0 ]--
r 20         ne
--[ 2018.11.19.20.43.22.961.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.102.0 ]--
r 20         new 
--[ 2018.11.19.20.43.23.774.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.914.0 ]--
r 20         ne
--[ 2018.11.19.20.43.24.039.0 ]--
r 20         n
--[ 2018.11.19.20.43.24.164.0 ]--
r 20         
--[ 2018.11.19.20.43.24.555.0 ]--
r 20         p
--[ 2018.11.19.20.43.25.117.0 ]--
r 20         ps
--[ 2018.11.19.20.43.25.476.0 ]--
r 20         pskdTree
--[ 2018.11.19.20.43.25.945.0 ]--
r 20         pskdTree 
--[ 2018.11.19.20.43.26.461.0 ]--
r 20         pskdTree =
--[ 2018.11.19.20.43.26.617.0 ]--
r 20         pskdTree = 
--[ 2018.11.19.20.43.27.257.0 ]--
r 20         pskdTree = n
--[ 2018.11.19.20.43.27.366.0 ]--
r 20         pskdTree = ne
--[ 2018.11.19.20.43.27.429.0 ]--
r 20         pskdTree = new
--[ 2018.11.19.20.43.27.570.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.28.101.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.28.382.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.28.679.0 ]--
r 20         pskdTree = new psk
--[ 2018.11.19.20.43.29.257.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.29.288.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.29.538.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.29.788.0 ]--
r 20         pskdTree = new P
--[ 2018.11.19.20.43.29.960.0 ]--
r 20         pskdTree = new PS
--[ 2018.11.19.20.43.30.491.0 ]--
r 20         pskdTree = new PSKDTree
--[ 2018.11.19.20.43.30.506.0 ]--
r 20         pskdTree = new PSKDTree()
--[ 2018.11.19.20.43.31.397.0 ]--
r 20         pskdTree = new PSKDTree();
--[ 2018.11.19.20.43.35.177.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.35.177.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@694598b6
--[ 2018.11.19.20.43.38.586.0 ]--
r 67         return n;
--[ 2018.11.19.20.43.38.586.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.602.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.805.0 ]--
r 67         return nu;
--[ 2018.11.19.20.43.38.805.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.820.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.992.0 ]--
r 67         return nul;
--[ 2018.11.19.20.43.39.008.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.008.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.102.0 ]--
r 67         return null;
--[ 2018.11.19.20.43.39.117.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.117.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.23.407.0 ]--
- 20
--[ 2018.11.19.20.44.24.594.0 ]--
- 17
--[ 2018.11.19.20.44.27.984.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.33.697.0 ]--
r 65         return ;
--[ 2018.11.19.20.44.34.931.0 ]--
r 65         return r;
--[ 2018.11.19.20.44.35.103.0 ]--
r 65         return ro;
--[ 2018.11.19.20.44.35.212.0 ]--
r 65         return roo;
--[ 2018.11.19.20.44.35.321.0 ]--
r 65         return root;
--[ 2018.11.19.20.44.35.415.0 ]--
r 65         return root.;
--[ 2018.11.19.20.44.35.681.0 ]--
r 65         return root.v;
--[ 2018.11.19.20.44.43.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.46.23.260.0 ]--
r 65         i
--[ 2018.11.19.20.46.23.369.0 ]--
r 65         if
--[ 2018.11.19.20.46.23.463.0 ]--
r 65         if 
--[ 2018.11.19.20.46.24.494.0 ]--
r 65         if ()
--[ 2018.11.19.20.46.29.945.0 ]--
r 65         if (t)
--[ 2018.11.19.20.46.30.008.0 ]--
r 65         if (th)
--[ 2018.11.19.20.46.30.164.0 ]--
r 65         if (thi)
--[ 2018.11.19.20.46.30.242.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.30.398.0 ]--
r 65         if (this,)
--[ 2018.11.19.20.46.30.961.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.31.429.0 ]--
r 65         if (this.)
--[ 2018.11.19.20.46.32.086.0 ]--
r 65         if (this.i)
--[ 2018.11.19.20.46.32.164.0 ]--
r 65         if (this.is)
--[ 2018.11.19.20.46.32.633.0 ]--
r 65         if (this.isEmpty)
--[ 2018.11.19.20.46.32.648.0 ]--
r 65         if (this.isEmpty())
--[ 2018.11.19.20.46.33.773.0 ]--
r 65         if (this.isEmpty()) 
--[ 2018.11.19.20.46.34.007.0 ]--
r 65         if (this.isEmpty()) {
--[ 2018.11.19.20.46.34.241.0 ]--
+ 66 
+ 67 }
--[ 2018.11.19.20.46.34.257.0 ]--
r 67         }
--[ 2018.11.19.20.46.34.273.0 ]--
r 66             
--[ 2018.11.19.20.46.35.663.0 ]--
r 66             r
--[ 2018.11.19.20.46.35.788.0 ]--
r 66             re
--[ 2018.11.19.20.46.35.928.0 ]--
r 66             ret
--[ 2018.11.19.20.46.36.038.0 ]--
r 66             retu
--[ 2018.11.19.20.46.36.147.0 ]--
r 66             retur
--[ 2018.11.19.20.46.36.272.0 ]--
r 66             return
--[ 2018.11.19.20.46.36.366.0 ]--
r 66             return 
--[ 2018.11.19.20.46.50.050.0 ]--
r 106     public boolean isEmpty() { return f; }
--[ 2018.11.19.20.46.50.191.0 ]--
r 106     public boolean isEmpty() { return fa; }
--[ 2018.11.19.20.46.50.347.0 ]--
r 106     public boolean isEmpty() { return fal; }
--[ 2018.11.19.20.46.50.456.0 ]--
r 106     public boolean isEmpty() { return fals; }
--[ 2018.11.19.20.46.50.550.0 ]--
r 106     public boolean isEmpty() { return false; }
--[ 2018.11.19.20.46.51.237.0 ]--
r 66             return
--[ 2018.11.19.20.46.52.893.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.46.52.893.1 ]--
CompilationStatus (AEW): 0 33 0
[Ljava.lang.String;@588d3b4b
--[ 2018.11.19.20.47.00.441.0 ]--
r 66             return 
--[ 2018.11.19.20.47.00.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.457.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.0 ]--
r 66             return t
--[ 2018.11.19.20.47.00.722.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.738.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.910.0 ]--
r 66             return tr
--[ 2018.11.19.20.47.00.926.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.926.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.004.0 ]--
r 66             return tru
--[ 2018.11.19.20.47.01.004.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.019.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.129.0 ]--
r 66             return true
--[ 2018.11.19.20.47.01.129.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.144.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.269.0 ]--
r 66             return true;
--[ 2018.11.19.20.47.01.269.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.285.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.222.0 ]--
+ 68         
--[ 2018.11.19.20.47.02.222.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.238.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.425.0 ]--
r 68         r
--[ 2018.11.19.20.47.02.425.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.519.0 ]--
r 68         re
--[ 2018.11.19.20.47.02.519.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.535.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.691.0 ]--
r 68         ret
--[ 2018.11.19.20.47.02.706.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.706.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.0 ]--
r 68         retu
--[ 2018.11.19.20.47.03.066.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.0 ]--
r 68         retur
--[ 2018.11.19.20.47.03.159.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.237.0 ]--
r 68         return
--[ 2018.11.19.20.47.03.253.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.253.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.331.0 ]--
r 68         return 
--[ 2018.11.19.20.47.03.331.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.347.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.456.0 ]--
r 68         return f
--[ 2018.11.19.20.47.03.472.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.472.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.487.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.659.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.03.675.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.675.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.03.769.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.847.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.03.862.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.862.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.940.0 ]--
r 68         return false
--[ 2018.11.19.20.47.03.956.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.956.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.0 ]--
r 68         return false;
--[ 2018.11.19.20.47.04.237.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.987.0 ]--
r 68         return false
--[ 2018.11.19.20.47.04.987.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.003.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.128.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.05.128.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.143.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.268.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.05.268.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.284.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.362.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.05.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.393.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.503.0 ]--
r 68         return f
--[ 2018.11.19.20.47.05.503.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.518.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.768.0 ]--
r 68         return 
--[ 2018.11.19.20.47.05.768.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.096.0 ]--
r 68         return n
--[ 2018.11.19.20.47.06.112.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.299.0 ]--
r 68         return nu
--[ 2018.11.19.20.47.06.315.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.315.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.549.0 ]--
r 68         return nul
--[ 2018.11.19.20.47.06.565.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.565.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.659.0 ]--
r 68         return null
--[ 2018.11.19.20.47.06.674.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.674.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.815.0 ]--
r 68         return null;
--[ 2018.11.19.20.47.06.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.830.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.08.752.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.0 ]--
r 66             return n;
--[ 2018.11.19.20.47.12.321.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.0 ]--
r 66             return nu;
--[ 2018.11.19.20.47.12.540.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.728.0 ]--
r 66             return nul;
--[ 2018.11.19.20.47.12.728.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.743.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.837.0 ]--
r 66             return null;
--[ 2018.11.19.20.47.12.853.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.853.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.16.279.0 ]--
r 107     public boolean isEmpty() { return r; }
--[ 2018.11.19.20.49.16.497.0 ]--
r 107     public boolean isEmpty() { return ro; }
--[ 2018.11.19.20.49.17.294.0 ]--
r 107     public boolean isEmpty() { return roo; }
--[ 2018.11.19.20.49.17.513.0 ]--
r 107     public boolean isEmpty() { return root; }
--[ 2018.11.19.20.49.18.216.0 ]--
r 107     public boolean isEmpty() { return root=; }
--[ 2018.11.19.20.49.18.341.0 ]--
r 107     public boolean isEmpty() { return root==; }
--[ 2018.11.19.20.49.18.872.0 ]--
r 107     public boolean isEmpty() { return root==n; }
--[ 2018.11.19.20.49.19.012.0 ]--
r 107     public boolean isEmpty() { return root==nu; }
--[ 2018.11.19.20.49.19.231.0 ]--
r 107     public boolean isEmpty() { return root==nul; }
--[ 2018.11.19.20.49.19.340.0 ]--
r 107     public boolean isEmpty() { return root==null; }
--[ 2018.11.19.20.49.25.542.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.38.155.0 ]--
+ 107     public boolean isEmpty() { 
r 108         return root==null; }
--[ 2018.11.19.20.49.38.655.0 ]--
+ 108         
--[ 2018.11.19.20.49.40.623.0 ]--
r 108         S
--[ 2018.11.19.20.49.40.904.0 ]--
r 108         St
--[ 2018.11.19.20.49.41.061.0 ]--
r 108         Std
--[ 2018.11.19.20.49.41.545.0 ]--
r 108         StdOut
--[ 2018.11.19.20.49.42.170.0 ]--
r 108         StdOut.
--[ 2018.11.19.20.49.42.467.0 ]--
r 108         StdOut.p
--[ 2018.11.19.20.49.42.576.0 ]--
r 108         StdOut.pr
--[ 2018.11.19.20.49.42.623.0 ]--
r 108         StdOut.pri
--[ 2018.11.19.20.49.42.748.0 ]--
r 108         StdOut.prin
--[ 2018.11.19.20.49.42.873.0 ]--
r 108         StdOut.println
--[ 2018.11.19.20.49.42.888.0 ]--
r 108         StdOut.println()
--[ 2018.11.19.20.49.42.888.1 ]--
r 108         StdOut.println();
--[ 2018.11.19.20.49.44.310.0 ]--
r 108         StdOut.println(r);
--[ 2018.11.19.20.49.44.419.0 ]--
r 108         StdOut.println(ro);
--[ 2018.11.19.20.49.44.544.0 ]--
r 108         StdOut.println(roo);
--[ 2018.11.19.20.49.44.653.0 ]--
r 108         StdOut.println(root);
--[ 2018.11.19.20.49.45.747.0 ]--
r 107     public boolean isEmpty() {
--[ 2018.11.19.20.49.47.668.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.54.131.0 ]--
r 108         StdOut.println("root);
--[ 2018.11.19.20.49.54.506.0 ]--
r 108         StdOut.println("Hroot);
--[ 2018.11.19.20.49.54.600.0 ]--
r 108         StdOut.println("Heroot);
--[ 2018.11.19.20.49.54.803.0 ]--
r 108         StdOut.println("Heyroot);
--[ 2018.11.19.20.49.55.256.0 ]--
r 108         StdOut.println("Hey"root);
--[ 2018.11.19.20.49.55.897.0 ]--
r 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.49.58.255.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.06.978.0 ]--
- 108
--[ 2018.11.19.20.50.11.852.0 ]--
+ 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.50.21.428.0 ]--
r 108         StdOut.println(root==null);
--[ 2018.11.19.20.50.23.724.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.32.667.0 ]--
- 108
--[ 2018.11.19.20.50.57.037.0 ]--
+ 31             
--[ 2018.11.19.20.50.57.677.0 ]--
r 31             S
--[ 2018.11.19.20.50.57.974.0 ]--
r 31             St
--[ 2018.11.19.20.50.58.240.0 ]--
r 31             Std
--[ 2018.11.19.20.50.58.771.0 ]--
r 31             StdOut
--[ 2018.11.19.20.50.59.380.0 ]--
r 31             StdOut.
--[ 2018.11.19.20.50.59.630.0 ]--
r 31             StdOut.p
--[ 2018.11.19.20.50.59.770.0 ]--
r 31             StdOut.pr
--[ 2018.11.19.20.50.59.802.0 ]--
r 31             StdOut.pri
--[ 2018.11.19.20.50.59.989.0 ]--
r 31             StdOut.prin
--[ 2018.11.19.20.51.00.083.0 ]--
r 31             StdOut.println
--[ 2018.11.19.20.51.00.098.0 ]--
r 31             StdOut.println()
--[ 2018.11.19.20.51.00.114.0 ]--
r 31             StdOut.println();
--[ 2018.11.19.20.51.00.801.0 ]--
r 31             StdOut.println(f);
--[ 2018.11.19.20.51.00.895.0 ]--
r 31             StdOut.println(fi);
--[ 2018.11.19.20.51.01.020.0 ]--
r 31             StdOut.println(fin);
--[ 2018.11.19.20.51.01.129.0 ]--
r 31             StdOut.println(fing);
--[ 2018.11.19.20.51.01.301.0 ]--
r 31             StdOut.println(finge);
--[ 2018.11.19.20.51.01.333.0 ]--
r 31             StdOut.println(finger);
--[ 2018.11.19.20.51.03.910.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.11.945.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.12.226.0 ]--
r 31             StdOut.println(finger.v);
--[ 2018.11.19.20.51.14.241.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.16.622.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.16.888.0 ]--
r 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.18.856.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.22.749.0 ]--
- 31
--[ 2018.11.19.20.51.28.857.0 ]--
+ 31             
--[ 2018.11.19.20.51.29.654.0 ]--
- 31
--[ 2018.11.19.20.51.30.341.0 ]--
+ 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.33.590.0 ]--
r 31             StdOut.println(finger.left);
--[ 2018.11.19.20.51.36.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.43.795.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.47.079.0 ]--
r 31             StdOut.println(finger.left != null);
--[ 2018.11.19.20.51.49.906.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.13.528.0 ]--
r 32             while (finger.left = null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.16.512.0 ]--
r 32             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.28.900.0 ]--
- 31
--[ 2018.11.19.20.52.42.600.0 ]--
+ 46             
--[ 2018.11.19.20.52.43.209.0 ]--
r 46             S
--[ 2018.11.19.20.52.43.490.0 ]--
r 46             St
--[ 2018.11.19.20.52.43.724.0 ]--
r 46             Std
--[ 2018.11.19.20.52.44.240.0 ]--
r 46             StdOut
--[ 2018.11.19.20.52.44.896.0 ]--
r 46             StdOut.
--[ 2018.11.19.20.52.45.193.0 ]--
r 46             StdOut.p
--[ 2018.11.19.20.52.45.318.0 ]--
r 46             StdOut.pr
--[ 2018.11.19.20.52.45.396.0 ]--
r 46             StdOut.pri
--[ 2018.11.19.20.52.45.443.0 ]--
r 46             StdOut.prin
--[ 2018.11.19.20.52.45.552.0 ]--
r 46             StdOut.println
--[ 2018.11.19.20.52.45.568.0 ]--
r 46             StdOut.println()
--[ 2018.11.19.20.52.45.583.0 ]--
r 46             StdOut.println();
--[ 2018.11.19.20.52.46.458.0 ]--
r 46             StdOut.println(f);
--[ 2018.11.19.20.52.46.536.0 ]--
r 46             StdOut.println(fi);
--[ 2018.11.19.20.52.46.645.0 ]--
r 46             StdOut.println(fin);
--[ 2018.11.19.20.52.46.755.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.47.098.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.47.426.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.520.0 ]--
r 46             StdOut.println(fing.di);
--[ 2018.11.19.20.52.47.786.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.926.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.48.020.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.48.254.0 ]--
r 46             StdOut.println(finge);
--[ 2018.11.19.20.52.48.270.0 ]--
r 46             StdOut.println(finger);
--[ 2018.11.19.20.52.48.598.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.52.48.879.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.52.48.989.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.52.49.082.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.52.52.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.58.713.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.52.59.541.0 ]--
r 46             StdOut.println(finger.v;
--[ 2018.11.19.20.53.00.104.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.53.00.354.0 ]--
r 46             StdOut.println(finger.p;
--[ 2018.11.19.20.53.02.103.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.02.103.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@e960696
--[ 2018.11.19.20.53.03.734.0 ]--
r 46             StdOut.println(finger.p);
--[ 2018.11.19.20.53.03.750.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.03.750.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.10.785.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.11.597.0 ]--
r 46             StdOut.println(finger.v);
--[ 2018.11.19.20.53.13.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.19.150.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.19.306.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.53.19.494.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.53.19.681.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.53.21.743.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.23.902.0 ]--
- 46
--[ 2018.11.19.20.53.27.354.0 ]--
+ 26         
--[ 2018.11.19.20.53.27.604.0 ]--
r 26         n
--[ 2018.11.19.20.53.27.713.0 ]--
r 26         ne
--[ 2018.11.19.20.53.27.791.0 ]--
r 26         new
--[ 2018.11.19.20.53.28.588.0 ]--
r 26         newN
--[ 2018.11.19.20.53.28.682.0 ]--
r 26         newNo
--[ 2018.11.19.20.53.28.791.0 ]--
r 26         newNod
--[ 2018.11.19.20.53.28.994.0 ]--
r 26         newNode
--[ 2018.11.19.20.53.29.088.0 ]--
r 26         newNode.
--[ 2018.11.19.20.53.33.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.35.555.0 ]--
r 26         newNode.dir=
--[ 2018.11.19.20.53.36.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.37.508.0 ]--
r 26         newNode.dir 
--[ 2018.11.19.20.53.37.789.0 ]--
r 26         newNode.dir =
--[ 2018.11.19.20.53.37.883.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.38.914.0 ]--
r 26         newNode.dir = l
--[ 2018.11.19.20.53.39.336.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.40.554.0 ]--
r 26         newNode.dir = P
--[ 2018.11.19.20.53.40.788.0 ]--
r 26         newNode.dir = Pa
--[ 2018.11.19.20.53.41.054.0 ]--
r 26         newNode.dir = Par
--[ 2018.11.19.20.53.42.772.0 ]--
r 26         newNode.dir = Partition
--[ 2018.11.19.20.53.43.663.0 ]--
r 26         newNode.dir = Partition.
--[ 2018.11.19.20.53.43.866.0 ]--
r 26         newNode.dir = Partition.D
--[ 2018.11.19.20.53.44.006.0 ]--
r 26         newNode.dir = Partition.Di
--[ 2018.11.19.20.53.44.116.0 ]--
r 26         newNode.dir = Partition.Dir
--[ 2018.11.19.20.53.44.319.0 ]--
r 26         newNode.dir = Partition.Direction
--[ 2018.11.19.20.53.44.834.0 ]--
r 26         newNode.dir = Partition.Direction.
--[ 2018.11.19.20.53.45.709.0 ]--
r 26         newNode.dir = Partition.Direction.L
--[ 2018.11.19.20.53.46.365.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.53.47.443.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.53.58.316.0 ]--
r 26 
--[ 2018.11.19.20.53.59.034.0 ]--
- 26
--[ 2018.11.19.20.54.01.409.0 ]--
+ 29             
--[ 2018.11.19.20.54.02.065.0 ]--
r 29             n
--[ 2018.11.19.20.54.02.315.0 ]--
r 29             ne
--[ 2018.11.19.20.54.02.424.0 ]--
r 29             new
--[ 2018.11.19.20.54.04.064.0 ]--
r 29             ne
--[ 2018.11.19.20.54.04.252.0 ]--
r 29             n
--[ 2018.11.19.20.54.04.892.0 ]--
r 29             
--[ 2018.11.19.20.54.05.173.0 ]--
- 29
--[ 2018.11.19.20.54.06.642.0 ]--
+ 28             
--[ 2018.11.19.20.54.07.267.0 ]--
r 28             n
--[ 2018.11.19.20.54.08.142.0 ]--
r 28             newNode
--[ 2018.11.19.20.54.08.766.0 ]--
r 28             newNode.
--[ 2018.11.19.20.54.09.407.0 ]--
r 28             newNode.d
--[ 2018.11.19.20.54.09.500.0 ]--
r 28             newNode.di
--[ 2018.11.19.20.54.09.672.0 ]--
r 28             newNode.dir
--[ 2018.11.19.20.54.10.360.0 ]--
r 28             newNode.dir 
--[ 2018.11.19.20.54.10.531.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.10.672.0 ]--
r 28             newNode.dir ==
--[ 2018.11.19.20.54.11.031.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.11.344.0 ]--
r 28             newNode.dir = 
--[ 2018.11.19.20.54.12.000.0 ]--
r 28             newNode.dir = P
--[ 2018.11.19.20.54.12.156.0 ]--
r 28             newNode.dir = Pa
--[ 2018.11.19.20.54.12.609.0 ]--
r 28             newNode.dir = Par
--[ 2018.11.19.20.54.12.875.0 ]--
r 28             newNode.dir = Part
--[ 2018.11.19.20.54.13.781.0 ]--
r 28             newNode.dir = Parti
--[ 2018.11.19.20.54.14.578.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.609.0 ]--
r 28             newNode.dir = LEFTRIGHT
--[ 2018.11.19.20.54.14.624.0 ]--
r 28             newNode.dir = .LEFTRIGHT
--[ 2018.11.19.20.54.14.656.0 ]--
r 28             newNode.dir = Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.687.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.15.843.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.32.917.0 ]--
+ 50                     
--[ 2018.11.19.20.54.33.073.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.34.854.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.010.0 ]--
r 50                     fi.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.198.0 ]--
r 50                     fin.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.291.0 ]--
r 50                     fing.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.479.0 ]--
r 50                     finge.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.541.0 ]--
r 50                     finger.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.44.649.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.45.383.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.50.616.0 ]--
+ 53                     
--[ 2018.11.19.20.54.50.788.0 ]--
+ 53                                         newNode.dir = Partition.Direction.LEFTRIGHT;
r 54 
--[ 2018.11.19.20.54.50.819.0 ]--
r 53                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.52.037.0 ]--
- 54
--[ 2018.11.19.20.54.56.302.0 ]--
+ 54 
--[ 2018.11.19.20.54.56.708.0 ]--
- 53
r 53                     
--[ 2018.11.19.20.54.57.333.0 ]--
- 53
--[ 2018.11.19.20.54.58.083.0 ]--
r 50                     
--[ 2018.11.19.20.54.58.473.0 ]--
- 50
--[ 2018.11.19.20.55.00.910.0 ]--
+ 49                 
--[ 2018.11.19.20.55.01.145.0 ]--
+ 49                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 50 
--[ 2018.11.19.20.55.01.176.0 ]--
r 49                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.02.035.0 ]--
- 50
--[ 2018.11.19.20.55.04.566.0 ]--
+ 56                 
--[ 2018.11.19.20.55.04.832.0 ]--
+ 56                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 57 
--[ 2018.11.19.20.55.04.863.0 ]--
r 56                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.05.690.0 ]--
- 57
--[ 2018.11.19.20.55.07.409.0 ]--
r 56                 newNode.dir = Partition.Direction.D;
--[ 2018.11.19.20.55.07.596.0 ]--
r 56                 newNode.dir = Partition.Direction.Do;
--[ 2018.11.19.20.55.07.721.0 ]--
r 56                 newNode.dir = Partition.Direction.Dow;
--[ 2018.11.19.20.55.07.877.0 ]--
r 56                 newNode.dir = Partition.Direction.Down;
--[ 2018.11.19.20.55.08.175.0 ]--
r 56                 newNode.dir = Partition.Direction.DOWNUP;
--[ 2018.11.19.20.55.13.689.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.55.41.749.0 ]--
DisposeComponent
--[ 2018.11.20.14.37.26.462.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.20.14.37.26.516.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
/.git/objects/0b/cb1ae2a966f7111b04ea0e920d0c8aec8d394b
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
/.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
/.git/objects/47/b741f8ac969a6f29b52d882c67dad075facb3e
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/54/b37f17e70ec4b3c24cf6e6a402bf8e4faefc51
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6f/cc24bfdb55009cc2634fa4baece3496212e6c6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/4fc1b94f6be829b0272be4921f5bb6b4d515ee
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a2/ffa17b91d6b6ddcc862798c60330d0113280a0
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f0/4ec327764f5180068a195efeb8bc3d760ce43d
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/objects/fc/ffaccf82b628f54bac5ba392691067050e5dff
/.git/objects/fe/86b7d30276d409463a9786906238815afa4617
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.20.14.37.26.519.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;
    // constructor makes empty kD-tree
    public PSKDTree() {
    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node();
        newNode.p = p;
        newNode.v = v;
        Node finger;
        if(this.isEmpty()){
            newNode.dir = Partition.Direction.LEFTRIGHT;
            root = newNode;
        } else {
            finger = root;
            while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
                if (finger.dir == Partition.Direction.LEFTRIGHT) {
                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
                        finger = finger.left;
                    } else {
                        finger = finger.right;
                    }
                } else {//the finger node is a down up partitioning node
                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
                        finger = finger.left;
                    } else {
                        finger = finger.right;
                    }
                }
            }
            //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
            if (finger.dir == Partition.Direction.LEFTRIGHT) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
                    newNode = finger.left;
                } else {
                    newNode = finger.right;
                }
            } else {//the finger node is a down up partitioning node
                newNode.dir = Partition.Direction.DOWNUP;
                if (finger.p.y() >= newNode.p.y()) { //the new node is below
                    newNode = finger.left;
                } else {
                    newNode = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        if (this.isEmpty()) {
            return null;
        }
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() {
        return root==null; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.20.14.37.26.520.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.20.14.37.26.520.1 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.20.14.37.26.533.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.20.14.37.26.534.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.20.14.37.26.536.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.20.14.37.26.537.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.20.14.37.26.539.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.20.14.37.26.544.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.20.14.37.26.549.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.20.14.37.26.551.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.20.14.37.26.559.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.20.14.37.26.560.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.20.14.37.26.562.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.20.14.37.49.616.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.37.53.909.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.14.40.15.777.0 ]--
:/src/PSKDTree.java
+ 38                         
--[ 2018.11.20.14.40.17.124.0 ]--
- 38
--[ 2018.11.20.14.40.19.268.0 ]--
+ 39                     
--[ 2018.11.20.14.40.22.680.0 ]--
r 39                     s
--[ 2018.11.20.14.40.22.913.0 ]--
r 39                     
--[ 2018.11.20.14.40.23.135.0 ]--
r 39                     S
--[ 2018.11.20.14.40.23.402.0 ]--
r 39                     St
--[ 2018.11.20.14.40.24.475.0 ]--
r 39                     Std
--[ 2018.11.20.14.40.25.275.0 ]--
r 39                     StdOut
--[ 2018.11.20.14.40.26.056.0 ]--
r 39                     StdOut.
--[ 2018.11.20.14.40.26.273.0 ]--
r 39                     StdOut.p
--[ 2018.11.20.14.40.27.119.0 ]--
r 39                     StdOut.println
--[ 2018.11.20.14.40.27.155.0 ]--
r 39                     StdOut.println()
--[ 2018.11.20.14.40.27.188.0 ]--
r 39                     StdOut.println();
--[ 2018.11.20.14.40.28.222.0 ]--
r 39                     StdOut.println("");
--[ 2018.11.20.14.40.29.187.0 ]--
r 39                     StdOut.println("p");
--[ 2018.11.20.14.40.29.350.0 ]--
r 39                     StdOut.println("pl");
--[ 2018.11.20.14.40.29.431.0 ]--
r 39                     StdOut.println("pla");
--[ 2018.11.20.14.40.29.551.0 ]--
r 39                     StdOut.println("plac");
--[ 2018.11.20.14.40.29.697.0 ]--
r 39                     StdOut.println("place");
--[ 2018.11.20.14.40.29.973.0 ]--
r 39                     StdOut.println("placed");
--[ 2018.11.20.14.40.30.848.0 ]--
r 39                     StdOut.println("placed ");
--[ 2018.11.20.14.40.32.860.0 ]--
r 39                     StdOut.println("placed X");
--[ 2018.11.20.14.40.35.405.0 ]--
+ 46                     
--[ 2018.11.20.14.40.42.403.0 ]--
r 46                     StdOut.println("placed X");
--[ 2018.11.20.14.40.44.458.0 ]--
r 46                     StdOut.println("placed ");
--[ 2018.11.20.14.40.45.168.0 ]--
r 46                     StdOut.println("placed Y");
--[ 2018.11.20.14.40.50.016.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.41.03.812.0 ]--
+ 33                 
--[ 2018.11.20.14.41.06.710.0 ]--
r 33                     StdOut.println("placed X");
--[ 2018.11.20.14.41.06.769.0 ]--
r 33                 StdOut.println("placed X");
--[ 2018.11.20.14.41.08.390.0 ]--
r 33                 StdOut.println("placed X);
--[ 2018.11.20.14.41.08.783.0 ]--
r 33                 StdOut.println("placed );
--[ 2018.11.20.14.41.08.914.0 ]--
r 33                 StdOut.println("placed);
--[ 2018.11.20.14.41.09.093.0 ]--
r 33                 StdOut.println("place);
--[ 2018.11.20.14.41.09.220.0 ]--
r 33                 StdOut.println("plac);
--[ 2018.11.20.14.41.09.355.0 ]--
r 33                 StdOut.println("pla);
--[ 2018.11.20.14.41.09.525.0 ]--
r 33                 StdOut.println("pl);
--[ 2018.11.20.14.41.09.724.0 ]--
r 33                 StdOut.println("p);
--[ 2018.11.20.14.41.09.834.0 ]--
r 33                 StdOut.println(");
--[ 2018.11.20.14.41.10.451.0 ]--
r 33                 StdOut.println("i);
--[ 2018.11.20.14.41.10.553.0 ]--
r 33                 StdOut.println("in);
--[ 2018.11.20.14.41.10.661.0 ]--
r 33                 StdOut.println("in );
--[ 2018.11.20.14.41.12.350.0 ]--
r 33                 StdOut.println("in f);
--[ 2018.11.20.14.41.12.483.0 ]--
r 33                 StdOut.println("in fi);
--[ 2018.11.20.14.41.12.560.0 ]--
r 33                 StdOut.println("in fir);
--[ 2018.11.20.14.41.12.745.0 ]--
r 33                 StdOut.println("in firs);
--[ 2018.11.20.14.41.12.826.0 ]--
r 33                 StdOut.println("in first);
--[ 2018.11.20.14.41.13.040.0 ]--
r 33                 StdOut.println("in first );
--[ 2018.11.20.14.41.13.291.0 ]--
r 33                 StdOut.println("in first h);
--[ 2018.11.20.14.41.13.381.0 ]--
r 33                 StdOut.println("in first hw);
--[ 2018.11.20.14.41.13.693.0 ]--
r 33                 StdOut.println("in first h);
--[ 2018.11.20.14.41.13.809.0 ]--
r 33                 StdOut.println("in first );
--[ 2018.11.20.14.41.13.911.0 ]--
r 33                 StdOut.println("in first w);
--[ 2018.11.20.14.41.14.151.0 ]--
r 33                 StdOut.println("in first wh);
--[ 2018.11.20.14.41.14.409.0 ]--
r 33                 StdOut.println("in first whi);
--[ 2018.11.20.14.41.14.626.0 ]--
r 33                 StdOut.println("in first whil);
--[ 2018.11.20.14.41.14.745.0 ]--
r 33                 StdOut.println("in first while);
--[ 2018.11.20.14.41.15.370.0 ]--
r 33                 StdOut.println("in first while");
--[ 2018.11.20.14.41.19.164.0 ]--
+ 34                 
--[ 2018.11.20.14.41.21.628.0 ]--
r 34                     StdOut.println("placed X");
--[ 2018.11.20.14.41.21.698.0 ]--
r 34                 StdOut.println("placed X");
--[ 2018.11.20.14.41.23.833.0 ]--
- 34
--[ 2018.11.20.14.41.28.132.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.52.02.603.0 ]--
r 32             while (t) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.750.0 ]--
r 32             while (tr) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.838.0 ]--
r 32             while (tru) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.969.0 ]--
r 32             while (true) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.38.934.0 ]--
- 33
--[ 2018.11.20.14.54.05.359.0 ]--
r 35                         finger = finger.left;]
--[ 2018.11.20.14.54.06.574.0 ]--
+ 36                         
--[ 2018.11.20.14.54.07.453.0 ]--
- 36
--[ 2018.11.20.14.54.07.655.0 ]--
r 35                         finger = finger.left;
--[ 2018.11.20.14.54.08.478.0 ]--
+ 36                         
--[ 2018.11.20.14.54.19.992.0 ]--
+ 35                         
--[ 2018.11.20.14.54.21.108.0 ]--
r 35                         i
--[ 2018.11.20.14.54.21.184.0 ]--
r 35                         if
--[ 2018.11.20.14.54.21.755.0 ]--
r 35                         if 
--[ 2018.11.20.14.54.21.927.0 ]--
r 35                         if ()
--[ 2018.11.20.14.54.22.233.0 ]--
r 35                         if (f)
--[ 2018.11.20.14.54.22.395.0 ]--
r 35                         if (fi)
--[ 2018.11.20.14.54.22.431.0 ]--
r 35                         if (fin)
--[ 2018.11.20.14.54.22.614.0 ]--
r 35                         if (fing)
--[ 2018.11.20.14.54.22.987.0 ]--
r 35                         if (fing.)
--[ 2018.11.20.14.54.23.686.0 ]--
r 35                         if (fing)
--[ 2018.11.20.14.54.23.820.0 ]--
r 35                         if (finge)
--[ 2018.11.20.14.54.23.943.0 ]--
r 35                         if (finger)
--[ 2018.11.20.14.54.24.352.0 ]--
r 35                         if (finger.)
--[ 2018.11.20.14.54.24.578.0 ]--
r 35                         if (finger.l)
--[ 2018.11.20.14.54.24.700.0 ]--
r 35                         if (finger.le)
--[ 2018.11.20.14.54.24.855.0 ]--
r 35                         if (finger.leg)
--[ 2018.11.20.14.54.25.140.0 ]--
r 35                         if (finger.legt)
--[ 2018.11.20.14.54.25.421.0 ]--
r 35                         if (finger.leg)
--[ 2018.11.20.14.54.25.532.0 ]--
r 35                         if (finger.le)
--[ 2018.11.20.14.54.25.629.0 ]--
r 35                         if (finger.lef)
--[ 2018.11.20.14.54.25.797.0 ]--
r 35                         if (finger.left)
--[ 2018.11.20.14.54.26.460.0 ]--
r 35                         if (finger.left )
--[ 2018.11.20.14.54.26.674.0 ]--
r 35                         if (finger.left !)
--[ 2018.11.20.14.54.26.857.0 ]--
r 35                         if (finger.left !=)
--[ 2018.11.20.14.54.26.970.0 ]--
r 35                         if (finger.left != )
--[ 2018.11.20.14.54.27.369.0 ]--
r 35                         if (finger.left != u)
--[ 2018.11.20.14.54.27.585.0 ]--
r 35                         if (finger.left != u;)
--[ 2018.11.20.14.54.27.739.0 ]--
r 35                         if (finger.left != u;;)
--[ 2018.11.20.14.54.27.994.0 ]--
r 35                         if (finger.left != u;)
--[ 2018.11.20.14.54.28.121.0 ]--
r 35                         if (finger.left != u)
--[ 2018.11.20.14.54.28.239.0 ]--
r 35                         if (finger.left != )
--[ 2018.11.20.14.54.28.796.0 ]--
r 35                         if (finger.left != n)
--[ 2018.11.20.14.54.29.133.0 ]--
r 35                         if (finger.left != nu)
--[ 2018.11.20.14.54.29.328.0 ]--
r 35                         if (finger.left != nul)
--[ 2018.11.20.14.54.29.438.0 ]--
r 35                         if (finger.left != null)
--[ 2018.11.20.14.54.30.787.0 ]--
r 35                         if (finger.left != null){
--[ 2018.11.20.14.54.32.477.0 ]--
+ 37                         
--[ 2018.11.20.14.54.33.152.0 ]--
r 37                         }
--[ 2018.11.20.14.54.33.400.0 ]--
r 35                         if (finger.left != null) {
--[ 2018.11.20.14.54.33.437.0 ]--
r 36                             finger = finger.left;
--[ 2018.11.20.14.54.47.017.0 ]--
+ 38                         
--[ 2018.11.20.14.54.47.234.0 ]--
r 38                         e
--[ 2018.11.20.14.54.47.384.0 ]--
r 38                         el
--[ 2018.11.20.14.54.47.464.0 ]--
r 38                         els
--[ 2018.11.20.14.54.47.517.0 ]--
r 38                         else
--[ 2018.11.20.14.54.48.175.0 ]--
r 38                         else 
--[ 2018.11.20.14.54.48.418.0 ]--
r 38                         else {
--[ 2018.11.20.14.54.55.499.0 ]--
+ 39 
+ 40 }
--[ 2018.11.20.14.54.55.522.0 ]--
r 40                         }
--[ 2018.11.20.14.54.55.547.0 ]--
r 39                             
--[ 2018.11.20.14.54.55.740.0 ]--
+ 39                             
--[ 2018.11.20.14.54.57.242.0 ]--
- 39
--[ 2018.11.20.14.55.10.238.0 ]--
- 59
--[ 2018.11.20.14.55.14.697.0 ]--
+ 39                                                 newNode = finger.left;
r 40 
--[ 2018.11.20.14.55.14.751.0 ]--
r 39                             newNode = finger.left;
--[ 2018.11.20.14.55.16.688.0 ]--
r 40     
--[ 2018.11.20.14.55.16.825.0 ]--
r 40         
--[ 2018.11.20.14.55.17.004.0 ]--
r 40             
--[ 2018.11.20.14.55.17.168.0 ]--
r 40                 
--[ 2018.11.20.14.55.17.331.0 ]--
r 40                     
--[ 2018.11.20.14.55.17.519.0 ]--
r 40                         
--[ 2018.11.20.14.55.17.656.0 ]--
r 40                             
--[ 2018.11.20.14.55.17.813.0 ]--
r 40                                 
--[ 2018.11.20.14.55.18.516.0 ]--
r 40                             
--[ 2018.11.20.14.55.19.124.0 ]--
r 40                             b
--[ 2018.11.20.14.55.19.221.0 ]--
r 40                             br
--[ 2018.11.20.14.55.19.316.0 ]--
r 40                             bre
--[ 2018.11.20.14.55.19.451.0 ]--
r 40                             brea
--[ 2018.11.20.14.55.19.787.0 ]--
r 40                             breal
--[ 2018.11.20.14.55.20.477.0 ]--
r 40                             brea
--[ 2018.11.20.14.55.20.859.0 ]--
r 40                             break
--[ 2018.11.20.14.55.21.225.0 ]--
r 40                             break;
--[ 2018.11.20.14.55.21.622.0 ]--
r 40                             break; 
--[ 2018.11.20.14.55.22.093.0 ]--
r 40                             break; /
--[ 2018.11.20.14.55.22.162.0 ]--
r 40                             break; //
--[ 2018.11.20.14.55.22.375.0 ]--
r 40                             break; //b
--[ 2018.11.20.14.55.22.444.0 ]--
r 40                             break; //ba
--[ 2018.11.20.14.55.22.567.0 ]--
r 40                             break; //bab
--[ 2018.11.20.14.55.22.759.0 ]--
r 40                             break; //baby
--[ 2018.11.20.14.55.35.066.0 ]--
- 35
- 35
- 35
- 35
- 35
- 35
r 35                         
--[ 2018.11.20.14.55.36.373.0 ]--
+ 35                         if (finger.left != null) {
+ 36                             finger = finger.left;
+ 37                         }
+ 38                         else {
+ 39                             newNode = finger.left;
+ 40                             break; //baby
r 41                         }
--[ 2018.11.20.14.55.39.601.0 ]--
- 42
--[ 2018.11.20.14.55.44.611.0 ]--
+ 43                         if (finger.left != null) {
+ 44                             finger = finger.left;
+ 45                         }
+ 46                         else {
+ 47                             newNode = finger.left;
+ 48                             break; //baby
r 49                         }
--[ 2018.11.20.14.55.51.276.0 ]--
r 43                         if (finger.r != null) {
r 44                             finger = finger.r;
r 47                             newNode = finger.r;
--[ 2018.11.20.14.55.51.341.0 ]--
r 43                         if (finger.ri != null) {
r 44                             finger = finger.ri;
r 47                             newNode = finger.ri;
--[ 2018.11.20.14.55.51.501.0 ]--
r 43                         if (finger.rig != null) {
r 44                             finger = finger.rig;
r 47                             newNode = finger.rig;
--[ 2018.11.20.14.55.51.608.0 ]--
r 43                         if (finger.righ != null) {
r 44                             finger = finger.righ;
r 47                             newNode = finger.righ;
--[ 2018.11.20.14.55.51.689.0 ]--
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
r 47                             newNode = finger.right;
--[ 2018.11.20.14.55.52.412.0 ]--
+ 43                         if (finger.right
r 44                          != null) {
--[ 2018.11.20.14.55.52.449.0 ]--
r 44                                 != null) {
--[ 2018.11.20.14.55.52.472.0 ]--
+ 45                             finger = finger.right
r 46                             ;
--[ 2018.11.20.14.55.52.500.0 ]--
+ 49                             newNode = finger.right
r 50                             ;
--[ 2018.11.20.14.55.53.428.0 ]--
- 43
- 43
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
- 47
r 47                             newNode = finger.right;
--[ 2018.11.20.14.56.10.896.0 ]--
- 62
- 62
- 62
- 62
- 62
r 62   
--[ 2018.11.20.14.57.59.835.0 ]--
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
r 33                 
--[ 2018.11.20.14.58.01.168.0 ]--
+ 33                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 34                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 35                         if (finger.left != null) {
+ 36                             finger = finger.left;
+ 37                         }
+ 38                         else {
+ 39                             newNode = finger.left;
+ 40                             break; //baby
+ 41                         }
+ 42                     } else {
+ 43                         if (finger.right != null) {
+ 44                             finger = finger.right;
+ 45                         }
+ 46                         else {
+ 47                             newNode = finger.right;
+ 48                             break; //baby
+ 49                         }
+ 50                     }
+ 51                     StdOut.println("placed X");
+ 52                 } else {//the finger node is a down up partitioning node
+ 53                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 54                         finger = finger.left;
+ 55                     } else {
+ 56                         finger = finger.right;
+ 57                     }
+ 58                     StdOut.println("placed Y");
r 59                 }
--[ 2018.11.20.14.58.02.233.0 ]--
r 33 //                if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34 //                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35 //                        if (finger.left != null) {
r 36 //                            finger = finger.left;
r 37 //                        }
r 38 //                        else {
r 39 //                            newNode = finger.left;
r 40 //                            break; //baby
r 41 //                        }
r 42 //                    } else {
r 43 //                        if (finger.right != null) {
r 44 //                            finger = finger.right;
r 45 //                        }
r 46 //                        else {
r 47 //                            newNode = finger.right;
r 48 //                            break; //baby
r 49 //                        }
r 50 //                    }
r 51 //                    StdOut.println("placed X");
r 52 //                } else {//the finger node is a down up partitioning node
r 53 //                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54 //                        finger = finger.left;
r 55 //                    } else {
r 56 //                        finger = finger.right;
r 57 //                    }
r 58 //                    StdOut.println("placed Y");
r 59 //                }
--[ 2018.11.20.14.58.08.616.0 ]--
+ 33                 
--[ 2018.11.20.14.58.13.896.0 ]--
- 33
--[ 2018.11.20.14.58.15.063.0 ]--
r 33                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35                         if (finger.left != null) {
r 36                             finger = finger.left;
r 37                         }
r 38                         else {
r 39                             newNode = finger.left;
r 40                             break; //baby
r 41                         }
r 42                     } else {
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
r 45                         }
r 46                         else {
r 47                             newNode = finger.right;
r 48                             break; //baby
r 49                         }
r 50                     }
r 51                     StdOut.println("placed X");
r 52                 } else {//the finger node is a down up partitioning node
r 53                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54                         finger = finger.left;
r 55                     } else {
r 56                         finger = finger.right;
r 57                     }
r 58                     StdOut.println("placed Y");
r 59                 }
--[ 2018.11.20.14.58.27.189.0 ]--
r 32 //            while (true) { //this while loop should get us to the bottom
r 33 //                if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34 //                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35 //                        if (finger.left != null) {
r 36 //                            finger = finger.left;
r 37 //                        }
r 38 //                        else {
r 39 //                            newNode = finger.left;
r 40 //                            break; //baby
r 41 //                        }
r 42 //                    } else {
r 43 //                        if (finger.right != null) {
r 44 //                            finger = finger.right;
r 45 //                        }
r 46 //                        else {
r 47 //                            newNode = finger.right;
r 48 //                            break; //baby
r 49 //                        }
r 50 //                    }
r 51 //                    StdOut.println("placed X");
r 52 //                } else {//the finger node is a down up partitioning node
r 53 //                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54 //                        finger = finger.left;
r 55 //                    } else {
r 56 //                        finger = finger.right;
r 57 //                    }
r 58 //                    StdOut.println("placed Y");
r 59 //                }
r 60 //            }
r 61 //            //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 62 //  
r 63 //            } else {//the finger node is a down up partitioning node
r 64 //                newNode.dir = Partition.Direction.DOWNUP;
r 65 //                if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 66 //                    newNode = finger.left;
r 67 //                } else {
r 68 //                    newNode = finger.right;
r 69 //                }
r 70 //            }
r 71 //        }
--[ 2018.11.20.14.58.40.382.0 ]--
+ 32             
--[ 2018.11.20.14.58.43.709.0 ]--
r 32             w
--[ 2018.11.20.14.58.43.790.0 ]--
r 32             wh
--[ 2018.11.20.14.58.43.945.0 ]--
r 32             whi
--[ 2018.11.20.14.58.44.101.0 ]--
r 32             whil
--[ 2018.11.20.14.58.44.193.0 ]--
r 32             while
--[ 2018.11.20.14.58.44.607.0 ]--
r 32             while 
--[ 2018.11.20.14.58.44.872.0 ]--
r 32             while ()
--[ 2018.11.20.14.58.45.053.0 ]--
r 32             while (t)
--[ 2018.11.20.14.58.45.249.0 ]--
r 32             while (tr)
--[ 2018.11.20.14.58.45.328.0 ]--
r 32             while (tru)
--[ 2018.11.20.14.58.45.470.0 ]--
r 32             while (true)
--[ 2018.11.20.14.58.46.469.0 ]--
r 32             while (true )
--[ 2018.11.20.14.58.47.049.0 ]--
r 32             while (true)
--[ 2018.11.20.14.58.47.777.0 ]--
r 32             while (true){
--[ 2018.11.20.14.58.47.944.0 ]--
+ 33 
+ 34 }
--[ 2018.11.20.14.58.47.980.0 ]--
r 34             }
--[ 2018.11.20.14.58.48.018.0 ]--
r 33                 
--[ 2018.11.20.14.58.49.088.0 ]--
r 33                 s
--[ 2018.11.20.14.58.49.189.0 ]--
r 33                 so
--[ 2018.11.20.14.58.50.864.0 ]--
r 33                 so 
--[ 2018.11.20.14.58.50.950.0 ]--
r 33                 so p
--[ 2018.11.20.14.58.51.051.0 ]--
r 33                 so pa
--[ 2018.11.20.14.58.51.203.0 ]--
r 33                 so par
--[ 2018.11.20.14.58.51.393.0 ]--
r 33                 so part
--[ 2018.11.20.14.58.51.500.0 ]--
r 33                 so parti
--[ 2018.11.20.14.58.51.614.0 ]--
r 33                 so partin
--[ 2018.11.20.14.58.51.741.0 ]--
r 33                 so partini
--[ 2018.11.20.14.58.51.881.0 ]--
r 33                 so partinio
--[ 2018.11.20.14.58.51.955.0 ]--
r 33                 so partinion
--[ 2018.11.20.14.58.52.292.0 ]--
r 33                 so partinio
--[ 2018.11.20.14.58.52.407.0 ]--
r 33                 so partini
--[ 2018.11.20.14.58.52.518.0 ]--
r 33                 so partin
--[ 2018.11.20.14.58.52.672.0 ]--
r 33                 so parti
--[ 2018.11.20.14.58.52.797.0 ]--
r 33                 so part
--[ 2018.11.20.14.58.52.898.0 ]--
r 33                 so par
--[ 2018.11.20.14.58.53.053.0 ]--
r 33                 so pa
--[ 2018.11.20.14.58.53.152.0 ]--
r 33                 so p
--[ 2018.11.20.14.58.53.329.0 ]--
r 33                 so 
--[ 2018.11.20.14.58.53.382.0 ]--
r 33                 so
--[ 2018.11.20.14.58.53.533.0 ]--
r 33                 s
--[ 2018.11.20.14.58.53.902.0 ]--
r 33                 
--[ 2018.11.20.14.59.03.502.0 ]--
r 33                 f
--[ 2018.11.20.14.59.03.638.0 ]--
r 33                 fi
--[ 2018.11.20.14.59.03.812.0 ]--
r 33                 fin
--[ 2018.11.20.14.59.03.904.0 ]--
r 33                 fing
--[ 2018.11.20.14.59.04.229.0 ]--
r 33                 finge
--[ 2018.11.20.14.59.04.338.0 ]--
r 33                 finger
--[ 2018.11.20.14.59.04.442.0 ]--
r 33                 finger.
--[ 2018.11.20.14.59.05.453.0 ]--
r 33                 finger.p
--[ 2018.11.20.14.59.05.716.0 ]--
r 33                 finger.p.
--[ 2018.11.20.14.59.07.640.0 ]--
r 33                 finger.p.x
--[ 2018.11.20.14.59.07.766.0 ]--
r 33                 finger.p.xy
--[ 2018.11.20.14.59.09.292.0 ]--
r 33                 finger.p.x
--[ 2018.11.20.14.59.09.486.0 ]--
r 33                 finger.p.
--[ 2018.11.20.14.59.09.623.0 ]--
r 33                 finger.p
--[ 2018.11.20.14.59.09.809.0 ]--
r 33                 finger.
--[ 2018.11.20.14.59.09.929.0 ]--
r 33                 finger
--[ 2018.11.20.14.59.10.063.0 ]--
r 33                 finge
--[ 2018.11.20.14.59.10.242.0 ]--
r 33                 fing
--[ 2018.11.20.14.59.10.418.0 ]--
r 33                 fin
--[ 2018.11.20.14.59.10.541.0 ]--
r 33                 fi
--[ 2018.11.20.14.59.10.816.0 ]--
r 33                 f
--[ 2018.11.20.14.59.11.282.0 ]--
r 33                 
--[ 2018.11.20.14.59.19.487.0 ]--
r 33                 i
--[ 2018.11.20.14.59.19.634.0 ]--
r 33                 if
--[ 2018.11.20.14.59.20.687.0 ]--
r 33                 if 
--[ 2018.11.20.14.59.20.881.0 ]--
r 33                 if ()
--[ 2018.11.20.14.59.22.151.0 ]--
r 33                 if (f)
--[ 2018.11.20.14.59.22.243.0 ]--
r 33                 if (fi)
--[ 2018.11.20.14.59.22.377.0 ]--
r 33                 if (fin)
--[ 2018.11.20.14.59.22.441.0 ]--
r 33                 if (fing)
--[ 2018.11.20.14.59.23.050.0 ]--
r 33                 if (finger)
--[ 2018.11.20.14.59.23.504.0 ]--
r 33                 if (finger.)
--[ 2018.11.20.14.59.23.870.0 ]--
r 33                 if (finger.p)
--[ 2018.11.20.14.59.24.479.0 ]--
r 33                 if (finger.p.)
--[ 2018.11.20.14.59.25.920.0 ]--
r 33                 if (finger.p.x)
--[ 2018.11.20.14.59.26.058.0 ]--
r 33                 if (finger.p.xy)
--[ 2018.11.20.14.59.27.096.0 ]--
r 33                 if (finger.p.xy())
--[ 2018.11.20.14.59.28.567.0 ]--
r 33                 if (finger.p.xy(L))
--[ 2018.11.20.14.59.28.655.0 ]--
r 33                 if (finger.p.xy(LE))
--[ 2018.11.20.14.59.29.684.0 ]--
r 33                 if (finger.p.xy(LEF))
--[ 2018.11.20.14.59.30.316.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.30.361.0 ]--
r 33                 if (finger.p.xy(LEFTRIGHT))
--[ 2018.11.20.14.59.30.374.0 ]--
r 33                 if (finger.p.xy(.LEFTRIGHT))
--[ 2018.11.20.14.59.30.396.0 ]--
r 33                 if (finger.p.xy(Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.30.414.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.32.903.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) )
--[ 2018.11.20.14.59.33.157.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) <)
--[ 2018.11.20.14.59.33.505.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < )
--[ 2018.11.20.14.59.34.051.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < f)
--[ 2018.11.20.14.59.34.132.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fi)
--[ 2018.11.20.14.59.34.395.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fin)
--[ 2018.11.20.14.59.34.633.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.35.208.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing.)
--[ 2018.11.20.14.59.35.776.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.36.055.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finge)
--[ 2018.11.20.14.59.36.249.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.36.653.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger )
--[ 2018.11.20.14.59.37.167.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.37.420.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger.)
--[ 2018.11.20.14.59.38.219.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.38.363.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finge)
--[ 2018.11.20.14.59.38.782.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.38.948.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fin)
--[ 2018.11.20.14.59.39.133.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fi)
--[ 2018.11.20.14.59.39.279.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < f)
--[ 2018.11.20.14.59.39.437.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < )
--[ 2018.11.20.14.59.39.614.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) <)
--[ 2018.11.20.14.59.39.806.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) )
--[ 2018.11.20.14.59.40.213.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.49.017.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT)
--[ 2018.11.20.14.59.49.500.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGH)
--[ 2018.11.20.14.59.49.535.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIG)
--[ 2018.11.20.14.59.49.559.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRI)
--[ 2018.11.20.14.59.49.590.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTR)
--[ 2018.11.20.14.59.49.623.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFT)
--[ 2018.11.20.14.59.49.704.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LE)
--[ 2018.11.20.14.59.49.752.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.L)
--[ 2018.11.20.14.59.49.811.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.)
--[ 2018.11.20.14.59.49.837.0 ]--
r 33                 if (finger.p.xy(Partition.Direction)
--[ 2018.11.20.14.59.49.885.0 ]--
r 33                 if (finger.p.xy(Partition.Directio)
--[ 2018.11.20.14.59.49.913.0 ]--
r 33                 if (finger.p.xy(Partition.Direct)
--[ 2018.11.20.14.59.49.947.0 ]--
r 33                 if (finger.p.xy(Partition.Direc)
--[ 2018.11.20.14.59.49.972.0 ]--
r 33                 if (finger.p.xy(Partition.Dire)
--[ 2018.11.20.14.59.49.997.0 ]--
r 33                 if (finger.p.xy(Partition.Dir)
--[ 2018.11.20.14.59.50.016.0 ]--
r 33                 if (finger.p.xy(Partition.Di)
--[ 2018.11.20.14.59.50.082.0 ]--
r 33                 if (finger.p.xy(Partition.D)
--[ 2018.11.20.14.59.50.110.0 ]--
r 33                 if (finger.p.xy(Partition.)
--[ 2018.11.20.14.59.50.133.0 ]--
r 33                 if (finger.p.xy(Partition)
--[ 2018.11.20.14.59.50.181.0 ]--
r 33                 if (finger.p.xy(Partitio)
--[ 2018.11.20.14.59.50.227.0 ]--
r 33                 if (finger.p.xy(Partiti)
--[ 2018.11.20.14.59.50.258.0 ]--
r 33                 if (finger.p.xy(Partit)
--[ 2018.11.20.14.59.50.283.0 ]--
r 33                 if (finger.p.xy(Parti)
--[ 2018.11.20.14.59.50.306.0 ]--
r 33                 if (finger.p.xy(Part)
--[ 2018.11.20.14.59.50.334.0 ]--
r 33                 if (finger.p.xy(Par)
--[ 2018.11.20.14.59.50.365.0 ]--
r 33                 if (finger.p.xy(Pa)
--[ 2018.11.20.14.59.50.399.0 ]--
r 33                 if (finger.p.xy(P)
--[ 2018.11.20.14.59.50.567.0 ]--
r 33                 if (finger.p.xy()
--[ 2018.11.20.14.59.50.746.0 ]--
r 33                 if (finger.p.xy)
--[ 2018.11.20.14.59.50.978.0 ]--
r 33                 if (finger.p.x)
--[ 2018.11.20.14.59.51.125.0 ]--
r 33                 if (finger.p.)
--[ 2018.11.20.14.59.51.297.0 ]--
r 33                 if (finger.p)
--[ 2018.11.20.14.59.51.486.0 ]--
r 33                 if (finger.)
--[ 2018.11.20.14.59.51.763.0 ]--
r 33                 if (finger)
--[ 2018.11.20.14.59.51.922.0 ]--
r 33                 if (finge)
--[ 2018.11.20.14.59.52.109.0 ]--
r 33                 if (fing)
--[ 2018.11.20.14.59.52.368.0 ]--
r 33                 if (fin)
--[ 2018.11.20.14.59.54.743.0 ]--
r 33                 if (fi)
--[ 2018.11.20.14.59.54.976.0 ]--
r 33                 if (f)
--[ 2018.11.20.14.59.55.392.0 ]--
r 33                 if ()
--[ 2018.11.20.15.00.19.122.0 ]--
r 33                 if (p)
--[ 2018.11.20.15.00.19.429.0 ]--
r 33                 if (p.)
--[ 2018.11.20.15.00.20.302.0 ]--
r 33                 if (p.x)
--[ 2018.11.20.15.00.20.750.0 ]--
r 33                 if (p.)
--[ 2018.11.20.15.00.20.811.0 ]--
r 33                 if (p)
--[ 2018.11.20.15.00.20.994.0 ]--
r 33                 if ()
--[ 2018.11.20.15.00.39.803.0 ]--
+ 33 
+ 34 }
--[ 2018.11.20.15.00.39.822.0 ]--
r 34             }
--[ 2018.11.20.15.00.39.863.0 ]--
r 33                 
--[ 2018.11.20.15.00.41.367.0 ]--
- 33
- 33
--[ 2018.11.20.15.00.44.104.0 ]--
+ 33                 
--[ 2018.11.20.15.01.31.580.0 ]--
r 33                 /
--[ 2018.11.20.15.01.31.688.0 ]--
r 33                 //
--[ 2018.11.20.15.01.31.868.0 ]--
r 33                 //c
--[ 2018.11.20.15.01.31.963.0 ]--
r 33                 //co
--[ 2018.11.20.15.01.32.081.0 ]--
r 33                 //com
--[ 2018.11.20.15.01.32.194.0 ]--
r 33                 //comp
--[ 2018.11.20.15.01.32.308.0 ]--
r 33                 //compa
--[ 2018.11.20.15.01.32.504.0 ]--
r 33                 //compar
--[ 2018.11.20.15.01.32.722.0 ]--
r 33                 //compari
--[ 2018.11.20.15.01.32.857.0 ]--
r 33                 //comparin
--[ 2018.11.20.15.01.32.983.0 ]--
r 33                 //comparing
--[ 2018.11.20.15.01.33.051.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.33.221.0 ]--
r 33                 //comparing e
--[ 2018.11.20.15.01.33.495.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.33.880.0 ]--
r 33                 //comparing X
--[ 2018.11.20.15.01.34.151.0 ]--
r 33                 //comparing X'
--[ 2018.11.20.15.01.34.244.0 ]--
r 33                 //comparing X's
--[ 2018.11.20.15.01.34.467.0 ]--
+ 34                 
--[ 2018.11.20.15.01.35.210.0 ]--
- 34
--[ 2018.11.20.15.01.35.310.0 ]--
r 33                 //comparing X'
--[ 2018.11.20.15.01.35.432.0 ]--
r 33                 //comparing X
--[ 2018.11.20.15.01.35.776.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.35.927.0 ]--
r 33                 //comparing s
--[ 2018.11.20.15.01.36.216.0 ]--
r 33                 //comparing s'
--[ 2018.11.20.15.01.36.600.0 ]--
r 33                 //comparing s's
--[ 2018.11.20.15.01.36.892.0 ]--
r 33                 //comparing s'
--[ 2018.11.20.15.01.37.019.0 ]--
r 33                 //comparing s
--[ 2018.11.20.15.01.37.158.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.37.354.0 ]--
r 33                 //comparing x
--[ 2018.11.20.15.01.37.508.0 ]--
r 33                 //comparing x'
--[ 2018.11.20.15.01.37.571.0 ]--
r 33                 //comparing x's
--[ 2018.11.20.15.01.37.698.0 ]--
+ 34                 
--[ 2018.11.20.15.02.04.715.0 ]--
r 34                 n
--[ 2018.11.20.15.02.04.808.0 ]--
r 34                 ne
--[ 2018.11.20.15.02.04.888.0 ]--
r 34                 new
--[ 2018.11.20.15.02.12.265.0 ]--
r 34                 ne
--[ 2018.11.20.15.02.12.472.0 ]--
r 34                 n
--[ 2018.11.20.15.02.12.748.0 ]--
r 34                 
--[ 2018.11.20.15.02.42.936.0 ]--
r 34                 f
--[ 2018.11.20.15.02.43.003.0 ]--
r 34                 fi
--[ 2018.11.20.15.02.43.127.0 ]--
r 34                 fin
--[ 2018.11.20.15.02.43.273.0 ]--
r 34                 fing
--[ 2018.11.20.15.02.43.496.0 ]--
r 34                 finge
--[ 2018.11.20.15.02.43.620.0 ]--
r 34                 finger
--[ 2018.11.20.15.02.43.702.0 ]--
r 34                 finger.
--[ 2018.11.20.15.02.45.002.0 ]--
r 34                 finger
--[ 2018.11.20.15.02.45.118.0 ]--
r 34                 finge
--[ 2018.11.20.15.02.45.321.0 ]--
r 34                 fing
--[ 2018.11.20.15.02.46.916.0 ]--
r 34                 fin
--[ 2018.11.20.15.02.47.084.0 ]--
r 34                 fi
--[ 2018.11.20.15.02.47.234.0 ]--
r 34                 f
--[ 2018.11.20.15.02.47.417.0 ]--
r 34                 
--[ 2018.11.20.15.03.02.385.0 ]--
r 35                 if (n)
--[ 2018.11.20.15.03.02.563.0 ]--
r 35                 if (ne)
--[ 2018.11.20.15.03.02.640.0 ]--
r 35                 if (new)
--[ 2018.11.20.15.03.03.785.0 ]--
r 35                 if (new )
--[ 2018.11.20.15.03.04.451.0 ]--
r 35                 if (new)
--[ 2018.11.20.15.03.04.962.0 ]--
r 35                 if (newN)
--[ 2018.11.20.15.03.05.404.0 ]--
r 35                 if (newNode)
--[ 2018.11.20.15.03.06.197.0 ]--
r 35                 if (newNode.)
--[ 2018.11.20.15.03.06.662.0 ]--
r 35                 if (newNode.p)
--[ 2018.11.20.15.03.07.348.0 ]--
r 35                 if (newNode.p.)
--[ 2018.11.20.15.03.08.801.0 ]--
r 35                 if (newNode.p.x)
--[ 2018.11.20.15.03.10.111.0 ]--
r 35                 if (newNode.p.xy)
--[ 2018.11.20.15.03.10.128.0 ]--
r 35                 if (newNode.p.xy())
--[ 2018.11.20.15.03.12.812.0 ]--
r 35                 if (newNode.p.xy(f))
--[ 2018.11.20.15.03.13.052.0 ]--
r 35                 if (newNode.p.xy(fi))
--[ 2018.11.20.15.03.13.112.0 ]--
r 35                 if (newNode.p.xy(fin))
--[ 2018.11.20.15.03.13.213.0 ]--
r 35                 if (newNode.p.xy(fing))
--[ 2018.11.20.15.03.13.430.0 ]--
r 35                 if (newNode.p.xy(finge))
--[ 2018.11.20.15.03.13.478.0 ]--
r 35                 if (newNode.p.xy(finger))
--[ 2018.11.20.15.03.14.296.0 ]--
r 35                 if (newNode.p.xy(finger.))
--[ 2018.11.20.15.03.14.909.0 ]--
r 35                 if (newNode.p.xy(finger.d))
--[ 2018.11.20.15.03.15.439.0 ]--
r 35                 if (newNode.p.xy(finger.dir))
--[ 2018.11.20.15.03.17.651.0 ]--
r 35                 if (newNode.p.xy(finger.dir)
--[ 2018.11.20.15.03.19.255.0 ]--
r 35                 if (newNode.p.xy(finger.dir))
--[ 2018.11.20.15.03.47.050.0 ]--
r 35                 if (newNode.p.xy(finger.dir)) 
--[ 2018.11.20.15.03.49.646.0 ]--
r 35                 if (newNode.p.xy(finger.dir)) {
--[ 2018.11.20.15.03.51.433.0 ]--
r 35                 if (newNode.p.xy(finger.dir)){
--[ 2018.11.20.15.07.14.367.0 ]--
r 35                 if (newNode.p.xy(finger.dir) ){
--[ 2018.11.20.15.07.29.762.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >){
--[ 2018.11.20.15.07.32.706.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ){
--[ 2018.11.20.15.07.40.235.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > r){
--[ 2018.11.20.15.07.40.672.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ro){
--[ 2018.11.20.15.07.40.830.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > roo){
--[ 2018.11.20.15.07.41.006.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > root){
--[ 2018.11.20.15.07.41.702.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > roo){
--[ 2018.11.20.15.07.41.861.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ro){
--[ 2018.11.20.15.07.41.994.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > r){
--[ 2018.11.20.15.07.42.155.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ){
--[ 2018.11.20.15.07.42.939.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > f){
--[ 2018.11.20.15.07.43.066.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fi){
--[ 2018.11.20.15.07.43.237.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fin){
--[ 2018.11.20.15.07.44.053.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fing){
--[ 2018.11.20.15.07.44.219.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finge){
--[ 2018.11.20.15.07.44.322.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finger){
--[ 2018.11.20.15.07.45.175.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finger.){
--[ 2018.11.20.15.07.49.434.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.){
--[ 2018.11.20.15.07.52.162.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.d){
--[ 2018.11.20.15.07.52.318.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.di){
--[ 2018.11.20.15.07.52.416.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.dir){
--[ 2018.11.20.15.07.52.974.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.di){
--[ 2018.11.20.15.07.53.164.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.d){
--[ 2018.11.20.15.07.53.332.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.){
--[ 2018.11.20.15.07.54.864.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p){
--[ 2018.11.20.15.07.55.259.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.){
--[ 2018.11.20.15.07.56.881.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy){
--[ 2018.11.20.15.07.56.894.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy()){
--[ 2018.11.20.15.07.58.658.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(f)){
--[ 2018.11.20.15.07.58.881.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fi)){
--[ 2018.11.20.15.07.58.939.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fin)){
--[ 2018.11.20.15.07.59.006.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fing)){
--[ 2018.11.20.15.07.59.247.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finge)){
--[ 2018.11.20.15.07.59.297.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger)){
--[ 2018.11.20.15.07.59.536.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger,)){
--[ 2018.11.20.15.08.00.675.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger)){
--[ 2018.11.20.15.08.00.983.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.)){
--[ 2018.11.20.15.08.01.283.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.d)){
--[ 2018.11.20.15.08.01.466.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.di)){
--[ 2018.11.20.15.08.01.568.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.dir)){
--[ 2018.11.20.15.08.04.477.0 ]--
+ 36 
+ 37 }
--[ 2018.11.20.15.08.04.507.0 ]--
r 37                 }
--[ 2018.11.20.15.08.04.535.0 ]--
r 36                     
--[ 2018.11.20.15.08.41.222.0 ]--
r 34                 f
--[ 2018.11.20.15.08.41.317.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.41.502.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.41.885.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.41.987.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.42.081.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.42.721.0 ]--
r 34                 fingerD
--[ 2018.11.20.15.08.42.907.0 ]--
r 34                 fingerDi
--[ 2018.11.20.15.08.42.970.0 ]--
r 34                 fingerDir
--[ 2018.11.20.15.08.44.592.0 ]--
r 34                 fingerDi
--[ 2018.11.20.15.08.44.756.0 ]--
r 34                 fingerD
--[ 2018.11.20.15.08.44.917.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.45.066.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.45.235.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.45.432.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.45.564.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.45.721.0 ]--
r 34                 f
--[ 2018.11.20.15.08.46.130.0 ]--
r 34                 
--[ 2018.11.20.15.08.51.207.0 ]--
r 34                 F
--[ 2018.11.20.15.08.51.354.0 ]--
r 34                 Fi
--[ 2018.11.20.15.08.51.549.0 ]--
r 34                 Fin
--[ 2018.11.20.15.08.51.607.0 ]--
r 34                 Fing
--[ 2018.11.20.15.08.51.742.0 ]--
r 34                 Finge
--[ 2018.11.20.15.08.51.824.0 ]--
r 34                 Finger
--[ 2018.11.20.15.08.52.598.0 ]--
r 34                 Finge
--[ 2018.11.20.15.08.52.777.0 ]--
r 34                 Fing
--[ 2018.11.20.15.08.52.916.0 ]--
r 34                 Fin
--[ 2018.11.20.15.08.53.073.0 ]--
r 34                 Fi
--[ 2018.11.20.15.08.53.148.0 ]--
r 34                 F
--[ 2018.11.20.15.08.53.487.0 ]--
r 34                 
--[ 2018.11.20.15.08.53.874.0 ]--
r 34                 f
--[ 2018.11.20.15.08.54.015.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.54.121.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.54.220.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.54.371.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.54.476.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.55.121.0 ]--
r 34                 fingerv
--[ 2018.11.20.15.08.55.381.0 ]--
r 34                 fingerva
--[ 2018.11.20.15.08.55.480.0 ]--
r 34                 fingerval
--[ 2018.11.20.15.08.56.008.0 ]--
r 34                 fingervalu
--[ 2018.11.20.15.08.56.147.0 ]--
r 34                 fingervalue
--[ 2018.11.20.15.09.00.067.0 ]--
r 34                 ifingervalue
--[ 2018.11.20.15.09.00.195.0 ]--
r 34                 infingervalue
--[ 2018.11.20.15.09.00.270.0 ]--
r 34                 intfingervalue
--[ 2018.11.20.15.09.00.510.0 ]--
r 34                 int fingervalue
--[ 2018.11.20.15.09.02.190.0 ]--
r 34                 intfingervalue
--[ 2018.11.20.15.09.02.398.0 ]--
r 34                 infingervalue
--[ 2018.11.20.15.09.02.692.0 ]--
r 34                 ifingervalue
--[ 2018.11.20.15.09.03.263.0 ]--
r 34                 fingervalue
--[ 2018.11.20.15.09.07.204.0 ]--
r 34                 dfingervalue
--[ 2018.11.20.15.09.07.340.0 ]--
r 34                 dofingervalue
--[ 2018.11.20.15.09.07.425.0 ]--
r 34                 doufingervalue
--[ 2018.11.20.15.09.07.792.0 ]--
r 34                 doubfingervalue
--[ 2018.11.20.15.09.07.994.0 ]--
r 34                 doublfingervalue
--[ 2018.11.20.15.09.08.213.0 ]--
r 34                 doublefingervalue
--[ 2018.11.20.15.09.08.294.0 ]--
r 34                 double fingervalue
--[ 2018.11.20.15.09.11.206.0 ]--
r 34                 double fingervalue 
--[ 2018.11.20.15.09.11.873.0 ]--
r 34                 double fingervalue =
--[ 2018.11.20.15.09.11.955.0 ]--
r 34                 double fingervalue = 
--[ 2018.11.20.15.09.12.807.0 ]--
r 34                 double fingervalue = f
--[ 2018.11.20.15.09.12.921.0 ]--
r 34                 double fingervalue = fi
--[ 2018.11.20.15.09.13.104.0 ]--
r 34                 double fingervalue = fin
--[ 2018.11.20.15.09.13.140.0 ]--
r 34                 double fingervalue = fing
--[ 2018.11.20.15.09.13.293.0 ]--
r 34                 double fingervalue = finge
--[ 2018.11.20.15.09.13.396.0 ]--
r 34                 double fingervalue = finger
--[ 2018.11.20.15.09.13.580.0 ]--
r 34                 double fingervalue = finger,
--[ 2018.11.20.15.09.14.722.0 ]--
r 34                 .double fingervalue = finger,
--[ 2018.11.20.15.09.15.471.0 ]--
r 34                 double fingervalue = finger,
--[ 2018.11.20.15.09.17.096.0 ]--
r 34                 double fingervalue = finger
--[ 2018.11.20.15.09.17.482.0 ]--
r 34                 double fingervalue = finger.
--[ 2018.11.20.15.09.17.892.0 ]--
r 34                 double fingervalue = finger.p
--[ 2018.11.20.15.09.18.198.0 ]--
r 34                 double fingervalue = finger.p.
--[ 2018.11.20.15.09.19.320.0 ]--
r 34                 double fingervalue = finger.p.x
--[ 2018.11.20.15.09.19.335.0 ]--
r 34                 double fingervalue = finger.p.x()
--[ 2018.11.20.15.09.19.885.0 ]--
r 34                 double fingervalue = finger.p.x(
--[ 2018.11.20.15.09.20.086.0 ]--
r 34                 double fingervalue = finger.p.x
--[ 2018.11.20.15.09.20.644.0 ]--
r 34                 double fingervalue = finger.p.xy
--[ 2018.11.20.15.09.21.391.0 ]--
r 34                 double fingervalue = finger.p.xy()
--[ 2018.11.20.15.09.24.363.0 ]--
r 34                 double fingervalue = finger.p.xy(d)
--[ 2018.11.20.15.09.24.718.0 ]--
r 34                 double fingervalue = finger.p.xy()
--[ 2018.11.20.15.09.25.596.0 ]--
r 34                 double fingervalue = finger.p.xy(f)
--[ 2018.11.20.15.09.25.675.0 ]--
r 34                 double fingervalue = finger.p.xy(fi)
--[ 2018.11.20.15.09.25.773.0 ]--
r 34                 double fingervalue = finger.p.xy(fin)
--[ 2018.11.20.15.09.26.018.0 ]--
r 34                 double fingervalue = finger.p.xy(fine)
--[ 2018.11.20.15.09.26.339.0 ]--
r 34                 double fingervalue = finger.p.xy(fin)
--[ 2018.11.20.15.09.26.465.0 ]--
r 34                 double fingervalue = finger.p.xy(fing)
--[ 2018.11.20.15.09.26.649.0 ]--
r 34                 double fingervalue = finger.p.xy(finge)
--[ 2018.11.20.15.09.26.751.0 ]--
r 34                 double fingervalue = finger.p.xy(finger)
--[ 2018.11.20.15.09.27.966.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.)
--[ 2018.11.20.15.09.28.552.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.d)
--[ 2018.11.20.15.09.28.683.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.di)
--[ 2018.11.20.15.09.28.844.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir)
--[ 2018.11.20.15.09.30.121.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir())
--[ 2018.11.20.15.09.31.002.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir()
--[ 2018.11.20.15.09.31.168.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir)
--[ 2018.11.20.15.09.32.949.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.38.375.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= g){
--[ 2018.11.20.15.09.38.532.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gi){
--[ 2018.11.20.15.09.38.623.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gin){
--[ 2018.11.20.15.09.38.962.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gi){
--[ 2018.11.20.15.09.39.089.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= g){
--[ 2018.11.20.15.09.39.262.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= ){
--[ 2018.11.20.15.09.39.564.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= f){
--[ 2018.11.20.15.09.39.816.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fi){
--[ 2018.11.20.15.09.39.903.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fin){
--[ 2018.11.20.15.09.40.029.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fing){
--[ 2018.11.20.15.09.40.197.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finge){
--[ 2018.11.20.15.09.40.280.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger){
--[ 2018.11.20.15.09.41.884.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingerv){
--[ 2018.11.20.15.09.42.603.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingervalue){
--[ 2018.11.20.15.09.49.480.0 ]--
r 34                 double fingeralue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.49.834.0 ]--
r 34                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.53.444.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingeralue){
--[ 2018.11.20.15.09.53.781.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingerValue){
--[ 2018.11.20.15.10.09.455.0 ]--
+ 34                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.11.735.0 ]--
r 35                 double fingeValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.11.938.0 ]--
r 35                 double fingValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.109.0 ]--
r 35                 double finValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.267.0 ]--
r 35                 double fiValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.373.0 ]--
r 35                 double fValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.211.0 ]--
r 35                 double Value = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.669.0 ]--
r 35                 double nValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.959.0 ]--
r 35                 double neValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.054.0 ]--
r 35                 double newValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.406.0 ]--
r 35                 double newNValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.625.0 ]--
r 35                 double newNoValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.993.0 ]--
r 35                 double newNodValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.15.069.0 ]--
r 35                 double newNodeValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.361.0 ]--
r 35                 double newNodeValue = n.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.472.0 ]--
r 35                 double newNodeValue = ne.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.541.0 ]--
r 35                 double newNodeValue = new.p.xy(finger.dir);
--[ 2018.11.20.15.10.44.277.0 ]--
r 35                 double newNodeValue = newN.p.xy(finger.dir);
--[ 2018.11.20.15.10.44.757.0 ]--
r 35                 double newNodeValue = newNo.p.xy(finger.dir);
--[ 2018.11.20.15.10.45.256.0 ]--
r 35                 double newNodeValue = newNod.p.xy(finger.dir);
--[ 2018.11.20.15.10.45.334.0 ]--
r 35                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.10.46.743.0 ]--
r 35                 double newNodeValue = newNodeV.p.xy(finger.dir);
--[ 2018.11.20.15.10.47.044.0 ]--
r 35                 double newNodeValue = newNodeVa.p.xy(finger.dir);
--[ 2018.11.20.15.10.47.749.0 ]--
r 35                 double newNodeValue = newNodeV.p.xy(finger.dir);
--[ 2018.11.20.15.10.48.170.0 ]--
r 35                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.11.02.881.0 ]--
r 36                 if (n >= fingerValue){
--[ 2018.11.20.15.11.02.980.0 ]--
r 36                 if (ne >= fingerValue){
--[ 2018.11.20.15.11.03.133.0 ]--
r 36                 if (new >= fingerValue){
--[ 2018.11.20.15.11.04.840.0 ]--
r 36                 if (newNodeValue >= fingerValue){
--[ 2018.11.20.15.11.46.599.0 ]--
r 70 //
--[ 2018.11.20.15.12.14.640.0 ]--
r 36                 if (newNodeValue = fingerValue){
--[ 2018.11.20.15.12.15.317.0 ]--
r 36                 if (newNodeValue  fingerValue){
--[ 2018.11.20.15.12.15.748.0 ]--
r 36                 if (newNodeValue < fingerValue){
--[ 2018.11.20.15.12.21.614.0 ]--
r 37                     i
--[ 2018.11.20.15.12.21.744.0 ]--
r 37                     if
--[ 2018.11.20.15.12.21.900.0 ]--
r 37                     if 
--[ 2018.11.20.15.12.22.437.0 ]--
r 37                     if ()
--[ 2018.11.20.15.12.23.743.0 ]--
r 37                     if (i)
--[ 2018.11.20.15.12.23.868.0 ]--
r 37                     if (if)
--[ 2018.11.20.15.12.24.055.0 ]--
r 37                     if (i)
--[ 2018.11.20.15.12.24.164.0 ]--
r 37                     if ()
--[ 2018.11.20.15.12.24.288.0 ]--
r 37                     if (f)
--[ 2018.11.20.15.12.24.413.0 ]--
r 37                     if (fi)
--[ 2018.11.20.15.12.24.645.0 ]--
r 37                     if (fin)
--[ 2018.11.20.15.12.24.754.0 ]--
r 37                     if (fing)
--[ 2018.11.20.15.12.25.160.0 ]--
r 37                     if (fing.)
--[ 2018.11.20.15.12.25.892.0 ]--
r 37                     if (fing)
--[ 2018.11.20.15.12.26.061.0 ]--
r 37                     if (finge)
--[ 2018.11.20.15.12.26.186.0 ]--
r 37                     if (finger)
--[ 2018.11.20.15.12.27.221.0 ]--
r 37                     if (finger.)
--[ 2018.11.20.15.12.27.437.0 ]--
r 37                     if (finger.l)
--[ 2018.11.20.15.12.27.598.0 ]--
r 37                     if (finger.lf)
--[ 2018.11.20.15.12.28.105.0 ]--
r 37                     if (finger.l)
--[ 2018.11.20.15.12.28.469.0 ]--
r 37                     if (finger.le)
--[ 2018.11.20.15.12.28.699.0 ]--
r 37                     if (finger.lef)
--[ 2018.11.20.15.12.28.881.0 ]--
r 37                     if (finger.left)
--[ 2018.11.20.15.12.30.012.0 ]--
r 37                     if (finger.left )
--[ 2018.11.20.15.12.30.200.0 ]--
r 37                     if (finger.left !)
--[ 2018.11.20.15.12.30.436.0 ]--
r 37                     if (finger.left !=)
--[ 2018.11.20.15.12.30.662.0 ]--
r 37                     if (finger.left != )
--[ 2018.11.20.15.12.30.855.0 ]--
r 37                     if (finger.left != n)
--[ 2018.11.20.15.12.31.089.0 ]--
r 37                     if (finger.left != nu)
--[ 2018.11.20.15.12.31.324.0 ]--
r 37                     if (finger.left != nul)
--[ 2018.11.20.15.12.31.442.0 ]--
r 37                     if (finger.left != null)
--[ 2018.11.20.15.12.32.504.0 ]--
r 37                     if (finger.left != null){
--[ 2018.11.20.15.12.32.771.0 ]--
+ 38 
+ 39 }
--[ 2018.11.20.15.12.32.786.0 ]--
r 39                     }
--[ 2018.11.20.15.12.32.817.0 ]--
r 38                         
--[ 2018.11.20.15.12.34.266.0 ]--
r 38                         f
--[ 2018.11.20.15.12.34.391.0 ]--
r 38                         fi
--[ 2018.11.20.15.12.34.703.0 ]--
r 38                         fin
--[ 2018.11.20.15.12.34.875.0 ]--
r 38                         fing
--[ 2018.11.20.15.12.35.328.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.35.438.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.35.556.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.35.806.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.35.946.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.36.040.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.36.290.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.37.057.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.37.197.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.37.343.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.37.489.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.37.630.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.37.755.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.38.976.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.39.132.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.39.364.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.39.486.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.39.580.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.39.767.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.39.908.0 ]--
r 38                         finger.left 
--[ 2018.11.20.15.12.40.389.0 ]--
r 38                         finger.left =
--[ 2018.11.20.15.12.40.524.0 ]--
r 38                         finger.left = 
--[ 2018.11.20.15.12.42.355.0 ]--
r 38                         finger.left = n
--[ 2018.11.20.15.12.43.104.0 ]--
r 38                         finger.left = ne
--[ 2018.11.20.15.12.43.474.0 ]--
r 38                         finger.left = new
--[ 2018.11.20.15.12.45.752.0 ]--
r 38                         finger.left = ne
--[ 2018.11.20.15.12.46.272.0 ]--
r 38                         finger.left = n
--[ 2018.11.20.15.12.46.287.0 ]--
r 38                         finger.left = 
--[ 2018.11.20.15.12.46.334.0 ]--
r 38                         finger.left =
--[ 2018.11.20.15.12.46.350.0 ]--
r 38                         finger.left 
--[ 2018.11.20.15.12.46.397.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.46.429.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.46.473.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.46.488.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.46.520.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.46.567.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.46.613.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.46.629.0 ]--
r 38                         fing
--[ 2018.11.20.15.12.46.676.0 ]--
r 38                         fin
--[ 2018.11.20.15.12.46.691.0 ]--
r 38                         fi
--[ 2018.11.20.15.12.46.739.0 ]--
r 38                         f
--[ 2018.11.20.15.12.46.785.0 ]--
r 38                         
--[ 2018.11.20.15.12.46.816.0 ]--
- 38
--[ 2018.11.20.15.12.47.727.0 ]--
+ 38 
+ 39 }
--[ 2018.11.20.15.12.47.743.0 ]--
r 39                     }
--[ 2018.11.20.15.12.47.764.0 ]--
r 38                         
--[ 2018.11.20.15.12.48.295.0 ]--
r 38                         n
--[ 2018.11.20.15.12.48.373.0 ]--
r 38                         ne
--[ 2018.11.20.15.12.48.482.0 ]--
r 38                         new
--[ 2018.11.20.15.12.49.217.0 ]--
r 38                         newN
--[ 2018.11.20.15.12.49.357.0 ]--
r 38                         newNo
--[ 2018.11.20.15.12.49.571.0 ]--
r 38                         newNod
--[ 2018.11.20.15.12.49.763.0 ]--
r 38                         newNode
--[ 2018.11.20.15.12.49.935.0 ]--
r 38                         newNode 
--[ 2018.11.20.15.12.50.644.0 ]--
r 38                         newNode =
--[ 2018.11.20.15.12.50.800.0 ]--
r 38                         newNode = 
--[ 2018.11.20.15.12.50.929.0 ]--
r 38                         newNode = f
--[ 2018.11.20.15.12.50.999.0 ]--
r 38                         newNode = fi
--[ 2018.11.20.15.12.51.171.0 ]--
r 38                         newNode = fil
--[ 2018.11.20.15.12.51.449.0 ]--
r 38                         newNode = fi
--[ 2018.11.20.15.12.51.622.0 ]--
r 38                         newNode = fin
--[ 2018.11.20.15.12.51.739.0 ]--
r 38                         newNode = fing
--[ 2018.11.20.15.12.51.847.0 ]--
r 38                         newNode = finge
--[ 2018.11.20.15.12.51.918.0 ]--
r 38                         newNode = finger
--[ 2018.11.20.15.12.52.200.0 ]--
r 38                         newNode = finger.
--[ 2018.11.20.15.12.52.523.0 ]--
r 38                         newNode = finger.l
--[ 2018.11.20.15.12.52.654.0 ]--
r 38                         newNode = finger.le
--[ 2018.11.20.15.12.52.758.0 ]--
r 38                         newNode = finger.lef
--[ 2018.11.20.15.12.52.899.0 ]--
r 38                         newNode = finger.left
--[ 2018.11.20.15.12.53.726.0 ]--
r 38                         newNode = finger.left;
--[ 2018.11.20.15.12.56.845.0 ]--
+ 40                     
--[ 2018.11.20.15.13.01.598.0 ]--
r 40                     e
--[ 2018.11.20.15.13.01.692.0 ]--
r 40                     el
--[ 2018.11.20.15.13.01.895.0 ]--
r 40                     ele
--[ 2018.11.20.15.13.01.926.0 ]--
r 40                     ele 
--[ 2018.11.20.15.13.02.498.0 ]--
r 40                     ele
--[ 2018.11.20.15.13.02.639.0 ]--
r 40                     el
--[ 2018.11.20.15.13.02.795.0 ]--
r 40                     els
--[ 2018.11.20.15.13.02.842.0 ]--
r 40                     else
--[ 2018.11.20.15.13.02.999.0 ]--
r 40                     else 
--[ 2018.11.20.15.13.03.389.0 ]--
r 40                     else {
--[ 2018.11.20.15.13.03.540.0 ]--
+ 41 
+ 42 }
--[ 2018.11.20.15.13.03.555.0 ]--
r 42                     }
--[ 2018.11.20.15.13.03.571.0 ]--
r 41                         
--[ 2018.11.20.15.13.05.783.0 ]--
r 41                         n
--[ 2018.11.20.15.13.05.908.0 ]--
r 41                         ne
--[ 2018.11.20.15.13.05.970.0 ]--
r 41                         new
--[ 2018.11.20.15.13.07.486.0 ]--
r 41                         ne
--[ 2018.11.20.15.13.07.667.0 ]--
r 41                         n
--[ 2018.11.20.15.13.08.077.0 ]--
r 41                         
--[ 2018.11.20.15.13.16.106.0 ]--
r 37                     if (finger.left = null){
--[ 2018.11.20.15.13.16.340.0 ]--
r 37                     if (finger.left == null){
--[ 2018.11.20.15.13.27.864.0 ]--
r 41                         f
--[ 2018.11.20.15.13.28.002.0 ]--
r 41                         fi
--[ 2018.11.20.15.13.28.093.0 ]--
r 41                         fin
--[ 2018.11.20.15.13.28.224.0 ]--
r 41                         fing
--[ 2018.11.20.15.13.28.621.0 ]--
r 41                         finge
--[ 2018.11.20.15.13.28.742.0 ]--
r 41                         finger
--[ 2018.11.20.15.13.28.850.0 ]--
r 41                         finger 
--[ 2018.11.20.15.13.29.197.0 ]--
r 41                         finger =
--[ 2018.11.20.15.13.29.303.0 ]--
r 41                         finger = 
--[ 2018.11.20.15.13.29.371.0 ]--
r 41                         finger = f
--[ 2018.11.20.15.13.29.489.0 ]--
r 41                         finger = fi
--[ 2018.11.20.15.13.29.581.0 ]--
r 41                         finger = fin
--[ 2018.11.20.15.13.29.715.0 ]--
r 41                         finger = fing
--[ 2018.11.20.15.13.29.846.0 ]--
r 41                         finger = finge
--[ 2018.11.20.15.13.29.923.0 ]--
r 41                         finger = finger
--[ 2018.11.20.15.13.30.017.0 ]--
r 41                         finger = finger.
--[ 2018.11.20.15.13.30.214.0 ]--
r 41                         finger = finger.l
--[ 2018.11.20.15.13.30.333.0 ]--
r 41                         finger = finger.le
--[ 2018.11.20.15.13.31.046.0 ]--
r 41                         finger = finger.lef
--[ 2018.11.20.15.13.31.233.0 ]--
r 41                         finger = finger.left
--[ 2018.11.20.15.13.31.637.0 ]--
r 41                         finger = finger.left;
--[ 2018.11.20.15.13.34.472.0 ]--
+ 39                         
--[ 2018.11.20.15.13.34.728.0 ]--
r 39                         b
--[ 2018.11.20.15.13.34.847.0 ]--
r 39                         br
--[ 2018.11.20.15.13.34.903.0 ]--
r 39                         bre
--[ 2018.11.20.15.13.35.077.0 ]--
r 39                         brea
--[ 2018.11.20.15.13.35.163.0 ]--
r 39                         break
--[ 2018.11.20.15.13.35.361.0 ]--
r 39                         break;
--[ 2018.11.20.15.13.35.828.0 ]--
r 39                         break; 
--[ 2018.11.20.15.13.36.149.0 ]--
r 39                         break; /
--[ 2018.11.20.15.13.36.265.0 ]--
r 39                         break; //
--[ 2018.11.20.15.13.36.479.0 ]--
r 39                         break; //b
--[ 2018.11.20.15.13.36.557.0 ]--
r 39                         break; //ba
--[ 2018.11.20.15.13.37.428.0 ]--
r 39                         break; //bab
--[ 2018.11.20.15.13.37.616.0 ]--
r 39                         break; //baby
--[ 2018.11.20.15.13.44.810.0 ]--
r 44                 }
--[ 2018.11.20.15.13.48.224.0 ]--
+ 45                 
--[ 2018.11.20.15.13.48.947.0 ]--
r 45                 e
--[ 2018.11.20.15.13.49.061.0 ]--
r 45                 el
--[ 2018.11.20.15.13.49.141.0 ]--
r 45                 els
--[ 2018.11.20.15.13.49.248.0 ]--
r 45                 else
--[ 2018.11.20.15.13.49.856.0 ]--
r 45                 else 
--[ 2018.11.20.15.13.50.148.0 ]--
r 45                 else {
--[ 2018.11.20.15.13.50.282.0 ]--
r 45                 else { 
--[ 2018.11.20.15.13.51.758.0 ]--
r 45                 else { /
--[ 2018.11.20.15.13.51.882.0 ]--
r 45                 else { //
--[ 2018.11.20.15.13.52.105.0 ]--
r 45                 else { //g
--[ 2018.11.20.15.13.52.187.0 ]--
r 45                 else { //go
--[ 2018.11.20.15.13.52.323.0 ]--
r 45                 else { //go 
--[ 2018.11.20.15.13.52.510.0 ]--
r 45                 else { //go d
--[ 2018.11.20.15.13.52.590.0 ]--
r 45                 else { //go do
--[ 2018.11.20.15.13.52.717.0 ]--
r 45                 else { //go dow
--[ 2018.11.20.15.13.52.797.0 ]--
r 45                 else { //go down
--[ 2018.11.20.15.13.52.892.0 ]--
r 45                 else { //go down 
--[ 2018.11.20.15.13.52.991.0 ]--
r 45                 else { //go down t
--[ 2018.11.20.15.13.53.065.0 ]--
r 45                 else { //go down th
--[ 2018.11.20.15.13.53.148.0 ]--
r 45                 else { //go down the
--[ 2018.11.20.15.13.53.216.0 ]--
r 45                 else { //go down the 
--[ 2018.11.20.15.13.53.347.0 ]--
r 45                 else { //go down the g
--[ 2018.11.20.15.13.53.423.0 ]--
r 45                 else { //go down the gi
--[ 2018.11.20.15.13.53.784.0 ]--
r 45                 else { //go down the g
--[ 2018.11.20.15.13.53.883.0 ]--
r 45                 else { //go down the 
--[ 2018.11.20.15.13.54.009.0 ]--
r 45                 else { //go down the r
--[ 2018.11.20.15.13.54.071.0 ]--
r 45                 else { //go down the ri
--[ 2018.11.20.15.13.54.215.0 ]--
r 45                 else { //go down the rig
--[ 2018.11.20.15.13.54.292.0 ]--
r 45                 else { //go down the righ
--[ 2018.11.20.15.13.54.371.0 ]--
r 45                 else { //go down the right
--[ 2018.11.20.15.13.57.620.0 ]--
r 36                 if (newNodeValue < fingerValue){ 
--[ 2018.11.20.15.13.57.922.0 ]--
r 36                 if (newNodeValue < fingerValue){ /
--[ 2018.11.20.15.13.58.033.0 ]--
r 36                 if (newNodeValue < fingerValue){ //
--[ 2018.11.20.15.13.58.280.0 ]--
r 36                 if (newNodeValue < fingerValue){ //g
--[ 2018.11.20.15.13.58.637.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go
--[ 2018.11.20.15.13.58.757.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go 
--[ 2018.11.20.15.13.58.819.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go d
--[ 2018.11.20.15.13.59.621.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go do
--[ 2018.11.20.15.13.59.734.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go dow
--[ 2018.11.20.15.13.59.795.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down
--[ 2018.11.20.15.13.59.929.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down 
--[ 2018.11.20.15.14.00.006.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down t
--[ 2018.11.20.15.14.00.090.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down th
--[ 2018.11.20.15.14.00.176.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the
--[ 2018.11.20.15.14.00.289.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the 
--[ 2018.11.20.15.14.00.374.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the l
--[ 2018.11.20.15.14.00.769.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the le
--[ 2018.11.20.15.14.00.926.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the lef
--[ 2018.11.20.15.14.01.112.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the left
--[ 2018.11.20.15.14.04.955.0 ]--
+ 46                     
--[ 2018.11.20.15.14.15.573.0 ]--
+ 46                                        if (finger.left == null){
+ 47                         newNode = finger.left;
+ 48                         break; //baby
+ 49                     }
+ 50                     else {
+ 51                         finger = finger.left;
r 52                     } 
--[ 2018.11.20.15.14.15.635.0 ]--
r 46                     if (finger.left == null){
--[ 2018.11.20.15.14.18.481.0 ]--
r 46                     if (finger.r == null){
--[ 2018.11.20.15.14.18.599.0 ]--
r 46                     if (finger.ri == null){
--[ 2018.11.20.15.14.18.798.0 ]--
r 46                     if (finger.rig == null){
--[ 2018.11.20.15.14.18.847.0 ]--
r 46                     if (finger.righ == null){
--[ 2018.11.20.15.14.19.034.0 ]--
r 46                     if (finger.right == null){
--[ 2018.11.20.15.14.21.472.0 ]--
r 47                         newNode = finger.r;
--[ 2018.11.20.15.14.21.621.0 ]--
r 47                         newNode = finger.ri;
--[ 2018.11.20.15.14.21.772.0 ]--
r 47                         newNode = finger.rig;
--[ 2018.11.20.15.14.21.894.0 ]--
r 47                         newNode = finger.righ;
--[ 2018.11.20.15.14.21.997.0 ]--
r 47                         newNode = finger.right;
--[ 2018.11.20.15.14.24.452.0 ]--
r 51                         finger = finger.r;
--[ 2018.11.20.15.14.24.586.0 ]--
r 51                         finger = finger.ri;
--[ 2018.11.20.15.14.24.734.0 ]--
r 51                         finger = finger.rig;
--[ 2018.11.20.15.14.24.853.0 ]--
r 51                         finger = finger.righ;
--[ 2018.11.20.15.14.24.964.0 ]--
r 51                         finger = finger.right;
--[ 2018.11.20.15.14.57.366.0 ]--
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
r 55 //           
--[ 2018.11.20.15.14.59.385.0 ]--
- 55
--[ 2018.11.20.15.15.01.573.0 ]--
- 55
--[ 2018.11.20.15.15.15.476.0 ]--
+ 55             
--[ 2018.11.20.15.15.15.655.0 ]--
r 55             }
--[ 2018.11.20.15.15.15.689.0 ]--
r 32             while (true) {
--[ 2018.11.20.15.15.15.699.0 ]--
r 36                 if (newNodeValue < fingerValue) { //go down the left
--[ 2018.11.20.15.15.15.713.0 ]--
r 37                     if (finger.left == null) {
--[ 2018.11.20.15.15.15.720.0 ]--
- 40
r 40                     } else {
--[ 2018.11.20.15.15.15.729.0 ]--
- 43
r 43                 } else { //go down the right
--[ 2018.11.20.15.15.15.740.0 ]--
r 44                     if (finger.right == null) {
--[ 2018.11.20.15.15.15.756.0 ]--
- 47
r 47                     } else {
--[ 2018.11.20.15.15.15.770.0 ]--
r 49                     }
--[ 2018.11.20.15.15.15.773.0 ]--
r 52         }
--[ 2018.11.20.15.15.34.394.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.16.08.653.0 ]--
r 38                         n;
--[ 2018.11.20.15.16.08.988.0 ]--
r 38                         ;
--[ 2018.11.20.15.16.09.339.0 ]--
r 38                         f;
--[ 2018.11.20.15.16.09.482.0 ]--
r 38                         fi;
--[ 2018.11.20.15.16.09.585.0 ]--
r 38                         fin;
--[ 2018.11.20.15.16.09.659.0 ]--
r 38                         fing;
--[ 2018.11.20.15.16.09.859.0 ]--
r 38                         finge;
--[ 2018.11.20.15.16.09.970.0 ]--
r 38                         finger;
--[ 2018.11.20.15.16.10.046.0 ]--
r 38                         finger.;
--[ 2018.11.20.15.16.10.378.0 ]--
r 38                         finger.l;
--[ 2018.11.20.15.16.10.512.0 ]--
r 38                         finger.le;
--[ 2018.11.20.15.16.10.810.0 ]--
r 38                         finger.lef;
--[ 2018.11.20.15.16.10.945.0 ]--
r 38                         finger.left;
--[ 2018.11.20.15.16.11.051.0 ]--
r 38                         finger.left ;
--[ 2018.11.20.15.16.11.515.0 ]--
r 38                         finger.left =;
--[ 2018.11.20.15.16.11.597.0 ]--
r 38                         finger.left = ;
--[ 2018.11.20.15.16.11.737.0 ]--
r 38                         finger.left = n;
--[ 2018.11.20.15.16.11.859.0 ]--
r 38                         finger.left = ne;
--[ 2018.11.20.15.16.11.946.0 ]--
r 38                         finger.left = new;
--[ 2018.11.20.15.16.13.246.0 ]--
r 38                         finger.left = newNode;
--[ 2018.11.20.15.16.20.861.0 ]--
r 45                          = finger.right;
--[ 2018.11.20.15.16.20.972.0 ]--
r 45                         = finger.right;
--[ 2018.11.20.15.16.21.322.0 ]--
r 45                          finger.right;
--[ 2018.11.20.15.16.21.638.0 ]--
r 45                         finger.right;
--[ 2018.11.20.15.16.23.295.0 ]--
r 45                         finger.right
--[ 2018.11.20.15.16.23.708.0 ]--
r 45                         finger.right 
--[ 2018.11.20.15.16.23.954.0 ]--
r 45                         finger.right =
--[ 2018.11.20.15.16.24.039.0 ]--
r 45                         finger.right = 
--[ 2018.11.20.15.16.24.208.0 ]--
r 45                         finger.right = m
--[ 2018.11.20.15.16.24.354.0 ]--
r 45                         finger.right = me
--[ 2018.11.20.15.16.24.656.0 ]--
- 44
r 44                     if (finger.right == null) { finger.right = me
--[ 2018.11.20.15.16.25.768.0 ]--
+ 44                     if (finger.right == null) {
r 45                         finger.right = me
--[ 2018.11.20.15.16.28.228.0 ]--
r 45                         finger.right = m
--[ 2018.11.20.15.16.28.371.0 ]--
r 45                         finger.right = 
--[ 2018.11.20.15.16.28.815.0 ]--
r 45                         finger.right = n
--[ 2018.11.20.15.16.29.153.0 ]--
r 45                         finger.right = ne
--[ 2018.11.20.15.16.29.208.0 ]--
r 45                         finger.right = new
--[ 2018.11.20.15.16.30.489.0 ]--
r 45                         finger.right = newNode
--[ 2018.11.20.15.16.30.725.0 ]--
r 45                         finger.right = newNode;
--[ 2018.11.20.15.16.36.215.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.16.57.180.0 ]--
+ 52             
--[ 2018.11.20.15.16.58.847.0 ]--
r 52             S
--[ 2018.11.20.15.16.59.128.0 ]--
r 52             St
--[ 2018.11.20.15.16.59.347.0 ]--
r 52             Std
--[ 2018.11.20.15.16.59.942.0 ]--
r 52             StdOut
--[ 2018.11.20.15.17.00.726.0 ]--
r 52             StdOut.
--[ 2018.11.20.15.17.01.008.0 ]--
r 52             StdOut.p
--[ 2018.11.20.15.17.01.072.0 ]--
r 52             StdOut.pr
--[ 2018.11.20.15.17.01.192.0 ]--
r 52             StdOut.pri
--[ 2018.11.20.15.17.01.244.0 ]--
r 52             StdOut.prin
--[ 2018.11.20.15.17.01.351.0 ]--
r 52             StdOut.println
--[ 2018.11.20.15.17.01.367.0 ]--
r 52             StdOut.println()
--[ 2018.11.20.15.17.01.382.0 ]--
r 52             StdOut.println();
--[ 2018.11.20.15.17.02.069.0 ]--
r 52             StdOut.println(z);
--[ 2018.11.20.15.17.02.956.0 ]--
r 52             StdOut.println();
--[ 2018.11.20.15.17.03.328.0 ]--
r 52             StdOut.println("");
--[ 2018.11.20.15.17.03.598.0 ]--
r 52             StdOut.println("I");
--[ 2018.11.20.15.17.03.709.0 ]--
r 52             StdOut.println("I ");
--[ 2018.11.20.15.17.03.907.0 ]--
r 52             StdOut.println("I m");
--[ 2018.11.20.15.17.03.995.0 ]--
r 52             StdOut.println("I ma");
--[ 2018.11.20.15.17.04.110.0 ]--
r 52             StdOut.println("I mad");
--[ 2018.11.20.15.17.04.294.0 ]--
r 52             StdOut.println("I made");
--[ 2018.11.20.15.17.04.340.0 ]--
r 52             StdOut.println("I made ");
--[ 2018.11.20.15.17.04.427.0 ]--
r 52             StdOut.println("I made i");
--[ 2018.11.20.15.17.04.561.0 ]--
r 52             StdOut.println("I made it");
--[ 2018.11.20.15.17.04.641.0 ]--
r 52             StdOut.println("I made it ");
--[ 2018.11.20.15.17.04.756.0 ]--
r 52             StdOut.println("I made it o");
--[ 2018.11.20.15.17.04.899.0 ]--
r 52             StdOut.println("I made it ou");
--[ 2018.11.20.15.17.05.026.0 ]--
r 52             StdOut.println("I made it out");
--[ 2018.11.20.15.17.05.356.0 ]--
r 52             StdOut.println("I made it out ");
--[ 2018.11.20.15.17.05.845.0 ]--
r 52             StdOut.println("I made it out");
--[ 2018.11.20.15.17.06.142.0 ]--
r 52             StdOut.println("I made it out,");
--[ 2018.11.20.15.17.06.315.0 ]--
r 52             StdOut.println("I made it out, ");
--[ 2018.11.20.15.17.06.483.0 ]--
r 52             StdOut.println("I made it out, p");
--[ 2018.11.20.15.17.06.587.0 ]--
r 52             StdOut.println("I made it out, pa");
--[ 2018.11.20.15.17.06.680.0 ]--
r 52             StdOut.println("I made it out, pap");
--[ 2018.11.20.15.17.06.774.0 ]--
r 52             StdOut.println("I made it out, papa");
--[ 2018.11.20.15.17.07.200.0 ]--
r 52             StdOut.println("I made it out, papa!");
--[ 2018.11.20.15.17.12.748.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.17.33.316.0 ]--
- 52
--[ 2018.11.20.15.18.05.975.0 ]--
+ 30             
--[ 2018.11.20.15.18.06.991.0 ]--
r 30             S
--[ 2018.11.20.15.18.07.869.0 ]--
r 30             StdOut
--[ 2018.11.20.15.18.08.727.0 ]--
r 30             StdOut.
--[ 2018.11.20.15.18.09.018.0 ]--
r 30             StdOut.p
--[ 2018.11.20.15.18.09.114.0 ]--
r 30             StdOut.pr
--[ 2018.11.20.15.18.09.167.0 ]--
r 30             StdOut.pri
--[ 2018.11.20.15.18.09.320.0 ]--
r 30             StdOut.prin
--[ 2018.11.20.15.18.09.362.0 ]--
r 30             StdOut.println
--[ 2018.11.20.15.18.09.376.0 ]--
r 30             StdOut.println()
--[ 2018.11.20.15.18.09.387.0 ]--
r 30             StdOut.println();
--[ 2018.11.20.15.18.10.236.0 ]--
r 30             StdOut.println("");
--[ 2018.11.20.15.18.10.480.0 ]--
r 30             StdOut.println("P");
--[ 2018.11.20.15.18.10.617.0 ]--
r 30             StdOut.println("Pa");
--[ 2018.11.20.15.18.10.710.0 ]--
r 30             StdOut.println("Pap");
--[ 2018.11.20.15.18.10.812.0 ]--
r 30             StdOut.println("Papa");
--[ 2018.11.20.15.18.11.079.0 ]--
r 30             StdOut.println("Papa,");
--[ 2018.11.20.15.18.11.256.0 ]--
r 30             StdOut.println("Papa, ");
--[ 2018.11.20.15.18.11.447.0 ]--
r 30             StdOut.println("Papa, I");
--[ 2018.11.20.15.18.11.685.0 ]--
r 30             StdOut.println("Papa, I'");
--[ 2018.11.20.15.18.11.836.0 ]--
r 30             StdOut.println("Papa, I'm");
--[ 2018.11.20.15.18.11.913.0 ]--
r 30             StdOut.println("Papa, I'm ");
--[ 2018.11.20.15.18.12.029.0 ]--
r 30             StdOut.println("Papa, I'm i");
--[ 2018.11.20.15.18.12.196.0 ]--
r 30             StdOut.println("Papa, I'm in");
--[ 2018.11.20.15.18.13.302.0 ]--
r 30             StdOut.println("Papa, I'm in ");
--[ 2018.11.20.15.18.13.412.0 ]--
r 30             StdOut.println("Papa, I'm in t");
--[ 2018.11.20.15.18.13.457.0 ]--
r 30             StdOut.println("Papa, I'm in th");
--[ 2018.11.20.15.18.13.611.0 ]--
r 30             StdOut.println("Papa, I'm in the");
--[ 2018.11.20.15.18.13.653.0 ]--
r 30             StdOut.println("Papa, I'm in the ");
--[ 2018.11.20.15.18.13.807.0 ]--
r 30             StdOut.println("Papa, I'm in the e");
--[ 2018.11.20.15.18.13.856.0 ]--
r 30             StdOut.println("Papa, I'm in the em");
--[ 2018.11.20.15.18.13.953.0 ]--
r 30             StdOut.println("Papa, I'm in the emp");
--[ 2018.11.20.15.18.14.187.0 ]--
r 30             StdOut.println("Papa, I'm in the empt");
--[ 2018.11.20.15.18.14.293.0 ]--
r 30             StdOut.println("Papa, I'm in the empty");
--[ 2018.11.20.15.18.14.601.0 ]--
r 30             StdOut.println("Papa, I'm in the empty!");
--[ 2018.11.20.15.18.20.315.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.18.32.386.0 ]--
- 30
--[ 2018.11.20.15.18.36.499.0 ]--
+ 32             
--[ 2018.11.20.15.18.36.696.0 ]--
+ 32                         StdOut.println("Papa, I'm in the empty!");
r 33 
--[ 2018.11.20.15.18.36.739.0 ]--
r 32             StdOut.println("Papa, I'm in the empty!");
--[ 2018.11.20.15.18.37.607.0 ]--
- 33
--[ 2018.11.20.15.18.43.608.0 ]--
r 32             StdOut.println();
--[ 2018.11.20.15.18.44.371.0 ]--
- 32
--[ 2018.11.20.15.18.53.674.0 ]--
+ 39                         
--[ 2018.11.20.15.18.56.570.0 ]--
r 39                         P
--[ 2018.11.20.15.18.56.869.0 ]--
r 39                         Pr
--[ 2018.11.20.15.18.56.991.0 ]--
r 39                         Pri
--[ 2018.11.20.15.18.57.686.0 ]--
r 39                         Pr
--[ 2018.11.20.15.18.57.773.0 ]--
r 39                         P
--[ 2018.11.20.15.18.58.076.0 ]--
r 39                         
--[ 2018.11.20.15.18.58.253.0 ]--
r 39                         S
--[ 2018.11.20.15.18.58.516.0 ]--
r 39                         St
--[ 2018.11.20.15.18.58.727.0 ]--
r 39                         Std
--[ 2018.11.20.15.18.59.194.0 ]--
r 39                         StdOut
--[ 2018.11.20.15.18.59.839.0 ]--
r 39                         StdOut.
--[ 2018.11.20.15.19.00.226.0 ]--
r 39                         StdOut.p
--[ 2018.11.20.15.19.00.369.0 ]--
r 39                         StdOut.pr
--[ 2018.11.20.15.19.00.486.0 ]--
r 39                         StdOut.pri
--[ 2018.11.20.15.19.00.520.0 ]--
r 39                         StdOut.prin
--[ 2018.11.20.15.19.00.614.0 ]--
r 39                         StdOut.println
--[ 2018.11.20.15.19.00.627.0 ]--
r 39                         StdOut.println()
--[ 2018.11.20.15.19.00.638.0 ]--
r 39                         StdOut.println();
--[ 2018.11.20.15.19.01.850.0 ]--
r 39                         StdOut.println(ne);
--[ 2018.11.20.15.19.01.923.0 ]--
r 39                         StdOut.println(new);
--[ 2018.11.20.15.19.04.354.0 ]--
r 39                         StdOut.println(newNode);
--[ 2018.11.20.15.19.10.353.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.19.18.515.0 ]--
r 39                         StdOut.println(newNode.);
--[ 2018.11.20.15.19.18.832.0 ]--
r 39                         StdOut.println(newNode.v);
--[ 2018.11.20.15.19.22.321.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.19.39.316.0 ]--
- 39
--[ 2018.11.20.15.19.46.095.0 ]--
+ 42                         
--[ 2018.11.20.15.19.46.877.0 ]--
r 42                         S
--[ 2018.11.20.15.19.47.155.0 ]--
r 42                         St
--[ 2018.11.20.15.19.47.388.0 ]--
r 42                         Std
--[ 2018.11.20.15.19.47.890.0 ]--
r 42                         StdOut
--[ 2018.11.20.15.19.48.597.0 ]--
r 42                         StdOut.
--[ 2018.11.20.15.19.48.887.0 ]--
r 42                         StdOut.p
--[ 2018.11.20.15.19.48.959.0 ]--
r 42                         StdOut.pr
--[ 2018.11.20.15.19.49.010.0 ]--
r 42                         StdOut.pri
--[ 2018.11.20.15.19.49.135.0 ]--
r 42                         StdOut.prin
--[ 2018.11.20.15.19.49.291.0 ]--
r 42                         StdOut.println
--[ 2018.11.20.15.19.49.328.0 ]--
r 42                         StdOut.println()
--[ 2018.11.20.15.19.49.335.0 ]--
r 42                         StdOut.println();
--[ 2018.11.20.15.19.50.349.0 ]--
r 42                         StdOut.println(f);
--[ 2018.11.20.15.19.50.452.0 ]--
r 42                         StdOut.println(fi);
--[ 2018.11.20.15.19.50.500.0 ]--
r 42                         StdOut.println(fin);
--[ 2018.11.20.15.19.50.686.0 ]--
r 42                         StdOut.println(fing);
--[ 2018.11.20.15.19.50.869.0 ]--
r 42                         StdOut.println(finge);
--[ 2018.11.20.15.19.50.969.0 ]--
r 42                         StdOut.println(finger);
--[ 2018.11.20.15.19.52.124.0 ]--
r 42                         StdOut.println(finger.);
--[ 2018.11.20.15.19.54.937.0 ]--
r 42                         StdOut.println(finger.p);
--[ 2018.11.20.15.19.55.986.0 ]--
r 42                         StdOut.println(finger.);
--[ 2018.11.20.15.19.56.782.0 ]--
r 42                         StdOut.println(finger.p);
--[ 2018.11.20.15.19.59.831.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.20.09.030.0 ]--
- 42
--[ 2018.11.20.15.21.18.920.0 ]--
+ 56 Node newNode = new Node();
+ 57         newNode.p = p;
+ 58         newNode.v = v;
+ 59         Node finger;
+ 60         if(this.isEmpty()){
+ 61             newNode.dir = Partition.Direction.LEFTRIGHT;
+ 62             root = newNode;
+ 63         } else {
+ 64             finger = root;
+ 65             while (true) {
+ 66                 //comparing x's
+ 67                 double fingerValue = finger.p.xy(finger.dir);
+ 68                 double newNodeValue = newNode.p.xy(finger.dir);
+ 69                 if (newNodeValue < fingerValue) { //go down the left
+ 70                     if (finger.left == null) {
+ 71                         finger.left = newNode;
+ 72                         break; //baby
+ 73                     } else {
+ 74                         finger = finger.left;
+ 75                     }
+ 76                 } else { //go down the right
+ 77                     if (finger.right == null) {
+ 78                         finger.right = newNode;
+ 79                         break; //baby
+ 80                     } else {
+ 81                         finger = finger.right;
r 82                     }
r 83                 }
r 84             }
r 85         }
--[ 2018.11.20.15.21.19.019.0 ]--
r 56         Node newNode = new Node();
--[ 2018.11.20.15.21.27.734.0 ]--
- 56
--[ 2018.11.20.15.21.28.856.0 ]--
- 56
--[ 2018.11.20.15.21.29.243.0 ]--
- 56
--[ 2018.11.20.15.21.39.958.0 ]--
r 58             .dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.20.15.21.40.517.0 ]--
- 58
--[ 2018.11.20.15.21.47.720.0 ]--
r 58                 root = newNode;
--[ 2018.11.20.15.21.49.019.0 ]--
- 58
r 58 r        } else {
--[ 2018.11.20.15.21.50.216.0 ]--
+ 58                 root = newNode;
r 59         } else {
--[ 2018.11.20.15.21.50.769.0 ]--
- 58
--[ 2018.11.20.15.21.51.456.0 ]--
+ 58 
--[ 2018.11.20.15.21.52.626.0 ]--
r 58     
--[ 2018.11.20.15.21.52.812.0 ]--
r 58         
--[ 2018.11.20.15.21.52.994.0 ]--
r 58             
--[ 2018.11.20.15.21.53.530.0 ]--
r 58             r
--[ 2018.11.20.15.21.53.592.0 ]--
r 58             re
--[ 2018.11.20.15.21.53.770.0 ]--
r 58             ret
--[ 2018.11.20.15.21.53.864.0 ]--
r 58             retu
--[ 2018.11.20.15.21.53.964.0 ]--
r 58             retur
--[ 2018.11.20.15.21.54.043.0 ]--
r 58             return
--[ 2018.11.20.15.21.54.095.0 ]--
r 58             return 
--[ 2018.11.20.15.21.54.215.0 ]--
r 58             return n
--[ 2018.11.20.15.21.54.400.0 ]--
r 58             return nu
--[ 2018.11.20.15.21.54.582.0 ]--
r 58             return nul
--[ 2018.11.20.15.21.54.710.0 ]--
r 58             return null
--[ 2018.11.20.15.21.55.326.0 ]--
r 58             return null;
--[ 2018.11.20.15.22.12.652.0 ]--
- 64
--[ 2018.11.20.15.22.16.663.0 ]--
r 64                 if (p < fingerValue) { //go down the left
--[ 2018.11.20.15.22.25.665.0 ]--
r 64                 if (newNodeValue < fingerValue) { //go down the left
--[ 2018.11.20.15.22.26.744.0 ]--
+ 64                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.22.31.502.0 ]--
r 64                 double newNodeValue = .p.xy(finger.dir);
--[ 2018.11.20.15.22.31.631.0 ]--
r 64                 double newNodeValue = p.xy(finger.dir);
--[ 2018.11.20.15.22.37.834.0 ]--
r 64                 double pValue = p.xy(finger.dir);
--[ 2018.11.20.15.22.41.363.0 ]--
r 65                 if (pValue < fingerValue) { //go down the left
--[ 2018.11.20.15.23.11.219.0 ]--
r 66                     if (finger.left == p) {
--[ 2018.11.20.15.23.14.537.0 ]--
r 66                     if (finger.left. == p) {
--[ 2018.11.20.15.23.15.520.0 ]--
r 66                     if (finger.left.p == p) {
--[ 2018.11.20.15.23.23.071.0 ]--
- 67
r 67                         r
--[ 2018.11.20.15.23.23.297.0 ]--
r 67                         re
--[ 2018.11.20.15.23.23.502.0 ]--
r 67                         reu
--[ 2018.11.20.15.23.23.558.0 ]--
r 67                         reut
--[ 2018.11.20.15.23.23.992.0 ]--
r 67                         reu
--[ 2018.11.20.15.23.24.102.0 ]--
r 67                         re
--[ 2018.11.20.15.23.24.279.0 ]--
r 67                         ret
--[ 2018.11.20.15.23.24.387.0 ]--
r 67                         retu
--[ 2018.11.20.15.23.24.567.0 ]--
r 67                         retur
--[ 2018.11.20.15.23.24.624.0 ]--
r 67                         return
--[ 2018.11.20.15.23.24.737.0 ]--
r 67                         return 
--[ 2018.11.20.15.23.26.421.0 ]--
r 67                         return f
--[ 2018.11.20.15.23.26.484.0 ]--
r 67                         return fi
--[ 2018.11.20.15.23.26.621.0 ]--
r 67                         return fin
--[ 2018.11.20.15.23.26.736.0 ]--
r 67                         return fing
--[ 2018.11.20.15.23.26.931.0 ]--
r 67                         return finge
--[ 2018.11.20.15.23.27.032.0 ]--
r 67                         return finger
--[ 2018.11.20.15.23.29.032.0 ]--
r 67                         return finger.
--[ 2018.11.20.15.23.29.462.0 ]--
r 67                         return finger.v
--[ 2018.11.20.15.23.30.337.0 ]--
r 67                         return finger.v;
--[ 2018.11.20.15.23.35.263.0 ]--
r 67                         return finger.lv;
--[ 2018.11.20.15.23.35.428.0 ]--
r 67                         return finger.lev;
--[ 2018.11.20.15.23.35.527.0 ]--
r 67                         return finger.lefv;
--[ 2018.11.20.15.23.35.700.0 ]--
r 67                         return finger.leftv;
--[ 2018.11.20.15.23.37.766.0 ]--
r 67                         return finger.left.v;
--[ 2018.11.20.15.23.56.430.0 ]--
r 67                         return finger.v;
--[ 2018.11.20.15.23.56.828.0 ]--
r 67                         re
--[ 2018.11.20.15.23.56.895.0 ]--
r 67                         reut
--[ 2018.11.20.15.23.57.153.0 ]--
+ 67                         finger.left = newNode;
r 68                         break; //baby
--[ 2018.11.20.15.23.57.841.0 ]--
r 66                     if (finger.left == p) {
--[ 2018.11.20.15.23.58.463.0 ]--
r 66                     if (finger.left == null) {
--[ 2018.11.20.15.24.08.031.0 ]--
- 67
r 67                         r
--[ 2018.11.20.15.24.08.120.0 ]--
r 67                         re
--[ 2018.11.20.15.24.08.372.0 ]--
r 67                         ret
--[ 2018.11.20.15.24.08.398.0 ]--
r 67                         retu
--[ 2018.11.20.15.24.08.515.0 ]--
r 67                         retur
--[ 2018.11.20.15.24.08.567.0 ]--
r 67                         return
--[ 2018.11.20.15.24.08.698.0 ]--
r 67                         return 
--[ 2018.11.20.15.24.08.854.0 ]--
r 67                         return n
--[ 2018.11.20.15.24.09.067.0 ]--
r 67                         return nu
--[ 2018.11.20.15.24.09.260.0 ]--
r 67                         return nul
--[ 2018.11.20.15.24.09.382.0 ]--
r 67                         return null
--[ 2018.11.20.15.24.11.741.0 ]--
r 67                         return null;
--[ 2018.11.20.15.24.17.895.0 ]--
+ 68                         
--[ 2018.11.20.15.24.18.540.0 ]--
- 68
--[ 2018.11.20.15.24.19.144.0 ]--
+ 68                         
--[ 2018.11.20.15.24.19.500.0 ]--
r 68                     
--[ 2018.11.20.15.24.19.855.0 ]--
r 68                     e
--[ 2018.11.20.15.24.20.082.0 ]--
r 68                     el
--[ 2018.11.20.15.24.20.249.0 ]--
r 68                     els
--[ 2018.11.20.15.24.20.399.0 ]--
r 68                     else
--[ 2018.11.20.15.24.20.811.0 ]--
r 68                     elsei
--[ 2018.11.20.15.24.20.906.0 ]--
r 68                     elseif
--[ 2018.11.20.15.24.22.028.0 ]--
r 68                     elseif 
--[ 2018.11.20.15.24.22.427.0 ]--
r 68                     elseif
--[ 2018.11.20.15.24.22.610.0 ]--
r 68                     elsei
--[ 2018.11.20.15.24.22.777.0 ]--
r 68                     else
--[ 2018.11.20.15.24.23.165.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.23.280.0 ]--
r 68                     else f
--[ 2018.11.20.15.24.23.330.0 ]--
r 68                     else fi
--[ 2018.11.20.15.24.23.913.0 ]--
r 68                     else f
--[ 2018.11.20.15.24.24.012.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.24.195.0 ]--
r 68                     else i
--[ 2018.11.20.15.24.24.279.0 ]--
r 68                     else if
--[ 2018.11.20.15.24.25.028.0 ]--
r 68                     else if 
--[ 2018.11.20.15.24.25.237.0 ]--
r 68                     else if ()
--[ 2018.11.20.15.24.25.783.0 ]--
r 68                     else if (f)
--[ 2018.11.20.15.24.25.851.0 ]--
r 68                     else if (fi)
--[ 2018.11.20.15.24.26.075.0 ]--
r 68                     else if (fin)
--[ 2018.11.20.15.24.26.138.0 ]--
r 68                     else if (fing)
--[ 2018.11.20.15.24.26.841.0 ]--
r 68                     else if (finge)
--[ 2018.11.20.15.24.26.911.0 ]--
r 68                     else if (finger)
--[ 2018.11.20.15.24.27.530.0 ]--
r 68                     else if (finger.)
--[ 2018.11.20.15.24.28.339.0 ]--
r 68                     else if (finger)
--[ 2018.11.20.15.24.28.846.0 ]--
r 68                     else if (fing)
--[ 2018.11.20.15.24.28.926.0 ]--
r 68                     else if (fin)
--[ 2018.11.20.15.24.28.978.0 ]--
r 68                     else if (fi)
--[ 2018.11.20.15.24.29.525.0 ]--
r 68                     else if (f)
--[ 2018.11.20.15.24.29.581.0 ]--
r 68                     else if ()
--[ 2018.11.20.15.24.29.635.0 ]--
r 68                     else if
--[ 2018.11.20.15.24.29.678.0 ]--
r 68                     else i
--[ 2018.11.20.15.24.29.705.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.29.738.0 ]--
r 68                     else
--[ 2018.11.20.15.24.29.764.0 ]--
r 68                     els
--[ 2018.11.20.15.24.29.787.0 ]--
r 68                     el
--[ 2018.11.20.15.24.29.806.0 ]--
r 68                     e
--[ 2018.11.20.15.24.29.843.0 ]--
r 68                     
--[ 2018.11.20.15.24.29.879.0 ]--
- 68
--[ 2018.11.20.15.24.35.504.0 ]--
+ 69                         
--[ 2018.11.20.15.24.35.757.0 ]--
r 69                         i
--[ 2018.11.20.15.24.35.873.0 ]--
r 69                         if
--[ 2018.11.20.15.24.35.986.0 ]--
r 69                         if 
--[ 2018.11.20.15.24.36.473.0 ]--
r 69                         if ()
--[ 2018.11.20.15.24.36.693.0 ]--
r 69                         if (f)
--[ 2018.11.20.15.24.36.747.0 ]--
r 69                         if (fi)
--[ 2018.11.20.15.24.36.894.0 ]--
r 69                         if (fin)
--[ 2018.11.20.15.24.37.032.0 ]--
r 69                         if (fing)
--[ 2018.11.20.15.24.37.493.0 ]--
r 69                         if (finge)
--[ 2018.11.20.15.24.37.588.0 ]--
r 69                         if (finger)
--[ 2018.11.20.15.24.47.806.0 ]--
r 69                         if (finger.)
--[ 2018.11.20.15.24.48.809.0 ]--
r 69                         if (finger.l)
--[ 2018.11.20.15.24.49.085.0 ]--
r 69                         if (finger.le)
--[ 2018.11.20.15.24.49.735.0 ]--
r 69                         if (finger.lef)
--[ 2018.11.20.15.24.50.026.0 ]--
r 69                         if (finger.left)
--[ 2018.11.20.15.24.50.718.0 ]--
r 69                         if (finger.left.)
--[ 2018.11.20.15.24.51.731.0 ]--
r 69                         if (finger.left.p)
--[ 2018.11.20.15.24.51.810.0 ]--
r 69                         if (finger.left.p )
--[ 2018.11.20.15.24.52.135.0 ]--
r 69                         if (finger.left.p =)
--[ 2018.11.20.15.24.52.249.0 ]--
r 69                         if (finger.left.p = )
--[ 2018.11.20.15.24.52.450.0 ]--
r 69                         if (finger.left.p = p)
--[ 2018.11.20.15.24.53.596.0 ]--
r 69                         if (finger.left.p = p) 
--[ 2018.11.20.15.24.53.778.0 ]--
r 69                         if (finger.left.p = p) {
--[ 2018.11.20.15.24.53.902.0 ]--
+ 70 
+ 71 }
--[ 2018.11.20.15.24.53.922.0 ]--
r 71                         }
--[ 2018.11.20.15.24.53.936.0 ]--
r 70                             
--[ 2018.11.20.15.24.54.369.0 ]--
r 70                             r
--[ 2018.11.20.15.24.54.445.0 ]--
r 70                             re
--[ 2018.11.20.15.24.54.652.0 ]--
r 70                             ret
--[ 2018.11.20.15.24.54.701.0 ]--
r 70                             retu
--[ 2018.11.20.15.24.54.849.0 ]--
r 70                             retur
--[ 2018.11.20.15.24.54.921.0 ]--
r 70                             return
--[ 2018.11.20.15.24.55.017.0 ]--
r 70                             return 
--[ 2018.11.20.15.24.56.301.0 ]--
r 70                             return f
--[ 2018.11.20.15.24.56.387.0 ]--
r 70                             return fi
--[ 2018.11.20.15.24.56.485.0 ]--
r 70                             return fin
--[ 2018.11.20.15.24.56.599.0 ]--
r 70                             return fing
--[ 2018.11.20.15.24.56.815.0 ]--
r 70                             return finge
--[ 2018.11.20.15.24.56.934.0 ]--
r 70                             return finger
--[ 2018.11.20.15.24.57.021.0 ]--
r 70                             return finger.
--[ 2018.11.20.15.24.57.336.0 ]--
r 70                             return finger.v
--[ 2018.11.20.15.24.57.964.0 ]--
r 70                             return finger.v;
--[ 2018.11.20.15.25.00.639.0 ]--
r 69                         if (finger.left.p == p) {
--[ 2018.11.20.15.25.25.825.0 ]--
- 66
- 66
- 66
- 66
- 66
- 66
- 66
r 66 c
--[ 2018.11.20.15.25.27.996.0 ]--
+ 66                     if (finger.left == null) {
+ 67                         return null;
+ 68                     } else {
+ 69                         if (finger.left.p == p) {
+ 70                             return finger.v;
+ 71                         }
+ 72                         finger = finger.left;
r 73                     }
--[ 2018.11.20.15.25.49.578.0 ]--
+ 75                     if (finger.left == null) {
+ 76                         return null;
r 77                     } else {
r 78                         if (finger.left.p == p) {
r 79                             return finger.v;
r 80                         }
r 81                         finger = finger.left;
--[ 2018.11.20.15.25.52.605.0 ]--
r 75                     if (finger.r == null) {
--[ 2018.11.20.15.25.52.790.0 ]--
r 75                     if (finger.ri == null) {
--[ 2018.11.20.15.25.52.946.0 ]--
r 75                     if (finger.rig == null) {
--[ 2018.11.20.15.25.53.118.0 ]--
r 75                     if (finger.righ == null) {
--[ 2018.11.20.15.25.53.228.0 ]--
r 75                     if (finger.right == null) {
--[ 2018.11.20.15.25.56.004.0 ]--
r 78                         if (finger.r.p == p) {
--[ 2018.11.20.15.25.56.144.0 ]--
r 78                         if (finger.ri.p == p) {
--[ 2018.11.20.15.25.56.316.0 ]--
r 78                         if (finger.rig.p == p) {
--[ 2018.11.20.15.25.56.394.0 ]--
r 78                         if (finger.righ.p == p) {
--[ 2018.11.20.15.25.56.514.0 ]--
r 78                         if (finger.right.p == p) {
--[ 2018.11.20.15.25.58.988.0 ]--
r 81                         finger = finger.r;
--[ 2018.11.20.15.25.59.127.0 ]--
r 81                         finger = finger.ri;
--[ 2018.11.20.15.25.59.283.0 ]--
r 81                         finger = finger.rig;
--[ 2018.11.20.15.25.59.361.0 ]--
r 81                         finger = finger.righ;
--[ 2018.11.20.15.25.59.484.0 ]--
r 81                         finger = finger.right;
--[ 2018.11.20.15.26.18.155.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.27.25.656.0 ]--
r 69                         if (finger.left.p  p) {
--[ 2018.11.20.15.27.25.671.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.703.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.703.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.937.0 ]--
r 69                         if (finger.left.p p) {
--[ 2018.11.20.15.27.25.937.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.952.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.621.0 ]--
r 69                         if (finger.left.p. p) {
--[ 2018.11.20.15.27.26.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.653.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.668.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.684.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.684.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.715.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.981.0 ]--
r 69                         if (finger.left.p.e p) {
--[ 2018.11.20.15.27.26.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.996.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.043.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.043.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.074.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.343.0 ]--
r 69                         if (finger.left.p.eq p) {
--[ 2018.11.20.15.27.27.343.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.359.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.468.0 ]--
r 69                         if (finger.left.p.equ p) {
--[ 2018.11.20.15.27.27.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.501.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.568.0 ]--
r 69                         if (finger.left.p.equa p) {
--[ 2018.11.20.15.27.27.576.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.587.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.689.0 ]--
r 69                         if (finger.left.p.equal p) {
--[ 2018.11.20.15.27.27.689.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.689.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.892.0 ]--
r 69                         if (finger.left.p.equals p) {
--[ 2018.11.20.15.27.27.892.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.908.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.194.0 ]--
r 69                         if (finger.left.p.equals() p) {
--[ 2018.11.20.15.27.29.194.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.209.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.998.0 ]--
r 69                         if (finger.left.p.equals( p) {
--[ 2018.11.20.15.27.30.014.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.014.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.029.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.045.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.045.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.061.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.076.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.076.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.092.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.092.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.151.0 ]--
r 69                         if (finger.left.p.equals(p) {
--[ 2018.11.20.15.27.31.151.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.167.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.844.0 ]--
r 69                         if (finger.left.p.equals(p)) {
--[ 2018.11.20.15.27.31.860.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.860.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.34.862.0 ]--
r 78                         if (finger.right.p ==p) {
--[ 2018.11.20.15.27.34.878.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.34.878.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.112.0 ]--
r 78                         if (finger.right.p =p) {
--[ 2018.11.20.15.27.35.112.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.128.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.175.0 ]--
r 78                         if (finger.right.p p) {
--[ 2018.11.20.15.27.35.175.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.190.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.206.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.222.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.222.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.237.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.253.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.253.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.269.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.476.0 ]--
r 78                         if (finger.right.pp) {
--[ 2018.11.20.15.27.35.476.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.476.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.491.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.491.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.507.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.507.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.087.0 ]--
r 78                         if (finger.right.p.p) {
--[ 2018.11.20.15.27.36.103.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.118.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.118.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.433.0 ]--
r 78                         if (finger.right.p.ep) {
--[ 2018.11.20.15.27.36.438.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.443.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.630.0 ]--
r 78                         if (finger.right.p.eqp) {
--[ 2018.11.20.15.27.36.630.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.630.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.748.0 ]--
r 78                         if (finger.right.p.equp) {
--[ 2018.11.20.15.27.36.748.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.764.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.890.0 ]--
r 78                         if (finger.right.p.equap) {
--[ 2018.11.20.15.27.36.899.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.899.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.993.0 ]--
r 78                         if (finger.right.p.equalp) {
--[ 2018.11.20.15.27.36.993.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.993.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.305.0 ]--
r 78                         if (finger.right.p.equalsp) {
--[ 2018.11.20.15.27.37.321.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.321.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.915.0 ]--
r 78                         if (finger.right.p.equals(p) {
--[ 2018.11.20.15.27.37.915.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.946.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.979.0 ]--
r 78                         if (finger.right.p.equals(p)) {
--[ 2018.11.20.15.27.38.979.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.995.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.995.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.39.010.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.39.010.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.243.0 ]--
+ 17     
--[ 2018.11.20.15.28.54.243.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.259.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.562.0 ]--
r 17     p
--[ 2018.11.20.15.28.54.578.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.578.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.578.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.593.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.609.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.609.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.718.0 ]--
r 17     pr
--[ 2018.11.20.15.28.54.718.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.734.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.015.0 ]--
r 17     priv
--[ 2018.11.20.15.28.55.015.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.031.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.062.0 ]--
r 17     priva
--[ 2018.11.20.15.28.55.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.077.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.265.0 ]--
r 17     privat
--[ 2018.11.20.15.28.55.265.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.281.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.421.0 ]--
r 17     private
--[ 2018.11.20.15.28.55.421.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.444.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.453.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.453.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.468.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.515.0 ]--
r 17     private 
--[ 2018.11.20.15.28.55.531.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.531.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.562.0 ]--
r 17     private P
--[ 2018.11.20.15.29.05.562.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.598.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.598.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.614.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.833.0 ]--
r 17     private Po
--[ 2018.11.20.15.29.05.833.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.848.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.988.0 ]--
r 17     private Poi
--[ 2018.11.20.15.29.06.004.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.004.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.129.0 ]--
r 17     private Poin
--[ 2018.11.20.15.29.06.129.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.129.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.317.0 ]--
r 17     private Point
--[ 2018.11.20.15.29.06.317.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.332.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.472.0 ]--
r 17     private Points
--[ 2018.11.20.15.29.06.472.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.503.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.029.0 ]--
r 17     private Point
--[ 2018.11.20.15.29.07.029.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.045.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.154.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.07.170.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.170.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.080.0 ]--
r 17     private Point f
--[ 2018.11.20.15.29.08.095.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.095.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.095.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.111.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.111.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.127.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.361.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.08.361.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.377.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.377.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.767.0 ]--
r 17     private Point r
--[ 2018.11.20.15.29.08.783.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.783.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.814.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.189.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.09.189.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.189.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.204.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.204.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.220.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.236.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.061.0 ]--
r 17     private Point s
--[ 2018.11.20.15.29.10.061.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.061.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.077.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.093.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.093.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.233.0 ]--
r 17     private Point st
--[ 2018.11.20.15.29.10.249.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.249.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.408.0 ]--
r 17     private Point sta
--[ 2018.11.20.15.29.10.416.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.426.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.481.0 ]--
r 17     private Point stac
--[ 2018.11.20.15.29.10.486.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.493.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.939.0 ]--
r 17     private Point stack
--[ 2018.11.20.15.29.10.955.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.955.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.408.0 ]--
r 17     private Point stackO
--[ 2018.11.20.15.29.11.408.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.424.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.568.0 ]--
r 17     private Point stackOf
--[ 2018.11.20.15.29.11.568.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.584.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.104.0 ]--
r 17     private Point stackOfP
--[ 2018.11.20.15.29.12.104.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.119.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.276.0 ]--
r 17     private Point stackOfPo
--[ 2018.11.20.15.29.12.276.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.291.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.507.0 ]--
r 17     private Point stackOfPoi
--[ 2018.11.20.15.29.12.507.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.523.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.648.0 ]--
r 17     private Point stackOfPoin
--[ 2018.11.20.15.29.12.664.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.679.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.695.0 ]--
r 17     private Point stackOfPoint
--[ 2018.11.20.15.29.12.710.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.710.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.249.0 ]--
r 17     private Point stackOfPoints
--[ 2018.11.20.15.29.13.264.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.264.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.993.0 ]--
r 17     private Point stackOfPoints;
--[ 2018.11.20.15.29.14.009.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.14.009.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.29.711.0 ]--
r 17     private sPoint stackOfPoints;
--[ 2018.11.20.15.29.30.024.0 ]--
r 17     private stPoint stackOfPoints;
--[ 2018.11.20.15.29.30.368.0 ]--
r 17     private sPoint stackOfPoints;
--[ 2018.11.20.15.29.30.520.0 ]--
r 17     private Point stackOfPoints;
--[ 2018.11.20.15.29.31.121.0 ]--
r 17     private SPoint stackOfPoints;
--[ 2018.11.20.15.29.31.402.0 ]--
r 17     private StPoint stackOfPoints;
--[ 2018.11.20.15.29.31.625.0 ]--
r 17     private StaPoint stackOfPoints;
--[ 2018.11.20.15.29.31.844.0 ]--
r 17     private StacPoint stackOfPoints;
--[ 2018.11.20.15.29.32.042.0 ]--
r 17     private StackPoint stackOfPoints;
--[ 2018.11.20.15.29.33.631.0 ]--
r 17     private Stack<Point stackOfPoints;
--[ 2018.11.20.15.29.35.739.0 ]--
r 17     private Stack<Point> stackOfPoints;
--[ 2018.11.20.15.29.36.415.0 ]--
r 17     private Stack<Point>  stackOfPoints;
--[ 2018.11.20.15.29.37.818.0 ]--
r 17     private Stack<Point> = stackOfPoints;
--[ 2018.11.20.15.29.37.931.0 ]--
r 17     private Stack<Point> =  stackOfPoints;
--[ 2018.11.20.15.29.38.337.0 ]--
r 17     private Stack<Point> = stackOfPoints;
--[ 2018.11.20.15.29.38.539.0 ]--
r 17     private Stack<Point>  stackOfPoints;
--[ 2018.11.20.15.29.41.624.0 ]--
r 17     private Stack<Point> p stackOfPoints;
--[ 2018.11.20.15.29.41.727.0 ]--
r 17     private Stack<Point> po stackOfPoints;
--[ 2018.11.20.15.29.41.915.0 ]--
r 17     private Stack<Point> poi stackOfPoints;
--[ 2018.11.20.15.29.42.149.0 ]--
r 17     private Stack<Point> poin stackOfPoints;
--[ 2018.11.20.15.29.42.321.0 ]--
r 17     private Stack<Point> point stackOfPoints;
--[ 2018.11.20.15.29.42.510.0 ]--
r 17     private Stack<Point> points stackOfPoints;
--[ 2018.11.20.15.29.47.103.0 ]--
r 17     private Stack<Point> pointStack stackOfPoints;
--[ 2018.11.20.15.29.48.568.0 ]--
r 17     private Stack<Point> pointStac stackOfPoints;
--[ 2018.11.20.15.29.48.837.0 ]--
r 17     private Stack<Point> pointSta stackOfPoints;
--[ 2018.11.20.15.29.49.030.0 ]--
r 17     private Stack<Point> pointSt stackOfPoints;
--[ 2018.11.20.15.29.49.202.0 ]--
r 17     private Stack<Point> pointS stackOfPoints;
--[ 2018.11.20.15.29.49.374.0 ]--
r 17     private Stack<Point> point stackOfPoints;
--[ 2018.11.20.15.29.50.103.0 ]--
r 17     private Stack<Point> points stackOfPoints;
--[ 2018.11.20.15.29.57.655.0 ]--
r 17     private Stack<Point> points /stackOfPoints;
--[ 2018.11.20.15.29.57.780.0 ]--
r 17     private Stack<Point> points //stackOfPoints;
--[ 2018.11.20.15.30.03.444.0 ]--
r 17     private Stack<Point> points; //stackOfPoints;
--[ 2018.11.20.15.30.30.252.0 ]--
r 17     private Stack<Point> s; //stackOfPoints;
--[ 2018.11.20.15.30.30.550.0 ]--
r 17     private Stack<Point> st; //stackOfPoints;
--[ 2018.11.20.15.30.30.710.0 ]--
r 17     private Stack<Point> sta; //stackOfPoints;
--[ 2018.11.20.15.30.31.165.0 ]--
r 17     private Stack<Point> stak; //stackOfPoints;
--[ 2018.11.20.15.30.31.780.0 ]--
r 17     private Stack<Point> sta; //stackOfPoints;
--[ 2018.11.20.15.30.32.108.0 ]--
r 17     private Stack<Point> stac; //stackOfPoints;
--[ 2018.11.20.15.30.32.217.0 ]--
r 17     private Stack<Point> stack; //stackOfPoints;
--[ 2018.11.20.15.30.32.834.0 ]--
r 17     private Stack<Point> stackO; //stackOfPoints;
--[ 2018.11.20.15.30.32.977.0 ]--
r 17     private Stack<Point> stackOf; //stackOfPoints;
--[ 2018.11.20.15.30.33.467.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.33.671.0 ]--
r 17     private Stack<Point> stackOfPi; //stackOfPoints;
--[ 2018.11.20.15.30.33.827.0 ]--
r 17     private Stack<Point> stackOfPin; //stackOfPoints;
--[ 2018.11.20.15.30.33.921.0 ]--
r 17     private Stack<Point> stackOfPint; //stackOfPoints;
--[ 2018.11.20.15.30.34.265.0 ]--
r 17     private Stack<Point> stackOfPin; //stackOfPoints;
--[ 2018.11.20.15.30.34.390.0 ]--
r 17     private Stack<Point> stackOfPi; //stackOfPoints;
--[ 2018.11.20.15.30.34.492.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.34.773.0 ]--
r 17     private Stack<Point> stackOfPpo; //stackOfPoints;
--[ 2018.11.20.15.30.36.056.0 ]--
r 17     private Stack<Point> stackOfPp; //stackOfPoints;
--[ 2018.11.20.15.30.36.213.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.36.689.0 ]--
r 17     private Stack<Point> stackOfPo; //stackOfPoints;
--[ 2018.11.20.15.30.36.783.0 ]--
r 17     private Stack<Point> stackOfPoi; //stackOfPoints;
--[ 2018.11.20.15.30.36.893.0 ]--
r 17     private Stack<Point> stackOfPoin; //stackOfPoints;
--[ 2018.11.20.15.30.37.033.0 ]--
r 17     private Stack<Point> stackOfPoint; //stackOfPoints;
--[ 2018.11.20.15.30.37.268.0 ]--
r 17     private Stack<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.30.46.089.0 ]--
+ 20         
--[ 2018.11.20.15.30.47.598.0 ]--
r 20         s
--[ 2018.11.20.15.30.47.817.0 ]--
r 20         st
--[ 2018.11.20.15.30.47.962.0 ]--
r 20         sta
--[ 2018.11.20.15.30.48.056.0 ]--
r 20         stac
--[ 2018.11.20.15.30.48.149.0 ]--
r 20         stack
--[ 2018.11.20.15.30.48.415.0 ]--
r 20         stackOfPoints
--[ 2018.11.20.15.30.48.667.0 ]--
r 20         stackOfPoints 
--[ 2018.11.20.15.30.49.151.0 ]--
r 20         stackOfPoints =
--[ 2018.11.20.15.30.49.218.0 ]--
r 20         stackOfPoints = 
--[ 2018.11.20.15.30.49.375.0 ]--
r 20         stackOfPoints = n
--[ 2018.11.20.15.30.49.496.0 ]--
r 20         stackOfPoints = ne
--[ 2018.11.20.15.30.49.933.0 ]--
r 20         stackOfPoints = new
--[ 2018.11.20.15.30.50.105.0 ]--
r 20         stackOfPoints = new 
--[ 2018.11.20.15.30.50.340.0 ]--
r 20         stackOfPoints = new S
--[ 2018.11.20.15.30.50.558.0 ]--
r 20         stackOfPoints = new St
--[ 2018.11.20.15.30.50.776.0 ]--
r 20         stackOfPoints = new Sta
--[ 2018.11.20.15.30.51.134.0 ]--
r 20         stackOfPoints = new Stack
--[ 2018.11.20.15.30.51.165.0 ]--
r 20         stackOfPoints = new Stack<>
--[ 2018.11.20.15.30.51.181.0 ]--
r 20         stackOfPoints = new Stack<>()
--[ 2018.11.20.15.30.53.136.0 ]--
r 20         stackOfPoints = new Stack<P>()
--[ 2018.11.20.15.30.53.354.0 ]--
r 20         stackOfPoints = new Stack<Po>()
--[ 2018.11.20.15.30.53.639.0 ]--
r 20         stackOfPoints = new Stack<Poi>()
--[ 2018.11.20.15.30.53.733.0 ]--
r 20         stackOfPoints = new Stack<Poin>()
--[ 2018.11.20.15.30.53.874.0 ]--
r 20         stackOfPoints = new Stack<Point>()
--[ 2018.11.20.15.30.55.055.0 ]--
r 20         stackOfPoints = new Stack<Point>();
--[ 2018.11.20.15.31.01.656.0 ]--
+ 41                         
--[ 2018.11.20.15.31.01.815.0 ]--
r 41                         s
--[ 2018.11.20.15.31.01.987.0 ]--
r 41                         st
--[ 2018.11.20.15.31.02.190.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.02.268.0 ]--
r 41                         stav
--[ 2018.11.20.15.31.02.346.0 ]--
r 41                         stavk
--[ 2018.11.20.15.31.02.679.0 ]--
r 41                         stav
--[ 2018.11.20.15.31.02.819.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.02.948.0 ]--
r 41                         st
--[ 2018.11.20.15.31.03.646.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.03.770.0 ]--
r 41                         stac
--[ 2018.11.20.15.31.03.880.0 ]--
r 41                         stack
--[ 2018.11.20.15.31.04.317.0 ]--
r 41                         stackOfPoints
--[ 2018.11.20.15.31.05.039.0 ]--
r 41                         stackOfPoints.
--[ 2018.11.20.15.31.06.564.0 ]--
r 41                         stackOfPoints.p
--[ 2018.11.20.15.31.06.767.0 ]--
r 41                         stackOfPoints.ps
--[ 2018.11.20.15.31.06.845.0 ]--
r 41                         stackOfPoints.psu
--[ 2018.11.20.15.31.07.254.0 ]--
r 41                         stackOfPoints.ps
--[ 2018.11.20.15.31.07.379.0 ]--
r 41                         stackOfPoints.p
--[ 2018.11.20.15.31.07.545.0 ]--
r 41                         stackOfPoints.pu
--[ 2018.11.20.15.31.07.779.0 ]--
r 41                         stackOfPoints.pus
--[ 2018.11.20.15.31.08.013.0 ]--
r 41                         stackOfPoints.push
--[ 2018.11.20.15.31.09.654.0 ]--
r 41                         stackOfPoints.push()
--[ 2018.11.20.15.31.12.484.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.12.656.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.12.765.0 ]--
r 41                         stackOfPoints.push(new)
--[ 2018.11.20.15.31.13.374.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.13.573.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.13.729.0 ]--
r 41                         stackOfPoints.push()
--[ 2018.11.20.15.31.16.001.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.16.188.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.16.219.0 ]--
r 41                         stackOfPoints.push(new)
--[ 2018.11.20.15.31.17.535.0 ]--
r 41                         stackOfPoints.push(newNode)
--[ 2018.11.20.15.31.18.569.0 ]--
r 41                         stackOfPoints.push(newNode.)
--[ 2018.11.20.15.31.19.679.0 ]--
r 41                         stackOfPoints.push(newNode.p)
--[ 2018.11.20.15.31.21.332.0 ]--
r 41                         stackOfPoints.push(newNode.p);
--[ 2018.11.20.15.31.30.856.0 ]--
+ 49                         
--[ 2018.11.20.15.31.31.106.0 ]--
+ 49                                                 stackOfPoints.push(newNode.p);
r 50 
--[ 2018.11.20.15.31.31.121.0 ]--
r 49                         stackOfPoints.push(newNode.p);
--[ 2018.11.20.15.31.32.103.0 ]--
- 50
--[ 2018.11.20.15.31.40.242.0 ]--
r 101     public Iterable<Point> points() { return s; }
--[ 2018.11.20.15.31.40.440.0 ]--
r 101     public Iterable<Point> points() { return st; }
--[ 2018.11.20.15.31.40.602.0 ]--
r 101     public Iterable<Point> points() { return sta; }
--[ 2018.11.20.15.31.41.040.0 ]--
r 101     public Iterable<Point> points() { return stackOfPoints; }
--[ 2018.11.20.15.31.46.416.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.32.06.316.0 ]--
+ 41                         
--[ 2018.11.20.15.32.06.716.0 ]--
r 41                         i
--[ 2018.11.20.15.32.06.935.0 ]--
r 41                         if
--[ 2018.11.20.15.32.07.094.0 ]--
r 41                         if 
--[ 2018.11.20.15.32.07.720.0 ]--
r 41                         if ()
--[ 2018.11.20.15.32.08.586.0 ]--
r 41                         if (n)
--[ 2018.11.20.15.32.09.065.0 ]--
r 41                         if (ne)
--[ 2018.11.20.15.32.09.456.0 ]--
r 41                         if (newNode)
--[ 2018.11.20.15.32.09.628.0 ]--
r 41                         if (newNode.)
--[ 2018.11.20.15.32.10.667.0 ]--
r 41                         if (newNode)
--[ 2018.11.20.15.32.10.777.0 ]--
r 41                         if (newNod)
--[ 2018.11.20.15.32.10.902.0 ]--
r 41                         if (newNo)
--[ 2018.11.20.15.32.11.027.0 ]--
r 41                         if (newN)
--[ 2018.11.20.15.32.11.167.0 ]--
r 41                         if (new)
--[ 2018.11.20.15.32.11.292.0 ]--
r 41                         if (ne)
--[ 2018.11.20.15.32.11.524.0 ]--
r 41                         if (n)
--[ 2018.11.20.15.32.11.771.0 ]--
r 41                         if ()
--[ 2018.11.20.15.32.11.974.0 ]--
r 41                         if (s)
--[ 2018.11.20.15.32.12.177.0 ]--
r 41                         if (st)
--[ 2018.11.20.15.32.12.333.0 ]--
r 41                         if (sta)
--[ 2018.11.20.15.32.12.443.0 ]--
r 41                         if (stac)
--[ 2018.11.20.15.32.12.671.0 ]--
r 41                         if (stackOfPoints)
--[ 2018.11.20.15.32.13.453.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.13.916.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.14.009.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.14.578.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.15.094.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.15.265.0 ]--
r 41                         if (stackOfPoints.con)
--[ 2018.11.20.15.32.15.520.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.15.644.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.15.910.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.16.832.0 ]--
r 41                         if (stackOfPoints.g)
--[ 2018.11.20.15.32.17.367.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.17.646.0 ]--
r 41                         if (stackOfPoints)
--[ 2018.11.20.15.32.18.167.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.40.820.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.164.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.333.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.548.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.42.167.0 ]--
r 17     private Array<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.128.0 ]--
r 17     private S<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.667.0 ]--
r 17     private <Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.917.0 ]--
r 17     private a<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.245.0 ]--
r 17     private <Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.518.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.915.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.49.613.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.49.870.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.52.296.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.52.473.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.53.017.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.105.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.246.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.424.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.506.0 ]--
r 17     private Array<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.725.0 ]--
r 17     private ArrayL<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.896.0 ]--
r 17     private ArrayLi<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.340.0 ]--
r 17     private ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.355.0 ]--
r 17     private java.util.ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.386.0 ]--
r 1 import java.util.ArrayList;import java.util.Iterator;
--[ 2018.11.20.15.32.55.402.0 ]--
r 17     private ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.442.0 ]--
+ 1 import java.util.ArrayList;
r 2 import java.util.Iterator;
--[ 2018.11.20.15.33.00.353.0 ]--
r 18     private ArrayList<Point> lOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.460.0 ]--
r 18     private ArrayList<Point> liOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.554.0 ]--
r 18     private ArrayList<Point> lisOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.741.0 ]--
r 18     private ArrayList<Point> listOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.05.509.0 ]--
r 21         listOfPoints = new Stack<Point>();
--[ 2018.11.20.15.33.09.636.0 ]--
r 21         listOfPoints = new A<Point>();
--[ 2018.11.20.15.33.09.870.0 ]--
r 21         listOfPoints = new Ar<Point>();
--[ 2018.11.20.15.33.10.376.0 ]--
r 21         listOfPoints = new Arr<Point>();
--[ 2018.11.20.15.33.10.586.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.10.601.0 ]--
r 21         listOfPoints = new ArrayList();
--[ 2018.11.20.15.33.10.633.0 ]--
r 21         listOfPoints = new ArrayList<>();
--[ 2018.11.20.15.33.13.405.0 ]--
r 21         listOfPoints = new ArrayList<p>();
--[ 2018.11.20.15.33.13.619.0 ]--
r 21         listOfPoints = new ArrayList<po>();
--[ 2018.11.20.15.33.13.744.0 ]--
r 21         listOfPoints = new ArrayList<poi>();
--[ 2018.11.20.15.33.13.900.0 ]--
r 21         listOfPoints = new ArrayList<poin>();
--[ 2018.11.20.15.33.14.036.0 ]--
r 21         listOfPoints = new ArrayList<point>();
--[ 2018.11.20.15.33.14.714.0 ]--
r 21         listOfPoints = new ArrayList<poin>();
--[ 2018.11.20.15.33.14.870.0 ]--
r 21         listOfPoints = new ArrayList<poi>();
--[ 2018.11.20.15.33.15.011.0 ]--
r 21         listOfPoints = new ArrayList<po>();
--[ 2018.11.20.15.33.15.136.0 ]--
r 21         listOfPoints = new ArrayList<p>();
--[ 2018.11.20.15.33.15.565.0 ]--
r 21         listOfPoints = new ArrayList<>();
--[ 2018.11.20.15.33.15.846.0 ]--
r 21         listOfPoints = new ArrayList<P>();
--[ 2018.11.20.15.33.16.051.0 ]--
r 21         listOfPoints = new ArrayList<Po>();
--[ 2018.11.20.15.33.16.207.0 ]--
r 21         listOfPoints = new ArrayList<Poi>();
--[ 2018.11.20.15.33.16.316.0 ]--
r 21         listOfPoints = new ArrayList<Poin>();
--[ 2018.11.20.15.33.16.468.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.16.706.0 ]--
r 21         listOfPoints = new ArrayList<Points>();
--[ 2018.11.20.15.33.17.915.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.23.624.0 ]--
r 42                         if (listOfPoints.)
--[ 2018.11.20.15.33.24.969.0 ]--
r 43                         listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.24.985.0 ]--
r 43                             listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.26.729.0 ]--
r 43                             listOfPoints.(newNode.p);
--[ 2018.11.20.15.33.27.166.0 ]--
r 43                             listOfPoints(newNode.p);
--[ 2018.11.20.15.33.27.758.0 ]--
r 43                             listOfPoints.(newNode.p);
--[ 2018.11.20.15.33.34.946.0 ]--
r 43                             listOfPoints.add(newNode.p);
--[ 2018.11.20.15.33.42.653.0 ]--
r 51                         listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.44.155.0 ]--
r 51                         listOfPoints.a(newNode.p);
--[ 2018.11.20.15.33.44.333.0 ]--
r 51                         listOfPoints.ad(newNode.p);
--[ 2018.11.20.15.33.44.518.0 ]--
r 51                         listOfPoints.add(newNode.p);
--[ 2018.11.20.15.33.49.514.0 ]--
r 42                         if (listOfPoints.c)
--[ 2018.11.20.15.33.49.639.0 ]--
r 42                         if (listOfPoints.co)
--[ 2018.11.20.15.33.50.344.0 ]--
r 42                         if (listOfPoints.contains)
--[ 2018.11.20.15.33.50.376.0 ]--
r 42                         if (listOfPoints.contains())
--[ 2018.11.20.15.33.52.235.0 ]--
r 42                         if (listOfPoints.contains(p))
--[ 2018.11.20.15.34.37.205.0 ]--
+ 22         
--[ 2018.11.20.15.34.37.671.0 ]--
r 22         l
--[ 2018.11.20.15.34.37.842.0 ]--
r 22         li
--[ 2018.11.20.15.34.37.889.0 ]--
r 22         lis
--[ 2018.11.20.15.34.38.326.0 ]--
r 22         listOfPoints
--[ 2018.11.20.15.34.39.779.0 ]--
r 22         listOfPoints.
--[ 2018.11.20.15.34.40.057.0 ]--
r 22         listOfPoints.i
--[ 2018.11.20.15.34.40.229.0 ]--
r 22         listOfPoints.in
--[ 2018.11.20.15.34.40.629.0 ]--
r 22         listOfPoints.ins
--[ 2018.11.20.15.34.41.272.0 ]--
r 22         listOfPoints.in
--[ 2018.11.20.15.34.41.998.0 ]--
r 22         listOfPoints.i
--[ 2018.11.20.15.34.42.263.0 ]--
r 22         listOfPoints.
--[ 2018.11.20.15.34.42.441.0 ]--
r 22         listOfPoints
--[ 2018.11.20.15.34.42.555.0 ]--
r 22         listOfPoint
--[ 2018.11.20.15.34.42.711.0 ]--
r 22         listOfPoin
--[ 2018.11.20.15.34.42.867.0 ]--
r 22         listOfPoi
--[ 2018.11.20.15.34.42.983.0 ]--
r 22         listOfPo
--[ 2018.11.20.15.34.43.108.0 ]--
r 22         listOfP
--[ 2018.11.20.15.34.43.249.0 ]--
r 22         listOf
--[ 2018.11.20.15.34.43.390.0 ]--
r 22         listO
--[ 2018.11.20.15.34.43.514.0 ]--
r 22         list
--[ 2018.11.20.15.34.43.670.0 ]--
r 22         lis
--[ 2018.11.20.15.34.43.952.0 ]--
r 22         li
--[ 2018.11.20.15.34.44.264.0 ]--
r 22         l
--[ 2018.11.20.15.34.44.698.0 ]--
r 22         
--[ 2018.11.20.15.34.45.058.0 ]--
- 22
--[ 2018.11.20.15.34.55.157.0 ]--
r 42                         if (listOfPoints.contains(p)){
--[ 2018.11.20.15.34.57.514.0 ]--
+ 44                             
--[ 2018.11.20.15.34.57.733.0 ]--
r 44                             }
--[ 2018.11.20.15.34.57.749.0 ]--
r 42                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.34.57.764.0 ]--
r 44                         }
--[ 2018.11.20.15.35.38.670.0 ]--
+ 52                                                 if (listOfPoints.contains(p)) {
+ 53                             listOfPoints.add(newNode.p);
r 54                         }
--[ 2018.11.20.15.35.38.686.0 ]--
r 52                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.35.51.899.0 ]--
r 42                         if (t) {
--[ 2018.11.20.15.35.51.968.0 ]--
r 42                         if (th) {
--[ 2018.11.20.15.35.52.109.0 ]--
r 42                         if (thi) {
--[ 2018.11.20.15.35.52.203.0 ]--
r 42                         if (this) {
--[ 2018.11.20.15.35.52.482.0 ]--
r 42                         if (this.) {
--[ 2018.11.20.15.35.52.982.0 ]--
r 42                         if (this.g) {
--[ 2018.11.20.15.35.53.185.0 ]--
r 42                         if (this.ge) {
--[ 2018.11.20.15.35.53.357.0 ]--
r 42                         if (this.get) {
--[ 2018.11.20.15.35.54.493.0 ]--
r 42                         if (this.get()) {
--[ 2018.11.20.15.35.57.475.0 ]--
r 42                         if (this.get(n)) {
--[ 2018.11.20.15.35.57.679.0 ]--
r 42                         if (this.get(ne)) {
--[ 2018.11.20.15.35.57.725.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.35.57.978.0 ]--
r 42                         if (this.get(new.)) {
--[ 2018.11.20.15.35.58.353.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.35.58.794.0 ]--
r 42                         if (this.get(newN)) {
--[ 2018.11.20.15.35.58.904.0 ]--
r 42                         if (this.get(newNo)) {
--[ 2018.11.20.15.35.59.075.0 ]--
r 42                         if (this.get(newNod)) {
--[ 2018.11.20.15.35.59.247.0 ]--
r 42                         if (this.get(newNode)) {
--[ 2018.11.20.15.35.59.407.0 ]--
r 42                         if (this.get(newNode.)) {
--[ 2018.11.20.15.35.59.764.0 ]--
r 42                         if (this.get(newNode.p)) {
--[ 2018.11.20.15.36.04.308.0 ]--
r 42                         if (this.get(newNode.p) ) {
--[ 2018.11.20.15.36.05.185.0 ]--
r 42                         if (this.get(newNode.p) =) {
--[ 2018.11.20.15.36.05.764.0 ]--
r 42                         if (this.get(newNode.p) ==) {
--[ 2018.11.20.15.36.05.953.0 ]--
r 42                         if (this.get(newNode.p) == ) {
--[ 2018.11.20.15.36.06.187.0 ]--
r 42                         if (this.get(newNode.p) == n) {
--[ 2018.11.20.15.36.06.409.0 ]--
r 42                         if (this.get(newNode.p) == nu) {
--[ 2018.11.20.15.36.06.577.0 ]--
r 42                         if (this.get(newNode.p) == nul) {
--[ 2018.11.20.15.36.06.702.0 ]--
r 42                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.36.20.283.0 ]--
r 52                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.36.25.253.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.15.36.25.253.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@7c770fb4
--[ 2018.11.20.15.36.29.168.0 ]--
r 106     public Iterable<Point> points() { return l; }
--[ 2018.11.20.15.36.29.183.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.199.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.310.0 ]--
r 106     public Iterable<Point> points() { return li; }
--[ 2018.11.20.15.36.29.310.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.326.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.404.0 ]--
r 106     public Iterable<Point> points() { return lis; }
--[ 2018.11.20.15.36.29.404.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.786.0 ]--
r 106     public Iterable<Point> points() { return list; }
--[ 2018.11.20.15.36.29.802.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.802.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.30.057.0 ]--
r 106     public Iterable<Point> points() { return listOfPoints; }
--[ 2018.11.20.15.36.30.057.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.30.073.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.33.671.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.33.671.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.37.20.993.0 ]--
r 42 //                        if (this.get(newNode.p) == null) {
r 43 //                            listOfPoints.add(newNode.p);
r 44 //                        }
--[ 2018.11.20.15.37.24.999.0 ]--
r 52 //                        if (this.get(newNode.p) == null) {
r 53 //                            listOfPoints.add(newNode.p);
r 54 //                        }
--[ 2018.11.20.15.37.28.197.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.37.37.222.0 ]--
r 52                         if (this.get(newNode.p) == null) {
r 53                             listOfPoints.add(newNode.p);
r 54                         }
--[ 2018.11.20.15.37.38.076.0 ]--
r 42                         if (this.get(newNode.p) == null) {
r 43                             listOfPoints.add(newNode.p);
r 44                         }
--[ 2018.11.20.15.37.54.970.0 ]--
r 42                         if (l) {
--[ 2018.11.20.15.37.55.624.0 ]--
r 42                         if (li) {
--[ 2018.11.20.15.37.55.764.0 ]--
r 42                         if (lis) {
--[ 2018.11.20.15.37.56.014.0 ]--
r 42                         if (list) {
--[ 2018.11.20.15.37.56.230.0 ]--
r 42                         if (listOfPoints) {
--[ 2018.11.20.15.37.56.876.0 ]--
r 42                         if (listOfPoints.) {
--[ 2018.11.20.15.37.57.173.0 ]--
r 42                         if (listOfPoints.c) {
--[ 2018.11.20.15.37.57.282.0 ]--
r 42                         if (listOfPoints.co) {
--[ 2018.11.20.15.37.57.439.0 ]--
r 42                         if (listOfPoints.con) {
--[ 2018.11.20.15.37.57.713.0 ]--
r 42                         if (listOfPoints.contains) {
--[ 2018.11.20.15.37.57.744.0 ]--
r 42                         if (listOfPoints.contains()) {
--[ 2018.11.20.15.37.59.109.0 ]--
r 42                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.38.02.484.0 ]--
r 42                         if (listOfPoints.contains()) {
--[ 2018.11.20.15.38.02.726.0 ]--
r 42                         if (listOfPoints.contains(n)) {
--[ 2018.11.20.15.38.02.804.0 ]--
r 42                         if (listOfPoints.contains(ne)) {
--[ 2018.11.20.15.38.02.866.0 ]--
r 42                         if (listOfPoints.contains(new)) {
--[ 2018.11.20.15.38.04.134.0 ]--
r 42                         if (listOfPoints.contains(newNode)) {
--[ 2018.11.20.15.38.04.306.0 ]--
r 42                         if (listOfPoints.contains(newNode.)) {
--[ 2018.11.20.15.38.04.578.0 ]--
r 42                         if (listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.20.389.0 ]--
r 52                         if (listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.24.553.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.38.38.263.0 ]--
r 52                         if (!listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.41.041.0 ]--
r 42                         if (!listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.44.499.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.39.28.755.0 ]--
+ 44                             
--[ 2018.11.20.15.39.29.133.0 ]--
r 44                             P
--[ 2018.11.20.15.39.29.360.0 ]--
r 44                             Pr
--[ 2018.11.20.15.39.29.893.0 ]--
r 44                             P
--[ 2018.11.20.15.39.30.030.0 ]--
r 44                             
--[ 2018.11.20.15.39.30.202.0 ]--
r 44                             S
--[ 2018.11.20.15.39.30.455.0 ]--
r 44                             St
--[ 2018.11.20.15.39.30.659.0 ]--
r 44                             Std
--[ 2018.11.20.15.39.31.002.0 ]--
r 44                             StdOut
--[ 2018.11.20.15.39.31.821.0 ]--
r 44                             StdOut.
--[ 2018.11.20.15.39.32.071.0 ]--
r 44                             StdOut.p
--[ 2018.11.20.15.39.32.165.0 ]--
r 44                             StdOut.pr
--[ 2018.11.20.15.39.32.274.0 ]--
r 44                             StdOut.pri
--[ 2018.11.20.15.39.32.321.0 ]--
r 44                             StdOut.prin
--[ 2018.11.20.15.39.32.455.0 ]--
r 44                             StdOut.println
--[ 2018.11.20.15.39.32.455.1 ]--
r 44                             StdOut.println()
--[ 2018.11.20.15.39.32.470.0 ]--
r 44                             StdOut.println();
--[ 2018.11.20.15.39.34.799.0 ]--
r 44                             StdOut.println(n);
--[ 2018.11.20.15.39.34.893.0 ]--
r 44                             StdOut.println(ne);
--[ 2018.11.20.15.39.34.971.0 ]--
r 44                             StdOut.println(new);
--[ 2018.11.20.15.39.36.204.0 ]--
r 44                             StdOut.println(newN);
--[ 2018.11.20.15.39.36.341.0 ]--
r 44                             StdOut.println(newNo);
--[ 2018.11.20.15.39.36.528.0 ]--
r 44                             StdOut.println(newNod);
--[ 2018.11.20.15.39.36.718.0 ]--
r 44                             StdOut.println(newNode);
--[ 2018.11.20.15.39.36.837.0 ]--
r 44                             StdOut.println(newNode.);
--[ 2018.11.20.15.39.37.352.0 ]--
r 44                             StdOut.println(newNode.p);
--[ 2018.11.20.15.39.45.228.0 ]--
+ 55                             
--[ 2018.11.20.15.39.45.415.0 ]--
+ 55                                                         StdOut.println(newNode.p);
r 56 
--[ 2018.11.20.15.39.45.447.0 ]--
r 55                             StdOut.println(newNode.p);
--[ 2018.11.20.15.39.46.422.0 ]--
- 56
--[ 2018.11.20.15.39.50.001.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.40.15.728.0 ]--
r 42                         if (t) {
--[ 2018.11.20.15.40.15.790.0 ]--
r 42                         if (th) {
--[ 2018.11.20.15.40.15.946.0 ]--
r 42                         if (thi) {
--[ 2018.11.20.15.40.16.040.0 ]--
r 42                         if (this) {
--[ 2018.11.20.15.40.16.202.0 ]--
r 42                         if (this.) {
--[ 2018.11.20.15.40.20.279.0 ]--
r 42                         if (this.get) {
--[ 2018.11.20.15.40.20.294.0 ]--
r 42                         if (this.get()) {
--[ 2018.11.20.15.40.24.119.0 ]--
r 42                         if (this.get(n)) {
--[ 2018.11.20.15.40.24.306.0 ]--
r 42                         if (this.get(ne)) {
--[ 2018.11.20.15.40.24.338.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.40.25.331.0 ]--
r 42                         if (this.get(newn)) {
--[ 2018.11.20.15.40.25.922.0 ]--
r 42                         if (this.get(newNode)) {
--[ 2018.11.20.15.40.26.313.0 ]--
r 42                         if (this.get(newNode.)) {
--[ 2018.11.20.15.40.26.664.0 ]--
r 42                         if (this.get(newNode.p)) {
--[ 2018.11.20.15.40.32.542.0 ]--
r 42                         if (this.get(newNode.p) ) {
--[ 2018.11.20.15.40.33.458.0 ]--
r 42                         if (this.get(newNode.p) =) {
--[ 2018.11.20.15.40.34.424.0 ]--
r 42                         if (this.get(newNode.p) ==) {
--[ 2018.11.20.15.40.34.734.0 ]--
r 42                         if (this.get(newNode.p) == ) {
--[ 2018.11.20.15.40.34.984.0 ]--
r 42                         if (this.get(newNode.p) == n) {
--[ 2018.11.20.15.40.35.250.0 ]--
r 42                         if (this.get(newNode.p) == nu) {
--[ 2018.11.20.15.40.35.453.0 ]--
r 42                         if (this.get(newNode.p) == nul) {
--[ 2018.11.20.15.40.35.609.0 ]--
r 42                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.40.58.516.0 ]--
r 53                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.41.02.967.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.41.16.260.0 ]--
+ 42                         
--[ 2018.11.20.15.41.16.439.0 ]--
r 42                         S
--[ 2018.11.20.15.41.16.724.0 ]--
r 42                         St
--[ 2018.11.20.15.41.16.931.0 ]--
r 42                         Std
--[ 2018.11.20.15.41.17.758.0 ]--
r 42                         StdOut
--[ 2018.11.20.15.41.18.525.0 ]--
r 42                         StdOut.
--[ 2018.11.20.15.41.18.801.0 ]--
r 42                         StdOut.p
--[ 2018.11.20.15.41.18.941.0 ]--
r 42                         StdOut.pr
--[ 2018.11.20.15.41.18.988.0 ]--
r 42                         StdOut.pri
--[ 2018.11.20.15.41.19.160.0 ]--
r 42                         StdOut.prin
--[ 2018.11.20.15.41.19.285.0 ]--
r 42                         StdOut.println
--[ 2018.11.20.15.41.19.301.0 ]--
r 42                         StdOut.println()
--[ 2018.11.20.15.41.19.317.0 ]--
r 42                         StdOut.println();
--[ 2018.11.20.15.41.19.954.0 ]--
r 42                         StdOut.println(this.get(newNode.p));
--[ 2018.11.20.15.41.24.940.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.41.36.389.0 ]--
r 42                         StdOut.println("this.get(newNode.p));
--[ 2018.11.20.15.41.36.615.0 ]--
r 42                         StdOut.println("hthis.get(newNode.p));
--[ 2018.11.20.15.41.36.818.0 ]--
r 42                         StdOut.println("hethis.get(newNode.p));
--[ 2018.11.20.15.41.36.916.0 ]--
r 42                         StdOut.println("heythis.get(newNode.p));
--[ 2018.11.20.15.41.37.353.0 ]--
r 42                         StdOut.println("hey"this.get(newNode.p));
--[ 2018.11.20.15.41.37.695.0 ]--
r 42                         StdOut.println("hey"+this.get(newNode.p));
--[ 2018.11.20.15.41.41.897.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.45.01.535.0 ]--
+ 104     
--[ 2018.11.20.15.45.03.401.0 ]--
r 104     p
--[ 2018.11.20.15.45.03.602.0 ]--
r 104     pr
--[ 2018.11.20.15.45.03.696.0 ]--
r 104     pri
--[ 2018.11.20.15.45.03.883.0 ]--
r 104     priv
--[ 2018.11.20.15.45.03.977.0 ]--
r 104     priva
--[ 2018.11.20.15.45.04.071.0 ]--
r 104     privat
--[ 2018.11.20.15.45.04.211.0 ]--
r 104     private
--[ 2018.11.20.15.45.04.910.0 ]--
r 104     private 
--[ 2018.11.20.15.45.08.217.0 ]--
r 104     private P
--[ 2018.11.20.15.45.08.610.0 ]--
r 104     private Po
--[ 2018.11.20.15.45.08.673.0 ]--
r 104     private Poi
--[ 2018.11.20.15.45.08.782.0 ]--
r 104     private Poin
--[ 2018.11.20.15.45.08.985.0 ]--
r 104     private Point
--[ 2018.11.20.15.45.09.681.0 ]--
r 104     private Point 
--[ 2018.11.20.15.45.10.941.0 ]--
r 104     private Point t
--[ 2018.11.20.15.45.11.128.0 ]--
r 104     private Point tr
--[ 2018.11.20.15.45.11.222.0 ]--
r 104     private Point tra
--[ 2018.11.20.15.45.11.417.0 ]--
r 104     private Point trav
--[ 2018.11.20.15.45.11.580.0 ]--
r 104     private Point trave
--[ 2018.11.20.15.45.11.705.0 ]--
r 104     private Point traver
--[ 2018.11.20.15.45.11.877.0 ]--
r 104     private Point travers
--[ 2018.11.20.15.45.11.955.0 ]--
r 104     private Point traverse
--[ 2018.11.20.15.45.13.446.0 ]--
r 104     private Point traverse()
--[ 2018.11.20.15.47.37.170.0 ]--
r 101         return false
--[ 2018.11.20.15.47.37.689.0 ]--
r 101         return fals
--[ 2018.11.20.15.47.37.720.0 ]--
r 101         return fal
--[ 2018.11.20.15.47.37.736.0 ]--
r 101         return fa
--[ 2018.11.20.15.47.37.783.0 ]--
r 101         return f
--[ 2018.11.20.15.47.37.814.0 ]--
r 101         return 
--[ 2018.11.20.15.47.37.861.0 ]--
r 101         return
--[ 2018.11.20.15.47.37.923.0 ]--
r 101         retur
--[ 2018.11.20.15.47.37.939.0 ]--
r 101         retu
--[ 2018.11.20.15.47.38.048.0 ]--
r 101         ret
--[ 2018.11.20.15.47.38.205.0 ]--
r 101         re
--[ 2018.11.20.15.47.38.564.0 ]--
r 101         r
--[ 2018.11.20.15.47.39.255.0 ]--
r 101         
--[ 2018.11.20.15.47.40.789.0 ]--
+ 101         while (true) {
+ 102                 //comparing x's
+ 103                 double fingerValue = finger.p.xy(finger.dir);
+ 104                 double pValue = p.xy(finger.dir);
+ 105                 if (pValue < fingerValue) { //go down the left
+ 106                     if (finger.left == null) {
+ 107                         return null;
+ 108                     } else {
+ 109                         if (finger.left.p.equals(p)) {
+ 110                             return finger.v;
+ 111                         }
+ 112                         finger = finger.left;
+ 113                     }
+ 114                 } else { //go down the right
+ 115                     if (finger.right == null) {
+ 116                         return null;
+ 117                     } else {
+ 118                         if (finger.right.p.equals(p)) {
+ 119                             return finger.v;
+ 120                         }
+ 121                         finger = finger.right;
+ 122                     }
+ 123                 }
r 124             }
--[ 2018.11.20.15.47.40.836.0 ]--
- 102
- 102
r 102             //comparing x's
r 103             double fingerValue = finger.p.xy(finger.dir);
r 104             double pValue = p.xy(finger.dir);
r 105             if (pValue < fingerValue) { //go down the left
r 106                 if (finger.left == null) {
r 107                     return null;
r 108                 } else {
r 109                     if (finger.left.p.equals(p)) {
r 110                         return finger.v;
r 112                     finger = finger.left;
r 113                 }
r 114             } else { //go down the right
r 115                 if (finger.right == null) {
r 116                     return null;
r 117                 } else {
r 118                     if (finger.right.p.equals(p)) {
r 119                         return finger.v;
+ 121                     finger = finger.right;
+ 124         }
--[ 2018.11.20.15.48.04.491.0 ]--
+ 101         
--[ 2018.11.20.15.48.05.229.0 ]--
+ 101         Node finger;
+ 102         if(this.isEmpty()){
+ 103             return null;
+ 104         } else {
r 105             finger = root;
--[ 2018.11.20.15.48.11.103.0 ]--
r 103             return nul;
--[ 2018.11.20.15.48.11.275.0 ]--
r 103             return nu;
--[ 2018.11.20.15.48.11.462.0 ]--
r 103             return n;
--[ 2018.11.20.15.48.11.601.0 ]--
r 103             return ;
--[ 2018.11.20.15.48.12.206.0 ]--
r 103             return f;
--[ 2018.11.20.15.48.12.347.0 ]--
r 103             return fa;
--[ 2018.11.20.15.48.12.848.0 ]--
r 103             return fal;
--[ 2018.11.20.15.48.12.915.0 ]--
r 103             return fals;
--[ 2018.11.20.15.48.12.993.0 ]--
r 103             return false;
--[ 2018.11.20.15.48.50.562.0 ]--
r 112                     return null
--[ 2018.11.20.15.48.51.077.0 ]--
r 112                     return nul
--[ 2018.11.20.15.48.51.109.0 ]--
r 112                     return nu
--[ 2018.11.20.15.48.51.142.0 ]--
r 112                     return n
--[ 2018.11.20.15.48.51.303.0 ]--
r 112                     return 
--[ 2018.11.20.15.48.51.450.0 ]--
r 112                     return
--[ 2018.11.20.15.48.51.559.0 ]--
r 112                     retur
--[ 2018.11.20.15.48.51.653.0 ]--
r 112                     retu
--[ 2018.11.20.15.48.51.781.0 ]--
r 112                     ret
--[ 2018.11.20.15.48.51.906.0 ]--
r 112                     re
--[ 2018.11.20.15.48.52.062.0 ]--
r 112                     r
--[ 2018.11.20.15.48.52.485.0 ]--
r 112                     
--[ 2018.11.20.15.48.54.763.0 ]--
r 112                     c
--[ 2018.11.20.15.48.54.919.0 ]--
r 112                     co
--[ 2018.11.20.15.48.55.049.0 ]--
r 112                     con
--[ 2018.11.20.15.48.55.205.0 ]--
r 112                     cont
--[ 2018.11.20.15.48.55.314.0 ]--
r 112                     conti
--[ 2018.11.20.15.48.55.345.0 ]--
r 112                     contin
--[ 2018.11.20.15.48.55.583.0 ]--
r 112                     continu
--[ 2018.11.20.15.48.55.677.0 ]--
r 112                     continue
--[ 2018.11.20.15.48.56.148.0 ]--
r 112                     continue;
--[ 2018.11.20.15.51.48.580.0 ]--
r 112                     continue
--[ 2018.11.20.15.51.48.846.0 ]--
r 112                     continu
--[ 2018.11.20.15.51.48.990.0 ]--
r 112                     contin
--[ 2018.11.20.15.51.49.153.0 ]--
r 112                     conti
--[ 2018.11.20.15.51.49.277.0 ]--
r 112                     cont
--[ 2018.11.20.15.51.49.387.0 ]--
r 112                     con
--[ 2018.11.20.15.51.49.526.0 ]--
r 112                     co
--[ 2018.11.20.15.51.49.697.0 ]--
r 112                     c
--[ 2018.11.20.15.51.49.994.0 ]--
r 112                     
--[ 2018.11.20.15.51.50.669.0 ]--
r 112                     r
--[ 2018.11.20.15.51.50.825.0 ]--
r 112                     re
--[ 2018.11.20.15.51.51.065.0 ]--
r 112                     ret
--[ 2018.11.20.15.51.51.221.0 ]--
r 112                     retu
--[ 2018.11.20.15.51.51.317.0 ]--
r 112                     retur
--[ 2018.11.20.15.51.51.469.0 ]--
r 112                     return
--[ 2018.11.20.15.51.51.719.0 ]--
r 112                     return 
--[ 2018.11.20.15.51.51.966.0 ]--
r 112                     return n
--[ 2018.11.20.15.51.52.202.0 ]--
r 112                     return nu
--[ 2018.11.20.15.51.52.380.0 ]--
r 112                     return nul
--[ 2018.11.20.15.51.52.516.0 ]--
r 112                     return null
--[ 2018.11.20.15.51.52.734.0 ]--
r 112                     return null;
--[ 2018.11.20.15.51.55.148.0 ]--
r 112                     return nul;
--[ 2018.11.20.15.51.55.335.0 ]--
r 112                     return nu;
--[ 2018.11.20.15.51.55.449.0 ]--
r 112                     return n;
--[ 2018.11.20.15.51.55.602.0 ]--
r 112                     return ;
--[ 2018.11.20.15.51.57.303.0 ]--
r 112                     return a;
--[ 2018.11.20.15.51.57.439.0 ]--
r 112                     return as;
--[ 2018.11.20.15.51.57.467.0 ]--
r 112                     return asl;
--[ 2018.11.20.15.51.57.577.0 ]--
r 112                     return asle;
--[ 2018.11.20.15.51.57.993.0 ]--
r 112                     return asl;
--[ 2018.11.20.15.51.58.102.0 ]--
r 112                     return as;
--[ 2018.11.20.15.51.58.226.0 ]--
r 112                     return a;
--[ 2018.11.20.15.52.02.283.0 ]--
r 112                     return ;
--[ 2018.11.20.15.52.02.866.0 ]--
r 112                     return f;
--[ 2018.11.20.15.52.03.026.0 ]--
r 112                     return fa;
--[ 2018.11.20.15.52.03.198.0 ]--
r 112                     return fal;
--[ 2018.11.20.15.52.03.245.0 ]--
r 112                     return fals;
--[ 2018.11.20.15.52.03.338.0 ]--
r 112                     return false;
--[ 2018.11.20.15.52.09.529.0 ]--
r 115                         return t;
--[ 2018.11.20.15.52.09.701.0 ]--
r 115                         return tr;
--[ 2018.11.20.15.52.09.920.0 ]--
r 115                         return tru;
--[ 2018.11.20.15.52.10.046.0 ]--
r 115                         return true;
--[ 2018.11.20.15.52.14.722.0 ]--
r 121                     return nul;
--[ 2018.11.20.15.52.14.879.0 ]--
r 121                     return nu;
--[ 2018.11.20.15.52.15.050.0 ]--
r 121                     return n;
--[ 2018.11.20.15.52.15.238.0 ]--
r 121                     return ;
--[ 2018.11.20.15.52.17.280.0 ]--
r 121                     return f;
--[ 2018.11.20.15.52.18.213.0 ]--
r 121                     return fa;
--[ 2018.11.20.15.52.18.443.0 ]--
r 121                     return fam;
--[ 2018.11.20.15.52.18.529.0 ]--
r 121                     return fami;
--[ 2018.11.20.15.52.18.779.0 ]--
r 121                     return famis;
--[ 2018.11.20.15.52.19.029.0 ]--
r 121                     return famish;
--[ 2018.11.20.15.52.19.445.0 ]--
r 121                     return famishl;
--[ 2018.11.20.15.52.19.623.0 ]--
r 121                     return famishls;
--[ 2018.11.20.15.52.19.772.0 ]--
r 121                     return famishlse;
--[ 2018.11.20.15.52.22.829.0 ]--
r 121                     return famislse;
--[ 2018.11.20.15.52.23.157.0 ]--
r 121                     return familse;
--[ 2018.11.20.15.52.23.313.0 ]--
r 121                     return famlse;
--[ 2018.11.20.15.52.24.058.0 ]--
r 121                     return false;
--[ 2018.11.20.15.52.27.452.0 ]--
r 124                         return finger.;
--[ 2018.11.20.15.52.27.665.0 ]--
r 124                         return finger;
--[ 2018.11.20.15.52.27.852.0 ]--
r 124                         return finge;
--[ 2018.11.20.15.52.28.010.0 ]--
r 124                         return fing;
--[ 2018.11.20.15.52.28.198.0 ]--
r 124                         return fin;
--[ 2018.11.20.15.52.28.370.0 ]--
r 124                         return fi;
--[ 2018.11.20.15.52.28.634.0 ]--
r 124                         return f;
--[ 2018.11.20.15.52.28.978.0 ]--
r 124                         return ;
--[ 2018.11.20.15.52.29.744.0 ]--
r 124                         return t;
--[ 2018.11.20.15.52.30.041.0 ]--
r 124                         return tr;
--[ 2018.11.20.15.52.30.166.0 ]--
r 124                         return tru;
--[ 2018.11.20.15.52.30.306.0 ]--
r 124                         return true;
--[ 2018.11.20.15.52.39.281.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.15.52.39.281.1 ]--
CompilationStatus (AEW): 0 31 0
[Ljava.lang.String;@51deaae4
--[ 2018.11.20.15.52.43.987.0 ]--
r 132     private Point traverse(
--[ 2018.11.20.15.52.43.987.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.003.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.483.0 ]--
r 132     private Point traverse
--[ 2018.11.20.15.52.44.498.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.498.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.514.0 ]--
r 132     private Point travers
--[ 2018.11.20.15.52.44.514.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.530.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.561.0 ]--
r 132     private Point traver
--[ 2018.11.20.15.52.44.577.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.577.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.592.0 ]--
r 132     private Point trave
--[ 2018.11.20.15.52.44.592.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.608.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.608.1 ]--
r 132     private Point trav
--[ 2018.11.20.15.52.44.623.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.623.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.639.0 ]--
r 132     private Point tra
--[ 2018.11.20.15.52.44.639.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.655.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.670.0 ]--
r 132     private Point tr
--[ 2018.11.20.15.52.44.686.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.686.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.733.0 ]--
r 132     private Point t
--[ 2018.11.20.15.52.44.733.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.748.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.764.0 ]--
r 132     private Point 
--[ 2018.11.20.15.52.44.764.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.780.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.780.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.795.0 ]--
r 132     private Point
--[ 2018.11.20.15.52.44.795.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.811.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.827.0 ]--
r 132     private Poin
--[ 2018.11.20.15.52.44.846.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.854.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.861.0 ]--
r 132     private Poi
--[ 2018.11.20.15.52.44.861.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.861.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.892.0 ]--
r 132     private Po
--[ 2018.11.20.15.52.44.892.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.892.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.939.0 ]--
r 132     private P
--[ 2018.11.20.15.52.44.939.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.939.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.955.0 ]--
r 132     private 
--[ 2018.11.20.15.52.44.955.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.970.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.970.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.002.0 ]--
r 132     private
--[ 2018.11.20.15.52.45.002.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.002.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.143.0 ]--
r 132     privat
--[ 2018.11.20.15.52.45.159.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.159.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.190.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.190.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.221.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.300.0 ]--
r 132     priva
--[ 2018.11.20.15.52.45.300.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.316.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.470.0 ]--
r 132     priv
--[ 2018.11.20.15.52.45.470.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.470.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.564.0 ]--
r 132     pri
--[ 2018.11.20.15.52.45.579.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.579.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.720.0 ]--
r 132     pr
--[ 2018.11.20.15.52.45.720.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.735.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.907.0 ]--
r 132     p
--[ 2018.11.20.15.52.45.923.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.923.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.266.0 ]--
r 132     
--[ 2018.11.20.15.52.46.266.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.266.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.282.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.282.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.298.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.298.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.329.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.329.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.48.494.0 ]--
- 131
--[ 2018.11.20.15.52.48.510.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.48.510.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.59.175.0 ]--
+ 131     
--[ 2018.11.20.15.52.59.191.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.59.191.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.264.0 ]--
r 131     }
--[ 2018.11.20.15.53.00.264.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.295.0 ]--
r 102         if (this.isEmpty()){
--[ 2018.11.20.15.53.00.295.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.311.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.311.1 ]--
r 102         if (this.isEmpty()) {
--[ 2018.11.20.15.53.00.311.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.326.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.326.1 ]--
r 106             while (true) {
--[ 2018.11.20.15.53.00.326.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.1 ]--
r 107                 //comparing x's
--[ 2018.11.20.15.53.00.342.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.358.0 ]--
r 108                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.53.00.358.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.358.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.0 ]--
r 109                 double pValue = p.xy(finger.dir);
--[ 2018.11.20.15.53.00.373.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.3 ]--
r 110                 if (pValue < fingerValue) { //go down the left
--[ 2018.11.20.15.53.00.389.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.389.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.389.2 ]--
r 111                     if (finger.left == null) {
--[ 2018.11.20.15.53.00.404.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.404.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.404.2 ]--
r 112                         return false;
--[ 2018.11.20.15.53.00.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.420.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.420.2 ]--
r 113                     } else {
--[ 2018.11.20.15.53.00.420.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.442.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.445.0 ]--
r 114                         if (finger.left.p.equals(p)) {
--[ 2018.11.20.15.53.00.450.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.456.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.0 ]--
r 115                             return true;
--[ 2018.11.20.15.53.00.459.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.3 ]--
r 116                         }
--[ 2018.11.20.15.53.00.475.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.475.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.475.2 ]--
r 117                         finger = finger.left;
--[ 2018.11.20.15.53.00.491.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.491.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.491.2 ]--
r 118                     }
--[ 2018.11.20.15.53.00.506.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.506.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.506.2 ]--
r 119                 } else { //go down the right
--[ 2018.11.20.15.53.00.522.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.522.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.522.2 ]--
r 120                     if (finger.right == null) {
--[ 2018.11.20.15.53.00.538.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.538.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.538.2 ]--
r 121                         return false;
--[ 2018.11.20.15.53.00.553.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.553.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.553.2 ]--
r 122                     } else {
--[ 2018.11.20.15.53.00.569.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.569.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.569.2 ]--
r 123                         if (finger.right.p.equals(p)) {
--[ 2018.11.20.15.53.00.569.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.584.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.584.1 ]--
r 124                             return true;
--[ 2018.11.20.15.53.00.584.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.600.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.600.1 ]--
r 125                         }
--[ 2018.11.20.15.53.00.600.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.616.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.616.1 ]--
r 126                         finger = finger.right;
--[ 2018.11.20.15.53.00.616.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.642.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.644.0 ]--
r 127                     }
--[ 2018.11.20.15.53.00.647.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.647.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.647.2 ]--
r 128                 }
--[ 2018.11.20.15.53.00.662.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.662.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.662.2 ]--
r 129             }
--[ 2018.11.20.15.53.00.662.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.678.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.678.1 ]--
r 130         }
--[ 2018.11.20.15.53.00.678.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.693.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.12.962.0 ]--
r 54                         if (this.ge(newNode.p) == null) {
--[ 2018.11.20.15.53.12.962.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.12.978.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.165.0 ]--
r 54                         if (this.g(newNode.p) == null) {
--[ 2018.11.20.15.53.13.182.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.182.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.440.0 ]--
r 54                         if (this.(newNode.p) == null) {
--[ 2018.11.20.15.53.13.446.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.447.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.447.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.478.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.784.0 ]--
r 54                         if (this.c(newNode.p) == null) {
--[ 2018.11.20.15.53.13.784.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.799.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.799.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.831.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.561.0 ]--
r 54                         if (this.co(newNode.p) == null) {
--[ 2018.11.20.15.53.14.561.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.608.0 ]--
r 54                         if (this.con(newNode.p) == null) {
--[ 2018.11.20.15.53.14.623.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.623.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.670.0 ]--
r 54                         if (this.cont(newNode.p) == null) {
--[ 2018.11.20.15.53.14.686.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.686.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.811.0 ]--
r 54                         if (this.conta(newNode.p) == null) {
--[ 2018.11.20.15.53.14.811.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.811.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.842.0 ]--
r 54                         if (this.contai(newNode.p) == null) {
--[ 2018.11.20.15.53.14.842.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.858.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.937.0 ]--
r 54                         if (this.contain(newNode.p) == null) {
--[ 2018.11.20.15.53.14.943.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.950.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.15.019.0 ]--
r 54                         if (this.contains(newNode.p) == null) {
--[ 2018.11.20.15.53.15.019.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.15.035.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.157.0 ]--
r 43                         if (this.ge(newNode.p) == null) {
--[ 2018.11.20.15.53.20.157.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.157.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.313.0 ]--
r 43                         if (this.g(newNode.p) == null) {
--[ 2018.11.20.15.53.20.313.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.328.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.683.0 ]--
r 43                         if (this.(newNode.p) == null) {
--[ 2018.11.20.15.53.20.683.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.699.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.699.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.714.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.714.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.730.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.730.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.108.0 ]--
r 43                         if (this.c(newNode.p) == null) {
--[ 2018.11.20.15.53.21.108.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.124.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.124.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.139.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.139.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.155.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.155.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.710.0 ]--
r 43                         if (this.co(newNode.p) == null) {
--[ 2018.11.20.15.53.21.726.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.726.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.788.0 ]--
r 43                         if (this.con(newNode.p) == null) {
--[ 2018.11.20.15.53.21.804.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.804.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.898.0 ]--
r 43                         if (this.cont(newNode.p) == null) {
--[ 2018.11.20.15.53.21.898.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.916.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.064.0 ]--
r 43                         if (this.conta(newNode.p) == null) {
--[ 2018.11.20.15.53.22.070.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.077.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.212.0 ]--
r 43                         if (this.contai(newNode.p) == null) {
--[ 2018.11.20.15.53.22.212.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.212.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.243.0 ]--
r 43                         if (this.contain(newNode.p) == null) {
--[ 2018.11.20.15.53.22.258.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.258.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.337.0 ]--
r 43                         if (this.contains(newNode.p) == null) {
--[ 2018.11.20.15.53.22.337.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.352.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.985.0 ]--
r 132 
--[ 2018.11.20.15.53.29.000.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.29.000.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.30.964.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.580.0 ]--
r 43                         if (this.contains(newNode.p) == nul) {
--[ 2018.11.20.15.53.35.580.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.580.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.836.0 ]--
r 43                         if (this.contains(newNode.p) == nu) {
--[ 2018.11.20.15.53.35.852.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.852.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.102.0 ]--
r 43                         if (this.contains(newNode.p) == n) {
--[ 2018.11.20.15.53.36.102.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.117.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.599.0 ]--
r 43                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.36.599.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.614.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.614.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.917.0 ]--
r 43                         if (this.contains(newNode.p) == f) {
--[ 2018.11.20.15.53.36.917.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.932.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.932.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.948.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.948.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.026.0 ]--
r 43                         if (this.contains(newNode.p) == fa) {
--[ 2018.11.20.15.53.37.026.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.026.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.213.0 ]--
r 43                         if (this.contains(newNode.p) == fal) {
--[ 2018.11.20.15.53.37.213.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.229.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.276.0 ]--
r 43                         if (this.contains(newNode.p) == fals) {
--[ 2018.11.20.15.53.37.276.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.276.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.385.0 ]--
r 43                         if (this.contains(newNode.p) == false) {
--[ 2018.11.20.15.53.37.385.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.401.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.619.0 ]--
r 43                         if (this.contains(newNode.p) == fals) {
--[ 2018.11.20.15.53.38.635.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.635.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.835.0 ]--
r 43                         if (this.contains(newNode.p) == fal) {
--[ 2018.11.20.15.53.38.851.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.851.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.929.0 ]--
r 43                         if (this.contains(newNode.p) == fa) {
--[ 2018.11.20.15.53.38.929.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.929.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.070.0 ]--
r 43                         if (this.contains(newNode.p) == f) {
--[ 2018.11.20.15.53.39.085.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.085.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.148.0 ]--
r 43                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.39.148.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.148.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.164.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.288.0 ]--
r 43                         if (this.contains(newNode.p) ==) {
--[ 2018.11.20.15.53.39.304.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.304.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.320.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.320.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.413.0 ]--
r 43                         if (this.contains(newNode.p) =) {
--[ 2018.11.20.15.53.39.413.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.434.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.527.0 ]--
r 43                         if (this.contains(newNode.p) ) {
--[ 2018.11.20.15.53.39.527.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.543.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.543.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.887.0 ]--
r 43                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.39.902.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.902.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.918.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.918.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.46.359.0 ]--
r 43                         if (!this.contains(newNode.p)) {
--[ 2018.11.20.15.53.46.374.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.46.374.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.182.0 ]--
r 54                         if (this.contains(newNode.p) == nul) {
--[ 2018.11.20.15.53.52.182.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.198.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.370.0 ]--
r 54                         if (this.contains(newNode.p) == nu) {
--[ 2018.11.20.15.53.52.385.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.385.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.532.0 ]--
r 54                         if (this.contains(newNode.p) == n) {
--[ 2018.11.20.15.53.52.547.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.547.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.704.0 ]--
r 54                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.52.719.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.719.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.735.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.876.0 ]--
r 54                         if (this.contains(newNode.p) ==) {
--[ 2018.11.20.15.53.52.876.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.891.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.891.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.907.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.046.0 ]--
r 54                         if (this.contains(newNode.p) =) {
--[ 2018.11.20.15.53.53.062.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.062.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.250.0 ]--
r 54                         if (this.contains(newNode.p) ) {
--[ 2018.11.20.15.53.53.250.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.250.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.265.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.477.0 ]--
r 54                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.53.477.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.493.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.493.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.509.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.715.0 ]--
r 54                         if (this.contains(newNode.p) {
--[ 2018.11.20.15.53.53.718.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.718.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.734.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.734.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.747.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.050.0 ]--
r 54                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.55.065.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.065.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.065.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.081.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.081.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.00.158.0 ]--
r 54                         if (!this.contains(newNode.p)) {
--[ 2018.11.20.15.54.00.173.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.00.173.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.06.345.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.06.361.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.08.448.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.08.448.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.55.34.246.0 ]--
r 42                         StdOut.println("hey"+this.ge(newNode.p));
--[ 2018.11.20.15.55.34.442.0 ]--
r 42                         StdOut.println("hey"+this.g(newNode.p));
--[ 2018.11.20.15.55.34.608.0 ]--
r 42                         StdOut.println("hey"+this.(newNode.p));
--[ 2018.11.20.15.55.35.172.0 ]--
r 42                         StdOut.println("hey"+this.c(newNode.p));
--[ 2018.11.20.15.55.35.447.0 ]--
r 42                         StdOut.println("hey"+this.co(newNode.p));
--[ 2018.11.20.15.55.35.560.0 ]--
r 42                         StdOut.println("hey"+this.con(newNode.p));
--[ 2018.11.20.15.55.35.767.0 ]--
r 42                         StdOut.println("hey"+this.cont(newNode.p));
--[ 2018.11.20.15.55.36.202.0 ]--
r 42                         StdOut.println("hey"+this.conta(newNode.p));
--[ 2018.11.20.15.55.36.847.0 ]--
r 42                         StdOut.println("hey"+this.contains(newNode.p));
--[ 2018.11.20.15.55.46.306.0 ]--
r 42                         StdOut.println("hey "+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.215.0 ]--
r 42                         StdOut.println("hey"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.356.0 ]--
r 42                         StdOut.println("he"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.524.0 ]--
r 42                         StdOut.println("h"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.836.0 ]--
r 42                         StdOut.println(""+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.219.0 ]--
r 42                         StdOut.println("C"+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.409.0 ]--
r 42                         StdOut.println("Co"+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.921.0 ]--
r 42                         StdOut.println("Con"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.287.0 ]--
r 42                         StdOut.println("Cont"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.561.0 ]--
r 42                         StdOut.println("Conta"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.702.0 ]--
r 42                         StdOut.println("Contai"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.811.0 ]--
r 42                         StdOut.println("Contain"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.920.0 ]--
r 42                         StdOut.println("Contains"+this.contains(newNode.p));
--[ 2018.11.20.15.55.50.514.0 ]--
r 42                         StdOut.println("Contains:"+this.contains(newNode.p));
--[ 2018.11.20.15.55.50.702.0 ]--
r 42                         StdOut.println("Contains: "+this.contains(newNode.p));
--[ 2018.11.20.15.55.54.059.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.57.05.524.0 ]--
- 42
+ 46                         StdOut.println("Contains: "+this.contains(newNode.p));
--[ 2018.11.20.15.57.05.899.0 ]--
- 41
+ 45                         finger.left = newNode;
--[ 2018.11.20.15.57.06.341.0 ]--
- 40
+ 44                     if (finger.left == null) {
--[ 2018.11.20.15.57.07.166.0 ]--
+ 40                     if (finger.left == null) {
- 45
--[ 2018.11.20.15.57.16.853.0 ]--
- 46
--[ 2018.11.20.15.57.23.906.0 ]--
- 52
+ 56                         finger.right = newNode;
--[ 2018.11.20.15.57.24.347.0 ]--
- 51
+ 55                     if (finger.right == null) {
--[ 2018.11.20.15.57.25.079.0 ]--
+ 51                     if (finger.right == null) {
- 56
--[ 2018.11.20.15.57.34.077.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.45.57.094.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.20.18.45.57.124.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/08/a9f02c7e3874710c0814eb9bbcff2c6d514041
/.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
/.git/objects/0b/cb1ae2a966f7111b04ea0e920d0c8aec8d394b
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
/.git/objects/25/82cf4e84d60b07e179d99dccfe58672bfe84a8
/.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
/.git/objects/45/fe5f4622d4bcfce09f915a052da0832b06deb9
/.git/objects/47/b741f8ac969a6f29b52d882c67dad075facb3e
/.git/objects/47/ea390db7413f9f14dfeebee9356c66046a9126
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/54/b37f17e70ec4b3c24cf6e6a402bf8e4faefc51
/.git/objects/55/348824c11a0b9d0e28aabf24f6c0b547f752d1
/.git/objects/55/7569dde5cab073eb6e371295eaf8b1908c5bee
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/60/b079551c1ae0c5071d96c875663b0a0a60287e
/.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6f/cc24bfdb55009cc2634fa4baece3496212e6c6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/7d/3af14f39a1d8bb8b60795f2191d41ed950645d
/.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/4fc1b94f6be829b0272be4921f5bb6b4d515ee
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a2/ffa17b91d6b6ddcc862798c60330d0113280a0
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/41b5d294b30187b31a630e340a42a252487c62
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c2/98f615108f45225e2c9307c738ac9e2faa631e
/.git/objects/c3/4e4355b18e53a341f21bb028fa14238ccb5d89
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/cb/f53fd63eac8ebf4cfc3c8fa0ba72fd711eef98
/.git/objects/d6/15b718458243d665a0fe9c1df00f013d7b642e
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/ef/4489f375f69581099bbf11ce1ac8fb6901c763
/.git/objects/f0/4ec327764f5180068a195efeb8bc3d760ce43d
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/objects/fc/ffaccf82b628f54bac5ba392691067050e5dff
/.git/objects/fe/86b7d30276d409463a9786906238815afa4617
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.20.18.45.57.124.1 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.20.18.45.57.125.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.20.18.45.57.125.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.20.18.45.57.126.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.20.18.45.57.126.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.20.18.45.57.126.2 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.20.18.45.57.143.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.20.18.45.57.146.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.20.18.45.57.146.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.20.18.45.57.146.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.20.18.45.57.147.0 ]--
InitFile: /src/PSKDTree.java
import java.util.ArrayList;
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;
    private ArrayList<Point> listOfPoints; //stackOfPoints;
    // constructor makes empty kD-tree
    public PSKDTree() {
        listOfPoints = new ArrayList<Point>();
    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node();
        newNode.p = p;
        newNode.v = v;
        Node finger;
        if(this.isEmpty()){
            newNode.dir = Partition.Direction.LEFTRIGHT;
            root = newNode;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double newNodeValue = newNode.p.xy(finger.dir);
                if (newNodeValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.left = newNode;
                        break; //baby
                    } else {
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.right = newNode;
                        break; //baby
                    } else {
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value get(Point p) {
        Node finger;
        if(this.isEmpty()){
            return null;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return null;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return null;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public boolean contains(Point p) {
        Node finger;
        if (this.isEmpty()) {
            return false;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return false;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return true;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return false;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return true;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return listOfPoints; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() {
        return root==null; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.20.18.45.57.147.1 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.20.18.45.57.148.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.20.18.45.57.152.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.20.18.47.20.757.0 ]--
:/src/PSKDTree.java
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; 
--[ 2018.11.20.18.47.20.776.0 ]--
UpdateTree (AD): 0 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.18.47.20.784.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.860.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; /
--[ 2018.11.20.18.47.20.864.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.875.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.883.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.892.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.980.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //
--[ 2018.11.20.18.47.20.986.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.003.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.010.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.018.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.025.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.147.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //o
--[ 2018.11.20.18.47.23.150.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.159.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.445.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our
--[ 2018.11.20.18.47.23.448.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.457.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.677.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our 
--[ 2018.11.20.18.47.23.680.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.687.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.777.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our r
--[ 2018.11.20.18.47.23.781.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.787.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.863.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our ro
--[ 2018.11.20.18.47.23.866.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.872.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.945.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our roo
--[ 2018.11.20.18.47.23.948.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.956.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.259.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root
--[ 2018.11.20.18.47.24.263.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.269.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.397.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root 
--[ 2018.11.20.18.47.24.402.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.409.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.444.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root w
--[ 2018.11.20.18.47.25.447.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.453.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.541.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root wi
--[ 2018.11.20.18.47.25.546.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.553.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.912.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root wil
--[ 2018.11.20.18.47.25.916.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.922.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.026.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will
--[ 2018.11.20.18.47.26.030.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.035.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.176.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will 
--[ 2018.11.20.18.47.26.180.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.187.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.346.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will a
--[ 2018.11.20.18.47.26.351.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.358.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.451.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will al
--[ 2018.11.20.18.47.26.455.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.462.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.580.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alw
--[ 2018.11.20.18.47.26.583.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.589.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.705.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alwa
--[ 2018.11.20.18.47.26.708.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.715.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.897.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alway
--[ 2018.11.20.18.47.26.900.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.905.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.104.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always
--[ 2018.11.20.18.47.27.109.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.116.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.215.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always 
--[ 2018.11.20.18.47.27.219.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.225.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.396.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always s
--[ 2018.11.20.18.47.27.399.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.404.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.539.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always st
--[ 2018.11.20.18.47.27.542.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.548.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.611.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always sta
--[ 2018.11.20.18.47.27.614.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.620.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.692.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always star
--[ 2018.11.20.18.47.27.695.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.701.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.856.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start
--[ 2018.11.20.18.47.27.859.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.866.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.080.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start 
--[ 2018.11.20.18.47.28.084.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.090.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.345.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start o
--[ 2018.11.20.18.47.28.348.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.353.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.431.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start ou
--[ 2018.11.20.18.47.28.435.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.440.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.847.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out
--[ 2018.11.20.18.47.28.851.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.856.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.226.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out 
--[ 2018.11.20.18.47.29.229.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.235.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.556.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out L
--[ 2018.11.20.18.47.29.559.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.564.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.669.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LE
--[ 2018.11.20.18.47.29.671.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.677.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.970.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEF
--[ 2018.11.20.18.47.29.973.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.979.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.164.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFT
--[ 2018.11.20.18.47.30.168.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.174.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.473.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTR
--[ 2018.11.20.18.47.30.476.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.482.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.585.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRI
--[ 2018.11.20.18.47.30.588.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.594.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.685.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIG
--[ 2018.11.20.18.47.30.689.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.695.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.770.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIGH
--[ 2018.11.20.18.47.30.774.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.780.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.867.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIGHT
--[ 2018.11.20.18.47.30.871.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.878.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.00.970.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.00.979.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.048.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.052.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.057.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.06.232.0 ]--
UpdateTree (AD): 17 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.06.233.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.48.30.875.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.18.48.56.475.0 ]--
r 43                             StdOut.printl(newNode.p);
--[ 2018.11.20.18.48.56.536.0 ]--
r 43                             StdOut.print(newNode.p);
--[ 2018.11.20.18.48.57.132.0 ]--
r 43                             StdOut.printf(newNode.p);
--[ 2018.11.20.18.48.58.781.0 ]--
r 43                             StdOut.printf("newNode.p);
--[ 2018.11.20.18.48.59.231.0 ]--
r 43                             StdOut.printf(""newNode.p);
--[ 2018.11.20.18.48.59.895.0 ]--
r 43                             StdOut.printf("",newNode.p);
--[ 2018.11.20.18.49.05.078.0 ]--
r 43                             StdOut.printf("n",newNode.p);
--[ 2018.11.20.18.49.05.249.0 ]--
r 43                             StdOut.printf("ne",newNode.p);
--[ 2018.11.20.18.49.05.381.0 ]--
r 43                             StdOut.printf("new",newNode.p);
--[ 2018.11.20.18.49.05.763.0 ]--
r 43                             StdOut.printf("newN",newNode.p);
--[ 2018.11.20.18.49.05.910.0 ]--
r 43                             StdOut.printf("newNo",newNode.p);
--[ 2018.11.20.18.49.06.006.0 ]--
r 43                             StdOut.printf("newNod",newNode.p);
--[ 2018.11.20.18.49.06.172.0 ]--
r 43                             StdOut.printf("newNode",newNode.p);
--[ 2018.11.20.18.49.06.326.0 ]--
r 43                             StdOut.printf("newNode.",newNode.p);
--[ 2018.11.20.18.49.06.742.0 ]--
r 43                             StdOut.printf("newNode.p",newNode.p);
--[ 2018.11.20.18.49.08.105.0 ]--
r 43                             StdOut.printf("newNode.p:",newNode.p);
--[ 2018.11.20.18.49.08.401.0 ]--
r 43                             StdOut.printf("newNode.p: ",newNode.p);
--[ 2018.11.20.18.49.09.829.0 ]--
r 43                             StdOut.printf("newNode.p: /",newNode.p);
--[ 2018.11.20.18.49.10.490.0 ]--
r 43                             StdOut.printf("newNode.p: ",newNode.p);
--[ 2018.11.20.18.49.10.873.0 ]--
r 43                             StdOut.printf("newNode.p: \",newNode.p);
--[ 2018.11.20.18.49.11.316.0 ]--
r 43                             StdOut.printf("newNode.p: \n",newNode.p);
--[ 2018.11.20.18.49.17.767.0 ]--
r 54                             StdOut.printf("newNode.p: \n",newNode.p);
--[ 2018.11.20.18.49.24.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.49.34.806.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.35.140.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.49.37.710.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.37.981.0 ]--
r 54                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.49.42.568.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.49.51.928.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.52.329.0 ]--
r 54                             StdOut.printf("newNode.p: %i\n",newNode.p);
--[ 2018.11.20.18.49.55.398.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.56.080.0 ]--
r 43                             StdOut.printf("newNode.p: %i\n",newNode.p);
--[ 2018.11.20.18.49.58.685.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.50.23.216.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.50.23.327.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.25.201.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.50.25.342.0 ]--
r 54                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.30.502.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.50.49.867.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n"newNode.p);
--[ 2018.11.20.18.50.50.127.0 ]--
r 43                             StdOut.printf("newNode.p: %f\nnewNode.p);
--[ 2018.11.20.18.50.50.182.0 ]--
r 43                             StdOut.printf("newNode.p: %f\newNode.p);
--[ 2018.11.20.18.50.50.201.0 ]--
r 43                             StdOut.printf("newNode.p: %fnewNode.p);
--[ 2018.11.20.18.50.50.233.0 ]--
r 43                             StdOut.printf("newNode.p: %newNode.p);
--[ 2018.11.20.18.50.50.267.0 ]--
r 43                             StdOut.printf("newNode.p: newNode.p);
--[ 2018.11.20.18.50.50.322.0 ]--
r 43                             StdOut.printf("newNode.p:newNode.p);
--[ 2018.11.20.18.50.50.357.0 ]--
r 43                             StdOut.printf("newNode.pnewNode.p);
--[ 2018.11.20.18.50.50.414.0 ]--
r 43                             StdOut.printf("newNode.newNode.p);
--[ 2018.11.20.18.50.50.463.0 ]--
r 43                             StdOut.printf("newNodnewNode.p);
--[ 2018.11.20.18.50.50.486.0 ]--
r 43                             StdOut.printf("newNonewNode.p);
--[ 2018.11.20.18.50.50.518.0 ]--
r 43                             StdOut.printf("newNnewNode.p);
--[ 2018.11.20.18.50.50.579.0 ]--
r 43                             StdOut.printf("newnewNode.p);
--[ 2018.11.20.18.50.50.640.0 ]--
r 43                             StdOut.printf("nnewNode.p);
--[ 2018.11.20.18.50.50.927.0 ]--
r 43                             StdOut.printf("newNode.p);
--[ 2018.11.20.18.50.51.213.0 ]--
r 43                             StdOut.printf(newNode.p);
--[ 2018.11.20.18.50.52.520.0 ]--
r 43                             StdOut.print(newNode.p);
--[ 2018.11.20.18.50.52.949.0 ]--
r 43                             StdOut.printl(newNode.p);
--[ 2018.11.20.18.50.53.160.0 ]--
r 43                             StdOut.println(newNode.p);
--[ 2018.11.20.18.50.56.842.0 ]--
r 54                             StdOut.print("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.56.976.0 ]--
r 54                             StdOut.prin("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.646.0 ]--
r 54                             StdOut.print("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.879.0 ]--
r 54                             StdOut.printl("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.962.0 ]--
r 54                             StdOut.println("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.51.00.362.0 ]--
r 54                             StdOut.println("newNode.p: %f\n"newNode.p);
--[ 2018.11.20.18.51.00.616.0 ]--
r 54                             StdOut.println("newNode.p: %f\nnewNode.p);
--[ 2018.11.20.18.51.00.683.0 ]--
r 54                             StdOut.println("newNode.p: %f\newNode.p);
--[ 2018.11.20.18.51.00.734.0 ]--
r 54                             StdOut.println("newNode.p: %fnewNode.p);
--[ 2018.11.20.18.51.00.792.0 ]--
r 54                             StdOut.println("newNode.p: newNode.p);
--[ 2018.11.20.18.51.00.843.0 ]--
r 54                             StdOut.println("newNode.p:newNode.p);
--[ 2018.11.20.18.51.00.887.0 ]--
r 54                             StdOut.println("newNode.newNode.p);
--[ 2018.11.20.18.51.00.919.0 ]--
r 54                             StdOut.println("newNodenewNode.p);
--[ 2018.11.20.18.51.00.968.0 ]--
r 54                             StdOut.println("newNodnewNode.p);
--[ 2018.11.20.18.51.01.007.0 ]--
r 54                             StdOut.println("newNonewNode.p);
--[ 2018.11.20.18.51.01.063.0 ]--
r 54                             StdOut.println("newNnewNode.p);
--[ 2018.11.20.18.51.01.098.0 ]--
r 54                             StdOut.println("nenewNode.p);
--[ 2018.11.20.18.51.01.126.0 ]--
r 54                             StdOut.println("nnewNode.p);
--[ 2018.11.20.18.51.01.167.0 ]--
r 54                             StdOut.println("newNode.p);
--[ 2018.11.20.18.51.01.569.0 ]--
r 54                             StdOut.println(newNode.p);
--[ 2018.11.20.18.51.04.729.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.52.47.027.0 ]--
+ 19     
--[ 2018.11.20.18.52.48.159.0 ]--
r 19     p
--[ 2018.11.20.18.52.48.292.0 ]--
r 19     pr
--[ 2018.11.20.18.52.48.395.0 ]--
r 19     pri
--[ 2018.11.20.18.52.48.644.0 ]--
r 19     priv
--[ 2018.11.20.18.52.48.695.0 ]--
r 19     priva
--[ 2018.11.20.18.52.48.778.0 ]--
r 19     privat
--[ 2018.11.20.18.52.48.864.0 ]--
r 19     private
--[ 2018.11.20.18.52.50.232.0 ]--
r 19     private 
--[ 2018.11.20.18.52.50.382.0 ]--
r 19     private i
--[ 2018.11.20.18.52.50.481.0 ]--
r 19     private in
--[ 2018.11.20.18.52.50.599.0 ]--
r 19     private int
--[ 2018.11.20.18.52.51.369.0 ]--
r 19     private int 
--[ 2018.11.20.18.52.54.946.0 ]--
r 19     private int t
--[ 2018.11.20.18.52.55.127.0 ]--
r 19     private int tr
--[ 2018.11.20.18.52.55.376.0 ]--
r 19     private int tre
--[ 2018.11.20.18.52.55.446.0 ]--
r 19     private int tree
--[ 2018.11.20.18.52.56.192.0 ]--
r 19     private int treeS
--[ 2018.11.20.18.52.56.660.0 ]--
r 19     private int treeSi
--[ 2018.11.20.18.52.56.762.0 ]--
r 19     private int treeSiz
--[ 2018.11.20.18.52.56.830.0 ]--
r 19     private int treeSize
--[ 2018.11.20.18.52.57.014.0 ]--
r 19     private int treeSize;
--[ 2018.11.20.18.53.04.571.0 ]--
+ 23         
--[ 2018.11.20.18.53.04.972.0 ]--
r 23         t
--[ 2018.11.20.18.53.05.084.0 ]--
r 23         tr
--[ 2018.11.20.18.53.05.357.0 ]--
r 23         tre
--[ 2018.11.20.18.53.05.514.0 ]--
r 23         tree
--[ 2018.11.20.18.53.06.263.0 ]--
r 23         tre
--[ 2018.11.20.18.53.06.375.0 ]--
r 23         tr
--[ 2018.11.20.18.53.06.473.0 ]--
r 23         t
--[ 2018.11.20.18.53.06.599.0 ]--
r 23         
--[ 2018.11.20.18.53.16.200.0 ]--
+ 48                         
--[ 2018.11.20.18.53.17.138.0 ]--
r 48                         t
--[ 2018.11.20.18.53.17.373.0 ]--
r 48                         tr
--[ 2018.11.20.18.53.17.923.0 ]--
r 48                         treeSize
--[ 2018.11.20.18.53.18.811.0 ]--
r 48                         treeSize+
--[ 2018.11.20.18.53.18.953.0 ]--
r 48                         treeSize++
--[ 2018.11.20.18.53.19.292.0 ]--
r 48                         treeSize++;
--[ 2018.11.20.18.53.23.493.0 ]--
+ 60                         
--[ 2018.11.20.18.53.23.842.0 ]--
r 60                         t
--[ 2018.11.20.18.53.24.051.0 ]--
r 60                         tr
--[ 2018.11.20.18.53.24.190.0 ]--
r 60                         tre
--[ 2018.11.20.18.53.24.685.0 ]--
r 60                         treeSize
--[ 2018.11.20.18.53.25.354.0 ]--
r 60                         treeSize+
--[ 2018.11.20.18.53.25.469.0 ]--
r 60                         treeSize++
--[ 2018.11.20.18.53.25.693.0 ]--
r 60                         treeSize++;
--[ 2018.11.20.18.53.41.511.0 ]--
r 165     public int size() { return ; }
--[ 2018.11.20.18.53.42.004.0 ]--
r 165     public int size() { return t; }
--[ 2018.11.20.18.53.42.212.0 ]--
r 165     public int size() { return tr; }
--[ 2018.11.20.18.53.42.460.0 ]--
r 165     public int size() { return tre; }
--[ 2018.11.20.18.53.42.604.0 ]--
r 165     public int size() { return tree; }
--[ 2018.11.20.18.53.43.062.0 ]--
r 165     public int size() { return treeS; }
--[ 2018.11.20.18.53.43.214.0 ]--
r 165     public int size() { return treeSi; }
--[ 2018.11.20.18.53.43.308.0 ]--
r 165     public int size() { return treeSiz; }
--[ 2018.11.20.18.53.43.379.0 ]--
r 165     public int size() { return treeSize; }
--[ 2018.11.20.18.53.58.441.0 ]--
r 165     public int size() { return treeSize; } 
--[ 2018.11.20.18.53.58.524.0 ]--
r 165     public int size() { return treeSize; } /
--[ 2018.11.20.18.53.58.644.0 ]--
r 165     public int size() { return treeSize; } //
--[ 2018.11.20.18.53.59.011.0 ]--
r 165     public int size() { return treeSize; } //i
--[ 2018.11.20.18.53.59.078.0 ]--
r 165     public int size() { return treeSize; } //in
--[ 2018.11.20.18.53.59.142.0 ]--
r 165     public int size() { return treeSize; } //inc
--[ 2018.11.20.18.53.59.327.0 ]--
r 165     public int size() { return treeSize; } //incr
--[ 2018.11.20.18.53.59.395.0 ]--
r 165     public int size() { return treeSize; } //incre
--[ 2018.11.20.18.53.59.611.0 ]--
r 165     public int size() { return treeSize; } //increm
--[ 2018.11.20.18.53.59.729.0 ]--
r 165     public int size() { return treeSize; } //increme
--[ 2018.11.20.18.53.59.870.0 ]--
r 165     public int size() { return treeSize; } //incremen
--[ 2018.11.20.18.53.59.979.0 ]--
r 165     public int size() { return treeSize; } //increment
--[ 2018.11.20.18.54.00.078.0 ]--
r 165     public int size() { return treeSize; } //incremente
--[ 2018.11.20.18.54.00.260.0 ]--
r 165     public int size() { return treeSize; } //incremented
--[ 2018.11.20.18.54.00.363.0 ]--
r 165     public int size() { return treeSize; } //incremented 
--[ 2018.11.20.18.54.00.462.0 ]--
r 165     public int size() { return treeSize; } //incremented i
--[ 2018.11.20.18.54.00.515.0 ]--
r 165     public int size() { return treeSize; } //incremented in
--[ 2018.11.20.18.54.00.630.0 ]--
r 165     public int size() { return treeSize; } //incremented in 
--[ 2018.11.20.18.54.00.812.0 ]--
r 165     public int size() { return treeSize; } //incremented in p
--[ 2018.11.20.18.54.00.937.0 ]--
r 165     public int size() { return treeSize; } //incremented in pu
--[ 2018.11.20.18.54.01.063.0 ]--
r 165     public int size() { return treeSize; } //incremented in put
--[ 2018.11.20.18.54.02.559.0 ]--
r 165     public int size() { return treeSize; } //incremented in put,
--[ 2018.11.20.18.54.02.700.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, 
--[ 2018.11.20.18.54.02.764.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, w
--[ 2018.11.20.18.54.02.952.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, wh
--[ 2018.11.20.18.54.03.007.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, whi
--[ 2018.11.20.18.54.03.070.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, whic
--[ 2018.11.20.18.54.03.150.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which
--[ 2018.11.20.18.54.03.287.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which 
--[ 2018.11.20.18.54.03.374.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which i
--[ 2018.11.20.18.54.03.485.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is
--[ 2018.11.20.18.54.03.567.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is 
--[ 2018.11.20.18.54.03.702.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is f
--[ 2018.11.20.18.54.03.760.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fi
--[ 2018.11.20.18.54.03.837.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fin
--[ 2018.11.20.18.54.03.874.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine
--[ 2018.11.20.18.54.04.256.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine 
--[ 2018.11.20.18.54.04.384.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine s
--[ 2018.11.20.18.54.04.502.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine si
--[ 2018.11.20.18.54.04.620.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine sin
--[ 2018.11.20.18.54.04.688.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine sinc
--[ 2018.11.20.18.54.04.770.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since
--[ 2018.11.20.18.54.04.826.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since 
--[ 2018.11.20.18.54.05.023.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since w
--[ 2018.11.20.18.54.05.090.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we
--[ 2018.11.20.18.54.05.191.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we 
--[ 2018.11.20.18.54.05.336.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we h
--[ 2018.11.20.18.54.05.393.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we ha
--[ 2018.11.20.18.54.05.460.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we hav
--[ 2018.11.20.18.54.05.626.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have
--[ 2018.11.20.18.54.05.729.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have 
--[ 2018.11.20.18.54.06.059.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have n
--[ 2018.11.20.18.54.06.274.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no
--[ 2018.11.20.18.54.06.856.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no 
--[ 2018.11.20.18.54.07.486.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "
--[ 2018.11.20.18.54.09.603.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "d
--[ 2018.11.20.18.54.09.815.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "de
--[ 2018.11.20.18.54.09.936.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "del
--[ 2018.11.20.18.54.10.014.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "dele
--[ 2018.11.20.18.54.10.202.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delet
--[ 2018.11.20.18.54.10.417.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delete
--[ 2018.11.20.18.54.10.696.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delet
--[ 2018.11.20.18.54.10.776.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "dele
--[ 2018.11.20.18.54.10.886.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "del
--[ 2018.11.20.18.54.11.020.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "de
--[ 2018.11.20.18.54.11.113.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "d
--[ 2018.11.20.18.54.11.219.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "
--[ 2018.11.20.18.54.11.616.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no 
--[ 2018.11.20.18.54.11.717.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no d
--[ 2018.11.20.18.54.11.901.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no de
--[ 2018.11.20.18.54.11.963.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no del
--[ 2018.11.20.18.54.12.106.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no dele
--[ 2018.11.20.18.54.12.189.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delet
--[ 2018.11.20.18.54.12.315.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete
--[ 2018.11.20.18.54.14.293.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete 
--[ 2018.11.20.18.54.14.409.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete f
--[ 2018.11.20.18.54.14.525.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete fo
--[ 2018.11.20.18.54.14.623.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for
--[ 2018.11.20.18.54.14.690.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for 
--[ 2018.11.20.18.54.14.793.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for o
--[ 2018.11.20.18.54.14.862.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for ou
--[ 2018.11.20.18.54.14.928.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our
--[ 2018.11.20.18.54.15.027.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our 
--[ 2018.11.20.18.54.15.366.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K
--[ 2018.11.20.18.54.15.947.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K_
--[ 2018.11.20.18.54.16.566.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K
--[ 2018.11.20.18.54.16.745.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-
--[ 2018.11.20.18.54.17.097.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D
--[ 2018.11.20.18.54.17.533.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D 
--[ 2018.11.20.18.54.18.182.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D T
--[ 2018.11.20.18.54.18.352.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tr
--[ 2018.11.20.18.54.18.550.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tre
--[ 2018.11.20.18.54.18.685.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tree
--[ 2018.11.20.18.54.47.032.0 ]--
r 23 
--[ 2018.11.20.19.01.00.884.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); 
--[ 2018.11.20.19.01.01.468.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); /
--[ 2018.11.20.19.01.01.569.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); //
--[ 2018.11.20.19.01.01.888.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // 
--[ 2018.11.20.19.01.01.999.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // a
--[ 2018.11.20.19.01.02.104.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an
--[ 2018.11.20.19.01.02.255.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an 
--[ 2018.11.20.19.01.02.395.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an i
--[ 2018.11.20.19.01.02.531.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an it
--[ 2018.11.20.19.01.02.670.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an ite
--[ 2018.11.20.19.01.02.721.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iter
--[ 2018.11.20.19.01.02.808.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an itera
--[ 2018.11.20.19.01.03.022.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterab
--[ 2018.11.20.19.01.03.091.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterabl
--[ 2018.11.20.19.01.03.185.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterable
--[ 2018.11.20.19.02.43.240.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.19.05.23.855.0 ]--
r 145         return nul;
--[ 2018.11.20.19.05.24.022.0 ]--
r 145         return nu;
--[ 2018.11.20.19.05.24.110.0 ]--
r 145         return n;
--[ 2018.11.20.19.05.24.225.0 ]--
r 145         return ;
--[ 2018.11.20.19.05.24.728.0 ]--
r 145         return l;
--[ 2018.11.20.19.05.24.849.0 ]--
r 145         return li;
--[ 2018.11.20.19.05.24.970.0 ]--
r 145         return lis;
--[ 2018.11.20.19.05.25.182.0 ]--
r 145         return list;
--[ 2018.11.20.19.05.25.527.0 ]--
r 145         return listO;
--[ 2018.11.20.19.05.25.838.0 ]--
r 145         return listOf;
--[ 2018.11.20.19.05.26.189.0 ]--
r 145         return listOfPoints;
--[ 2018.11.20.19.06.54.794.0 ]--
r 145         return listOfPoint;
--[ 2018.11.20.19.06.55.067.0 ]--
r 145         return listOfPoin;
--[ 2018.11.20.19.06.55.106.0 ]--
r 145         return listOfPoi;
--[ 2018.11.20.19.06.55.139.0 ]--
r 145         return listOfPo;
--[ 2018.11.20.19.06.55.183.0 ]--
r 145         return listOfP;
--[ 2018.11.20.19.06.55.244.0 ]--
r 145         return listO;
--[ 2018.11.20.19.06.55.267.0 ]--
r 145         return list;
--[ 2018.11.20.19.06.55.322.0 ]--
r 145         return lis;
--[ 2018.11.20.19.06.55.368.0 ]--
r 145         return li;
--[ 2018.11.20.19.06.55.537.0 ]--
r 145         return l;
--[ 2018.11.20.19.06.56.095.0 ]--
r 145         return ;
--[ 2018.11.20.19.06.56.819.0 ]--
r 145         return n;
--[ 2018.11.20.19.06.57.053.0 ]--
r 145         return nu;
--[ 2018.11.20.19.06.57.239.0 ]--
r 145         return nul;
--[ 2018.11.20.19.06.57.333.0 ]--
r 145         return null;
--[ 2018.11.20.19.09.08.256.0 ]--
+ 145         
--[ 2018.11.20.19.09.08.410.0 ]--
+ 145         
--[ 2018.11.20.19.09.20.509.0 ]--
r 145         f
--[ 2018.11.20.19.09.20.606.0 ]--
r 145         fo
--[ 2018.11.20.19.09.20.722.0 ]--
r 145         for
--[ 2018.11.20.19.09.24.231.0 ]--
r 145         for()
--[ 2018.11.20.19.09.25.538.0 ]--
r 145         for(){
--[ 2018.11.20.19.09.25.772.0 ]--
+ 146 
+ 147 }
--[ 2018.11.20.19.09.25.846.0 ]--
r 147         }
--[ 2018.11.20.19.09.25.887.0 ]--
r 146             
--[ 2018.11.20.19.09.28.977.0 ]--
r 145         for(P){
--[ 2018.11.20.19.09.29.624.0 ]--
r 145         for(Po){
--[ 2018.11.20.19.09.29.725.0 ]--
r 145         for(Poi){
--[ 2018.11.20.19.09.29.810.0 ]--
r 145         for(Poin){
--[ 2018.11.20.19.09.29.949.0 ]--
r 145         for(Point){
--[ 2018.11.20.19.09.30.369.0 ]--
r 145         for(Point ){
--[ 2018.11.20.19.09.30.560.0 ]--
r 145         for(Point p){
--[ 2018.11.20.19.09.31.353.0 ]--
r 145         for(Point pt){
--[ 2018.11.20.19.09.32.200.0 ]--
r 145         for(Point pt:){
--[ 2018.11.20.19.09.34.054.0 ]--
r 145         for(Point pt: ){
--[ 2018.11.20.19.09.34.485.0 ]--
r 145         for(Point pt:){
--[ 2018.11.20.19.09.34.634.0 ]--
r 145         for(Point pt){
--[ 2018.11.20.19.09.34.757.0 ]--
r 145         for(Point pt ){
--[ 2018.11.20.19.09.35.060.0 ]--
r 145         for(Point pt :){
--[ 2018.11.20.19.09.35.261.0 ]--
r 145         for(Point pt : ){
--[ 2018.11.20.19.09.35.447.0 ]--
r 145         for(Point pt : l){
--[ 2018.11.20.19.09.35.564.0 ]--
r 145         for(Point pt : li){
--[ 2018.11.20.19.09.35.652.0 ]--
r 145         for(Point pt : lis){
--[ 2018.11.20.19.09.35.751.0 ]--
r 145         for(Point pt : list){
--[ 2018.11.20.19.09.36.119.0 ]--
r 145         for(Point pt : listo){
--[ 2018.11.20.19.09.36.653.0 ]--
r 145         for(Point pt : listOfPoints){
--[ 2018.11.20.19.11.54.572.0 ]--
+ 145         
--[ 2018.11.20.19.11.55.090.0 ]--
r 145         l
--[ 2018.11.20.19.11.55.235.0 ]--
r 145         li
--[ 2018.11.20.19.11.55.330.0 ]--
r 145         lis
--[ 2018.11.20.19.11.55.513.0 ]--
r 145         list
--[ 2018.11.20.19.11.55.676.0 ]--
r 145         listo
--[ 2018.11.20.19.11.56.046.0 ]--
r 145         listOfPoints
--[ 2018.11.20.19.11.56.479.0 ]--
r 145         listOfPoints.
--[ 2018.11.20.19.12.41.893.0 ]--
r 145         listOfPoints
--[ 2018.11.20.19.12.42.139.0 ]--
r 145         listOfPoint
--[ 2018.11.20.19.12.42.192.0 ]--
r 145         listOfPoin
--[ 2018.11.20.19.12.42.212.0 ]--
r 145         listOfPoi
--[ 2018.11.20.19.12.42.237.0 ]--
r 145         listOfPo
--[ 2018.11.20.19.12.42.310.0 ]--
r 145         listOfP
--[ 2018.11.20.19.12.42.345.0 ]--
r 145         listOf
--[ 2018.11.20.19.12.42.395.0 ]--
r 145         listO
--[ 2018.11.20.19.12.42.696.0 ]--
r 145         list
--[ 2018.11.20.19.12.42.822.0 ]--
r 145         lis
--[ 2018.11.20.19.12.43.032.0 ]--
r 145         li
--[ 2018.11.20.19.12.43.225.0 ]--
r 145         l
--[ 2018.11.20.19.12.43.669.0 ]--
r 145         
--[ 2018.11.20.19.13.33.577.0 ]--
- 145
--[ 2018.11.20.19.13.48.574.0 ]--
+ 148         
--[ 2018.11.20.19.13.49.148.0 ]--
r 148         Q
--[ 2018.11.20.19.13.49.481.0 ]--
r 148         Qu
--[ 2018.11.20.19.13.49.583.0 ]--
r 148         Que
--[ 2018.11.20.19.13.49.688.0 ]--
r 148         Queu
--[ 2018.11.20.19.13.49.835.0 ]--
r 148         Queue
--[ 2018.11.20.19.13.51.416.0 ]--
r 148         Queue<>
--[ 2018.11.20.19.13.51.943.0 ]--
r 148         Queue<P>
--[ 2018.11.20.19.13.52.171.0 ]--
r 148         Queue<Pa>
--[ 2018.11.20.19.13.52.227.0 ]--
r 148         Queue<Par>
--[ 2018.11.20.19.13.52.381.0 ]--
r 148         Queue<Part>
--[ 2018.11.20.19.13.52.484.0 ]--
r 148         Queue<Parti>
--[ 2018.11.20.19.13.52.690.0 ]--
r 148         Queue<Partit>
--[ 2018.11.20.19.13.52.735.0 ]--
r 148         Queue<Partiti>
--[ 2018.11.20.19.13.52.799.0 ]--
r 148         Queue<Partitio>
--[ 2018.11.20.19.13.52.854.0 ]--
r 148         Queue<Partition>
--[ 2018.11.20.19.13.54.592.0 ]--
r 148         Queue<Partition> 
--[ 2018.11.20.19.13.54.863.0 ]--
r 148         Queue<Partition> q
--[ 2018.11.20.19.13.55.716.0 ]--
r 148         Queue<Partition> q 
--[ 2018.11.20.19.13.55.832.0 ]--
r 148         Queue<Partition> q =
--[ 2018.11.20.19.13.55.930.0 ]--
r 148         Queue<Partition> q = 
--[ 2018.11.20.19.13.56.123.0 ]--
r 148         Queue<Partition> q = n
--[ 2018.11.20.19.13.56.172.0 ]--
r 148         Queue<Partition> q = ne
--[ 2018.11.20.19.13.56.270.0 ]--
r 148         Queue<Partition> q = new
--[ 2018.11.20.19.13.56.905.0 ]--
r 148         Queue<Partition> q = new 
--[ 2018.11.20.19.13.57.186.0 ]--
r 148         Queue<Partition> q = new Q
--[ 2018.11.20.19.13.57.341.0 ]--
r 148         Queue<Partition> q = new Qu
--[ 2018.11.20.19.13.57.443.0 ]--
r 148         Queue<Partition> q = new Que
--[ 2018.11.20.19.13.57.587.0 ]--
r 148         Queue<Partition> q = new Queu
--[ 2018.11.20.19.13.57.690.0 ]--
r 148         Queue<Partition> q = new Queue
--[ 2018.11.20.19.13.59.036.0 ]--
r 148         Queue<Partition> q = new QueueM
--[ 2018.11.20.19.13.59.554.0 ]--
r 148         Queue<Partition> q = new Queue
--[ 2018.11.20.19.13.59.988.0 ]--
r 148         Queue<Partition> q = new Queue<>
--[ 2018.11.20.19.14.00.800.0 ]--
r 148         Queue<Partition> q = new Queue<>()
--[ 2018.11.20.19.14.01.128.0 ]--
r 148         Queue<Partition> q = new Queue<>();
--[ 2018.11.20.19.14.17.942.0 ]--
r 150         return nul;
--[ 2018.11.20.19.14.18.103.0 ]--
r 150         return nu;
--[ 2018.11.20.19.14.18.244.0 ]--
r 150         return n;
--[ 2018.11.20.19.14.18.628.0 ]--
r 150         return ;
--[ 2018.11.20.19.14.18.711.0 ]--
r 150         return q;
--[ 2018.11.20.19.14.21.414.0 ]--
- 148
--[ 2018.11.20.19.14.23.096.0 ]--
+ 145         
--[ 2018.11.20.19.14.23.391.0 ]--
+ 145                 Queue<Partition> q = new Queue<>();
r 146 
--[ 2018.11.20.19.14.23.414.0 ]--
r 145         Queue<Partition> q = new Queue<>();
--[ 2018.11.20.19.14.27.051.0 ]--
r 148             q
--[ 2018.11.20.19.14.27.253.0 ]--
r 148             q.
--[ 2018.11.20.19.14.27.566.0 ]--
r 148             q.e
--[ 2018.11.20.19.14.28.232.0 ]--
r 148             q.en
--[ 2018.11.20.19.14.29.333.0 ]--
r 148             q.enqueue
--[ 2018.11.20.19.14.29.346.0 ]--
r 148             q.enqueue()
--[ 2018.11.20.19.14.29.355.0 ]--
r 148             q.enqueue();
--[ 2018.11.20.19.14.33.378.0 ]--
r 148             q.enqueue(p);
--[ 2018.11.20.19.14.33.472.0 ]--
r 148             q.enqueue(pa);
--[ 2018.11.20.19.14.33.558.0 ]--
r 148             q.enqueue(par);
--[ 2018.11.20.19.14.33.771.0 ]--
r 148             q.enqueue(part);
--[ 2018.11.20.19.14.34.534.0 ]--
r 148             q.enqueue(parti);
--[ 2018.11.20.19.14.34.882.0 ]--
r 148             q.enqueue(partit);
--[ 2018.11.20.19.14.34.948.0 ]--
r 148             q.enqueue(partiti);
--[ 2018.11.20.19.14.35.047.0 ]--
r 148             q.enqueue(partitio);
--[ 2018.11.20.19.14.35.133.0 ]--
r 148             q.enqueue(partition);
--[ 2018.11.20.19.14.40.040.0 ]--
+ 148             
--[ 2018.11.20.19.14.41.463.0 ]--
r 148             P
--[ 2018.11.20.19.14.41.626.0 ]--
r 148             Pa
--[ 2018.11.20.19.14.41.679.0 ]--
r 148             Par
--[ 2018.11.20.19.14.41.812.0 ]--
r 148             Part
--[ 2018.11.20.19.14.42.274.0 ]--
r 148             Par
--[ 2018.11.20.19.14.42.362.0 ]--
r 148             Pa
--[ 2018.11.20.19.14.42.469.0 ]--
r 148             P
--[ 2018.11.20.19.14.42.897.0 ]--
r 148             
--[ 2018.11.20.19.14.52.163.0 ]--
+ 146         
--[ 2018.11.20.19.14.52.655.0 ]--
r 146         P
--[ 2018.11.20.19.14.52.793.0 ]--
r 146         Pa
--[ 2018.11.20.19.14.52.889.0 ]--
r 146         Par
--[ 2018.11.20.19.14.53.093.0 ]--
r 146         Part
--[ 2018.11.20.19.14.53.166.0 ]--
r 146         Parti
--[ 2018.11.20.19.14.53.402.0 ]--
r 146         Partit
--[ 2018.11.20.19.14.53.502.0 ]--
r 146         Partiti
--[ 2018.11.20.19.14.53.569.0 ]--
r 146         Partitio
--[ 2018.11.20.19.14.53.638.0 ]--
r 146         Partition
--[ 2018.11.20.19.14.53.890.0 ]--
r 146         Partition 
--[ 2018.11.20.19.14.54.024.0 ]--
r 146         Partition p
--[ 2018.11.20.19.14.54.151.0 ]--
r 146         Partition pa
--[ 2018.11.20.19.14.54.204.0 ]--
r 146         Partition par
--[ 2018.11.20.19.14.54.326.0 ]--
r 146         Partition part
--[ 2018.11.20.19.14.54.471.0 ]--
r 146         Partition parti
--[ 2018.11.20.19.14.54.602.0 ]--
r 146         Partition partit
--[ 2018.11.20.19.14.54.629.0 ]--
r 146         Partition partiti
--[ 2018.11.20.19.14.54.713.0 ]--
r 146         Partition partitio
--[ 2018.11.20.19.14.54.802.0 ]--
r 146         Partition partition
--[ 2018.11.20.19.14.55.024.0 ]--
r 146         Partition partition;
--[ 2018.11.20.19.15.01.005.0 ]--
+ 149             
--[ 2018.11.20.19.15.09.018.0 ]--
r 149             p
--[ 2018.11.20.19.15.09.255.0 ]--
r 149             pa
--[ 2018.11.20.19.15.09.325.0 ]--
r 149             par
--[ 2018.11.20.19.15.09.535.0 ]--
r 149             part
--[ 2018.11.20.19.15.09.627.0 ]--
r 149             parti
--[ 2018.11.20.19.15.09.818.0 ]--
r 149             partit
--[ 2018.11.20.19.15.09.920.0 ]--
r 149             partiti
--[ 2018.11.20.19.15.09.961.0 ]--
r 149             partitio
--[ 2018.11.20.19.15.10.055.0 ]--
r 149             partition
--[ 2018.11.20.19.15.10.874.0 ]--
r 149             partition 
--[ 2018.11.20.19.15.10.974.0 ]--
r 149             partition =
--[ 2018.11.20.19.15.11.088.0 ]--
r 149             partition = 
--[ 2018.11.20.19.15.16.553.0 ]--
r 149             partition = n
--[ 2018.11.20.19.15.16.626.0 ]--
r 149             partition = ne
--[ 2018.11.20.19.15.16.739.0 ]--
r 149             partition = new
--[ 2018.11.20.19.15.17.023.0 ]--
r 149             partition = new 
--[ 2018.11.20.19.15.17.747.0 ]--
r 149             partition = new P
--[ 2018.11.20.19.15.17.934.0 ]--
r 149             partition = new Pa
--[ 2018.11.20.19.15.18.038.0 ]--
r 149             partition = new Par
--[ 2018.11.20.19.15.18.213.0 ]--
r 149             partition = new Part
--[ 2018.11.20.19.15.18.353.0 ]--
r 149             partition = new Parti
--[ 2018.11.20.19.15.18.503.0 ]--
r 149             partition = new Partit
--[ 2018.11.20.19.15.18.575.0 ]--
r 149             partition = new Partiti
--[ 2018.11.20.19.15.18.654.0 ]--
r 149             partition = new Partitio
--[ 2018.11.20.19.15.18.715.0 ]--
r 149             partition = new Partition
--[ 2018.11.20.19.15.18.827.0 ]--
r 149             partition = new Partition;
--[ 2018.11.20.19.15.19.805.0 ]--
+ 150             
--[ 2018.11.20.19.15.20.047.0 ]--
r 150             p
--[ 2018.11.20.19.15.20.145.0 ]--
r 150             pa
--[ 2018.11.20.19.15.20.245.0 ]--
r 150             par
--[ 2018.11.20.19.15.20.347.0 ]--
r 150             part
--[ 2018.11.20.19.15.20.490.0 ]--
r 150             parti
--[ 2018.11.20.19.15.20.658.0 ]--
r 150             partit
--[ 2018.11.20.19.15.20.805.0 ]--
r 150             partitio
--[ 2018.11.20.19.15.20.880.0 ]--
r 150             partition
--[ 2018.11.20.19.15.21.032.0 ]--
r 150             partition.
--[ 2018.11.20.19.15.24.133.0 ]--
r 150             partition.dir
--[ 2018.11.20.19.15.24.150.0 ]--
r 150             partition.dir()
--[ 2018.11.20.19.15.25.620.0 ]--
r 150             partition.dir() 
--[ 2018.11.20.19.15.25.784.0 ]--
r 150             partition.dir() =
--[ 2018.11.20.19.15.25.884.0 ]--
r 150             partition.dir() = 
--[ 2018.11.20.19.15.31.030.0 ]--
r 147     
--[ 2018.11.20.19.15.31.386.0 ]--
r 147         
--[ 2018.11.20.19.15.32.081.0 ]--
r 147         l
--[ 2018.11.20.19.15.32.305.0 ]--
r 147         li
--[ 2018.11.20.19.15.32.435.0 ]--
r 147         lis
--[ 2018.11.20.19.15.32.603.0 ]--
r 147         list
--[ 2018.11.20.19.15.33.776.0 ]--
r 147         lis
--[ 2018.11.20.19.15.33.884.0 ]--
r 147         li
--[ 2018.11.20.19.15.33.999.0 ]--
r 147         l
--[ 2018.11.20.19.15.34.103.0 ]--
r 147         
--[ 2018.11.20.19.15.40.167.0 ]--
- 149
r 149           
--[ 2018.11.20.19.15.41.657.0 ]--
+ 147         
--[ 2018.11.20.19.15.45.511.0 ]--
r 146         Partition partition ;
--[ 2018.11.20.19.15.45.728.0 ]--
r 146         Partition partition =;
--[ 2018.11.20.19.15.45.950.0 ]--
r 146         Partition partition = ;
--[ 2018.11.20.19.15.46.787.0 ]--
r 146         Partition partition = n;
--[ 2018.11.20.19.15.47.063.0 ]--
r 146         Partition partition = ne;
--[ 2018.11.20.19.15.47.158.0 ]--
r 146         Partition partition = new;
--[ 2018.11.20.19.15.47.550.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.47.764.0 ]--
r 146         Partition partition = new p;
--[ 2018.11.20.19.15.47.867.0 ]--
r 146         Partition partition = new pa;
--[ 2018.11.20.19.15.47.972.0 ]--
r 146         Partition partition = new par;
--[ 2018.11.20.19.15.48.956.0 ]--
r 146         Partition partition = new part;
--[ 2018.11.20.19.15.49.191.0 ]--
r 146         Partition partition = new parti;
--[ 2018.11.20.19.15.49.342.0 ]--
r 146         Partition partition = new partit;
--[ 2018.11.20.19.15.49.389.0 ]--
r 146         Partition partition = new partiti;
--[ 2018.11.20.19.15.49.443.0 ]--
r 146         Partition partition = new partitio;
--[ 2018.11.20.19.15.49.531.0 ]--
r 146         Partition partition = new partition;
--[ 2018.11.20.19.15.50.326.0 ]--
r 146         Partition partition = new partitio;
--[ 2018.11.20.19.15.50.619.0 ]--
r 146         Partition partition = new partiti;
--[ 2018.11.20.19.15.50.689.0 ]--
r 146         Partition partition = new partit;
--[ 2018.11.20.19.15.50.731.0 ]--
r 146         Partition partition = new part;
--[ 2018.11.20.19.15.50.790.0 ]--
r 146         Partition partition = new par;
--[ 2018.11.20.19.15.50.862.0 ]--
r 146         Partition partition = new p;
--[ 2018.11.20.19.15.50.895.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.51.035.0 ]--
r 146         Partition partition = new;
--[ 2018.11.20.19.15.51.382.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.51.591.0 ]--
r 146         Partition partition = new P;
--[ 2018.11.20.19.15.51.808.0 ]--
r 146         Partition partition = new Pa;
--[ 2018.11.20.19.15.51.844.0 ]--
r 146         Partition partition = new Par;
--[ 2018.11.20.19.15.51.989.0 ]--
r 146         Partition partition = new Part;
--[ 2018.11.20.19.15.52.525.0 ]--
r 146         Partition partition = new Partition;
--[ 2018.11.20.19.15.52.544.0 ]--
r 146         Partition partition = new Partition();
--[ 2018.11.20.19.15.54.124.0 ]--
+ 147         
--[ 2018.11.20.19.15.54.566.0 ]--
+ 147         
--[ 2018.11.20.19.15.55.097.0 ]--
r 148         p
--[ 2018.11.20.19.15.55.168.0 ]--
r 148         pa
--[ 2018.11.20.19.15.55.268.0 ]--
r 148         par
--[ 2018.11.20.19.15.55.916.0 ]--
r 148         part
--[ 2018.11.20.19.15.56.041.0 ]--
r 148         parti
--[ 2018.11.20.19.15.56.217.0 ]--
r 148         partit
--[ 2018.11.20.19.15.56.317.0 ]--
r 148         partiti
--[ 2018.11.20.19.15.56.388.0 ]--
r 148         partitio
--[ 2018.11.20.19.15.56.485.0 ]--
r 148         partition
--[ 2018.11.20.19.15.56.608.0 ]--
r 148         partition.
--[ 2018.11.20.19.15.56.817.0 ]--
r 148         partition.d
--[ 2018.11.20.19.15.56.984.0 ]--
r 148         partition.di
--[ 2018.11.20.19.15.57.152.0 ]--
r 148         partition.dir
--[ 2018.11.20.19.16.00.107.0 ]--
r 148         partition.dir 
--[ 2018.11.20.19.16.00.257.0 ]--
r 148         partition.dir =
--[ 2018.11.20.19.16.00.355.0 ]--
r 148         partition.dir = 
--[ 2018.11.20.19.16.02.519.0 ]--
r 148         partition.dir =
--[ 2018.11.20.19.16.02.800.0 ]--
r 148         partition.dir 
--[ 2018.11.20.19.16.03.470.0 ]--
r 148         partition.dir
--[ 2018.11.20.19.16.06.185.0 ]--
r 148         partition.di
--[ 2018.11.20.19.16.06.368.0 ]--
r 148         partition.d
--[ 2018.11.20.19.16.06.665.0 ]--
r 148         partition.
--[ 2018.11.20.19.16.07.475.0 ]--
r 148         partition.p
--[ 2018.11.20.19.16.09.672.0 ]--
r 148         partition.
--[ 2018.11.20.19.16.11.031.0 ]--
r 148         partition
--[ 2018.11.20.19.16.41.192.0 ]--
r 148         partitio
--[ 2018.11.20.19.16.41.479.0 ]--
r 148         partiti
--[ 2018.11.20.19.16.41.500.0 ]--
r 148         partit
--[ 2018.11.20.19.16.41.564.0 ]--
r 148         parti
--[ 2018.11.20.19.16.41.602.0 ]--
r 148         part
--[ 2018.11.20.19.16.41.638.0 ]--
r 148         pa
--[ 2018.11.20.19.16.41.940.0 ]--
r 148         p
--[ 2018.11.20.19.16.42.078.0 ]--
r 148         
--[ 2018.11.20.19.16.47.339.0 ]--
r 146         Partition partition = new Partition(a);
--[ 2018.11.20.19.16.47.763.0 ]--
r 146         Partition partition = new Partition(ar);
--[ 2018.11.20.19.16.47.897.0 ]--
r 146         Partition partition = new Partition(arr);
--[ 2018.11.20.19.16.48.636.0 ]--
r 146         Partition partition = new Partition(ar);
--[ 2018.11.20.19.16.48.760.0 ]--
r 146         Partition partition = new Partition(a);
--[ 2018.11.20.19.16.49.328.0 ]--
r 146         Partition partition = new Partition();
--[ 2018.11.20.19.16.49.531.0 ]--
r 146         Partition partition = new Partition(l);
--[ 2018.11.20.19.16.49.707.0 ]--
r 146         Partition partition = new Partition(li);
--[ 2018.11.20.19.16.49.754.0 ]--
r 146         Partition partition = new Partition(lis);
--[ 2018.11.20.19.16.49.900.0 ]--
r 146         Partition partition = new Partition(list);
--[ 2018.11.20.19.16.50.297.0 ]--
r 146         Partition partition = new Partition(listOfPoints);
--[ 2018.11.20.19.16.51.507.0 ]--
r 146         Partition partition = new Partition(listOfPoints[]);
--[ 2018.11.20.19.16.52.348.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0]);
--[ 2018.11.20.19.16.54.497.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],);
--[ 2018.11.20.19.17.12.612.0 ]--
r 146         Partition partition = new Partition(c);
--[ 2018.11.20.19.17.14.670.0 ]--
r 146         Partition partition = new Partition(c)z;
--[ 2018.11.20.19.17.15.676.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],);
--[ 2018.11.20.19.17.19.641.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[0],);
--[ 2018.11.20.19.17.20.675.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[0],,);
--[ 2018.11.20.19.17.21.957.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[],,);
--[ 2018.11.20.19.17.22.067.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],,);
--[ 2018.11.20.19.17.23.798.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],);
--[ 2018.11.20.19.17.26.339.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],l);
--[ 2018.11.20.19.17.26.558.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],li);
--[ 2018.11.20.19.17.27.374.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints);
--[ 2018.11.20.19.17.28.464.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[]);
--[ 2018.11.20.19.17.28.746.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[0]);
--[ 2018.11.20.19.17.29.745.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.18.04.985.0 ]--
r 147 
r 148 
r 149 
r 150 
r 152 
r 153 
r 156 
--[ 2018.11.20.19.31.49.527.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.49.711.0 ]--
r 146         Partition partition = new Partition(listOfPoints[,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.49.971.0 ]--
r 146         Partition partition = new Partition(listOfPoints,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.645.0 ]--
r 146         Partition partition = new Partition(listOfPoints.,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.788.0 ]--
r 146         Partition partition = new Partition(listOfPoints.g,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.972.0 ]--
r 146         Partition partition = new Partition(listOfPoints.ge,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.51.047.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.51.335.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(),listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.52.034.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.54.671.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[1,listOfPoints[0].);
--[ 2018.11.20.19.31.54.857.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[,listOfPoints[0].);
--[ 2018.11.20.19.31.54.995.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints,listOfPoints[0].);
--[ 2018.11.20.19.31.55.590.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.,listOfPoints[0].);
--[ 2018.11.20.19.31.55.712.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.g,listOfPoints[0].);
--[ 2018.11.20.19.31.55.869.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.ge,listOfPoints[0].);
--[ 2018.11.20.19.31.55.982.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get,listOfPoints[0].);
--[ 2018.11.20.19.31.56.215.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(),listOfPoints[0].);
--[ 2018.11.20.19.31.56.486.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0].);
--[ 2018.11.20.19.32.01.534.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0]);
--[ 2018.11.20.19.32.01.805.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0);
--[ 2018.11.20.19.32.01.823.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[);
--[ 2018.11.20.19.32.01.944.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoint);
--[ 2018.11.20.19.32.01.990.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoi);
--[ 2018.11.20.19.32.02.017.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPo);
--[ 2018.11.20.19.32.02.068.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfP);
--[ 2018.11.20.19.32.02.114.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOf);
--[ 2018.11.20.19.32.02.158.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),list);
--[ 2018.11.20.19.32.02.226.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),lis);
--[ 2018.11.20.19.32.02.503.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),li);
--[ 2018.11.20.19.32.02.567.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),l);
--[ 2018.11.20.19.32.02.724.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),);
--[ 2018.11.20.19.32.07.202.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),L);
--[ 2018.11.20.19.32.07.560.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LE);
--[ 2018.11.20.19.32.07.832.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LEF);
--[ 2018.11.20.19.32.10.610.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.626.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LEFTRIGHT);
--[ 2018.11.20.19.32.10.637.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),.LEFTRIGHT);
--[ 2018.11.20.19.32.10.650.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.668.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.724.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.22.077.0 ]--
r 146         Partition partition; = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.22.349.0 ]--
+ 146         Partition partition;
r 147         = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.065.0 ]--
r 147         p= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.206.0 ]--
r 147         pa= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.293.0 ]--
r 147         par= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.499.0 ]--
r 147         part= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.682.0 ]--
r 147         parti= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.885.0 ]--
r 147         partit= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.959.0 ]--
r 147         partiti= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.033.0 ]--
r 147         partitio= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.071.0 ]--
r 147         partition= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.384.0 ]--
r 147         partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.33.53.606.0 ]--
r 148     
--[ 2018.11.20.19.33.53.847.0 ]--
r 148         
--[ 2018.11.20.19.33.54.697.0 ]--
r 148         q
--[ 2018.11.20.19.33.54.894.0 ]--
r 148         q.
--[ 2018.11.20.19.33.55.380.0 ]--
r 148         q.e
--[ 2018.11.20.19.33.55.515.0 ]--
r 148         q.en
--[ 2018.11.20.19.33.55.764.0 ]--
r 148         q.enq
--[ 2018.11.20.19.33.56.004.0 ]--
r 148         q.enqu
--[ 2018.11.20.19.33.56.529.0 ]--
r 148         q.enque
--[ 2018.11.20.19.33.56.745.0 ]--
r 148         q.enqueu
--[ 2018.11.20.19.33.56.846.0 ]--
r 148         q.enqueue
--[ 2018.11.20.19.33.57.288.0 ]--
r 148         q.enqueue()
--[ 2018.11.20.19.33.57.557.0 ]--
r 148         q.enqueue(p)
--[ 2018.11.20.19.33.57.702.0 ]--
r 148         q.enqueue(pa)
--[ 2018.11.20.19.33.57.759.0 ]--
r 148         q.enqueue(par)
--[ 2018.11.20.19.33.58.016.0 ]--
r 148         q.enqueue(pari)
--[ 2018.11.20.19.33.58.396.0 ]--
r 148         q.enqueue(par)
--[ 2018.11.20.19.33.58.468.0 ]--
r 148         q.enqueue(part)
--[ 2018.11.20.19.33.58.632.0 ]--
r 148         q.enqueue(parti)
--[ 2018.11.20.19.33.58.747.0 ]--
r 148         q.enqueue(partit)
--[ 2018.11.20.19.33.58.852.0 ]--
r 148         q.enqueue(partiti)
--[ 2018.11.20.19.33.58.899.0 ]--
r 148         q.enqueue(partitio)
--[ 2018.11.20.19.33.58.984.0 ]--
r 148         q.enqueue(partition)
--[ 2018.11.20.19.34.00.959.0 ]--
r 148         q.enqueue(partition);
--[ 2018.11.20.19.35.53.250.0 ]--
+ 147         
--[ 2018.11.20.19.38.41.428.0 ]--
r 147 
--[ 2018.11.20.20.12.09.187.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.di);
--[ 2018.11.20.20.12.09.315.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.d);
--[ 2018.11.20.20.12.09.398.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.10.079.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.n);
--[ 2018.11.20.20.12.10.298.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.ne);
--[ 2018.11.20.20.12.10.374.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.nex);
--[ 2018.11.20.20.12.10.572.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.next);
--[ 2018.11.20.20.12.11.686.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.nex);
--[ 2018.11.20.20.12.11.977.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.ne);
--[ 2018.11.20.20.12.12.113.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.n);
--[ 2018.11.20.20.12.12.421.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.12.602.0 ]--
r 39                 double fingerValue = finger.p.xy(finger);
--[ 2018.11.20.20.12.12.982.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.17.494.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.d);
--[ 2018.11.20.20.12.17.683.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.di);
--[ 2018.11.20.20.12.17.795.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.20.12.18.370.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir.);
--[ 2018.11.20.20.12.21.827.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.20.12.30.762.0 ]--
+ 34             
--[ 2018.11.20.20.12.31.100.0 ]--
r 34             f
--[ 2018.11.20.20.12.31.163.0 ]--
r 34             fi
--[ 2018.11.20.20.12.31.265.0 ]--
r 34             fin
--[ 2018.11.20.20.12.31.350.0 ]--
r 34             find
--[ 2018.11.20.20.12.31.784.0 ]--
r 34             fin
--[ 2018.11.20.20.12.31.857.0 ]--
r 34             fing
--[ 2018.11.20.20.12.31.967.0 ]--
r 34             finge
--[ 2018.11.20.20.12.32.087.0 ]--
r 34             finger
--[ 2018.11.20.20.12.32.164.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.32.549.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.33.000.0 ]--
r 34             finger.p.
--[ 2018.11.20.20.12.37.516.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.37.692.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.37.873.0 ]--
r 34             finger
--[ 2018.11.20.20.12.38.145.0 ]--
r 34             finge
--[ 2018.11.20.20.12.39.466.0 ]--
r 34             finger
--[ 2018.11.20.20.12.39.605.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.39.895.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.40.195.0 ]--
r 34             finger.pa
--[ 2018.11.20.20.12.40.323.0 ]--
r 34             finger.par
--[ 2018.11.20.20.12.40.697.0 ]--
r 34             finger.part
--[ 2018.11.20.20.12.40.829.0 ]--
r 34             finger.parti
--[ 2018.11.20.20.12.41.285.0 ]--
r 34             finger.part
--[ 2018.11.20.20.12.41.438.0 ]--
r 34             finger.par
--[ 2018.11.20.20.12.42.310.0 ]--
r 34             finger.pa
--[ 2018.11.20.20.12.42.654.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.43.051.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.43.562.0 ]--
r 34             finger
--[ 2018.11.20.20.12.43.852.0 ]--
r 34             finge
--[ 2018.11.20.20.12.43.876.0 ]--
r 34             fing
--[ 2018.11.20.20.12.43.935.0 ]--
r 34             fin
--[ 2018.11.20.20.12.44.008.0 ]--
r 34             f
--[ 2018.11.20.20.12.44.052.0 ]--
r 34             
--[ 2018.11.20.20.12.44.351.0 ]--
- 34
--[ 2018.11.20.20.28.12.968.0 ]--
+ 37             
--[ 2018.11.20.20.28.13.525.0 ]--
r 37             f
--[ 2018.11.20.20.28.13.738.0 ]--
r 37             fi
--[ 2018.11.20.20.28.13.800.0 ]--
r 37             fin
--[ 2018.11.20.20.28.13.900.0 ]--
r 37             fing
--[ 2018.11.20.20.28.14.051.0 ]--
r 37             finge
--[ 2018.11.20.20.28.14.163.0 ]--
r 37             finger
--[ 2018.11.20.20.28.14.323.0 ]--
r 37             finger.
--[ 2018.11.20.20.28.15.342.0 ]--
r 37             finger.d
--[ 2018.11.20.20.28.15.494.0 ]--
r 37             finger.di
--[ 2018.11.20.20.28.15.660.0 ]--
r 37             finger.dir
--[ 2018.11.20.20.28.15.878.0 ]--
r 37             finger.dir 
--[ 2018.11.20.20.28.16.557.0 ]--
r 37             finger.dir =
--[ 2018.11.20.20.28.17.061.0 ]--
r 37             finger.dir = 
--[ 2018.11.20.20.28.17.337.0 ]--
r 37             finger.dir = P
--[ 2018.11.20.20.28.17.468.0 ]--
r 37             finger.dir = Pa
--[ 2018.11.20.20.28.17.568.0 ]--
r 37             finger.dir = Par
--[ 2018.11.20.20.28.17.716.0 ]--
r 37             finger.dir = Part
--[ 2018.11.20.20.28.17.850.0 ]--
r 37             finger.dir = Parti
--[ 2018.11.20.20.28.18.203.0 ]--
r 37             finger.dir = Partit
--[ 2018.11.20.20.28.18.308.0 ]--
r 37             finger.dir = Partiti
--[ 2018.11.20.20.28.18.416.0 ]--
r 37             finger.dir = Partitio
--[ 2018.11.20.20.28.18.456.0 ]--
r 37             finger.dir = Partition
--[ 2018.11.20.20.28.18.667.0 ]--
r 37             finger.dir = Partition.
--[ 2018.11.20.20.28.19.832.0 ]--
r 37             finger.dir = Partition.nextDirection
--[ 2018.11.20.20.28.19.843.0 ]--
r 37             finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.28.26.050.0 ]--
r 37             finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.28.33.716.0 ]--
r 37            / finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.28.33.845.0 ]--
r 37            // finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.29.55.659.0 ]--
r 37            / finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.29.56.174.0 ]--
r 37             finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.01.615.0 ]--
r 37             ifinger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.01.766.0 ]--
r 37             iffinger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.03.813.0 ]--
r 37             if(finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.04.210.0 ]--
r 37             if()finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.04.864.0 ]--
r 37             if(){finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.05.079.0 ]--
+ 37             if(){
+ 38 finger.dir = Partition.nextDirection();
r 39 }
--[ 2018.11.20.20.30.05.100.0 ]--
r 38                 finger.dir = Partition.nextDirection();
r 39             }
--[ 2018.11.20.20.30.20.314.0 ]--
r 39             
--[ 2018.11.20.20.30.20.549.0 ]--
- 39
--[ 2018.11.20.20.30.20.625.0 ]--
r 38                 finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.30.20.688.0 ]--
r 38                 finger.dir = Partition.nextDirection(
--[ 2018.11.20.20.30.20.761.0 ]--
r 38                 finger.dir = Partition.nextDirection
--[ 2018.11.20.20.30.22.368.0 ]--
r 38                 finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.30.22.847.0 ]--
r 38                 finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.23.882.0 ]--
r 37             if()
--[ 2018.11.20.20.30.24.055.0 ]--
r 37             if(
--[ 2018.11.20.20.30.24.124.0 ]--
r 37             if
--[ 2018.11.20.20.30.24.283.0 ]--
r 37             i
--[ 2018.11.20.20.30.24.403.0 ]--
r 37             
--[ 2018.11.20.20.30.44.188.0 ]--
+ 26     
--[ 2018.11.20.20.30.44.472.0 ]--
r 26     /
--[ 2018.11.20.20.30.44.658.0 ]--
r 26     //
--[ 2018.11.20.20.30.45.649.0 ]--
r 26     //T
--[ 2018.11.20.20.30.46.318.0 ]--
r 26     //To
--[ 2018.11.20.20.30.47.079.0 ]--
r 26     //T
--[ 2018.11.20.20.30.47.171.0 ]--
r 26     //
--[ 2018.11.20.20.30.47.280.0 ]--
r 26     // 
--[ 2018.11.20.20.30.47.611.0 ]--
r 26     // t
--[ 2018.11.20.20.30.48.116.0 ]--
r 26     // to
--[ 2018.11.20.20.30.48.359.0 ]--
r 26     // tod
--[ 2018.11.20.20.30.48.457.0 ]--
r 26     // todo
--[ 2018.11.20.20.30.48.571.0 ]--
r 26     // todo 
--[ 2018.11.20.20.30.49.928.0 ]--
r 26     // todo s
--[ 2018.11.20.20.30.50.105.0 ]--
r 26     // todo sadlkfj
--[ 2018.11.20.20.30.50.254.0 ]--
r 26     // todo sadlkfjls
--[ 2018.11.20.20.30.50.342.0 ]--
r 26     // todo sadlkfjlsfj
--[ 2018.11.20.20.30.51.109.0 ]--
r 26     // todo sadlkfjlsf
--[ 2018.11.20.20.30.51.344.0 ]--
r 26     // todo sadlkfjls
--[ 2018.11.20.20.30.51.436.0 ]--
r 26     // todo sadlkfj
--[ 2018.11.20.20.30.51.500.0 ]--
r 26     // todo sadlk
--[ 2018.11.20.20.30.51.567.0 ]--
r 26     // todo sad
--[ 2018.11.20.20.30.51.591.0 ]--
r 26     // todo sa
--[ 2018.11.20.20.30.51.656.0 ]--
r 26     // todo s
--[ 2018.11.20.20.30.52.071.0 ]--
r 26     // todo 
--[ 2018.11.20.20.30.53.073.0 ]--
r 26     // todo u
--[ 2018.11.20.20.30.53.219.0 ]--
r 26     // todo up
--[ 2018.11.20.20.30.53.403.0 ]--
r 26     // todo upd
--[ 2018.11.20.20.30.53.508.0 ]--
r 26     // todo upda
--[ 2018.11.20.20.30.53.692.0 ]--
r 26     // todo updat
--[ 2018.11.20.20.30.53.730.0 ]--
r 26     // todo update
--[ 2018.11.20.20.30.53.913.0 ]--
r 26     // todo update 
--[ 2018.11.20.20.30.54.084.0 ]--
r 26     // todo update t
--[ 2018.11.20.20.30.54.359.0 ]--
r 26     // todo update 
--[ 2018.11.20.20.30.54.618.0 ]--
r 26     // todo update
--[ 2018.11.20.20.30.54.692.0 ]--
r 26     // todo updat
--[ 2018.11.20.20.30.54.761.0 ]--
r 26     // todo upd
--[ 2018.11.20.20.30.54.826.0 ]--
r 26     // todo u
--[ 2018.11.20.20.30.54.845.0 ]--
r 26     // todo
--[ 2018.11.20.20.30.55.074.0 ]--
r 26     // tod
--[ 2018.11.20.20.30.55.246.0 ]--
r 26     // to
--[ 2018.11.20.20.30.55.324.0 ]--
r 26     // t
--[ 2018.11.20.20.30.55.797.0 ]--
r 26     // 
--[ 2018.11.20.20.30.55.980.0 ]--
r 26     // T
--[ 2018.11.20.20.30.56.054.0 ]--
r 26     // TO
--[ 2018.11.20.20.30.56.648.0 ]--
r 26     // TOD
--[ 2018.11.20.20.30.56.799.0 ]--
r 26     // TODO
--[ 2018.11.20.20.30.56.982.0 ]--
r 26     // TODO 
--[ 2018.11.20.20.30.57.400.0 ]--
r 26     // TODO u
--[ 2018.11.20.20.30.57.498.0 ]--
r 26     // TODO up
--[ 2018.11.20.20.30.57.553.0 ]--
r 26     // TODO upd
--[ 2018.11.20.20.30.57.708.0 ]--
r 26     // TODO upda
--[ 2018.11.20.20.30.57.868.0 ]--
r 26     // TODO updat
--[ 2018.11.20.20.30.58.162.0 ]--
r 26     // TODO update
--[ 2018.11.20.20.30.58.269.0 ]--
r 26     // TODO update 
--[ 2018.11.20.20.30.58.435.0 ]--
r 26     // TODO update t
--[ 2018.11.20.20.30.58.520.0 ]--
r 26     // TODO update th
--[ 2018.11.20.20.30.58.622.0 ]--
r 26     // TODO update the
--[ 2018.11.20.20.30.58.710.0 ]--
r 26     // TODO update the 
--[ 2018.11.20.20.31.00.425.0 ]--
r 26     // TODO update the d
--[ 2018.11.20.20.31.00.564.0 ]--
r 26     // TODO update the di
--[ 2018.11.20.20.31.00.627.0 ]--
r 26     // TODO update the dir
--[ 2018.11.20.20.31.00.808.0 ]--
r 26     // TODO update the dire
--[ 2018.11.20.20.31.00.991.0 ]--
r 26     // TODO update the direc
--[ 2018.11.20.20.31.01.175.0 ]--
r 26     // TODO update the direct
--[ 2018.11.20.20.31.01.259.0 ]--
r 26     // TODO update the directi
--[ 2018.11.20.20.31.01.315.0 ]--
r 26     // TODO update the directio
--[ 2018.11.20.20.31.01.390.0 ]--
r 26     // TODO update the direction
--[ 2018.11.20.20.31.01.643.0 ]--
r 26     // TODO update the direction.
--[ 2018.11.20.20.31.01.812.0 ]--
r 26     // TODO update the direction. 
--[ 2018.11.20.20.31.02.076.0 ]--
r 26     // TODO update the direction. C
--[ 2018.11.20.20.31.02.187.0 ]--
r 26     // TODO update the direction. Cu
--[ 2018.11.20.20.31.02.309.0 ]--
r 26     // TODO update the direction. Cur
--[ 2018.11.20.20.31.02.415.0 ]--
r 26     // TODO update the direction. Curr
--[ 2018.11.20.20.31.02.496.0 ]--
r 26     // TODO update the direction. Curre
--[ 2018.11.20.20.31.02.659.0 ]--
r 26     // TODO update the direction. Curren
--[ 2018.11.20.20.31.02.802.0 ]--
r 26     // TODO update the direction. Current
--[ 2018.11.20.20.31.02.885.0 ]--
r 26     // TODO update the direction. Currentl
--[ 2018.11.20.20.31.03.196.0 ]--
r 26     // TODO update the direction. Currently
--[ 2018.11.20.20.31.03.475.0 ]--
r 26     // TODO update the direction. Currently 
--[ 2018.11.20.20.31.03.688.0 ]--
r 26     // TODO update the direction. Currently u
--[ 2018.11.20.20.31.03.980.0 ]--
r 26     // TODO update the direction. Currently 
--[ 2018.11.20.20.31.04.093.0 ]--
r 26     // TODO update the direction. Currently i
--[ 2018.11.20.20.31.04.152.0 ]--
r 26     // TODO update the direction. Currently it
--[ 2018.11.20.20.31.04.298.0 ]--
r 26     // TODO update the direction. Currently it 
--[ 2018.11.20.20.31.04.483.0 ]--
r 26     // TODO update the direction. Currently it j
--[ 2018.11.20.20.31.04.618.0 ]--
r 26     // TODO update the direction. Currently it ju
--[ 2018.11.20.20.31.04.698.0 ]--
r 26     // TODO update the direction. Currently it jus
--[ 2018.11.20.20.31.04.765.0 ]--
r 26     // TODO update the direction. Currently it just
--[ 2018.11.20.20.31.04.865.0 ]--
r 26     // TODO update the direction. Currently it just 
--[ 2018.11.20.20.31.06.471.0 ]--
r 26     // TODO update the direction. Currently it just s
--[ 2018.11.20.20.31.06.639.0 ]--
r 26     // TODO update the direction. Currently it just st
--[ 2018.11.20.20.31.06.747.0 ]--
r 26     // TODO update the direction. Currently it just sti
--[ 2018.11.20.20.31.06.903.0 ]--
r 26     // TODO update the direction. Currently it just stic
--[ 2018.11.20.20.31.06.959.0 ]--
r 26     // TODO update the direction. Currently it just stick
--[ 2018.11.20.20.31.07.088.0 ]--
r 26     // TODO update the direction. Currently it just sticks
--[ 2018.11.20.20.31.07.177.0 ]--
r 26     // TODO update the direction. Currently it just sticks 
--[ 2018.11.20.20.31.07.246.0 ]--
r 26     // TODO update the direction. Currently it just sticks t
--[ 2018.11.20.20.31.07.370.0 ]--
r 26     // TODO update the direction. Currently it just sticks to
--[ 2018.11.20.20.31.07.438.0 ]--
r 26     // TODO update the direction. Currently it just sticks to 
--[ 2018.11.20.20.31.07.655.0 ]--
r 26     // TODO update the direction. Currently it just sticks to l
--[ 2018.11.20.20.31.08.232.0 ]--
r 26     // TODO update the direction. Currently it just sticks to 
--[ 2018.11.20.20.31.08.488.0 ]--
r 26     // TODO update the direction. Currently it just sticks to L
--[ 2018.11.20.20.31.09.201.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Le
--[ 2018.11.20.20.31.09.329.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Lef
--[ 2018.11.20.20.31.09.533.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Left
--[ 2018.11.20.20.31.09.909.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftR
--[ 2018.11.20.20.31.09.980.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRi
--[ 2018.11.20.20.31.10.067.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRig
--[ 2018.11.20.20.31.10.191.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRigh
--[ 2018.11.20.20.31.10.312.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRight
--[ 2018.11.20.20.31.11.543.0 ]--
+ 27     
--[ 2018.11.20.20.31.35.072.0 ]--
+ 35             
--[ 2018.11.20.20.31.35.815.0 ]--
r 35             r
--[ 2018.11.20.20.31.36.432.0 ]--
r 35             ro
--[ 2018.11.20.20.31.36.944.0 ]--
r 35             roo
--[ 2018.11.20.20.31.37.299.0 ]--
r 35             root
--[ 2018.11.20.20.31.37.471.0 ]--
r 35             root.
--[ 2018.11.20.20.31.38.206.0 ]--
r 35             root.d
--[ 2018.11.20.20.31.38.511.0 ]--
r 35             root.di
--[ 2018.11.20.20.31.38.627.0 ]--
r 35             root.dir
--[ 2018.11.20.20.31.38.888.0 ]--
r 35             root.dir 
--[ 2018.11.20.20.31.39.673.0 ]--
r 35             root.dir =
--[ 2018.11.20.20.31.43.557.0 ]--
r 35             root.dir 
--[ 2018.11.20.20.31.43.800.0 ]--
r 35             root.dir
--[ 2018.11.20.20.31.43.902.0 ]--
r 35             root.d
--[ 2018.11.20.20.31.43.916.0 ]--
r 35             root.
--[ 2018.11.20.20.31.43.953.0 ]--
r 35             root
--[ 2018.11.20.20.31.44.069.0 ]--
r 35             ro
--[ 2018.11.20.20.31.44.330.0 ]--
r 35             r
--[ 2018.11.20.20.31.44.640.0 ]--
r 35             
--[ 2018.11.20.20.31.45.018.0 ]--
- 35
--[ 2018.11.20.20.32.28.852.0 ]--
r 27 
r 39 
--[ 2018.11.20.20.33.59.874.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); 
--[ 2018.11.20.20.34.00.107.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); /
--[ 2018.11.20.20.34.00.192.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //
--[ 2018.11.20.20.34.00.846.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //p
--[ 2018.11.20.20.34.01.009.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pu
--[ 2018.11.20.20.34.01.262.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pul
--[ 2018.11.20.20.34.01.327.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull
--[ 2018.11.20.20.34.01.526.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull 
--[ 2018.11.20.20.34.01.613.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull t
--[ 2018.11.20.20.34.01.675.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull th
--[ 2018.11.20.20.34.01.764.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the
--[ 2018.11.20.20.34.01.857.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the 
--[ 2018.11.20.20.34.01.978.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the v
--[ 2018.11.20.20.34.02.062.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the va
--[ 2018.11.20.20.34.02.180.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the val
--[ 2018.11.20.20.34.02.310.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the valu
--[ 2018.11.20.20.34.02.395.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value
--[ 2018.11.20.20.34.02.541.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value 
--[ 2018.11.20.20.34.02.711.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value o
--[ 2018.11.20.20.34.02.784.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of
--[ 2018.11.20.20.34.02.863.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of 
--[ 2018.11.20.20.34.03.344.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of f
--[ 2018.11.20.20.34.03.518.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fi
--[ 2018.11.20.20.34.03.747.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fin
--[ 2018.11.20.20.34.03.847.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fing
--[ 2018.11.20.20.34.03.985.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finge
--[ 2018.11.20.20.34.04.147.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger
--[ 2018.11.20.20.34.04.231.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger 
--[ 2018.11.20.20.34.04.815.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger b
--[ 2018.11.20.20.34.04.921.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger ba
--[ 2018.11.20.20.34.05.018.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger bas
--[ 2018.11.20.20.34.05.185.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger base
--[ 2018.11.20.20.34.05.374.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based
--[ 2018.11.20.20.34.05.500.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based 
--[ 2018.11.20.20.34.05.636.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based o
--[ 2018.11.20.20.34.05.721.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on
--[ 2018.11.20.20.34.06.758.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on 
--[ 2018.11.20.20.34.07.390.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on t
--[ 2018.11.20.20.34.08.014.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on th
--[ 2018.11.20.20.34.08.173.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the
--[ 2018.11.20.20.34.08.270.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the 
--[ 2018.11.20.20.34.08.598.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the d
--[ 2018.11.20.20.34.08.728.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the di
--[ 2018.11.20.20.34.08.825.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the dir
--[ 2018.11.20.20.34.08.925.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the dire
--[ 2018.11.20.20.34.09.096.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direc
--[ 2018.11.20.20.34.09.283.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direct
--[ 2018.11.20.20.34.09.375.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the directi
--[ 2018.11.20.20.34.09.441.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the directio
--[ 2018.11.20.20.34.09.503.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction
--[ 2018.11.20.20.34.09.611.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction 
--[ 2018.11.20.20.34.09.758.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction w
--[ 2018.11.20.20.34.09.828.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we
--[ 2018.11.20.20.34.09.925.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we 
--[ 2018.11.20.20.34.09.994.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we a
--[ 2018.11.20.20.34.10.090.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we ar
--[ 2018.11.20.20.34.10.147.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are
--[ 2018.11.20.20.34.10.255.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are 
--[ 2018.11.20.20.34.10.850.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are o
--[ 2018.11.20.20.34.10.947.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
--[ 2018.11.20.20.37.48.659.0 ]--
r 40                 finger.dir = Partition.nextDirection(f);
--[ 2018.11.20.20.37.48.757.0 ]--
r 40                 finger.dir = Partition.nextDirection(fi);
--[ 2018.11.20.20.37.48.867.0 ]--
r 40                 finger.dir = Partition.nextDirection(fin);
--[ 2018.11.20.20.37.48.884.0 ]--
r 40                 finger.dir = Partition.nextDirection(fing);
--[ 2018.11.20.20.37.49.060.0 ]--
r 40                 finger.dir = Partition.nextDirection(finge);
--[ 2018.11.20.20.37.49.143.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger);
--[ 2018.11.20.20.37.49.194.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.);
--[ 2018.11.20.20.37.49.390.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.d);
--[ 2018.11.20.20.37.49.587.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.di);
--[ 2018.11.20.20.37.49.722.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.37.52.726.0 ]--
r 40                / finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.37.52.846.0 ]--
r 40                // finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.07.180.0 ]--
r 40                
--[ 2018.11.20.20.38.08.945.0 ]--
+ 27     
--[ 2018.11.20.20.38.09.598.0 ]--
r 27     /
--[ 2018.11.20.20.38.10.015.0 ]--
r 27     //
--[ 2018.11.20.20.38.10.142.0 ]--
r 27     // 
--[ 2018.11.20.20.38.10.333.0 ]--
r 27     // u
--[ 2018.11.20.20.38.10.466.0 ]--
r 27     // us
--[ 2018.11.20.20.38.10.567.0 ]--
r 27     // usi
--[ 2018.11.20.20.38.10.641.0 ]--
r 27     // usin
--[ 2018.11.20.20.38.10.720.0 ]--
r 27     // using
--[ 2018.11.20.20.38.10.834.0 ]--
r 27     // using 
--[ 2018.11.20.20.38.10.966.0 ]--
r 27     // using s
--[ 2018.11.20.20.38.10.992.0 ]--
r 27     // using so
--[ 2018.11.20.20.38.11.117.0 ]--
r 27     // using som
--[ 2018.11.20.20.38.11.184.0 ]--
r 27     // using some
--[ 2018.11.20.20.38.11.268.0 ]--
r 27     // using somet
--[ 2018.11.20.20.38.11.392.0 ]--
r 27     // using someth
--[ 2018.11.20.20.38.11.492.0 ]--
r 27     // using somethi
--[ 2018.11.20.20.38.11.585.0 ]--
r 27     // using somethin
--[ 2018.11.20.20.38.11.671.0 ]--
r 27     // using something
--[ 2018.11.20.20.38.11.766.0 ]--
r 27     // using something 
--[ 2018.11.20.20.38.11.842.0 ]--
r 27     // using something l
--[ 2018.11.20.20.38.11.960.0 ]--
r 27     // using something li
--[ 2018.11.20.20.38.12.115.0 ]--
r 27     // using something lik
--[ 2018.11.20.20.38.12.157.0 ]--
r 27     // using something like
--[ 2018.11.20.20.38.12.321.0 ]--
r 27     // using something like 
--[ 2018.11.20.20.38.12.900.0 ]--
r 27     // using something like :
--[ 2018.11.20.20.38.13.366.0 ]--
r 27     // using something like :// finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.406.0 ]--
r 27     // using something like ://finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.538.0 ]--
r 27     // using something like :/finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.644.0 ]--
r 27     // using something like :finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.776.0 ]--
r 27     // using something like finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.126.0 ]--
r 27     // using something likefinger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.606.0 ]--
r 27     // using something like:finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.797.0 ]--
r 27     // using something like: finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.19.570.0 ]--
+ 28     
--[ 2018.11.20.20.38.20.597.0 ]--
r 28     /
--[ 2018.11.20.20.38.20.758.0 ]--
r 28     //
--[ 2018.11.20.20.38.21.089.0 ]--
r 28     // 
--[ 2018.11.20.20.38.21.255.0 ]--
r 28     // I
--[ 2018.11.20.20.38.21.383.0 ]--
r 28     // I'
--[ 2018.11.20.20.38.21.556.0 ]--
r 28     // I'm
--[ 2018.11.20.20.38.21.739.0 ]--
r 28     // I'm 
--[ 2018.11.20.20.38.22.919.0 ]--
r 28     // I'm c
--[ 2018.11.20.20.38.23.022.0 ]--
r 28     // I'm co
--[ 2018.11.20.20.38.23.095.0 ]--
r 28     // I'm con
--[ 2018.11.20.20.38.23.208.0 ]--
r 28     // I'm conf
--[ 2018.11.20.20.38.23.325.0 ]--
r 28     // I'm confu
--[ 2018.11.20.20.38.23.403.0 ]--
r 28     // I'm confus
--[ 2018.11.20.20.38.23.449.0 ]--
r 28     // I'm confuse
--[ 2018.11.20.20.38.23.709.0 ]--
r 28     // I'm confused
--[ 2018.11.20.20.38.24.197.0 ]--
r 28     // I'm confused 
--[ 2018.11.20.20.38.24.341.0 ]--
r 28     // I'm confused a
--[ 2018.11.20.20.38.24.456.0 ]--
r 28     // I'm confused ab
--[ 2018.11.20.20.38.24.532.0 ]--
r 28     // I'm confused abo
--[ 2018.11.20.20.38.24.695.0 ]--
r 28     // I'm confused abou
--[ 2018.11.20.20.38.24.754.0 ]--
r 28     // I'm confused about
--[ 2018.11.20.20.38.24.911.0 ]--
r 28     // I'm confused about 
--[ 2018.11.20.20.38.25.157.0 ]--
r 28     // I'm confused about h
--[ 2018.11.20.20.38.25.297.0 ]--
r 28     // I'm confused about ho
--[ 2018.11.20.20.38.25.338.0 ]--
r 28     // I'm confused about how
--[ 2018.11.20.20.38.25.466.0 ]--
r 28     // I'm confused about how 
--[ 2018.11.20.20.38.25.582.0 ]--
r 28     // I'm confused about how t
--[ 2018.11.20.20.38.25.660.0 ]--
r 28     // I'm confused about how th
--[ 2018.11.20.20.38.25.738.0 ]--
r 28     // I'm confused about how thi
--[ 2018.11.20.20.38.25.833.0 ]--
r 28     // I'm confused about how this
--[ 2018.11.20.20.38.25.853.0 ]--
r 28     // I'm confused about how this 
--[ 2018.11.20.20.38.25.999.0 ]--
r 28     // I'm confused about how this w
--[ 2018.11.20.20.38.26.086.0 ]--
r 28     // I'm confused about how this wo
--[ 2018.11.20.20.38.26.164.0 ]--
r 28     // I'm confused about how this wor
--[ 2018.11.20.20.38.26.256.0 ]--
r 28     // I'm confused about how this work
--[ 2018.11.20.20.38.26.342.0 ]--
r 28     // I'm confused about how this works
--[ 2018.11.20.20.38.26.466.0 ]--
r 28     // I'm confused about how this works 
--[ 2018.11.20.20.38.26.599.0 ]--
r 28     // I'm confused about how this works t
--[ 2018.11.20.20.38.26.665.0 ]--
r 28     // I'm confused about how this works th
--[ 2018.11.20.20.38.26.751.0 ]--
r 28     // I'm confused about how this works tho
--[ 2018.11.20.20.38.26.842.0 ]--
r 28     // I'm confused about how this works thou
--[ 2018.11.20.20.38.26.919.0 ]--
r 28     // I'm confused about how this works thoug
--[ 2018.11.20.20.38.27.019.0 ]--
r 28     // I'm confused about how this works though
--[ 2018.11.20.20.38.27.235.0 ]--
r 28     // I'm confused about how this works though.
--[ 2018.11.20.20.38.27.325.0 ]--
r 28     // I'm confused about how this works though..
--[ 2018.11.20.20.38.27.409.0 ]--
r 28     // I'm confused about how this works though...
--[ 2018.11.20.20.38.33.441.0 ]--
r 28     // I'm confused about how this works though...I
--[ 2018.11.20.20.38.33.573.0 ]--
r 28     // I'm confused about how this works though...I 
--[ 2018.11.20.20.38.33.749.0 ]--
r 28     // I'm confused about how this works though...I a
--[ 2018.11.20.20.38.33.894.0 ]--
r 28     // I'm confused about how this works though...I as
--[ 2018.11.20.20.38.34.032.0 ]--
r 28     // I'm confused about how this works though...I ask
--[ 2018.11.20.20.38.34.074.0 ]--
r 28     // I'm confused about how this works though...I aske
--[ 2018.11.20.20.38.34.278.0 ]--
r 28     // I'm confused about how this works though...I asked
--[ 2018.11.20.20.38.34.404.0 ]--
r 28     // I'm confused about how this works though...I asked 
--[ 2018.11.20.20.38.34.535.0 ]--
r 28     // I'm confused about how this works though...I asked a
--[ 2018.11.20.20.38.34.619.0 ]--
r 28     // I'm confused about how this works though...I asked a 
--[ 2018.11.20.20.38.35.001.0 ]--
r 28     // I'm confused about how this works though...I asked a q
--[ 2018.11.20.20.38.35.213.0 ]--
r 28     // I'm confused about how this works though...I asked a qu
--[ 2018.11.20.20.38.35.401.0 ]--
r 28     // I'm confused about how this works though...I asked a que
--[ 2018.11.20.20.38.35.483.0 ]--
r 28     // I'm confused about how this works though...I asked a ques
--[ 2018.11.20.20.38.35.553.0 ]--
r 28     // I'm confused about how this works though...I asked a quest
--[ 2018.11.20.20.38.35.594.0 ]--
r 28     // I'm confused about how this works though...I asked a questi
--[ 2018.11.20.20.38.35.697.0 ]--
r 28     // I'm confused about how this works though...I asked a questio
--[ 2018.11.20.20.38.35.891.0 ]--
r 28     // I'm confused about how this works though...I asked a question 
--[ 2018.11.20.20.38.35.978.0 ]--
r 28     // I'm confused about how this works though...I asked a question o
--[ 2018.11.20.20.38.36.055.0 ]--
r 28     // I'm confused about how this works though...I asked a question on
--[ 2018.11.20.20.38.36.153.0 ]--
r 28     // I'm confused about how this works though...I asked a question on 
--[ 2018.11.20.20.38.36.404.0 ]--
r 28     // I'm confused about how this works though...I asked a question on P
--[ 2018.11.20.20.38.36.538.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Pi
--[ 2018.11.20.20.38.36.962.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Pia
--[ 2018.11.20.20.38.37.256.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piaz
--[ 2018.11.20.20.38.37.360.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazz
--[ 2018.11.20.20.38.37.551.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazza
--[ 2018.11.20.20.38.38.120.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazza!
--[ 2018.11.20.20.38.40.812.0 ]--
r 42             
--[ 2018.11.20.20.38.41.206.0 ]--
- 41
--[ 2018.11.20.20.38.41.942.0 ]--
- 41
--[ 2018.11.20.20.38.46.559.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.20.39.01.756.0 ]--
+ 29     
--[ 2018.11.20.20.39.02.597.0 ]--
r 29     /
--[ 2018.11.20.20.39.02.728.0 ]--
r 29     //
--[ 2018.11.20.20.39.03.065.0 ]--
r 29     // 
--[ 2018.11.20.20.39.03.155.0 ]--
r 29     // e
--[ 2018.11.20.20.39.03.349.0 ]--
r 29     // en
--[ 2018.11.20.20.39.03.401.0 ]--
r 29     // end
--[ 2018.11.20.20.39.03.545.0 ]--
r 29     // end 
--[ 2018.11.20.20.39.03.800.0 ]--
r 29     // end T
--[ 2018.11.20.20.39.03.867.0 ]--
r 29     // end TO
--[ 2018.11.20.20.39.04.016.0 ]--
r 29     // end TOD
--[ 2018.11.20.20.39.04.230.0 ]--
r 29     // end TODO
--[ 2018.11.20.20.39.12.207.0 ]--
r 29     // endTODO
--[ 2018.11.20.20.39.12.382.0 ]--
r 29     // enTODO
--[ 2018.11.20.20.39.12.495.0 ]--
r 29     // eTODO
--[ 2018.11.20.20.39.12.836.0 ]--
r 29     // TODO
--[ 2018.11.20.20.39.14.971.0 ]--
r 29     // TODO 
--[ 2018.11.20.20.39.15.207.0 ]--
r 29     // TODO (
--[ 2018.11.20.20.39.15.463.0 ]--
r 29     // TODO (l
--[ 2018.11.20.20.39.15.620.0 ]--
r 29     // TODO (li
--[ 2018.11.20.20.39.15.772.0 ]--
r 29     // TODO (lik
--[ 2018.11.20.20.39.15.876.0 ]--
r 29     // TODO (like
--[ 2018.11.20.20.39.15.970.0 ]--
r 29     // TODO (like 
--[ 2018.11.20.20.39.16.073.0 ]--
r 29     // TODO (like t
--[ 2018.11.20.20.39.16.141.0 ]--
r 29     // TODO (like th
--[ 2018.11.20.20.39.16.217.0 ]--
r 29     // TODO (like the
--[ 2018.11.20.20.39.16.287.0 ]--
r 29     // TODO (like the 
--[ 2018.11.20.20.39.16.576.0 ]--
r 29     // TODO (like the d
--[ 2018.11.20.20.39.16.713.0 ]--
r 29     // TODO (like the do
--[ 2018.11.20.20.39.16.896.0 ]--
r 29     // TODO (like the dog
--[ 2018.11.20.20.39.17.131.0 ]--
r 29     // TODO (like the dog,
--[ 2018.11.20.20.39.17.242.0 ]--
r 29     // TODO (like the dog, 
--[ 2018.11.20.20.39.17.374.0 ]--
r 29     // TODO (like the dog, e
--[ 2018.11.20.20.39.17.532.0 ]--
r 29     // TODO (like the dog, ex
--[ 2018.11.20.20.39.18.302.0 ]--
r 29     // TODO (like the dog, exc
--[ 2018.11.20.20.39.18.412.0 ]--
r 29     // TODO (like the dog, exce
--[ 2018.11.20.20.39.18.554.0 ]--
r 29     // TODO (like the dog, excep
--[ 2018.11.20.20.39.18.685.0 ]--
r 29     // TODO (like the dog, except
--[ 2018.11.20.20.39.18.817.0 ]--
r 29     // TODO (like the dog, except 
--[ 2018.11.20.20.39.19.235.0 ]--
r 29     // TODO (like the dog, except s
--[ 2018.11.20.20.39.19.413.0 ]--
r 29     // TODO (like the dog, except sp
--[ 2018.11.20.20.39.19.513.0 ]--
r 29     // TODO (like the dog, except spe
--[ 2018.11.20.20.39.19.663.0 ]--
r 29     // TODO (like the dog, except spee
--[ 2018.11.20.20.39.19.764.0 ]--
r 29     // TODO (like the dog, except speel
--[ 2018.11.20.20.39.20.164.0 ]--
r 29     // TODO (like the dog, except spee
--[ 2018.11.20.20.39.20.264.0 ]--
r 29     // TODO (like the dog, except spe
--[ 2018.11.20.20.39.20.436.0 ]--
r 29     // TODO (like the dog, except spel
--[ 2018.11.20.20.39.20.599.0 ]--
r 29     // TODO (like the dog, except spele
--[ 2018.11.20.20.39.20.719.0 ]--
r 29     // TODO (like the dog, except spelee
--[ 2018.11.20.20.39.20.888.0 ]--
r 29     // TODO (like the dog, except speleed
--[ 2018.11.20.20.39.21.006.0 ]--
r 29     // TODO (like the dog, except speleed 
--[ 2018.11.20.20.39.21.381.0 ]--
r 29     // TODO (like the dog, except speleed
--[ 2018.11.20.20.39.21.482.0 ]--
r 29     // TODO (like the dog, except spelee
--[ 2018.11.20.20.39.21.610.0 ]--
r 29     // TODO (like the dog, except spele
--[ 2018.11.20.20.39.21.702.0 ]--
r 29     // TODO (like the dog, except spel
--[ 2018.11.20.20.39.22.025.0 ]--
r 29     // TODO (like the dog, except spell
--[ 2018.11.20.20.39.22.145.0 ]--
r 29     // TODO (like the dog, except spelle
--[ 2018.11.20.20.39.22.719.0 ]--
r 29     // TODO (like the dog, except spelled
--[ 2018.11.20.20.39.22.820.0 ]--
r 29     // TODO (like the dog, except spelled 
--[ 2018.11.20.20.39.22.898.0 ]--
r 29     // TODO (like the dog, except spelled a
--[ 2018.11.20.20.39.22.985.0 ]--
r 29     // TODO (like the dog, except spelled a 
--[ 2018.11.20.20.39.23.072.0 ]--
r 29     // TODO (like the dog, except spelled a l
--[ 2018.11.20.20.39.23.162.0 ]--
r 29     // TODO (like the dog, except spelled a li
--[ 2018.11.20.20.39.23.259.0 ]--
r 29     // TODO (like the dog, except spelled a lit
--[ 2018.11.20.20.39.23.437.0 ]--
r 29     // TODO (like the dog, except spelled a litt
--[ 2018.11.20.20.39.23.503.0 ]--
r 29     // TODO (like the dog, except spelled a littl
--[ 2018.11.20.20.39.23.572.0 ]--
r 29     // TODO (like the dog, except spelled a little
--[ 2018.11.20.20.39.23.636.0 ]--
r 29     // TODO (like the dog, except spelled a little 
--[ 2018.11.20.20.39.23.749.0 ]--
r 29     // TODO (like the dog, except spelled a little d
--[ 2018.11.20.20.39.23.856.0 ]--
r 29     // TODO (like the dog, except spelled a little di
--[ 2018.11.20.20.39.23.972.0 ]--
r 29     // TODO (like the dog, except spelled a little dif
--[ 2018.11.20.20.39.24.168.0 ]--
r 29     // TODO (like the dog, except spelled a little diff
--[ 2018.11.20.20.39.24.191.0 ]--
r 29     // TODO (like the dog, except spelled a little diffe
--[ 2018.11.20.20.39.24.317.0 ]--
r 29     // TODO (like the dog, except spelled a little differ
--[ 2018.11.20.20.39.24.380.0 ]--
r 29     // TODO (like the dog, except spelled a little differe
--[ 2018.11.20.20.39.24.574.0 ]--
r 29     // TODO (like the dog, except spelled a little differen
--[ 2018.11.20.20.39.24.614.0 ]--
r 29     // TODO (like the dog, except spelled a little different
--[ 2018.11.20.20.39.24.907.0 ]--
r 29     // TODO (like the dog, except spelled a little different!
--[ 2018.11.20.20.39.25.524.0 ]--
r 29     // TODO (like the dog, except spelled a little different!)
--[ 2018.11.25.17.33.40.087.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.25.17.33.40.430.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/heads/imanisbranch
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/refs/stash
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/heads/imanisbranch
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/refs/stash
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/02/e6f2a490da9a922d98b51dc0ef7c57422f4652
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/09/4b8c892fd5102ff7ef0dd4ac9f240690ddb208
/.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
/.git/objects/0b/cb1ae2a966f7111b04ea0e920d0c8aec8d394b
/.git/objects/10/c4ab3e9685629835608f6ec0570e32a1b2c8f7
/.git/objects/13/25d334ec94069aec2833836e319c0981408cfa
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
/.git/objects/25/82cf4e84d60b07e179d99dccfe58672bfe84a8
/.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
/.git/objects/2a/38d1c6c21fcf701318fa81abded579733f2677
/.git/objects/33/cc2166b7ec848ea42c0fc2c409556e20589802
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
/.git/objects/45/fe5f4622d4bcfce09f915a052da0832b06deb9
/.git/objects/47/b741f8ac969a6f29b52d882c67dad075facb3e
/.git/objects/47/ea390db7413f9f14dfeebee9356c66046a9126
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/54/b37f17e70ec4b3c24cf6e6a402bf8e4faefc51
/.git/objects/55/348824c11a0b9d0e28aabf24f6c0b547f752d1
/.git/objects/55/7569dde5cab073eb6e371295eaf8b1908c5bee
/.git/objects/56/c7fc57de7679362f667d09e209040b3aa4adf6
/.git/objects/5b/b9bda9b64b84330e619a9a144427847359978f
/.git/objects/5c/2e70c55dad30e879a344665b1cb6fee4e0bdba
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
/.git/objects/67/a4c2074dda4b023539981ef1b7c5482d5a5978
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6f/50e09870dafe35d5447d7094da0a96b9cdaac1
/.git/objects/6f/cc24bfdb55009cc2634fa4baece3496212e6c6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/75/c363477c95d507d8fd9183d519a94132f01ee9
/.git/objects/77/1b3f5f1b5fcb960464562e0be49afc1c012594
/.git/objects/7c/85a26cba3ad3508ae16fce52e54f3251b35a67
/.git/objects/7d/3af14f39a1d8bb8b60795f2191d41ed950645d
/.git/objects/7f/ad7e1a047b1f4c7b0d08d62bfefba77fb54c28
/.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
/.git/objects/89/68e4730d9ef1b4fd3d65c11696e2f3464e17ac
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/4fc1b94f6be829b0272be4921f5bb6b4d515ee
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/9c/d2910dd0eb83117aead798612c9aaaaf9950e9
/.git/objects/a2/ffa17b91d6b6ddcc862798c60330d0113280a0
/.git/objects/a3/5a53ff6566d9373a9e58750a8d0c0b67f211ab
/.git/objects/a7/c355e468383ed5fcb4aac2a4bbcb24991e8282
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ab/b318e5a24ccce94b2d451bb7ab519219d74044
/.git/objects/ad/405a0d301b775248b534154ae48eadd0828366
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
/.git/objects/b0/9135a743700a98a5ffe0ecd29a4da937688d56
/.git/objects/b0/c722ddc717fd96024fddbfdaa21e84a5c9aebd
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b5/bdbdbf3df4111cc75ee19ce6abe706f708daa5
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/bd/8731e2432305d0859c1a85da970362658bbbd1
/.git/objects/c1/977ef08f8cfca0049f5ae764ce0326896e89c7
/.git/objects/c2/98f615108f45225e2c9307c738ac9e2faa631e
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/cb/f53fd63eac8ebf4cfc3c8fa0ba72fd711eef98
/.git/objects/d2/3b25455b53a18cf8a4558adfacceef00415315
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e4/88099f5e11e5bf3bb2be72cefe0804fefb7b02
/.git/objects/e5/64196297ae68e4aec61df950232f40ba049e2b
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/594049a07fa090ae20cba768199e8c03f5c65a
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/ef/4489f375f69581099bbf11ce1ac8fb6901c763
/.git/objects/f0/009536f7984509311050839a9b4ee997d155ad
/.git/objects/f0/4ec327764f5180068a195efeb8bc3d760ce43d
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f3/8d7c0c2190df37f059d1856d736375612656df
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/objects/f5/9307c1d0168f1c957f786418e129ab0b259e7a
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/objects/fc/ffaccf82b628f54bac5ba392691067050e5dff
/.git/objects/fe/86b7d30276d409463a9786906238815afa4617
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.25.17.33.40.649.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.25.17.33.40.789.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.25.17.33.40.930.0 ]--
InitFile: /src/PSKDTree.java
import java.util.ArrayList;
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;
    private ArrayList<Point> listOfPoints; //stackOfPoints;
    private int treeSize;
    // constructor makes empty kD-tree
    public PSKDTree() {
        listOfPoints = new ArrayList<Point>(); // an iterable

    }

    // TODO update the direction. Currently it just sticks to LeftRight
    // using something like: finger.dir = Partition.nextDirection(finger.dir);
    // I'm confused about how this works though...I asked a question on Piazza!
    // TODO (like the dog, except spelled a little different!)

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node();
        newNode.p = p;
        newNode.v = v;
        Node finger;
        if(this.isEmpty()){
            newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIGHT
            root = newNode;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
                double newNodeValue = newNode.p.xy(finger.dir);
                if (newNodeValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.left = newNode;
                        treeSize++;
                        break; //baby
                    } else {
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.right = newNode;
                        treeSize++;
                        break; //baby
                    } else {
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value get(Point p) {
        Node finger;
        if(this.isEmpty()){
            return null;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return null;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return null;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public boolean contains(Point p) {
        Node finger;
        if (this.isEmpty()) {
            return false;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return false;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return true;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return false;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return true;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return listOfPoints; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        Queue<Partition> q = new Queue<>();
        Partition partition;

        partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
        q.enqueue(partition);



        for(Point pt : listOfPoints){


            q.enqueue(partition);
        }

        return q;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tree

    // return whether the kD-tree is empty
    public boolean isEmpty() {
        return root==null; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.25.17.33.40.930.1 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.25.17.33.40.930.2 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.25.17.33.40.946.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.25.17.33.40.993.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.25.17.33.41.008.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.25.17.33.41.055.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.25.17.33.41.055.1 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.25.17.33.41.055.2 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.25.17.33.41.055.3 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.25.17.33.41.055.4 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.25.17.33.41.102.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.25.17.34.12.660.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.17.34.27.394.0 ]--
UpdateTree (AD): 18 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.25.17.37.07.375.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.17.39.24.279.0 ]--
:/src/PSKDTree.java
- 29
--[ 2018.11.25.17.44.39.767.0 ]--
r 141         return a;
--[ 2018.11.25.17.44.39.970.0 ]--
r 141         return ar;
--[ 2018.11.25.17.44.40.111.0 ]--
r 141         return arr;
--[ 2018.11.25.17.44.40.579.0 ]--
r 141         return ar;
--[ 2018.11.25.17.44.40.767.0 ]--
r 141         return a;
--[ 2018.11.25.17.44.40.954.0 ]--
r 141         return ;
--[ 2018.11.25.17.44.42.048.0 ]--
r 141         return l;
--[ 2018.11.25.17.44.42.235.0 ]--
r 141         return li;
--[ 2018.11.25.17.44.42.501.0 ]--
r 141         return lis;
--[ 2018.11.25.17.44.43.188.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.44.45.125.0 ]--
r 141         return listOfPoints[];
--[ 2018.11.25.17.44.45.266.0 ]--
r 141         return listOfPoints[1];
--[ 2018.11.25.17.44.46.266.0 ]--
r 141         return listOfPoints[1;
--[ 2018.11.25.17.44.46.328.0 ]--
r 141         return listOfPoints[;
--[ 2018.11.25.17.44.46.984.0 ]--
r 141         return listOfPoints[0;
--[ 2018.11.25.17.44.47.531.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.44.59.075.0 ]--
r 141         return listOfPoints[0].;
--[ 2018.11.25.17.45.00.278.0 ]--
r 141         return listOfPoints[0].p;
--[ 2018.11.25.17.45.00.590.0 ]--
r 141         return listOfPoints[0].;
--[ 2018.11.25.17.45.00.840.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.45.00.981.0 ]--
r 141         return listOfPoints[0;
--[ 2018.11.25.17.45.01.153.0 ]--
r 141         return listOfPoints[;
--[ 2018.11.25.17.45.02.168.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.45.05.621.0 ]--
r 141         return listOfPoints.;
--[ 2018.11.25.17.45.05.917.0 ]--
r 141         return listOfPoints.g;
--[ 2018.11.25.17.45.06.073.0 ]--
r 141         return listOfPoints.ge;
--[ 2018.11.25.17.45.06.464.0 ]--
r 141         return listOfPoints.get;
--[ 2018.11.25.17.45.09.994.0 ]--
r 141         return listOfPoints.get();
--[ 2018.11.25.17.45.11.369.0 ]--
r 141         return listOfPoints.get(0);
--[ 2018.11.25.17.45.15.759.0 ]--
r 141         return listOfPoints.get();
--[ 2018.11.25.17.45.15.946.0 ]--
r 141         return listOfPoints.get;
--[ 2018.11.25.17.45.16.274.0 ]--
r 141         return listOfPoints.ge;
--[ 2018.11.25.17.45.16.430.0 ]--
r 141         return listOfPoints.g;
--[ 2018.11.25.17.45.16.618.0 ]--
r 141         return listOfPoints.;
--[ 2018.11.25.17.45.16.993.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.45.17.805.0 ]--
r 141         return listOfPoints.;
--[ 2018.11.25.17.45.27.209.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.45.28.068.0 ]--
r 141         return listOfPoints[];
--[ 2018.11.25.17.45.28.459.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.45.31.411.0 ]--
r 141         return listOfPoints[0].;
--[ 2018.11.25.17.45.32.349.0 ]--
r 141         return listOfPoints[0].v;
--[ 2018.11.25.17.45.43.971.0 ]--
r 141         return listOfPoints[;
--[ 2018.11.25.17.45.44.096.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.47.08.951.0 ]--
r 141         return listOfPoint;
--[ 2018.11.25.17.47.09.466.0 ]--
r 141         return listOfPoin;
--[ 2018.11.25.17.47.09.498.0 ]--
r 141         return listOfPoi;
--[ 2018.11.25.17.47.09.560.0 ]--
r 141         return listOfPo;
--[ 2018.11.25.17.47.09.591.0 ]--
r 141         return listOfP;
--[ 2018.11.25.17.47.09.622.0 ]--
r 141         return listOf;
--[ 2018.11.25.17.47.09.669.0 ]--
r 141         return listO;
--[ 2018.11.25.17.47.09.701.0 ]--
r 141         return list;
--[ 2018.11.25.17.47.09.747.0 ]--
r 141         return lis;
--[ 2018.11.25.17.47.09.779.0 ]--
r 141         return li;
--[ 2018.11.25.17.47.10.029.0 ]--
r 141         return l;
--[ 2018.11.25.17.47.10.419.0 ]--
r 141         return ;
--[ 2018.11.25.17.47.25.432.0 ]--
r 141         return l;
--[ 2018.11.25.17.47.25.619.0 ]--
r 141         return li;
--[ 2018.11.25.17.47.25.666.0 ]--
r 141         return lis;
--[ 2018.11.25.17.47.25.869.0 ]--
r 141         return list;
--[ 2018.11.25.17.47.26.790.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.47.30.930.0 ]--
r 141         return listOfPoints[];
--[ 2018.11.25.17.47.31.149.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.47.39.569.0 ]--
r 141         return listOfPoints[0].;
--[ 2018.11.25.17.47.40.006.0 ]--
r 141         return listOfPoints[0].v;
--[ 2018.11.25.17.47.40.928.0 ]--
r 141         return listOfPoints[0].;
--[ 2018.11.25.17.47.41.162.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.47.41.381.0 ]--
r 141         return listOfPoints[0;
--[ 2018.11.25.17.47.43.880.0 ]--
r 141         return listOfPoints[;
--[ 2018.11.25.17.47.44.396.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.47.44.427.0 ]--
r 141         return listOfPoint;
--[ 2018.11.25.17.47.44.474.0 ]--
r 141         return listOfPoin;
--[ 2018.11.25.17.47.44.536.0 ]--
r 141         return listOfPoi;
--[ 2018.11.25.17.47.44.552.0 ]--
r 141         return listOfPo;
--[ 2018.11.25.17.47.44.614.0 ]--
r 141         return listOfP;
--[ 2018.11.25.17.47.44.646.0 ]--
r 141         return listOf;
--[ 2018.11.25.17.47.44.692.0 ]--
r 141         return listO;
--[ 2018.11.25.17.47.44.724.0 ]--
r 141         return list;
--[ 2018.11.25.17.47.44.771.0 ]--
r 141         return lis;
--[ 2018.11.25.17.47.44.817.0 ]--
r 141         return li;
--[ 2018.11.25.17.47.44.849.0 ]--
r 141         return l;
--[ 2018.11.25.17.47.44.880.0 ]--
r 141         return ;
--[ 2018.11.25.17.47.44.927.0 ]--
r 141         return;
--[ 2018.11.25.17.47.44.958.0 ]--
r 141         retur;
--[ 2018.11.25.17.47.45.005.0 ]--
r 141         retu;
--[ 2018.11.25.17.47.45.067.0 ]--
r 141         ret;
--[ 2018.11.25.17.47.45.098.0 ]--
r 141         re;
--[ 2018.11.25.17.47.45.145.0 ]--
r 141         r;
--[ 2018.11.25.17.47.45.333.0 ]--
r 141         ;
--[ 2018.11.25.17.47.45.973.0 ]--
+ 141         
--[ 2018.11.25.17.47.47.114.0 ]--
r 142         
--[ 2018.11.25.17.47.48.926.0 ]--
r 141         p
--[ 2018.11.25.17.47.49.129.0 ]--
r 141         po
--[ 2018.11.25.17.47.49.285.0 ]--
r 141         poi
--[ 2018.11.25.17.47.49.441.0 ]--
r 141         poin
--[ 2018.11.25.17.47.49.644.0 ]--
r 141         point
--[ 2018.11.25.17.47.50.144.0 ]--
r 141         poin
--[ 2018.11.25.17.47.50.300.0 ]--
r 141         poi
--[ 2018.11.25.17.47.50.410.0 ]--
r 141         po
--[ 2018.11.25.17.47.50.566.0 ]--
r 141         p
--[ 2018.11.25.17.47.50.691.0 ]--
r 141         
--[ 2018.11.25.17.47.51.128.0 ]--
r 141         i
--[ 2018.11.25.17.47.51.316.0 ]--
r 141         in
--[ 2018.11.25.17.47.51.441.0 ]--
r 141         int
--[ 2018.11.25.17.47.51.738.0 ]--
r 141         in
--[ 2018.11.25.17.47.51.909.0 ]--
r 141         ini
--[ 2018.11.25.17.47.52.362.0 ]--
r 141         init
--[ 2018.11.25.17.47.52.769.0 ]--
r 141         initP
--[ 2018.11.25.17.47.52.909.0 ]--
r 141         initPo
--[ 2018.11.25.17.47.53.034.0 ]--
r 141         initPoi
--[ 2018.11.25.17.47.53.128.0 ]--
r 141         initPoin
--[ 2018.11.25.17.47.53.237.0 ]--
r 141         initPoint
--[ 2018.11.25.17.47.53.831.0 ]--
r 141         initPoin
--[ 2018.11.25.17.47.54.346.0 ]--
r 141         initPoi
--[ 2018.11.25.17.47.54.393.0 ]--
r 141         initPo
--[ 2018.11.25.17.47.54.424.0 ]--
r 141         initP
--[ 2018.11.25.17.47.54.471.0 ]--
r 141         init
--[ 2018.11.25.17.47.54.518.0 ]--
r 141         ini
--[ 2018.11.25.17.47.54.581.0 ]--
r 141         in
--[ 2018.11.25.17.47.54.737.0 ]--
r 141         i
--[ 2018.11.25.17.47.54.862.0 ]--
r 141         
--[ 2018.11.25.17.47.55.034.0 ]--
r 141         t
--[ 2018.11.25.17.47.55.221.0 ]--
r 141         te
--[ 2018.11.25.17.47.55.362.0 ]--
r 141         tes
--[ 2018.11.25.17.47.55.565.0 ]--
r 141         test
--[ 2018.11.25.17.47.55.846.0 ]--
r 141         testP
--[ 2018.11.25.17.47.56.018.0 ]--
r 141         testPo
--[ 2018.11.25.17.47.56.174.0 ]--
r 141         testPoi
--[ 2018.11.25.17.47.56.377.0 ]--
r 141         testPoin
--[ 2018.11.25.17.47.56.502.0 ]--
r 141         testPoint
--[ 2018.11.25.17.47.56.705.0 ]--
r 141         testPoint 
--[ 2018.11.25.17.47.57.252.0 ]--
r 141         testPoint =
--[ 2018.11.25.17.47.57.299.0 ]--
r 141         testPoint = 
--[ 2018.11.25.17.47.57.627.0 ]--
r 141         testPoint = l
--[ 2018.11.25.17.47.57.830.0 ]--
r 141         testPoint = li
--[ 2018.11.25.17.47.57.924.0 ]--
r 141         testPoint = lis
--[ 2018.11.25.17.47.58.174.0 ]--
r 141         testPoint = listOfPoints
--[ 2018.11.25.17.47.58.798.0 ]--
r 141         testPoint = listOfPoints[]
--[ 2018.11.25.17.47.58.970.0 ]--
r 141         testPoint = listOfPoints[0]
--[ 2018.11.25.17.47.59.611.0 ]--
r 141         testPoint = listOfPoints[0];
--[ 2018.11.25.17.47.59.783.0 ]--
+ 142         
--[ 2018.11.25.17.48.01.720.0 ]--
r 141         PtestPoint = listOfPoints[0];
--[ 2018.11.25.17.48.01.923.0 ]--
r 141         PotestPoint = listOfPoints[0];
--[ 2018.11.25.17.48.02.126.0 ]--
r 141         PoitestPoint = listOfPoints[0];
--[ 2018.11.25.17.48.02.329.0 ]--
r 141         PointestPoint = listOfPoints[0];
--[ 2018.11.25.17.48.02.438.0 ]--
r 141         PointtestPoint = listOfPoints[0];
--[ 2018.11.25.17.48.02.485.0 ]--
r 141         Point testPoint = listOfPoints[0];
--[ 2018.11.25.17.48.05.406.0 ]--
r 142         r
--[ 2018.11.25.17.48.05.516.0 ]--
r 142         re
--[ 2018.11.25.17.48.05.719.0 ]--
r 142         ret
--[ 2018.11.25.17.48.05.781.0 ]--
r 142         retu
--[ 2018.11.25.17.48.05.906.0 ]--
r 142         retur
--[ 2018.11.25.17.48.06.015.0 ]--
r 142         return
--[ 2018.11.25.17.48.06.234.0 ]--
r 142         return 
--[ 2018.11.25.17.48.06.468.0 ]--
r 142         return t
--[ 2018.11.25.17.48.06.640.0 ]--
r 142         return te
--[ 2018.11.25.17.48.06.812.0 ]--
r 142         return tes
--[ 2018.11.25.17.48.07.046.0 ]--
r 142         return testPoint
--[ 2018.11.25.17.48.07.796.0 ]--
r 142         return testPoint.
--[ 2018.11.25.17.48.07.999.0 ]--
r 142         return testPoint.v
--[ 2018.11.25.17.48.08.062.0 ]--
r 142         return testPoint.va
--[ 2018.11.25.17.48.08.640.0 ]--
r 142         return testPoint.v
--[ 2018.11.25.17.48.09.280.0 ]--
r 142         return testPoint.
--[ 2018.11.25.17.48.32.884.0 ]--
r 142         n
--[ 2018.11.25.17.48.33.072.0 ]--
r 142         no
--[ 2018.11.25.17.48.33.337.0 ]--
r 142         n
--[ 2018.11.25.17.48.33.650.0 ]--
r 142         nt
--[ 2018.11.25.17.48.33.946.0 ]--
r 142         n
--[ 2018.11.25.17.48.34.275.0 ]--
r 142         
--[ 2018.11.25.17.48.34.415.0 ]--
r 142         t
--[ 2018.11.25.17.48.34.618.0 ]--
r 142         te
--[ 2018.11.25.17.48.34.790.0 ]--
r 142         tes
--[ 2018.11.25.17.48.35.024.0 ]--
r 142         test
--[ 2018.11.25.17.48.35.415.0 ]--
r 142         testN
--[ 2018.11.25.17.48.35.571.0 ]--
r 142         testNo
--[ 2018.11.25.17.48.35.681.0 ]--
r 142         testNod
--[ 2018.11.25.17.48.35.852.0 ]--
r 142         testNode
--[ 2018.11.25.17.48.36.399.0 ]--
r 142         testNode 
--[ 2018.11.25.17.48.36.899.0 ]--
r 142         testNode =
--[ 2018.11.25.17.48.41.257.0 ]--
r 142         NtestNode =
--[ 2018.11.25.17.48.41.351.0 ]--
r 142         NotestNode =
--[ 2018.11.25.17.48.41.476.0 ]--
r 142         NodtestNode =
--[ 2018.11.25.17.48.41.710.0 ]--
r 142         NodetestNode =
--[ 2018.11.25.17.48.41.820.0 ]--
r 142         Node testNode =
--[ 2018.11.25.17.48.42.991.0 ]--
r 142         Node testNode = 
--[ 2018.11.25.17.48.44.366.0 ]--
r 142         Node testNode = l
--[ 2018.11.25.17.48.44.553.0 ]--
r 142         Node testNode = lsi
--[ 2018.11.25.17.48.44.819.0 ]--
r 142         Node testNode = lsit
--[ 2018.11.25.17.48.45.256.0 ]--
r 142         Node testNode = lsi
--[ 2018.11.25.17.48.45.397.0 ]--
r 142         Node testNode = ls
--[ 2018.11.25.17.48.45.678.0 ]--
r 142         Node testNode = l
--[ 2018.11.25.17.48.45.881.0 ]--
r 142         Node testNode = li
--[ 2018.11.25.17.48.46.022.0 ]--
r 142         Node testNode = lis
--[ 2018.11.25.17.48.46.240.0 ]--
r 142         Node testNode = list
--[ 2018.11.25.17.48.46.756.0 ]--
r 142         Node testNode = listOfPoints
--[ 2018.11.25.17.48.47.428.0 ]--
r 142         Node testNode = listOfPoints.
--[ 2018.11.25.17.48.47.678.0 ]--
r 142         Node testNode = listOfPoints.g
--[ 2018.11.25.17.48.47.802.0 ]--
r 142         Node testNode = listOfPoints.ge
--[ 2018.11.25.17.48.47.990.0 ]--
r 142         Node testNode = listOfPoints.get
--[ 2018.11.25.17.48.48.193.0 ]--
r 142         Node testNode = listOfPoints.get()
--[ 2018.11.25.17.48.49.677.0 ]--
r 142         Node testNode = listOfPoints.get(t)
--[ 2018.11.25.17.48.49.880.0 ]--
r 142         Node testNode = listOfPoints.get(te)
--[ 2018.11.25.17.48.50.021.0 ]--
r 142         Node testNode = listOfPoints.get(tes)
--[ 2018.11.25.17.48.50.333.0 ]--
r 142         Node testNode = listOfPoints.get(testPoint)
--[ 2018.11.25.17.48.51.802.0 ]--
r 142         Node testNode = listOfPoints.get(testPoint);
--[ 2018.11.25.17.48.52.020.0 ]--
+ 143         
--[ 2018.11.25.17.49.13.453.0 ]--
r 141         Point testPoint = listOfPoints[0;
--[ 2018.11.25.17.49.13.593.0 ]--
r 141         Point testPoint = listOfPoints[;
--[ 2018.11.25.17.49.13.953.0 ]--
r 141         Point testPoint = listOfPoints;
--[ 2018.11.25.17.49.14.640.0 ]--
r 141         Point testPoint = listOfPoints.;
--[ 2018.11.25.17.49.21.357.0 ]--
r 141         Point testPoint = listOfPoints.get;
--[ 2018.11.25.17.49.21.388.0 ]--
r 141         Point testPoint = listOfPoints.get();
--[ 2018.11.25.17.49.22.310.0 ]--
r 141         Point testPoint = listOfPoints.get(0);
--[ 2018.11.25.17.49.26.293.0 ]--
+ 143         
--[ 2018.11.25.17.49.26.434.0 ]--
r 143         t
--[ 2018.11.25.17.49.26.653.0 ]--
r 143         te
--[ 2018.11.25.17.49.26.793.0 ]--
r 143         tes
--[ 2018.11.25.17.49.27.950.0 ]--
r 143         testPoint
--[ 2018.11.25.17.49.28.699.0 ]--
r 143         testPoint.
--[ 2018.11.25.17.49.29.699.0 ]--
r 143         testPoint.v
--[ 2018.11.25.17.49.30.261.0 ]--
r 143         testPoint.
--[ 2018.11.25.17.49.30.589.0 ]--
r 143         testPoint.a
--[ 2018.11.25.17.49.31.011.0 ]--
r 143         testPoint.
--[ 2018.11.25.17.49.31.058.0 ]--
r 143         testPoint.v
--[ 2018.11.25.17.49.31.323.0 ]--
r 143         testPoint.va
--[ 2018.11.25.17.49.31.683.0 ]--
r 143         testPoint.v
--[ 2018.11.25.17.49.31.949.0 ]--
r 143         testPoint.
--[ 2018.11.25.17.49.40.384.0 ]--
r 143         testPoint
--[ 2018.11.25.17.49.40.931.0 ]--
r 143         
--[ 2018.11.25.17.49.41.477.0 ]--
- 143
--[ 2018.11.25.17.50.12.345.0 ]--
r 142         r
--[ 2018.11.25.17.50.12.439.0 ]--
r 142         re
--[ 2018.11.25.17.50.12.673.0 ]--
r 142         reu
--[ 2018.11.25.17.50.13.095.0 ]--
r 142         re
--[ 2018.11.25.17.50.13.298.0 ]--
r 142         ret
--[ 2018.11.25.17.50.13.501.0 ]--
r 142         retu
--[ 2018.11.25.17.50.13.626.0 ]--
r 142         retur
--[ 2018.11.25.17.50.13.704.0 ]--
r 142         return
--[ 2018.11.25.17.50.13.829.0 ]--
r 142         return 
--[ 2018.11.25.17.50.14.063.0 ]--
r 142         return t
--[ 2018.11.25.17.50.14.251.0 ]--
r 142         return te
--[ 2018.11.25.17.50.14.391.0 ]--
r 142         return tes
--[ 2018.11.25.17.50.14.657.0 ]--
r 142         return testPoint
--[ 2018.11.25.17.50.15.376.0 ]--
r 142         return testPoint;
--[ 2018.11.25.17.50.27.060.0 ]--
r 141         V testPoint = listOfPoints.get(0);
--[ 2018.11.25.17.50.27.310.0 ]--
r 141         Va testPoint = listOfPoints.get(0);
--[ 2018.11.25.17.50.27.841.0 ]--
r 141         Value testPoint = listOfPoints.get(0);
--[ 2018.11.25.17.50.36.465.0 ]--
- 141
r 141         r
--[ 2018.11.25.17.50.36.574.0 ]--
r 141         re
--[ 2018.11.25.17.50.36.792.0 ]--
r 141         ret
--[ 2018.11.25.17.50.36.917.0 ]--
r 141         retu
--[ 2018.11.25.17.50.36.980.0 ]--
r 141         retur
--[ 2018.11.25.17.50.37.105.0 ]--
r 141         return
--[ 2018.11.25.17.50.37.245.0 ]--
r 141         return 
--[ 2018.11.25.17.50.38.167.0 ]--
r 141         return t
--[ 2018.11.25.17.50.38.386.0 ]--
r 141         return te
--[ 2018.11.25.17.50.38.511.0 ]--
r 141         return tes
--[ 2018.11.25.17.50.38.933.0 ]--
r 141         return test
--[ 2018.11.25.17.50.39.245.0 ]--
r 141         return test 
--[ 2018.11.25.17.50.39.604.0 ]--
r 141         return test
--[ 2018.11.25.17.50.39.760.0 ]--
r 141         return tes
--[ 2018.11.25.17.50.39.886.0 ]--
r 141         return te
--[ 2018.11.25.17.50.40.073.0 ]--
r 141         return t
--[ 2018.11.25.17.50.40.370.0 ]--
r 141         return 
--[ 2018.11.25.17.50.40.948.0 ]--
r 141         return t
--[ 2018.11.25.17.50.41.494.0 ]--
r 141         return 
--[ 2018.11.25.17.50.41.947.0 ]--
r 141         return t
--[ 2018.11.25.17.50.42.885.0 ]--
r 141         return te
--[ 2018.11.25.17.50.43.057.0 ]--
r 141         return tes
--[ 2018.11.25.17.50.43.307.0 ]--
r 141         return test
--[ 2018.11.25.17.50.43.744.0 ]--
r 141         return tes
--[ 2018.11.25.17.50.43.869.0 ]--
r 141         return te
--[ 2018.11.25.17.50.44.009.0 ]--
r 141         return t
--[ 2018.11.25.17.50.44.181.0 ]--
r 141         return 
--[ 2018.11.25.17.50.44.353.0 ]--
r 141         return l
--[ 2018.11.25.17.50.44.556.0 ]--
r 141         return li
--[ 2018.11.25.17.50.44.634.0 ]--
r 141         return lis
--[ 2018.11.25.17.50.44.822.0 ]--
r 141         return list
--[ 2018.11.25.17.50.44.978.0 ]--
r 141         return listOfPoints
--[ 2018.11.25.17.50.45.884.0 ]--
r 141         return listOfPoints.
--[ 2018.11.25.17.50.46.306.0 ]--
r 141         return listOfPoints.g
--[ 2018.11.25.17.50.46.415.0 ]--
r 141         return listOfPoints.ge
--[ 2018.11.25.17.50.47.165.0 ]--
r 141         return listOfPoints.get
--[ 2018.11.25.17.50.47.196.0 ]--
r 141         return listOfPoints.get()
--[ 2018.11.25.17.50.48.352.0 ]--
r 141         return listOfPoints.get(0)
--[ 2018.11.25.17.50.49.555.0 ]--
r 141         return listOfPoints.get(0);
--[ 2018.11.25.17.51.58.773.0 ]--
r 141         return listOfPoints.get();
--[ 2018.11.25.17.51.58.992.0 ]--
r 141         return listOfPoints.get(p);
--[ 2018.11.25.17.52.11.395.0 ]--
r 141         return listOfPoints.get(p.);
--[ 2018.11.25.17.52.11.676.0 ]--
r 141         return listOfPoints.get(p.v);
--[ 2018.11.25.17.52.13.535.0 ]--
r 141         return listOfPoints.get(p.);
--[ 2018.11.25.17.52.13.723.0 ]--
r 141         return listOfPoints.get(p);
--[ 2018.11.25.17.52.14.035.0 ]--
r 141         return listOfPoints.get();
--[ 2018.11.25.17.52.15.254.0 ]--
r 141         return listOfPoints.get;
--[ 2018.11.25.17.52.15.472.0 ]--
r 141         return listOfPoints.ge;
--[ 2018.11.25.17.52.15.675.0 ]--
r 141         return listOfPoints.g;
--[ 2018.11.25.17.52.15.878.0 ]--
r 141         return listOfPoints.;
--[ 2018.11.25.17.52.16.363.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.52.17.612.0 ]--
r 141         return listOfPoints[];
--[ 2018.11.25.17.52.17.816.0 ]--
r 141         return listOfPoints[0];
--[ 2018.11.25.17.52.21.299.0 ]--
r 141         return listOfPoints[0;
--[ 2018.11.25.17.52.21.471.0 ]--
r 141         return listOfPoints[;
--[ 2018.11.25.17.52.21.705.0 ]--
r 141         return listOfPoints;
--[ 2018.11.25.17.52.25.736.0 ]--
r 141         return listOfPoints.;
--[ 2018.11.25.17.52.27.220.0 ]--
r 141         return listOfPoints.g;
--[ 2018.11.25.17.52.27.329.0 ]--
r 141         return listOfPoints.ge;
--[ 2018.11.25.17.52.27.423.0 ]--
r 141         return listOfPoints.get;
--[ 2018.11.25.17.52.28.860.0 ]--
r 141         return listOfPoints.get();
--[ 2018.11.25.17.52.29.047.0 ]--
r 141         return listOfPoints.get(0);
--[ 2018.11.25.17.52.39.467.0 ]--
r 141         return listOfPoints.get(0).;
--[ 2018.11.25.17.52.39.654.0 ]--
r 141         return listOfPoints.get(0).v;
--[ 2018.11.25.17.52.39.810.0 ]--
r 141         return listOfPoints.get(0).va;
--[ 2018.11.25.17.52.40.810.0 ]--
r 141         return listOfPoints.get(0).val;
--[ 2018.11.25.17.52.40.998.0 ]--
r 141         return listOfPoints.get(0).valu;
--[ 2018.11.25.17.52.41.154.0 ]--
r 141         return listOfPoints.get(0).value;
--[ 2018.11.25.17.52.42.513.0 ]--
r 141         return listOfPoints.get(0).valu;
--[ 2018.11.25.17.52.42.919.0 ]--
r 141         return listOfPoints.get(0).val;
--[ 2018.11.25.17.52.43.231.0 ]--
r 141         return listOfPoints.get(0).va;
--[ 2018.11.25.17.52.43.575.0 ]--
r 141         return listOfPoints.get(0).v;
--[ 2018.11.25.17.52.44.247.0 ]--
r 141         return listOfPoints.get(0).;
--[ 2018.11.25.17.52.44.840.0 ]--
r 141         return listOfPoints.get(0);
--[ 2018.11.25.17.52.45.887.0 ]--
r 141         return listOfPoints.get(0).;
--[ 2018.11.25.17.52.46.856.0 ]--
r 141         return listOfPoints.get(0).v;
--[ 2018.11.25.17.52.47.371.0 ]--
r 141         return listOfPoints.get(0).;
--[ 2018.11.25.17.52.49.214.0 ]--
r 141         return listOfPoints.get(0);
--[ 2018.11.25.17.55.55.014.0 ]--
r 141         return r;
--[ 2018.11.25.17.55.55.155.0 ]--
r 141         return ro;
--[ 2018.11.25.17.55.55.296.0 ]--
r 141         return roo;
--[ 2018.11.25.17.55.55.374.0 ]--
r 141         return root;
--[ 2018.11.25.17.55.56.561.0 ]--
r 141         return root.;
--[ 2018.11.25.17.55.58.404.0 ]--
r 141         return root.v;
--[ 2018.11.25.17.56.13.166.0 ]--
r 142 
r 143 
--[ 2018.11.25.17.56.15.135.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.17.57.31.029.0 ]--
r 170         return r;
--[ 2018.11.25.17.57.31.279.0 ]--
r 170         return ro;
--[ 2018.11.25.17.57.31.404.0 ]--
r 170         return roo;
--[ 2018.11.25.17.57.31.513.0 ]--
r 170         return root;
--[ 2018.11.25.17.57.32.747.0 ]--
r 170         return root.;
--[ 2018.11.25.17.57.33.044.0 ]--
r 170         return root.o;
--[ 2018.11.25.17.57.33.919.0 ]--
r 170         return root.;
--[ 2018.11.25.17.57.34.184.0 ]--
r 170         return root.p;
--[ 2018.11.25.17.57.38.730.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.17.58.13.229.0 ]--
+ 170         
--[ 2018.11.25.17.58.13.229.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.13.244.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.16.259.0 ]--
- 170
r 170                 return root.p;
--[ 2018.11.25.17.58.16.275.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.16.290.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.383.0 ]--
r 170                return root.p;
--[ 2018.11.25.17.58.19.399.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.399.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.711.0 ]--
r 170               return root.p;
--[ 2018.11.25.17.58.19.711.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.727.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.961.0 ]--
r 170              return root.p;
--[ 2018.11.25.17.58.19.977.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.19.977.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.149.0 ]--
r 170             return root.p;
--[ 2018.11.25.17.58.20.149.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.165.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.321.0 ]--
r 170            return root.p;
--[ 2018.11.25.17.58.20.321.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.336.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.524.0 ]--
r 170           return root.p;
--[ 2018.11.25.17.58.20.539.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.539.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.774.0 ]--
r 170          return root.p;
--[ 2018.11.25.17.58.20.774.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.20.805.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.21.196.0 ]--
r 170         return root.p;
--[ 2018.11.25.17.58.21.196.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.21.211.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.21.883.0 ]--
r 170     return root.p;
--[ 2018.11.25.17.58.21.883.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.21.898.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.22.367.0 ]--
r 170 return root.p;
--[ 2018.11.25.17.58.22.383.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.22.398.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.22.695.0 ]--
r 170     return root.p;
--[ 2018.11.25.17.58.22.711.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.22.711.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.23.117.0 ]--
r 170         return root.p;
--[ 2018.11.25.17.58.23.117.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.17.58.23.133.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.25.18.00.07.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.00.33.000.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.03.24.268.0 ]--
r 181     public Point min() { return r; }
--[ 2018.11.25.18.03.24.503.0 ]--
r 181     public Point min() { return ro; }
--[ 2018.11.25.18.03.24.659.0 ]--
r 181     public Point min() { return roo; }
--[ 2018.11.25.18.03.24.877.0 ]--
r 181     public Point min() { return root; }
--[ 2018.11.25.18.03.25.330.0 ]--
r 181     public Point min() { return roo; }
--[ 2018.11.25.18.03.25.518.0 ]--
r 181     public Point min() { return ro; }
--[ 2018.11.25.18.03.25.705.0 ]--
r 181     public Point min() { return r; }
--[ 2018.11.25.18.03.25.893.0 ]--
r 181     public Point min() { return ; }
--[ 2018.11.25.18.03.40.249.0 ]--
+ 20     
--[ 2018.11.25.18.03.40.827.0 ]--
r 20     p
--[ 2018.11.25.18.03.41.592.0 ]--
r 20     pr
--[ 2018.11.25.18.03.41.764.0 ]--
r 20     pri
--[ 2018.11.25.18.03.42.420.0 ]--
r 20     priv
--[ 2018.11.25.18.03.42.483.0 ]--
r 20     priva
--[ 2018.11.25.18.03.42.748.0 ]--
r 20     privat
--[ 2018.11.25.18.03.43.014.0 ]--
r 20     private
--[ 2018.11.25.18.03.43.139.0 ]--
r 20     private 
--[ 2018.11.25.18.03.48.263.0 ]--
r 20     private i
--[ 2018.11.25.18.03.48.809.0 ]--
r 20     private 
--[ 2018.11.25.18.03.49.231.0 ]--
r 20     private f
--[ 2018.11.25.18.03.49.340.0 ]--
r 20     private fl
--[ 2018.11.25.18.03.49.700.0 ]--
r 20     private flo
--[ 2018.11.25.18.03.49.872.0 ]--
r 20     private floa
--[ 2018.11.25.18.03.50.293.0 ]--
r 20     private float
--[ 2018.11.25.18.03.50.621.0 ]--
r 20     private float 
--[ 2018.11.25.18.03.51.824.0 ]--
r 20     private float m
--[ 2018.11.25.18.03.51.934.0 ]--
r 20     private float ma
--[ 2018.11.25.18.03.52.309.0 ]--
r 20     private float m
--[ 2018.11.25.18.03.52.480.0 ]--
r 20     private float 
--[ 2018.11.25.18.03.53.433.0 ]--
r 20     private float m
--[ 2018.11.25.18.03.53.605.0 ]--
r 20     private float ma
--[ 2018.11.25.18.03.54.105.0 ]--
r 20     private float m
--[ 2018.11.25.18.03.55.870.0 ]--
r 20     private float mi
--[ 2018.11.25.18.03.55.995.0 ]--
r 20     private float min
--[ 2018.11.25.18.03.56.339.0 ]--
r 20     private float mini
--[ 2018.11.25.18.03.56.589.0 ]--
r 20     private float minim
--[ 2018.11.25.18.03.56.807.0 ]--
r 20     private float minimu
--[ 2018.11.25.18.03.57.011.0 ]--
r 20     private float minimum
--[ 2018.11.25.18.03.58.276.0 ]--
r 20     private float minimumO
--[ 2018.11.25.18.03.58.869.0 ]--
r 20     private float minimum
--[ 2018.11.25.18.03.59.135.0 ]--
r 20     private float minimu
--[ 2018.11.25.18.03.59.447.0 ]--
r 20     private float minim
--[ 2018.11.25.18.03.59.479.0 ]--
r 20     private float mini
--[ 2018.11.25.18.03.59.604.0 ]--
r 20     private float min
--[ 2018.11.25.18.03.59.760.0 ]--
r 20     private float mi
--[ 2018.11.25.18.03.59.979.0 ]--
r 20     private float m
--[ 2018.11.25.18.04.00.666.0 ]--
r 20     private float 
--[ 2018.11.25.18.04.01.291.0 ]--
r 20     private float
--[ 2018.11.25.18.04.01.463.0 ]--
r 20     private floa
--[ 2018.11.25.18.04.01.666.0 ]--
r 20     private flo
--[ 2018.11.25.18.04.01.822.0 ]--
r 20     private fl
--[ 2018.11.25.18.04.02.166.0 ]--
r 20     private f
--[ 2018.11.25.18.04.02.447.0 ]--
r 20     private 
--[ 2018.11.25.18.04.12.554.0 ]--
r 20     private P
--[ 2018.11.25.18.04.12.804.0 ]--
r 20     private Po
--[ 2018.11.25.18.04.12.944.0 ]--
r 20     private Poi
--[ 2018.11.25.18.04.13.038.0 ]--
r 20     private Poin
--[ 2018.11.25.18.04.13.179.0 ]--
r 20     private Point
--[ 2018.11.25.18.04.13.350.0 ]--
r 20     private Point 
--[ 2018.11.25.18.04.14.163.0 ]--
r 20     private Point m
--[ 2018.11.25.18.04.14.350.0 ]--
r 20     private Point mi
--[ 2018.11.25.18.04.14.506.0 ]--
r 20     private Point min
--[ 2018.11.25.18.04.14.850.0 ]--
r 20     private Point minP
--[ 2018.11.25.18.04.15.053.0 ]--
r 20     private Point minPo
--[ 2018.11.25.18.04.15.287.0 ]--
r 20     private Point minPoi
--[ 2018.11.25.18.04.15.397.0 ]--
r 20     private Point minPoin
--[ 2018.11.25.18.04.15.537.0 ]--
r 20     private Point minPoint
--[ 2018.11.25.18.04.16.365.0 ]--
r 20     private Point minPoint;
--[ 2018.11.25.18.04.19.599.0 ]--
+ 20     private Point minPoint;
--[ 2018.11.25.18.04.22.145.0 ]--
r 21     private Point miPoint;
--[ 2018.11.25.18.04.22.270.0 ]--
r 21     private Point mPoint;
--[ 2018.11.25.18.04.22.349.0 ]--
r 21     private Point maPoint;
--[ 2018.11.25.18.04.22.567.0 ]--
r 21     private Point maxPoint;
--[ 2018.11.25.18.04.59.871.0 ]--
+ 38         
--[ 2018.11.25.18.05.04.479.0 ]--
- 38
--[ 2018.11.25.18.05.10.665.0 ]--
+ 41             
--[ 2018.11.25.18.05.12.009.0 ]--
r 41             p
--[ 2018.11.25.18.05.12.618.0 ]--
r 41             
--[ 2018.11.25.18.05.24.334.0 ]--
r 41             m
--[ 2018.11.25.18.05.24.490.0 ]--
r 41             mi
--[ 2018.11.25.18.05.24.662.0 ]--
r 41             min
--[ 2018.11.25.18.05.26.131.0 ]--
r 41             minPoint
--[ 2018.11.25.18.05.27.599.0 ]--
r 41             minPoint 
--[ 2018.11.25.18.05.27.724.0 ]--
r 41             minPoint =
--[ 2018.11.25.18.05.27.849.0 ]--
r 41             minPoint = 
--[ 2018.11.25.18.05.28.771.0 ]--
r 41             minPoint = r
--[ 2018.11.25.18.05.28.911.0 ]--
r 41             minPoint = ro
--[ 2018.11.25.18.05.29.005.0 ]--
r 41             minPoint = roo
--[ 2018.11.25.18.05.29.145.0 ]--
r 41             minPoint = root
--[ 2018.11.25.18.05.32.161.0 ]--
r 41             minPoint = root.
--[ 2018.11.25.18.05.33.394.0 ]--
r 41             minPoint = root.p
--[ 2018.11.25.18.05.34.144.0 ]--
r 41             minPoint = root.p;
--[ 2018.11.25.18.05.34.582.0 ]--
+ 42             
--[ 2018.11.25.18.05.35.003.0 ]--
r 42             m
--[ 2018.11.25.18.05.35.097.0 ]--
r 42             ma
--[ 2018.11.25.18.05.35.503.0 ]--
r 42             max
--[ 2018.11.25.18.05.35.738.0 ]--
r 42             max()
--[ 2018.11.25.18.05.36.441.0 ]--
r 42             max(
--[ 2018.11.25.18.05.36.566.0 ]--
r 42             max
--[ 2018.11.25.18.05.37.003.0 ]--
r 42             maxP
--[ 2018.11.25.18.05.37.190.0 ]--
r 42             maxPo
--[ 2018.11.25.18.05.37.768.0 ]--
r 42             maxPoint
--[ 2018.11.25.18.05.39.377.0 ]--
r 42             maxPoint 
--[ 2018.11.25.18.05.40.080.0 ]--
r 42             maxPoint =
--[ 2018.11.25.18.05.40.237.0 ]--
r 42             maxPoint = 
--[ 2018.11.25.18.05.40.377.0 ]--
r 42             maxPoint = r
--[ 2018.11.25.18.05.40.580.0 ]--
r 42             maxPoint = ro
--[ 2018.11.25.18.05.40.690.0 ]--
r 42             maxPoint = roo
--[ 2018.11.25.18.05.40.846.0 ]--
r 42             maxPoint = root
--[ 2018.11.25.18.05.40.986.0 ]--
r 42             maxPoint = root.
--[ 2018.11.25.18.05.41.658.0 ]--
r 42             maxPoint = root.p
--[ 2018.11.25.18.05.42.486.0 ]--
r 42             maxPoint = root.p;
--[ 2018.11.25.18.06.16.292.0 ]--
+ 45             
--[ 2018.11.25.18.06.27.524.0 ]--
r 45             i
--[ 2018.11.25.18.06.27.664.0 ]--
r 45             if
--[ 2018.11.25.18.06.27.789.0 ]--
r 45             if 
--[ 2018.11.25.18.06.28.352.0 ]--
r 45             if ()
--[ 2018.11.25.18.06.30.554.0 ]--
r 45             if (c)
--[ 2018.11.25.18.06.30.679.0 ]--
r 45             if (co)
--[ 2018.11.25.18.06.30.820.0 ]--
r 45             if (com)
--[ 2018.11.25.18.06.30.945.0 ]--
r 45             if (comp)
--[ 2018.11.25.18.06.31.648.0 ]--
r 45             if (compa)
--[ 2018.11.25.18.06.32.116.0 ]--
r 45             if (comp)
--[ 2018.11.25.18.06.32.210.0 ]--
r 45             if (com)
--[ 2018.11.25.18.06.32.335.0 ]--
r 45             if (co)
--[ 2018.11.25.18.06.32.601.0 ]--
r 45             if (c)
--[ 2018.11.25.18.06.32.804.0 ]--
r 45             if ()
--[ 2018.11.25.18.06.34.085.0 ]--
r 45             if (p)
--[ 2018.11.25.18.06.34.444.0 ]--
r 45             if (p.)
--[ 2018.11.25.18.06.34.960.0 ]--
r 45             if (p.c)
--[ 2018.11.25.18.06.35.053.0 ]--
r 45             if (p.co)
--[ 2018.11.25.18.06.35.147.0 ]--
r 45             if (p.com)
--[ 2018.11.25.18.06.35.287.0 ]--
r 45             if (p.comp)
--[ 2018.11.25.18.06.35.506.0 ]--
r 45             if (p.compa)
--[ 2018.11.25.18.06.37.334.0 ]--
r 45             if (p.compareTo)
--[ 2018.11.25.18.06.37.365.0 ]--
r 45             if (p.compareTo())
--[ 2018.11.25.18.06.39.177.0 ]--
r 45             if (p.compareTo(m))
--[ 2018.11.25.18.06.39.302.0 ]--
r 45             if (p.compareTo(mi))
--[ 2018.11.25.18.06.39.380.0 ]--
r 45             if (p.compareTo(min))
--[ 2018.11.25.18.06.40.755.0 ]--
r 45             if (p.compareTo(minP))
--[ 2018.11.25.18.06.40.989.0 ]--
r 45             if (p.compareTo(minPo))
--[ 2018.11.25.18.06.41.614.0 ]--
r 45             if (p.compareTo(minPoint))
--[ 2018.11.25.18.06.53.674.0 ]--
r 45             if (p.compareTo(minPoint) )
--[ 2018.11.25.18.06.53.892.0 ]--
r 45             if (p.compareTo(minPoint) <)
--[ 2018.11.25.18.06.54.111.0 ]--
r 45             if (p.compareTo(minPoint) < )
--[ 2018.11.25.18.06.54.830.0 ]--
r 45             if (p.compareTo(minPoint) < 0)
--[ 2018.11.25.18.06.57.204.0 ]--
r 45             if (p.compareTo(minPoint) < 0) 
--[ 2018.11.25.18.06.57.470.0 ]--
r 45             if (p.compareTo(minPoint) < 0) {
--[ 2018.11.25.18.06.57.626.0 ]--
+ 46 
+ 47 }
--[ 2018.11.25.18.06.57.657.0 ]--
r 47             }
--[ 2018.11.25.18.06.57.688.0 ]--
r 46                 
--[ 2018.11.25.18.07.02.687.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { 
--[ 2018.11.25.18.07.02.844.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { /
--[ 2018.11.25.18.07.02.984.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //
--[ 2018.11.25.18.07.03.703.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p
--[ 2018.11.25.18.07.03.828.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p 
--[ 2018.11.25.18.07.03.953.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p i
--[ 2018.11.25.18.07.04.171.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is 
--[ 2018.11.25.18.07.04.578.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is s
--[ 2018.11.25.18.07.04.718.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is sm
--[ 2018.11.25.18.07.05.234.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is sma
--[ 2018.11.25.18.07.05.390.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is smal
--[ 2018.11.25.18.07.05.530.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is small
--[ 2018.11.25.18.07.05.968.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is smalle
--[ 2018.11.25.18.07.06.077.0 ]--
r 45             if (p.compareTo(minPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.08.311.0 ]--
r 46                 m
--[ 2018.11.25.18.07.08.420.0 ]--
r 46                 mi
--[ 2018.11.25.18.07.08.858.0 ]--
r 46                 min
--[ 2018.11.25.18.07.09.123.0 ]--
r 46                 min()
--[ 2018.11.25.18.07.09.748.0 ]--
r 46                 min(
--[ 2018.11.25.18.07.09.905.0 ]--
r 46                 min
--[ 2018.11.25.18.07.10.358.0 ]--
r 46                 minP
--[ 2018.11.25.18.07.10.514.0 ]--
r 46                 minPo
--[ 2018.11.25.18.07.10.795.0 ]--
r 46                 minPoint
--[ 2018.11.25.18.07.11.420.0 ]--
r 46                 minPoint 
--[ 2018.11.25.18.07.11.607.0 ]--
r 46                 minPoint =
--[ 2018.11.25.18.07.11.764.0 ]--
r 46                 minPoint = 
--[ 2018.11.25.18.07.11.920.0 ]--
r 46                 minPoint = p
--[ 2018.11.25.18.07.12.170.0 ]--
r 46                 minPoint = p;
--[ 2018.11.25.18.07.15.263.0 ]--
+ 46                 minPoint = p;
+ 47             }inPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.16.450.0 ]--
- 46
- 46
--[ 2018.11.25.18.07.20.558.0 ]--
+ 45             if (p.compareTo(minPoint) < 0) { //p is smaller
+ 46                 minPoint = p;
+ 47             }
--[ 2018.11.25.18.07.25.479.0 ]--
r 48             if (p.compareTo(miPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.25.651.0 ]--
r 48             if (p.compareTo(mPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.26.932.0 ]--
r 48             if (p.compareTo(maPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.27.182.0 ]--
r 48             if (p.compareTo(maxPoint) < 0) { //p is smaller
--[ 2018.11.25.18.07.30.306.0 ]--
r 48             if (p.compareTo(maxPoint)  0) { //p is smaller
--[ 2018.11.25.18.07.30.775.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is smaller
--[ 2018.11.25.18.07.32.790.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is b
--[ 2018.11.25.18.07.32.962.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is bu
--[ 2018.11.25.18.07.33.696.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is b
--[ 2018.11.25.18.07.34.040.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is bi
--[ 2018.11.25.18.07.34.196.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is big
--[ 2018.11.25.18.07.34.321.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is bigg
--[ 2018.11.25.18.07.34.539.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is bigge
--[ 2018.11.25.18.07.34.618.0 ]--
r 48             if (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.07.37.914.0 ]--
r 49                 miPoint = p;
--[ 2018.11.25.18.07.38.086.0 ]--
r 49                 mPoint = p;
--[ 2018.11.25.18.07.38.507.0 ]--
r 49                 Point = p;
--[ 2018.11.25.18.07.38.601.0 ]--
r 49                 aPoint = p;
--[ 2018.11.25.18.07.39.163.0 ]--
r 49                 axPoint = p;
--[ 2018.11.25.18.07.40.366.0 ]--
r 49                 aPoint = p;
--[ 2018.11.25.18.07.40.554.0 ]--
r 49                 Point = p;
--[ 2018.11.25.18.07.41.210.0 ]--
r 49                 mPoint = p;
--[ 2018.11.25.18.07.41.382.0 ]--
r 49                 maPoint = p;
--[ 2018.11.25.18.07.41.694.0 ]--
r 49                 maxPoint = p;
--[ 2018.11.25.18.07.45.131.0 ]--
r 48             eif (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.07.45.303.0 ]--
r 48             elif (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.07.45.365.0 ]--
r 48             elsif (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.07.45.474.0 ]--
r 48             elseif (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.07.46.755.0 ]--
r 48             else if (p.compareTo(maxPoint) > 0) { //p is bigger
--[ 2018.11.25.18.08.02.752.0 ]--
r 191     public Point min() { return m; }
--[ 2018.11.25.18.08.02.892.0 ]--
r 191     public Point min() { return mi; }
--[ 2018.11.25.18.08.03.017.0 ]--
r 191     public Point min() { return min; }
--[ 2018.11.25.18.08.05.001.0 ]--
r 191     public Point min() { return minPoint; }
--[ 2018.11.25.18.08.07.938.0 ]--
r 192     public Point max() { return m; }
--[ 2018.11.25.18.08.08.000.0 ]--
r 192     public Point max() { return ma; }
--[ 2018.11.25.18.08.08.235.0 ]--
r 192     public Point max() { return max; }
--[ 2018.11.25.18.08.09.063.0 ]--
r 192     public Point max() { return maxP; }
--[ 2018.11.25.18.08.09.281.0 ]--
r 192     public Point max() { return maxPo; }
--[ 2018.11.25.18.08.09.422.0 ]--
r 192     public Point max() { return maxPoi; }
--[ 2018.11.25.18.08.09.578.0 ]--
r 192     public Point max() { return maxPoin; }
--[ 2018.11.25.18.08.09.844.0 ]--
r 192     public Point max() { return maxPoint; }
--[ 2018.11.25.18.08.16.686.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.08.35.724.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.09.37.330.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.10.51.041.0 ]--
r 45             if (p..compareTo(minPoint) < 0) { //p is smaller
--[ 2018.11.25.18.10.51.384.0 ]--
r 45             if (p.x.compareTo(minPoint) < 0) { //p is smaller
--[ 2018.11.25.18.10.54.321.0 ]--
r 45             if (p.x.compareTo(minPoint.) < 0) { //p is smaller
--[ 2018.11.25.18.10.54.493.0 ]--
r 45             if (p.x.compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.10.58.554.0 ]--
r 46                 minPoint. = p;
--[ 2018.11.25.18.10.58.711.0 ]--
r 46                 minPoint.x = p;
--[ 2018.11.25.18.11.01.163.0 ]--
r 46                 minPoint.x = p.;
--[ 2018.11.25.18.11.01.319.0 ]--
r 46                 minPoint.x = p.x;
--[ 2018.11.25.18.11.08.989.0 ]--
r 45             if (p.x().compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.11.301.0 ]--
r 45             if (p.x(.compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.11.567.0 ]--
r 45             if (p.x.compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.12.520.0 ]--
r 45             if (p..compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.13.332.0 ]--
r 45             if (p.compareTo(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.19.924.0 ]--
+ 45             
--[ 2018.11.25.18.11.20.221.0 ]--
r 45             p
--[ 2018.11.25.18.11.20.518.0 ]--
r 45             p.
--[ 2018.11.25.18.11.27.767.0 ]--
r 45             p.x
--[ 2018.11.25.18.11.27.798.0 ]--
r 45             p.x()
--[ 2018.11.25.18.11.29.860.0 ]--
r 45             p.x().
--[ 2018.11.25.18.11.30.156.0 ]--
r 45             p.x().o
--[ 2018.11.25.18.11.30.203.0 ]--
r 45             p.x().oc
--[ 2018.11.25.18.11.30.719.0 ]--
r 45             p.x().o
--[ 2018.11.25.18.11.30.766.0 ]--
r 45             p.x().
--[ 2018.11.25.18.11.30.922.0 ]--
r 45             p.x().c
--[ 2018.11.25.18.11.31.031.0 ]--
r 45             p.x().co
--[ 2018.11.25.18.11.31.234.0 ]--
r 45             p.x().com
--[ 2018.11.25.18.11.31.703.0 ]--
r 45             p.x().comp
--[ 2018.11.25.18.11.32.609.0 ]--
r 45             p.x().compa
--[ 2018.11.25.18.11.32.796.0 ]--
r 45             p.x().comp
--[ 2018.11.25.18.11.32.984.0 ]--
r 45             p.x().com
--[ 2018.11.25.18.11.33.124.0 ]--
r 45             p.x().co
--[ 2018.11.25.18.11.33.281.0 ]--
r 45             p.x().c
--[ 2018.11.25.18.11.33.499.0 ]--
r 45             p.x().
--[ 2018.11.25.18.11.33.749.0 ]--
r 45             p.x()
--[ 2018.11.25.18.11.33.984.0 ]--
r 45             p.x(
--[ 2018.11.25.18.11.34.046.0 ]--
r 45             p.x
--[ 2018.11.25.18.11.34.202.0 ]--
r 45             p.
--[ 2018.11.25.18.11.34.343.0 ]--
r 45             p
--[ 2018.11.25.18.11.34.656.0 ]--
r 45             
--[ 2018.11.25.18.11.34.983.0 ]--
- 45
--[ 2018.11.25.18.11.39.967.0 ]--
r 45             if (p.x(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.40.279.0 ]--
r 45             if (p.x((minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.40.357.0 ]--
r 45             if (p.x()(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.41.201.0 ]--
r 45             if (p.x() (minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.41.685.0 ]--
r 45             if (p.x() <(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.42.326.0 ]--
r 45             if (p.x() <=(minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.43.060.0 ]--
r 45             if (p.x() <=minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.43.591.0 ]--
r 45             if (p.x() <= minPoint.x) < 0) { //p is smaller
--[ 2018.11.25.18.11.46.012.0 ]--
r 45             if (p.x() <= minPoint.x < 0) { //p is smaller
--[ 2018.11.25.18.11.46.543.0 ]--
r 45             if (p.x() <= minPoint.x() < 0) { //p is smaller
--[ 2018.11.25.18.11.47.277.0 ]--
r 45             if (p.x() <= minPoint.x()< 0) { //p is smaller
--[ 2018.11.25.18.11.47.449.0 ]--
r 45             if (p.x() <= minPoint.x() 0) { //p is smaller
--[ 2018.11.25.18.11.47.605.0 ]--
r 45             if (p.x() <= minPoint.x()0) { //p is smaller
--[ 2018.11.25.18.11.47.793.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p is smaller
--[ 2018.11.25.18.11.55.947.0 ]--
r 46                 minPoint.x() = p.x;
--[ 2018.11.25.18.11.58.275.0 ]--
r 46                 minPoint.x() = p.x();
--[ 2018.11.25.18.12.13.490.0 ]--
r 46                 minPoint.x( = p.x();
--[ 2018.11.25.18.12.13.834.0 ]--
r 46                 minPoint.x = p.x();
--[ 2018.11.25.18.12.14.412.0 ]--
r 46                 minPoint. = p.x();
--[ 2018.11.25.18.12.14.911.0 ]--
r 46                 minPoint = p.x();
--[ 2018.11.25.18.12.16.411.0 ]--
r 46                 minPoint. = p.x();
--[ 2018.11.25.18.12.56.292.0 ]--
r 46                 minPoint 
--[ 2018.11.25.18.12.56.683.0 ]--
r 46                 minPoint =
--[ 2018.11.25.18.12.56.808.0 ]--
r 46                 minPoint = 
--[ 2018.11.25.18.12.57.917.0 ]--
r 46                 minPoint = P
--[ 2018.11.25.18.12.58.104.0 ]--
r 46                 minPoint = Po
--[ 2018.11.25.18.12.58.245.0 ]--
r 46                 minPoint = Poi
--[ 2018.11.25.18.12.58.386.0 ]--
r 46                 minPoint = Poin
--[ 2018.11.25.18.12.58.479.0 ]--
r 46                 minPoint = Point
--[ 2018.11.25.18.12.59.167.0 ]--
r 46                 minPoint = Point()
--[ 2018.11.25.18.13.00.463.0 ]--
r 46                 minPoint = Point(p)
--[ 2018.11.25.18.13.00.698.0 ]--
r 46                 minPoint = Point(p.)
--[ 2018.11.25.18.13.02.463.0 ]--
r 46                 minPoint = Point(p.x)
--[ 2018.11.25.18.13.02.744.0 ]--
r 46                 minPoint = Point(p.x())
--[ 2018.11.25.18.13.03.978.0 ]--
r 46                 minPoint = Point(p.x(),)
--[ 2018.11.25.18.13.04.134.0 ]--
r 46                 minPoint = Point(p.x(), )
--[ 2018.11.25.18.13.06.165.0 ]--
r 46                 minPoint = Point(p.x(), m)
--[ 2018.11.25.18.13.06.306.0 ]--
r 46                 minPoint = Point(p.x(), mi)
--[ 2018.11.25.18.13.06.431.0 ]--
r 46                 minPoint = Point(p.x(), min)
--[ 2018.11.25.18.13.07.540.0 ]--
r 46                 minPoint = Point(p.x(), minPoint)
--[ 2018.11.25.18.13.08.477.0 ]--
r 46                 minPoint = Point(p.x(), minPoint.)
--[ 2018.11.25.18.13.09.008.0 ]--
r 46                 minPoint = Point(p.x(), minPoint.y)
--[ 2018.11.25.18.13.09.383.0 ]--
r 46                 minPoint = Point(p.x(), minPoint.y())
--[ 2018.11.25.18.13.10.586.0 ]--
r 46                 minPoint = Point(p.x(), minPoint.y());
--[ 2018.11.25.18.13.13.288.0 ]--
r 46                 minPoint = NPoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.13.491.0 ]--
r 46                 minPoint = NePoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.116.0 ]--
r 46                 minPoint = NPoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.241.0 ]--
r 46                 minPoint = Point(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.444.0 ]--
r 46                 minPoint = nPoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.788.0 ]--
r 46                 minPoint = nePoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.850.0 ]--
r 46                 minPoint = newPoint(p.x(), minPoint.y());
--[ 2018.11.25.18.13.14.960.0 ]--
r 46                 minPoint = new Point(p.x(), minPoint.y());
--[ 2018.11.25.18.13.19.709.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p' is smaller
--[ 2018.11.25.18.13.19.818.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's is smaller
--[ 2018.11.25.18.13.19.943.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's  is smaller
--[ 2018.11.25.18.13.20.318.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.13.27.645.0 ]--
+ 48             
--[ 2018.11.25.18.13.28.004.0 ]--
+ 48                         if (p.x() <= minPoint.x()) { //p's x is smaller
+ 49                 minPoint = new Point(p.x(), minPoint.y());
r 50             }
--[ 2018.11.25.18.13.28.066.0 ]--
r 48             if (p.x() <= minPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.13.32.440.0 ]--
r 48             if (p.() <= minPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.13.32.643.0 ]--
r 48             if (p.y() <= minPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.13.35.205.0 ]--
r 48             if (p.y() <= minPoint.()) { //p's x is smaller
--[ 2018.11.25.18.13.35.362.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's x is smaller
--[ 2018.11.25.18.13.40.360.0 ]--
r 49                 minPoint = new Point(minPoint.y());
--[ 2018.11.25.18.13.42.438.0 ]--
r 49                 minPoint = new Point(minPoint.());
--[ 2018.11.25.18.13.42.688.0 ]--
r 49                 minPoint = new Point(minPoint.x());
--[ 2018.11.25.18.13.43.891.0 ]--
r 49                 minPoint = new Point(minPoint.x(),);
--[ 2018.11.25.18.13.44.563.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p);
--[ 2018.11.25.18.13.44.844.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p.);
--[ 2018.11.25.18.13.45.813.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p.u);
--[ 2018.11.25.18.13.46.110.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p.);
--[ 2018.11.25.18.13.46.375.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p.y);
--[ 2018.11.25.18.13.46.687.0 ]--
r 49                 minPoint = new Point(minPoint.x(),p.y());
--[ 2018.11.25.18.13.52.014.0 ]--
- 51
- 51
r 51 
--[ 2018.11.25.18.13.52.639.0 ]--
- 51
--[ 2018.11.25.18.13.56.622.0 ]--
+ 46                 minPoint = new Point(p.x(), minPoint.y());
+ 47             }
+ 48             if (p.y() <= minPoint.y()) { //p's x is smaller
+ 49                 minPoint = new Point(minPoint.x(),p.y());
+ 50             }            if (p.x() <= minPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.13.58.747.0 ]--
- 46
- 46
- 46
- 46
- 46
--[ 2018.11.25.18.14.03.168.0 ]--
+ 45             if (p.x() <= minPoint.x()) { //p's x is smaller
+ 46                 minPoint = new Point(p.x(), minPoint.y());
+ 47             }
+ 48             if (p.y() <= minPoint.y()) { //p's x is smaller
+ 49                 minPoint = new Point(minPoint.x(),p.y());
+ 50             }
--[ 2018.11.25.18.14.14.431.0 ]--
r 51             if (p.x() <= miPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.14.571.0 ]--
r 51             if (p.x() <= mPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.14.728.0 ]--
r 51             if (p.x() <= Point.x()) { //p's x is smaller
--[ 2018.11.25.18.14.15.056.0 ]--
r 51             if (p.x() <= aPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.15.571.0 ]--
r 51             if (p.x() <= axPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.17.696.0 ]--
r 51             if (p.x() <= maxPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.19.102.0 ]--
r 51             if (p.x() < maxPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.19.273.0 ]--
r 51             if (p.x()  maxPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.19.836.0 ]--
r 51             if (p.x() > maxPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.20.242.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller
--[ 2018.11.25.18.14.28.631.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's  is smaller
--[ 2018.11.25.18.14.28.881.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller
--[ 2018.11.25.18.14.30.786.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller 
--[ 2018.11.25.18.14.30.896.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller t
--[ 2018.11.25.18.14.31.005.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller th
--[ 2018.11.25.18.14.31.114.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller tha
--[ 2018.11.25.18.14.31.192.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller than
--[ 2018.11.25.18.14.31.286.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller than 
--[ 2018.11.25.18.14.31.411.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller than m
--[ 2018.11.25.18.14.31.536.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller than mi
--[ 2018.11.25.18.14.31.630.0 ]--
r 45             if (p.x() <= minPoint.x()) { //p's x is smaller than min
--[ 2018.11.25.18.14.33.739.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller 
--[ 2018.11.25.18.14.33.989.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller t
--[ 2018.11.25.18.14.34.145.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller th
--[ 2018.11.25.18.14.34.223.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller tha
--[ 2018.11.25.18.14.34.332.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller than
--[ 2018.11.25.18.14.34.411.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller than 
--[ 2018.11.25.18.14.34.567.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller than m
--[ 2018.11.25.18.14.35.004.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller than mi
--[ 2018.11.25.18.14.35.285.0 ]--
r 48             if (p.y() <= minPoint.y()) { //p's y is smaller than min
--[ 2018.11.25.18.14.37.238.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller 
--[ 2018.11.25.18.14.37.363.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller t
--[ 2018.11.25.18.14.37.457.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller th
--[ 2018.11.25.18.14.37.754.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller tha
--[ 2018.11.25.18.14.37.847.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller than
--[ 2018.11.25.18.14.37.956.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller than 
--[ 2018.11.25.18.14.38.722.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller than m
--[ 2018.11.25.18.14.38.816.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller than ma
--[ 2018.11.25.18.14.39.097.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is smaller than max
--[ 2018.11.25.18.14.42.081.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is l than max
--[ 2018.11.25.18.14.42.159.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is la than max
--[ 2018.11.25.18.14.42.315.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is lar than max
--[ 2018.11.25.18.14.42.518.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is larg than max
--[ 2018.11.25.18.14.42.549.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is large than max
--[ 2018.11.25.18.14.42.627.0 ]--
r 51             if (p.x() >= maxPoint.x()) { //p's x is larger than max
--[ 2018.11.25.18.14.46.283.0 ]--
r 52                 mnPoint = new Point(p.x(), minPoint.y());
--[ 2018.11.25.18.14.46.455.0 ]--
r 52                 mPoint = new Point(p.x(), minPoint.y());
--[ 2018.11.25.18.14.46.720.0 ]--
r 52                 maPoint = new Point(p.x(), minPoint.y());
--[ 2018.11.25.18.14.47.048.0 ]--
r 52                 maxPoint = new Point(p.x(), minPoint.y());
--[ 2018.11.25.18.14.52.781.0 ]--
r 52                 maxPoint = new Point(p.x(), mnPoint.y());
--[ 2018.11.25.18.14.53.031.0 ]--
r 52                 maxPoint = new Point(p.x(), mPoint.y());
--[ 2018.11.25.18.14.53.375.0 ]--
r 52                 maxPoint = new Point(p.x(), maPoint.y());
--[ 2018.11.25.18.14.53.640.0 ]--
r 52                 maxPoint = new Point(p.x(), maxPoint.y());
--[ 2018.11.25.18.15.01.154.0 ]--
r 54             if (p.y() <= miPoint.y()) { //p's x is smaller
--[ 2018.11.25.18.15.01.389.0 ]--
r 54             if (p.y() <= mPoint.y()) { //p's x is smaller
--[ 2018.11.25.18.15.01.560.0 ]--
r 54             if (p.y() <= maPoint.y()) { //p's x is smaller
--[ 2018.11.25.18.15.01.951.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is smaller
--[ 2018.11.25.18.15.06.388.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is l
--[ 2018.11.25.18.15.06.497.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is la
--[ 2018.11.25.18.15.06.638.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is lar
--[ 2018.11.25.18.15.06.856.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larg
--[ 2018.11.25.18.15.06.903.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is large
--[ 2018.11.25.18.15.06.981.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger
--[ 2018.11.25.18.15.07.184.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger 
--[ 2018.11.25.18.15.07.372.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger t
--[ 2018.11.25.18.15.07.465.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger th
--[ 2018.11.25.18.15.07.575.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger tha
--[ 2018.11.25.18.15.07.731.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger than
--[ 2018.11.25.18.15.07.825.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger than 
--[ 2018.11.25.18.15.08.028.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger than m
--[ 2018.11.25.18.15.08.122.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger than ma
--[ 2018.11.25.18.15.08.372.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's x is larger than max
--[ 2018.11.25.18.15.19.822.0 ]--
r 55                 miPoint = new Point(minPoint.x(),p.y());
--[ 2018.11.25.18.15.19.962.0 ]--
r 55                 mPoint = new Point(minPoint.x(),p.y());
--[ 2018.11.25.18.15.20.040.0 ]--
r 55                 maPoint = new Point(minPoint.x(),p.y());
--[ 2018.11.25.18.15.20.337.0 ]--
r 55                 maxPoint = new Point(minPoint.x(),p.y());
--[ 2018.11.25.18.15.23.305.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's  is larger than max
--[ 2018.11.25.18.15.24.196.0 ]--
r 54             if (p.y() <= maxPoint.y()) { //p's y is larger than max
--[ 2018.11.25.18.15.27.617.0 ]--
r 55                 maxPoint = new Point(miPoint.x(),p.y());
--[ 2018.11.25.18.15.27.742.0 ]--
r 55                 maxPoint = new Point(mPoint.x(),p.y());
--[ 2018.11.25.18.15.27.851.0 ]--
r 55                 maxPoint = new Point(maPoint.x(),p.y());
--[ 2018.11.25.18.15.28.101.0 ]--
r 55                 maxPoint = new Point(maxPoint.x(),p.y());
--[ 2018.11.25.18.15.43.707.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.15.49.556.0 ]--
r 54             if (p.y() < maxPoint.y()) { //p's y is larger than max
--[ 2018.11.25.18.15.49.696.0 ]--
r 54             if (p.y()  maxPoint.y()) { //p's y is larger than max
--[ 2018.11.25.18.15.50.587.0 ]--
r 54             if (p.y() > maxPoint.y()) { //p's y is larger than max
--[ 2018.11.25.18.15.50.868.0 ]--
r 54             if (p.y() >= maxPoint.y()) { //p's y is larger than max
--[ 2018.11.25.18.15.54.867.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.20.37.934.0 ]--
- 176
r 176             
--[ 2018.11.25.18.20.38.106.0 ]--
- 176
--[ 2018.11.25.18.22.35.922.0 ]--
r 170 //        partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
r 171 //        q.enqueue(partition);
--[ 2018.11.25.18.22.37.687.0 ]--
- 172
r 173         
--[ 2018.11.25.18.22.39.968.0 ]--
- 172
--[ 2018.11.25.18.22.42.936.0 ]--
r 174             q.enqueue(p);
--[ 2018.11.25.18.22.43.108.0 ]--
r 174             q.enqueue(pt);
--[ 2018.11.25.18.23.27.910.0 ]--
+ 174             
--[ 2018.11.25.18.23.28.176.0 ]--
r 174             p
--[ 2018.11.25.18.23.28.316.0 ]--
r 174             pa
--[ 2018.11.25.18.23.28.425.0 ]--
r 174             par
--[ 2018.11.25.18.23.28.582.0 ]--
r 174             part
--[ 2018.11.25.18.23.28.691.0 ]--
r 174             parti
--[ 2018.11.25.18.23.29.253.0 ]--
r 174             partition
--[ 2018.11.25.18.23.29.488.0 ]--
r 174             partition 
--[ 2018.11.25.18.23.30.035.0 ]--
r 174             partition =
--[ 2018.11.25.18.23.30.144.0 ]--
r 174             partition = 
--[ 2018.11.25.18.23.33.112.0 ]--
r 174             partition = P
--[ 2018.11.25.18.23.33.487.0 ]--
r 174             partition = Pa
--[ 2018.11.25.18.23.34.002.0 ]--
r 174             partition = Partition
--[ 2018.11.25.18.23.34.971.0 ]--
r 174             partition = Partition()
--[ 2018.11.25.18.23.36.236.0 ]--
r 174             partition = Partition
--[ 2018.11.25.18.23.36.564.0 ]--
r 174             partition = Partitio
--[ 2018.11.25.18.23.36.689.0 ]--
r 174             partition = Partiti
--[ 2018.11.25.18.23.36.830.0 ]--
r 174             partition = Partit
--[ 2018.11.25.18.23.36.986.0 ]--
r 174             partition = Parti
--[ 2018.11.25.18.23.37.142.0 ]--
r 174             partition = Part
--[ 2018.11.25.18.23.37.298.0 ]--
r 174             partition = Par
--[ 2018.11.25.18.23.37.439.0 ]--
r 174             partition = Pa
--[ 2018.11.25.18.23.37.595.0 ]--
r 174             partition = P
--[ 2018.11.25.18.23.37.876.0 ]--
r 174             partition = 
--[ 2018.11.25.18.23.51.701.0 ]--
r 174             partition = q
--[ 2018.11.25.18.23.52.279.0 ]--
r 174             partition = 
--[ 2018.11.25.18.23.53.014.0 ]--
r 174             partition = n
--[ 2018.11.25.18.23.53.154.0 ]--
r 174             partition = ne
--[ 2018.11.25.18.23.53.279.0 ]--
r 174             partition = new
--[ 2018.11.25.18.23.53.810.0 ]--
r 174             partition = newP
--[ 2018.11.25.18.23.54.201.0 ]--
r 174             partition = new
--[ 2018.11.25.18.23.54.341.0 ]--
r 174             partition = new 
--[ 2018.11.25.18.23.54.638.0 ]--
r 174             partition = new p
--[ 2018.11.25.18.23.54.747.0 ]--
r 174             partition = new pa
--[ 2018.11.25.18.23.55.247.0 ]--
r 174             partition = new p
--[ 2018.11.25.18.23.55.419.0 ]--
r 174             partition = new 
--[ 2018.11.25.18.23.55.669.0 ]--
r 174             partition = new P
--[ 2018.11.25.18.23.55.919.0 ]--
r 174             partition = new Pa
--[ 2018.11.25.18.23.56.544.0 ]--
r 174             partition = new Partition
--[ 2018.11.25.18.23.56.559.0 ]--
r 174             partition = new Partition()
--[ 2018.11.25.18.23.58.231.0 ]--
r 174             partition = new Partition(p)
--[ 2018.11.25.18.23.58.403.0 ]--
r 174             partition = new Partition(pt)
--[ 2018.11.25.18.23.58.528.0 ]--
r 174             partition = new Partition(pt,)
--[ 2018.11.25.18.23.58.793.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.23.59.496.0 ]--
r 174             partition = new Partition(pt, d)
--[ 2018.11.25.18.23.59.574.0 ]--
r 174             partition = new Partition(pt, di)
--[ 2018.11.25.18.23.59.668.0 ]--
r 174             partition = new Partition(pt, dir)
--[ 2018.11.25.18.24.00.340.0 ]--
r 174             partition = new Partition(pt, di)
--[ 2018.11.25.18.24.00.496.0 ]--
r 174             partition = new Partition(pt, d)
--[ 2018.11.25.18.24.00.808.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.00.871.0 ]--
r 174             partition = new Partition(pt, 3)
--[ 2018.11.25.18.24.01.371.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.01.558.0 ]--
r 174             partition = new Partition(pt,)
--[ 2018.11.25.18.24.02.074.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.04.589.0 ]--
r 174             partition = new Partition(pt, L)
--[ 2018.11.25.18.24.04.886.0 ]--
r 174             partition = new Partition(pt, LE)
--[ 2018.11.25.18.24.06.385.0 ]--
r 174             partition = new Partition(pt, LEF)
--[ 2018.11.25.18.24.06.666.0 ]--
r 174             partition = new Partition(pt, LEFT)
--[ 2018.11.25.18.24.07.494.0 ]--
r 174             partition = new Partition(pt, LEFTR)
--[ 2018.11.25.18.24.07.698.0 ]--
r 174             partition = new Partition(pt, LEFTRI)
--[ 2018.11.25.18.24.08.229.0 ]--
r 174             partition = new Partition(pt, LEFTRIG)
--[ 2018.11.25.18.24.08.385.0 ]--
r 174             partition = new Partition(pt, LEFTRIGH)
--[ 2018.11.25.18.24.08.494.0 ]--
r 174             partition = new Partition(pt, LEFTRIGHT)
--[ 2018.11.25.18.24.09.604.0 ]--
r 174             partition = new Partition(pt, LEFTRIGH)
--[ 2018.11.25.18.24.09.775.0 ]--
r 174             partition = new Partition(pt, LEFTRIG)
--[ 2018.11.25.18.24.09.947.0 ]--
r 174             partition = new Partition(pt, LEFTRI)
--[ 2018.11.25.18.24.10.103.0 ]--
r 174             partition = new Partition(pt, LEFTR)
--[ 2018.11.25.18.24.10.275.0 ]--
r 174             partition = new Partition(pt, LEFT)
--[ 2018.11.25.18.24.10.416.0 ]--
r 174             partition = new Partition(pt, LEF)
--[ 2018.11.25.18.24.10.587.0 ]--
r 174             partition = new Partition(pt, LE)
--[ 2018.11.25.18.24.10.931.0 ]--
r 174             partition = new Partition(pt, L)
--[ 2018.11.25.18.24.11.337.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.11.821.0 ]--
r 174             partition = new Partition(pt,)
--[ 2018.11.25.18.24.12.728.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.13.821.0 ]--
r 174             partition = new Partition(pt, p)
--[ 2018.11.25.18.24.13.962.0 ]--
r 174             partition = new Partition(pt, pt)
--[ 2018.11.25.18.24.14.087.0 ]--
r 174             partition = new Partition(pt, pt.)
--[ 2018.11.25.18.24.14.477.0 ]--
r 174             partition = new Partition(pt, pt.d)
--[ 2018.11.25.18.24.14.524.0 ]--
r 174             partition = new Partition(pt, pt.di)
--[ 2018.11.25.18.24.14.696.0 ]--
r 174             partition = new Partition(pt, pt.dir)
--[ 2018.11.25.18.24.15.274.0 ]--
r 174             partition = new Partition(pt, pt.di)
--[ 2018.11.25.18.24.15.461.0 ]--
r 174             partition = new Partition(pt, pt.d)
--[ 2018.11.25.18.24.15.711.0 ]--
r 174             partition = new Partition(pt, pt.)
--[ 2018.11.25.18.24.16.164.0 ]--
r 174             partition = new Partition(pt, pt)
--[ 2018.11.25.18.24.16.320.0 ]--
r 174             partition = new Partition(pt, p)
--[ 2018.11.25.18.24.16.570.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.19.648.0 ]--
r 174             partition = new Partition(pt, p)
--[ 2018.11.25.18.24.19.851.0 ]--
r 174             partition = new Partition(pt, pt)
--[ 2018.11.25.18.24.19.960.0 ]--
r 174             partition = new Partition(pt, pt.)
--[ 2018.11.25.18.24.20.554.0 ]--
r 174             partition = new Partition(pt, pt.p)
--[ 2018.11.25.18.24.20.710.0 ]--
r 174             partition = new Partition(pt, pt.pa)
--[ 2018.11.25.18.24.21.226.0 ]--
r 174             partition = new Partition(pt, pt.p)
--[ 2018.11.25.18.24.21.632.0 ]--
r 174             partition = new Partition(pt, pt.)
--[ 2018.11.25.18.24.23.116.0 ]--
r 174             partition = new Partition(pt, pt.P)
--[ 2018.11.25.18.24.23.631.0 ]--
r 174             partition = new Partition(pt, pt.)
--[ 2018.11.25.18.24.57.092.0 ]--
r 174             partition = new Partition(pt, pt)
--[ 2018.11.25.18.24.57.389.0 ]--
r 174             partition = new Partition(pt, p)
--[ 2018.11.25.18.24.57.576.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.24.57.795.0 ]--
r 174             partition = new Partition(pt,)
--[ 2018.11.25.18.24.58.045.0 ]--
r 174             partition = new Partition(pt)
--[ 2018.11.25.18.25.30.069.0 ]--
r 174             partition = new Partition(pt,)
--[ 2018.11.25.18.25.30.272.0 ]--
r 174             partition = new Partition(pt, )
--[ 2018.11.25.18.25.31.068.0 ]--
r 174             partition = new Partition(pt, l)
--[ 2018.11.25.18.25.31.225.0 ]--
r 174             partition = new Partition(pt, li)
--[ 2018.11.25.18.25.31.303.0 ]--
r 174             partition = new Partition(pt, lis)
--[ 2018.11.25.18.25.31.506.0 ]--
r 174             partition = new Partition(pt, list)
--[ 2018.11.25.18.25.31.865.0 ]--
r 174             partition = new Partition(pt, listOfPoints)
--[ 2018.11.25.18.28.25.152.0 ]--
+ 174             
--[ 2018.11.25.18.28.25.856.0 ]--
r 174             V
--[ 2018.11.25.18.28.26.793.0 ]--
r 174             
--[ 2018.11.25.18.28.26.980.0 ]--
+ 174             Node finger;
+ 175         if(this.isEmpty()){
+ 176             return null;
+ 177         } else {
+ 178             finger = root;
+ 179             while (true) {
+ 180                 //comparing x's
+ 181                 double fingerValue = finger.p.xy(finger.dir);
+ 182                 double pValue = p.xy(finger.dir);
+ 183                 if (pValue < fingerValue) { //go down the left
+ 184                     if (finger.left == null) {
+ 185                         return null;
+ 186                     } else {
+ 187                         if (finger.left.p.equals(p)) {
+ 188                             return finger.v;
+ 189                         }
+ 190                         finger = finger.left;
+ 191                     }
+ 192                 } else { //go down the right
+ 193                     if (finger.right == null) {
+ 194                         return null;
+ 195                     } else {
+ 196                         if (finger.right.p.equals(p)) {
+ 197                             return finger.v;
+ 198                         }
+ 199                         finger = finger.right;
+ 200                     }
+ 201                 }
+ 202             }
r 203         }
--[ 2018.11.25.18.28.27.043.0 ]--
+ 175             if(this.isEmpty()){
+ 176                 return null;
r 177             } else {
r 178                 finger = root;
r 179                 while (true) {
r 180                     //comparing x's
r 181                     double fingerValue = finger.p.xy(finger.dir);
r 182                     double pValue = p.xy(finger.dir);
r 183                     if (pValue < fingerValue) { //go down the left
r 184                         if (finger.left == null) {
r 185                             return null;
r 186                         } else {
r 187                             if (finger.left.p.equals(p)) {
r 188                                 return finger.v;
r 189                             }
r 190                             finger = finger.left;
r 192                     } else { //go down the right
r 193                         if (finger.right == null) {
r 194                             return null;
r 195                         } else {
r 196                             if (finger.right.p.equals(p)) {
r 197                                 return finger.v;
r 198                             }
r 199                             finger = finger.right;
- 201
- 204
--[ 2018.11.25.18.29.35.120.0 ]--
- 175
- 175
r 175             
--[ 2018.11.25.18.29.35.870.0 ]--
- 175
r 175                             finger = root;
--[ 2018.11.25.18.29.37.417.0 ]--
+ 175             
r 176                 finger = root;
--[ 2018.11.25.18.29.38.229.0 ]--
- 175
--[ 2018.11.25.18.29.43.978.0 ]--
- 175
- 175
r 175             finger = root;
r 176             while (true) {
r 177                 //comparing x's
r 178                 double fingerValue = finger.p.xy(finger.dir);
r 179                 double pValue = p.xy(finger.dir);
r 180                 if (pValue < fingerValue) { //go down the left
r 181                     if (finger.left == null) {
r 182                         return null;
r 183                     } else {
r 184                         if (finger.left.p.equals(p)) {
r 185                             return finger.v;
r 187                         finger = finger.left;
r 188                     }
r 189                 } else { //go down the right
r 190                     if (finger.right == null) {
r 191                         return null;
r 192                     } else {
r 193                         if (finger.right.p.equals(p)) {
r 194                             return finger.v;
+ 196                         finger = finger.right;
+ 199             }
--[ 2018.11.25.18.29.45.790.0 ]--
- 199
--[ 2018.11.25.18.30.01.177.0 ]--
r 178                 double fingerValue = finger.pt.xy(finger.dir);
--[ 2018.11.25.18.30.06.488.0 ]--
r 179                 double pValue = pt.xy(finger.dir);
--[ 2018.11.25.18.30.11.690.0 ]--
r 178                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.25.18.30.28.467.0 ]--
r 185                             return finger;
--[ 2018.11.25.18.30.33.154.0 ]--
r 194                             return finger.;
--[ 2018.11.25.18.30.33.279.0 ]--
r 194                             return finger;
--[ 2018.11.25.18.30.38.559.0 ]--
r 193                         if (finger.right.p.equals(pt)) {
--[ 2018.11.25.18.30.40.870.0 ]--
r 184                         if (finger.left.p.equals(pt)) {
--[ 2018.11.25.18.30.53.868.0 ]--
r 194                             n finger;
--[ 2018.11.25.18.30.53.977.0 ]--
r 194                             no finger;
--[ 2018.11.25.18.30.54.070.0 ]--
r 194                             nod finger;
--[ 2018.11.25.18.30.54.258.0 ]--
r 194                             node finger;
--[ 2018.11.25.18.30.54.945.0 ]--
r 194                             node  finger;
--[ 2018.11.25.18.30.55.039.0 ]--
r 194                             node = finger;
--[ 2018.11.25.18.30.57.663.0 ]--
+ 195                             
--[ 2018.11.25.18.30.58.007.0 ]--
r 195                             b
--[ 2018.11.25.18.30.58.085.0 ]--
r 195                             br
--[ 2018.11.25.18.30.58.195.0 ]--
r 195                             bre
--[ 2018.11.25.18.30.58.319.0 ]--
r 195                             brea
--[ 2018.11.25.18.30.59.288.0 ]--
r 195                             break
--[ 2018.11.25.18.30.59.600.0 ]--
r 195                             break;
--[ 2018.11.25.18.31.02.397.0 ]--
r 185                             n finger;
--[ 2018.11.25.18.31.02.553.0 ]--
r 185                             no finger;
--[ 2018.11.25.18.31.02.693.0 ]--
r 185                             nod finger;
--[ 2018.11.25.18.31.02.881.0 ]--
r 185                             node finger;
--[ 2018.11.25.18.31.04.396.0 ]--
r 185                             node  finger;
--[ 2018.11.25.18.31.04.552.0 ]--
r 185                             node = finger;
--[ 2018.11.25.18.31.07.427.0 ]--
+ 186                             
--[ 2018.11.25.18.31.09.005.0 ]--
r 186                             b
--[ 2018.11.25.18.31.09.129.0 ]--
r 186                             br
--[ 2018.11.25.18.31.09.254.0 ]--
r 186                             bre
--[ 2018.11.25.18.31.09.395.0 ]--
r 186                             brea
--[ 2018.11.25.18.31.09.536.0 ]--
r 186                             break
--[ 2018.11.25.18.31.10.442.0 ]--
r 186                             break;
--[ 2018.11.25.18.31.19.408.0 ]--
r 182                         b
--[ 2018.11.25.18.31.19.533.0 ]--
r 182                         br
--[ 2018.11.25.18.31.19.611.0 ]--
r 182                         bre
--[ 2018.11.25.18.31.19.783.0 ]--
r 182                         brea
--[ 2018.11.25.18.31.19.893.0 ]--
r 182                         break
--[ 2018.11.25.18.31.20.158.0 ]--
r 182                         break;
--[ 2018.11.25.18.31.29.172.0 ]--
+ 182                         
--[ 2018.11.25.18.31.29.469.0 ]--
r 182                         n
--[ 2018.11.25.18.31.29.625.0 ]--
r 182                         no
--[ 2018.11.25.18.31.29.718.0 ]--
r 182                         nod
--[ 2018.11.25.18.31.29.875.0 ]--
r 182                         node
--[ 2018.11.25.18.31.29.968.0 ]--
r 182                         node 
--[ 2018.11.25.18.31.30.265.0 ]--
r 182                         node =
--[ 2018.11.25.18.31.30.453.0 ]--
r 182                         node = 
--[ 2018.11.25.18.31.30.562.0 ]--
r 182                         node = n
--[ 2018.11.25.18.31.30.796.0 ]--
r 182                         node = nu
--[ 2018.11.25.18.31.31.015.0 ]--
r 182                         node = nul
--[ 2018.11.25.18.31.31.155.0 ]--
r 182                         node = null
--[ 2018.11.25.18.31.31.327.0 ]--
r 182                         node = null;
--[ 2018.11.25.18.31.36.373.0 ]--
r 193                         n
--[ 2018.11.25.18.31.36.514.0 ]--
r 193                         no
--[ 2018.11.25.18.31.36.639.0 ]--
r 193                         nod
--[ 2018.11.25.18.31.36.764.0 ]--
r 193                         node
--[ 2018.11.25.18.31.36.873.0 ]--
r 193                         node 
--[ 2018.11.25.18.31.37.092.0 ]--
r 193                         node =
--[ 2018.11.25.18.31.37.326.0 ]--
r 193                         node = 
--[ 2018.11.25.18.31.37.467.0 ]--
r 193                         node = n
--[ 2018.11.25.18.31.37.701.0 ]--
r 193                         node = nu
--[ 2018.11.25.18.31.37.888.0 ]--
r 193                         node = nul
--[ 2018.11.25.18.31.38.013.0 ]--
r 193                         node = null
--[ 2018.11.25.18.31.38.185.0 ]--
r 193                         node = null;
--[ 2018.11.25.18.31.38.388.0 ]--
+ 194                         
--[ 2018.11.25.18.31.38.685.0 ]--
r 194                         b
--[ 2018.11.25.18.31.38.779.0 ]--
r 194                         br
--[ 2018.11.25.18.31.38.841.0 ]--
r 194                         bre
--[ 2018.11.25.18.31.38.997.0 ]--
r 194                         brea
--[ 2018.11.25.18.31.39.107.0 ]--
r 194                         break
--[ 2018.11.25.18.31.39.700.0 ]--
r 194                         break;
--[ 2018.11.25.18.31.47.792.0 ]--
+ 176             
--[ 2018.11.25.18.31.48.605.0 ]--
r 176             N
--[ 2018.11.25.18.31.48.683.0 ]--
r 176             No
--[ 2018.11.25.18.31.48.823.0 ]--
r 176             Nod
--[ 2018.11.25.18.31.49.026.0 ]--
r 176             Node
--[ 2018.11.25.18.31.49.839.0 ]--
r 176             Node 
--[ 2018.11.25.18.31.50.010.0 ]--
r 176             Node =
--[ 2018.11.25.18.31.50.354.0 ]--
r 176             Node 
--[ 2018.11.25.18.31.50.620.0 ]--
r 176             Node n
--[ 2018.11.25.18.31.50.729.0 ]--
r 176             Node no
--[ 2018.11.25.18.31.50.854.0 ]--
r 176             Node nod
--[ 2018.11.25.18.31.51.026.0 ]--
r 176             Node node
--[ 2018.11.25.18.31.51.213.0 ]--
r 176             Node node 
--[ 2018.11.25.18.31.51.604.0 ]--
r 176             Node node =
--[ 2018.11.25.18.31.51.666.0 ]--
r 176             Node node = 
--[ 2018.11.25.18.31.51.838.0 ]--
r 176             Node node = n
--[ 2018.11.25.18.31.51.932.0 ]--
r 176             Node node = ne
--[ 2018.11.25.18.31.51.994.0 ]--
r 176             Node node = new
--[ 2018.11.25.18.31.52.104.0 ]--
r 176             Node node = new 
--[ 2018.11.25.18.31.52.291.0 ]--
r 176             Node node = new N
--[ 2018.11.25.18.31.52.354.0 ]--
r 176             Node node = new No
--[ 2018.11.25.18.31.52.494.0 ]--
r 176             Node node = new Nod
--[ 2018.11.25.18.31.52.666.0 ]--
r 176             Node node = new Node
--[ 2018.11.25.18.31.53.400.0 ]--
r 176             Node node = new Node()
--[ 2018.11.25.18.31.54.260.0 ]--
r 176             Node node = new Node();
--[ 2018.11.25.18.33.20.287.0 ]--
r 205             partition = new Partition(pt, f)
--[ 2018.11.25.18.33.20.443.0 ]--
r 205             partition = new Partition(pt, fi)
--[ 2018.11.25.18.33.20.599.0 ]--
r 205             partition = new Partition(pt, fin)
--[ 2018.11.25.18.33.20.739.0 ]--
r 205             partition = new Partition(pt, fing)
--[ 2018.11.25.18.33.21.036.0 ]--
r 205             partition = new Partition(pt, finge)
--[ 2018.11.25.18.33.21.114.0 ]--
r 205             partition = new Partition(pt, finger)
--[ 2018.11.25.18.33.21.380.0 ]--
r 205             partition = new Partition(pt, finger.)
--[ 2018.11.25.18.33.22.223.0 ]--
r 205             partition = new Partition(pt, finger.d)
--[ 2018.11.25.18.33.22.333.0 ]--
r 205             partition = new Partition(pt, finger.di)
--[ 2018.11.25.18.33.22.505.0 ]--
r 205             partition = new Partition(pt, finger.dir)
--[ 2018.11.25.18.33.49.842.0 ]--
r 205             partition = new Partition(pt, finger.Pdir)
--[ 2018.11.25.18.33.50.046.0 ]--
r 205             partition = new Partition(pt, finger.Padir)
--[ 2018.11.25.18.33.50.655.0 ]--
r 205             partition = new Partition(pt, finger.Pdir)
--[ 2018.11.25.18.33.51.217.0 ]--
r 205             partition = new Partition(pt, finger.Padir)
--[ 2018.11.25.18.33.51.373.0 ]--
r 205             partition = new Partition(pt, finger.Pardir)
--[ 2018.11.25.18.33.51.592.0 ]--
r 205             partition = new Partition(pt, finger.Partdir)
--[ 2018.11.25.18.33.52.295.0 ]--
r 205             partition = new Partition(pt, finger.Partidir)
--[ 2018.11.25.18.33.52.373.0 ]--
r 205             partition = new Partition(pt, finger.Partitdir)
--[ 2018.11.25.18.33.52.498.0 ]--
r 205             partition = new Partition(pt, finger.Partitidir)
--[ 2018.11.25.18.33.52.654.0 ]--
r 205             partition = new Partition(pt, finger.Partitiodir)
--[ 2018.11.25.18.33.52.717.0 ]--
r 205             partition = new Partition(pt, finger.Partitiondir)
--[ 2018.11.25.18.33.53.013.0 ]--
r 205             partition = new Partition(pt, finger.Partition,dir)
--[ 2018.11.25.18.33.53.591.0 ]--
r 205             partition = new Partition(pt, finger.Partitiondir)
--[ 2018.11.25.18.33.53.857.0 ]--
r 205             partition = new Partition(pt, finger.Partition.dir)
--[ 2018.11.25.18.33.56.591.0 ]--
r 205             partition = new Partition(pt, finger.Partitiondir)
--[ 2018.11.25.18.33.57.091.0 ]--
r 205             partition = new Partition(pt, finger.Partitiodir)
--[ 2018.11.25.18.33.57.122.0 ]--
r 205             partition = new Partition(pt, finger.Partitidir)
--[ 2018.11.25.18.33.57.184.0 ]--
r 205             partition = new Partition(pt, finger.Partitdir)
--[ 2018.11.25.18.33.57.231.0 ]--
r 205             partition = new Partition(pt, finger.Partidir)
--[ 2018.11.25.18.33.57.278.0 ]--
r 205             partition = new Partition(pt, finger.Partdir)
--[ 2018.11.25.18.33.57.309.0 ]--
r 205             partition = new Partition(pt, finger.Pardir)
--[ 2018.11.25.18.33.57.340.0 ]--
r 205             partition = new Partition(pt, finger.Padir)
--[ 2018.11.25.18.33.57.372.0 ]--
r 205             partition = new Partition(pt, finger.Pdir)
--[ 2018.11.25.18.33.57.809.0 ]--
r 205             partition = new Partition(pt, finger.dir)
--[ 2018.11.25.18.34.06.011.0 ]--
r 205             partition = new Partition(pt, finger.dir);
--[ 2018.11.25.18.34.09.041.0 ]--
r 205             partition = new Partition(pt, finger.dir;
--[ 2018.11.25.18.34.09.260.0 ]--
r 205             partition = new Partition(pt, finger.di;
--[ 2018.11.25.18.34.09.448.0 ]--
r 205             partition = new Partition(pt, finger.d;
--[ 2018.11.25.18.34.09.651.0 ]--
r 205             partition = new Partition(pt, finger.;
--[ 2018.11.25.18.34.10.978.0 ]--
r 205             partition = new Partition(pt, finger;
--[ 2018.11.25.18.34.12.010.0 ]--
r 205             partition = new Partition(pt, finger.;
--[ 2018.11.25.18.34.19.476.0 ]--
r 205             partition = new Partition(pt, finger.dir;
--[ 2018.11.25.18.34.23.069.0 ]--
r 205             partition = new Partition(pt, finger.dir);
--[ 2018.11.25.18.34.38.300.0 ]--
r 205             partition = new Partition(pt., finger.dir);
--[ 2018.11.25.18.34.40.128.0 ]--
r 205             partition = new Partition(pt, finger.dir);
--[ 2018.11.25.18.35.07.262.0 ]--
r 205             partition = new Partition(pt,, finger.dir);
--[ 2018.11.25.18.35.07.684.0 ]--
r 205             partition = new Partition(pt, , finger.dir);
--[ 2018.11.25.18.35.10.839.0 ]--
r 205             partition = new Partition(pt, f, finger.dir);
--[ 2018.11.25.18.35.10.964.0 ]--
r 205             partition = new Partition(pt, fi, finger.dir);
--[ 2018.11.25.18.35.11.136.0 ]--
r 205             partition = new Partition(pt, fin, finger.dir);
--[ 2018.11.25.18.35.11.199.0 ]--
r 205             partition = new Partition(pt, fing, finger.dir);
--[ 2018.11.25.18.35.11.605.0 ]--
r 205             partition = new Partition(pt, finge, finger.dir);
--[ 2018.11.25.18.35.11.761.0 ]--
r 205             partition = new Partition(pt, finger, finger.dir);
--[ 2018.11.25.18.35.12.073.0 ]--
r 205             partition = new Partition(pt, finger., finger.dir);
--[ 2018.11.25.18.35.13.073.0 ]--
r 205             partition = new Partition(pt, finger.p, finger.dir);
--[ 2018.11.25.18.35.13.276.0 ]--
r 205             partition = new Partition(pt, finger.pa, finger.dir);
--[ 2018.11.25.18.35.13.464.0 ]--
r 205             partition = new Partition(pt, finger.par, finger.dir);
--[ 2018.11.25.18.35.13.667.0 ]--
r 205             partition = new Partition(pt, finger.pa, finger.dir);
--[ 2018.11.25.18.35.13.854.0 ]--
r 205             partition = new Partition(pt, finger.p, finger.dir);
--[ 2018.11.25.18.35.14.026.0 ]--
r 205             partition = new Partition(pt, finger., finger.dir);
--[ 2018.11.25.18.35.14.151.0 ]--
r 205             partition = new Partition(pt, finger, finger.dir);
--[ 2018.11.25.18.35.14.354.0 ]--
r 205             partition = new Partition(pt, finge, finger.dir);
--[ 2018.11.25.18.35.14.604.0 ]--
r 205             partition = new Partition(pt, fing, finger.dir);
--[ 2018.11.25.18.35.14.792.0 ]--
r 205             partition = new Partition(pt, fin, finger.dir);
--[ 2018.11.25.18.35.14.948.0 ]--
r 205             partition = new Partition(pt, fi, finger.dir);
--[ 2018.11.25.18.35.15.120.0 ]--
r 205             partition = new Partition(pt, f, finger.dir);
--[ 2018.11.25.18.35.15.338.0 ]--
r 205             partition = new Partition(pt, , finger.dir);
--[ 2018.11.25.18.35.15.698.0 ]--
r 205             partition = new Partition(pt,, finger.dir);
--[ 2018.11.25.18.35.16.026.0 ]--
r 205             partition = new Partition(pt, finger.dir);
--[ 2018.11.25.18.36.46.333.0 ]--
r 172 
--[ 2018.11.25.18.39.47.266.0 ]--
r 205 //            partition = new Partition(pt, finger.dir);
--[ 2018.11.25.18.39.50.406.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.39.50.406.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@2a3cca8f
--[ 2018.11.25.18.39.52.284.0 ]--
r 206 //            q.enqueue(pt);
--[ 2018.11.25.18.39.52.284.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.39.52.300.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.39.52.315.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.39.54.877.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.39.54.877.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.40.12.422.0 ]--
+ 214                     }
r 215 
--[ 2018.11.25.18.40.12.469.0 ]--
r 214     }
r 216 }
--[ 2018.11.25.18.40.13.688.0 ]--
- 214
r 214         return root.p;
r 215     }
--[ 2018.11.25.18.40.28.669.0 ]--
+ 214         while (true) {
+ 215                 //comparing x's
+ 216                 double fingerValue = finger.p.xy(finger.dir);
+ 217                 double pValue = pt.xy(finger.dir);
+ 218                 if (pValue < fingerValue) { //go down the left
+ 219                     if (finger.left == null) {
+ 220                         node = null;
+ 221                         break;
+ 222                     } else {
+ 223                         if (finger.left.p.equals(pt)) {
+ 224                             node = finger;
+ 225                             break;
+ 226                         }
+ 227                         finger = finger.left;
+ 228                     }
+ 229                 } else { //go down the right
+ 230                     if (finger.right == null) {
+ 231                         node = null;
+ 232                         break;
+ 233                     } else {
+ 234                         if (finger.right.p.equals(pt)) {
+ 235                             node = finger;
+ 236                             break;
+ 237                         }
+ 238                         finger = finger.right;
+ 239                     }
+ 240                 }
r 241             }
--[ 2018.11.25.18.40.28.716.0 ]--
- 215
- 215
r 215             //comparing x's
r 216             double fingerValue = finger.p.xy(finger.dir);
r 217             double pValue = pt.xy(finger.dir);
r 218             if (pValue < fingerValue) { //go down the left
r 219                 if (finger.left == null) {
r 220                     node = null;
r 221                     break;
r 222                 } else {
r 223                     if (finger.left.p.equals(pt)) {
r 224                         node = finger;
r 225                         break;
r 227                     finger = finger.left;
r 228                 }
r 229             } else { //go down the right
r 230                 if (finger.right == null) {
r 231                     node = null;
r 232                     break;
r 233                 } else {
r 234                     if (finger.right.p.equals(pt)) {
r 235                         node = finger;
r 236                         break;
+ 238                     finger = finger.right;
+ 241         }
--[ 2018.11.25.18.40.43.603.0 ]--
+ 214         
--[ 2018.11.25.18.40.43.806.0 ]--
+ 214         Node finger;
+ 215             finger = root;
r 216             Node node = new Node();
--[ 2018.11.25.18.40.43.868.0 ]--
r 215         finger = root;
r 216         Node node = new Node();
--[ 2018.11.25.18.41.06.535.0 ]--
r 220             double pValue = p.xy(finger.dir);
--[ 2018.11.25.18.41.18.579.0 ]--
r 226                     if (finger.left.p.equals(p)) {
--[ 2018.11.25.18.41.22.531.0 ]--
r 237                     if (finger.right.p.equals(p)) {
--[ 2018.11.25.18.41.58.617.0 ]--
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
- 57
r 57             v
--[ 2018.11.25.18.42.00.116.0 ]--
+ 57             while (true) {
+ 58                 //comparing x's
+ 59                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
+ 60                 double newNodeValue = newNode.p.xy(finger.dir);
+ 61                 if (newNodeValue < fingerValue) { //go down the left
+ 62                     if (finger.left == null) {
+ 63                         if (!this.contains(newNode.p)) {
+ 64                             listOfPoints.add(newNode.p);
+ 65                             StdOut.println(newNode.p);
+ 66                         }
+ 67                         finger.left = newNode;
+ 68                         treeSize++;
+ 69                         break; //baby
+ 70                     } else {
+ 71                         finger = finger.left;
+ 72                     }
+ 73                 } else { //go down the right
+ 74                     if (finger.right == null) {
+ 75                         if (!this.contains(newNode.p)) {
+ 76                             listOfPoints.add(newNode.p);
+ 77                             StdOut.println(newNode.p);
+ 78                         }
+ 79                         finger.right = newNode;
+ 80                         treeSize++;
+ 81                         break; //baby
+ 82                     } else {
+ 83                         finger = finger.right;
+ 84                     }
+ 85                 }
r 86             }
--[ 2018.11.25.18.42.09.348.0 ]--
+ 218                 //comparing x's
+ 219                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
+ 220                 double newNodeValue = newNode.p.xy(finger.dir);
r 221                 if (newNodeValue < fingerValue) { //go down the left
r 222                     if (finger.left == null) {
r 223                         if (!this.contains(newNode.p)) {
r 224                             listOfPoints.add(newNode.p);
r 225                             StdOut.println(newNode.p);
r 226                         }
r 227                         finger.left = newNode;
r 228                         treeSize++;
r 229                         break; //baby
r 230                     } else {
r 231                         finger = finger.left;
r 233                 } else { //go down the right
r 234                     if (finger.right == null) {
r 235                         if (!this.contains(newNode.p)) {
r 236                             listOfPoints.add(newNode.p);
r 237                             StdOut.println(newNode.p);
r 238                         }
r 239                         finger.right = newNode;
r 240                         treeSize++;
r 241                         break; //baby
r 242                     } else {
r 243                         finger = finger.right;
r 244                     }
- 247
--[ 2018.11.25.18.42.09.457.0 ]--
- 218
r 218             //comparing x's
r 219             double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 220             double newNodeValue = newNode.p.xy(finger.dir);
r 221             if (newNodeValue < fingerValue) { //go down the left
r 222                 if (finger.left == null) {
r 223                     if (!this.contains(newNode.p)) {
r 224                         listOfPoints.add(newNode.p);
r 225                         StdOut.println(newNode.p);
r 226                     }
r 227                     finger.left = newNode;
r 228                     treeSize++;
r 229                     break; //baby
r 230                 } else {
r 231                     finger = finger.left;
r 232                 }
r 233             } else { //go down the right
r 234                 if (finger.right == null) {
r 235                     if (!this.contains(newNode.p)) {
r 236                         listOfPoints.add(newNode.p);
r 237                         StdOut.println(newNode.p);
r 238                     }
r 239                     finger.right = newNode;
r 240                     treeSize++;
r 241                     break; //baby
r 242                 } else {
r 243                     finger = finger.right;
+ 246         }
--[ 2018.11.25.18.42.22.033.0 ]--
r 216         Node nnode = new Node();
--[ 2018.11.25.18.42.22.345.0 ]--
r 216         Node nenode = new Node();
--[ 2018.11.25.18.42.22.454.0 ]--
r 216         Node newnode = new Node();
--[ 2018.11.25.18.42.23.189.0 ]--
r 216         Node newode = new Node();
--[ 2018.11.25.18.42.23.626.0 ]--
r 216         Node newNode = new Node();
--[ 2018.11.25.18.42.39.669.0 ]--
- 223
- 223
- 223
r 223 
--[ 2018.11.25.18.42.40.138.0 ]--
- 223
--[ 2018.11.25.18.42.43.574.0 ]--
- 231
- 231
- 231
r 231 
--[ 2018.11.25.18.42.44.027.0 ]--
- 231
--[ 2018.11.25.18.42.56.978.0 ]--
+ 217         
--[ 2018.11.25.18.42.57.540.0 ]--
r 217         N
--[ 2018.11.25.18.42.57.649.0 ]--
r 217         No
--[ 2018.11.25.18.42.57.821.0 ]--
r 217         Nod
--[ 2018.11.25.18.42.58.009.0 ]--
r 217         Node
--[ 2018.11.25.18.42.58.212.0 ]--
r 217         Node 
--[ 2018.11.25.18.43.00.102.0 ]--
r 217         Node
--[ 2018.11.25.18.43.00.228.0 ]--
r 217         Nod
--[ 2018.11.25.18.43.00.384.0 ]--
r 217         No
--[ 2018.11.25.18.43.00.509.0 ]--
r 217         N
--[ 2018.11.25.18.43.00.634.0 ]--
r 217         
--[ 2018.11.25.18.43.01.055.0 ]--
- 217
--[ 2018.11.25.18.43.05.851.0 ]--
r 223                     r
--[ 2018.11.25.18.43.05.960.0 ]--
r 223                     re
--[ 2018.11.25.18.43.06.148.0 ]--
r 223                     ret
--[ 2018.11.25.18.43.06.226.0 ]--
r 223                     retu
--[ 2018.11.25.18.43.06.351.0 ]--
r 223                     retur
--[ 2018.11.25.18.43.06.429.0 ]--
r 223                     return
--[ 2018.11.25.18.43.06.538.0 ]--
r 223                     return 
--[ 2018.11.25.18.43.06.741.0 ]--
r 223                     return f
--[ 2018.11.25.18.43.06.851.0 ]--
r 223                     return fi
--[ 2018.11.25.18.43.07.132.0 ]--
r 223                     return fin
--[ 2018.11.25.18.43.07.288.0 ]--
r 223                     return fing
--[ 2018.11.25.18.43.07.585.0 ]--
r 223                     return finge
--[ 2018.11.25.18.43.07.694.0 ]--
r 223                     return finger
--[ 2018.11.25.18.43.07.820.0 ]--
r 223                     return finger.
--[ 2018.11.25.18.43.08.866.0 ]--
r 223                     return finger.p
--[ 2018.11.25.18.43.10.491.0 ]--
r 223                     return finger.p;
--[ 2018.11.25.18.43.20.785.0 ]--
+ 231                                         return finger.p;
r 232 
--[ 2018.11.25.18.43.20.832.0 ]--
r 231                     return finger.p;
--[ 2018.11.25.18.43.22.050.0 ]--
- 232
--[ 2018.11.25.18.43.26.549.0 ]--
+ 232                     treeSize++;
--[ 2018.11.25.18.43.27.940.0 ]--
- 232
--[ 2018.11.25.18.43.28.377.0 ]--
- 233
--[ 2018.11.25.18.43.29.392.0 ]--
+ 233                     break; //baby
--[ 2018.11.25.18.43.32.235.0 ]--
- 232
--[ 2018.11.25.18.43.32.673.0 ]--
- 232
--[ 2018.11.25.18.43.34.766.0 ]--
- 225
--[ 2018.11.25.18.43.35.860.0 ]--
- 224
--[ 2018.11.25.18.43.47.154.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.18.45.56.908.0 ]--
+ 174             Node newNode = new Node();
+ 175         newNode.p = p;
+ 176         newNode.v = v;
r 177         Node finger;
--[ 2018.11.25.18.45.57.001.0 ]--
r 175             newNode.p = p;
r 176             newNode.v = v;
r 177             Node finger;
--[ 2018.11.25.18.46.26.464.0 ]--
- 174
- 174
- 174
--[ 2018.11.25.18.46.34.728.0 ]--
+ 214         Node newNode = new Node();
+ 215         newNode.p = p;
+ 216         newNode.v = v;
--[ 2018.11.25.18.46.50.802.0 ]--
- 216
--[ 2018.11.25.18.46.54.020.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.46.54.020.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@2ee18854
--[ 2018.11.25.18.47.00.955.0 ]--
- 218
--[ 2018.11.25.18.47.00.955.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.00.971.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.00.971.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.02.189.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.02.189.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.03.830.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.18.47.03.830.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.19.41.34.874.0 ]--
UpdateTree (AD): 4 0
+ /.git/objects/25/0b9c9f16fe6f5864ac3dafacf65044740fcc79
+ /.git/objects/2b/8a7381b67ed505a5763a3d419c3d4fa9727c10
+ /.git/objects/54/80a9496c6b0d8b05bd804abf0a54a93485b31c
+ /.git/objects/a4/2af619975dd4c5b3562f837436c1290e9ead41

--[ 2018.11.25.19.55.15.837.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.20.12.51.906.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.20.45.09.990.0 ]--
r 214 //        Node newNode = new Node();
r 215 //        newNode.p = p;
r 216 //        Node finger;
r 217 //        finger = root;
r 218 //        while (true) {
r 219 //            //comparing x's
r 220 //            double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 221 //            double newNodeValue = newNode.p.xy(finger.dir);
r 222 //            if (newNodeValue < fingerValue) { //go down the left
r 223 //                if (finger.left == null) {
r 224 //                    return finger.p;
r 225 //                } else {
r 226 //                    finger = finger.left;
r 227 //                }
r 228 //            } else { //go down the right
r 229 //                if (finger.right == null) {
r 230 //                    return finger.p;
r 231 //                } else {
r 232 //                    finger = finger.right;
r 233 //                }
r 234 //            }
r 235 //        }
--[ 2018.11.25.20.45.12.895.0 ]--
+ 236 
--[ 2018.11.25.20.45.12.926.0 ]--
r 236         
--[ 2018.11.25.20.45.24.689.0 ]--
+ 212     
--[ 2018.11.25.20.45.24.830.0 ]--
r 212         
--[ 2018.11.25.20.45.25.517.0 ]--
r 212         p
--[ 2018.11.25.20.45.25.611.0 ]--
r 212         pr
--[ 2018.11.25.20.45.25.814.0 ]--
r 212         pri
--[ 2018.11.25.20.45.25.970.0 ]--
r 212         priv
--[ 2018.11.25.20.45.26.048.0 ]--
r 212         priva
--[ 2018.11.25.20.45.26.330.0 ]--
r 212         privat
--[ 2018.11.25.20.45.26.689.0 ]--
r 212         private
--[ 2018.11.25.20.45.26.814.0 ]--
r 212         private 
--[ 2018.11.25.20.45.27.329.0 ]--
r 212         private
--[ 2018.11.25.20.45.27.454.0 ]--
r 212         privat
--[ 2018.11.25.20.45.27.595.0 ]--
r 212         priva
--[ 2018.11.25.20.45.27.735.0 ]--
r 212         priv
--[ 2018.11.25.20.45.27.845.0 ]--
r 212         pri
--[ 2018.11.25.20.45.27.985.0 ]--
r 212         pr
--[ 2018.11.25.20.45.28.360.0 ]--
r 212         p
--[ 2018.11.25.20.45.28.392.0 ]--
r 212         
--[ 2018.11.25.20.45.28.720.0 ]--
r 212     
--[ 2018.11.25.20.45.29.219.0 ]--
r 212     p
--[ 2018.11.25.20.45.29.329.0 ]--
r 212     pr
--[ 2018.11.25.20.45.29.438.0 ]--
r 212     pri
--[ 2018.11.25.20.45.29.922.0 ]--
r 212     priv
--[ 2018.11.25.20.45.30.079.0 ]--
r 212     priva
--[ 2018.11.25.20.45.30.282.0 ]--
r 212     privat
--[ 2018.11.25.20.45.30.485.0 ]--
r 212     private
--[ 2018.11.25.20.45.30.594.0 ]--
r 212     private 
--[ 2018.11.25.20.45.32.016.0 ]--
r 212     private t
--[ 2018.11.25.20.45.32.219.0 ]--
r 212     private tr
--[ 2018.11.25.20.45.32.422.0 ]--
r 212     private tra
--[ 2018.11.25.20.45.32.672.0 ]--
r 212     private trav
--[ 2018.11.25.20.45.32.797.0 ]--
r 212     private trave
--[ 2018.11.25.20.45.32.890.0 ]--
r 212     private traver
--[ 2018.11.25.20.45.33.109.0 ]--
r 212     private travers
--[ 2018.11.25.20.45.33.281.0 ]--
r 212     private traverse
--[ 2018.11.25.20.45.34.515.0 ]--
r 212     private travers
--[ 2018.11.25.20.45.35.046.0 ]--
r 212     private traver
--[ 2018.11.25.20.45.35.077.0 ]--
r 212     private trave
--[ 2018.11.25.20.45.35.124.0 ]--
r 212     private trav
--[ 2018.11.25.20.45.35.156.0 ]--
r 212     private tra
--[ 2018.11.25.20.45.35.187.0 ]--
r 212     private tr
--[ 2018.11.25.20.45.35.234.0 ]--
r 212     private t
--[ 2018.11.25.20.45.35.655.0 ]--
r 212     private 
--[ 2018.11.25.20.45.35.859.0 ]--
r 212     private s
--[ 2018.11.25.20.45.36.515.0 ]--
r 212     private st
--[ 2018.11.25.20.45.36.999.0 ]--
r 212     private s
--[ 2018.11.25.20.45.37.749.0 ]--
r 212     private st
--[ 2018.11.25.20.45.37.983.0 ]--
r 212     private sta
--[ 2018.11.25.20.45.38.264.0 ]--
r 212     private static
--[ 2018.11.25.20.45.38.327.0 ]--
r 212     private static 
--[ 2018.11.25.20.45.39.155.0 ]--
r 212     private static
--[ 2018.11.25.20.45.39.311.0 ]--
r 212     private stati
--[ 2018.11.25.20.45.39.451.0 ]--
r 212     private stat
--[ 2018.11.25.20.45.39.592.0 ]--
r 212     private sta
--[ 2018.11.25.20.45.39.717.0 ]--
r 212     private st
--[ 2018.11.25.20.45.39.873.0 ]--
r 212     private s
--[ 2018.11.25.20.45.39.998.0 ]--
r 212     private 
--[ 2018.11.25.20.45.42.451.0 ]--
r 212     private t
--[ 2018.11.25.20.45.42.623.0 ]--
r 212     private tr
--[ 2018.11.25.20.45.42.779.0 ]--
r 212     private tra
--[ 2018.11.25.20.45.43.076.0 ]--
r 212     private trav
--[ 2018.11.25.20.45.43.294.0 ]--
r 212     private trave
--[ 2018.11.25.20.45.43.388.0 ]--
r 212     private traver
--[ 2018.11.25.20.45.43.763.0 ]--
r 212     private travers
--[ 2018.11.25.20.45.43.919.0 ]--
r 212     private traverse
--[ 2018.11.25.20.45.44.841.0 ]--
r 212     private travers
--[ 2018.11.25.20.45.45.356.0 ]--
r 212     private traver
--[ 2018.11.25.20.45.45.388.0 ]--
r 212     private trave
--[ 2018.11.25.20.45.45.434.0 ]--
r 212     private trav
--[ 2018.11.25.20.45.45.497.0 ]--
r 212     private tra
--[ 2018.11.25.20.45.45.528.0 ]--
r 212     private tr
--[ 2018.11.25.20.45.45.575.0 ]--
r 212     private t
--[ 2018.11.25.20.45.45.591.0 ]--
r 212     private 
--[ 2018.11.25.20.45.46.153.0 ]--
r 212     private n
--[ 2018.11.25.20.45.46.215.0 ]--
r 212     private ne
--[ 2018.11.25.20.45.46.309.0 ]--
r 212     private nea
--[ 2018.11.25.20.45.46.512.0 ]--
r 212     private near
--[ 2018.11.25.20.45.46.747.0 ]--
r 212     private neare
--[ 2018.11.25.20.45.46.934.0 ]--
r 212     private neares
--[ 2018.11.25.20.45.47.122.0 ]--
r 212     private nearest
--[ 2018.11.25.20.45.47.621.0 ]--
r 212     private nearestT
--[ 2018.11.25.20.45.47.793.0 ]--
r 212     private nearestTr
--[ 2018.11.25.20.45.48.262.0 ]--
r 212     private nearestTra
--[ 2018.11.25.20.45.48.809.0 ]--
r 212     private nearestTrav
--[ 2018.11.25.20.45.49.059.0 ]--
r 212     private nearestTrave
--[ 2018.11.25.20.45.49.199.0 ]--
r 212     private nearestTraver
--[ 2018.11.25.20.45.49.652.0 ]--
r 212     private nearestTravers
--[ 2018.11.25.20.45.49.808.0 ]--
r 212     private nearestTraverse
--[ 2018.11.25.20.45.52.167.0 ]--
r 212     private nearestTraverse()
--[ 2018.11.25.20.45.53.667.0 ]--
r 212     private nearestTraverse(P)
--[ 2018.11.25.20.45.54.526.0 ]--
r 212     private nearestTraverse()
--[ 2018.11.25.20.45.54.729.0 ]--
r 212     private nearestTraverse(n)
--[ 2018.11.25.20.45.54.885.0 ]--
r 212     private nearestTraverse(no)
--[ 2018.11.25.20.45.55.010.0 ]--
r 212     private nearestTraverse(nod)
--[ 2018.11.25.20.45.55.214.0 ]--
r 212     private nearestTraverse(node)
--[ 2018.11.25.20.45.55.713.0 ]--
r 212     private nearestTraverse(nod)
--[ 2018.11.25.20.45.56.026.0 ]--
r 212     private nearestTraverse(no)
--[ 2018.11.25.20.45.56.166.0 ]--
r 212     private nearestTraverse(n)
--[ 2018.11.25.20.45.56.526.0 ]--
r 212     private nearestTraverse()
--[ 2018.11.25.20.45.56.744.0 ]--
r 212     private nearestTraverse(N)
--[ 2018.11.25.20.45.56.854.0 ]--
r 212     private nearestTraverse(No)
--[ 2018.11.25.20.45.56.979.0 ]--
r 212     private nearestTraverse(Nod)
--[ 2018.11.25.20.45.57.510.0 ]--
r 212     private nearestTraverse(Node)
--[ 2018.11.25.20.45.57.713.0 ]--
r 212     private nearestTraverse(Node )
--[ 2018.11.25.20.45.58.322.0 ]--
r 212     private nearestTraverse(Node n)
--[ 2018.11.25.20.46.16.756.0 ]--
r 212     private nearestTraverse(Node n) 
--[ 2018.11.25.20.46.16.959.0 ]--
r 212     private nearestTraverse(Node n) {}
--[ 2018.11.25.20.46.17.193.0 ]--
+ 212     private nearestTraverse(Node n) {
r 213     }
--[ 2018.11.25.20.46.17.224.0 ]--
+ 213         
--[ 2018.11.25.20.46.25.660.0 ]--
r 213         O
--[ 2018.11.25.20.46.25.706.0 ]--
r 213         On
--[ 2018.11.25.20.46.26.019.0 ]--
r 213         O
--[ 2018.11.25.20.46.26.253.0 ]--
r 213         ON
--[ 2018.11.25.20.46.26.331.0 ]--
r 213         ONo
--[ 2018.11.25.20.46.26.597.0 ]--
r 213         ON
--[ 2018.11.25.20.46.26.737.0 ]--
r 213         O
--[ 2018.11.25.20.46.27.066.0 ]--
r 213         
--[ 2018.11.25.20.46.27.237.0 ]--
r 213         N
--[ 2018.11.25.20.46.27.331.0 ]--
r 213         No
--[ 2018.11.25.20.46.27.472.0 ]--
r 213         Nod
--[ 2018.11.25.20.46.27.644.0 ]--
r 213         Node
--[ 2018.11.25.20.46.28.284.0 ]--
r 213         Node 
--[ 2018.11.25.20.46.28.768.0 ]--
r 213         Node
--[ 2018.11.25.20.46.28.909.0 ]--
r 213         Nod
--[ 2018.11.25.20.46.29.049.0 ]--
r 213         No
--[ 2018.11.25.20.46.29.424.0 ]--
r 213         N
--[ 2018.11.25.20.46.29.831.0 ]--
r 213         
--[ 2018.11.25.20.46.31.002.0 ]--
r 213         r
--[ 2018.11.25.20.46.31.096.0 ]--
r 213         ro
--[ 2018.11.25.20.46.31.455.0 ]--
r 213         r
--[ 2018.11.25.20.46.31.627.0 ]--
r 213         
--[ 2018.11.25.20.46.38.782.0 ]--
r 213         i
--[ 2018.11.25.20.46.38.828.0 ]--
r 213         if
--[ 2018.11.25.20.46.38.969.0 ]--
r 213         if 
--[ 2018.11.25.20.46.39.735.0 ]--
r 213         if ()
--[ 2018.11.25.20.46.40.281.0 ]--
r 213         if () 
--[ 2018.11.25.20.46.40.500.0 ]--
r 213         if () {
--[ 2018.11.25.20.46.40.703.0 ]--
+ 214 
+ 215 }
--[ 2018.11.25.20.46.40.828.0 ]--
r 215         }
--[ 2018.11.25.20.46.40.859.0 ]--
r 214             
--[ 2018.11.25.20.46.42.078.0 ]--
+ 216         
--[ 2018.11.25.20.46.42.406.0 ]--
r 216         e
--[ 2018.11.25.20.46.42.671.0 ]--
r 216         el
--[ 2018.11.25.20.46.42.765.0 ]--
r 216         els
--[ 2018.11.25.20.46.42.843.0 ]--
r 216         else
--[ 2018.11.25.20.46.42.906.0 ]--
r 216         else 
--[ 2018.11.25.20.46.43.249.0 ]--
r 216         else {
--[ 2018.11.25.20.46.43.437.0 ]--
+ 217 
+ 218 }
--[ 2018.11.25.20.46.43.577.0 ]--
r 218         }
--[ 2018.11.25.20.46.43.609.0 ]--
r 217             
--[ 2018.11.25.20.46.48.358.0 ]--
r 213         if (n) {
--[ 2018.11.25.20.46.49.264.0 ]--
r 213         if (n.) {
--[ 2018.11.25.20.46.49.482.0 ]--
r 213         if (n.n) {
--[ 2018.11.25.20.46.49.545.0 ]--
r 213         if (n.ne) {
--[ 2018.11.25.20.46.49.779.0 ]--
r 213         if (n.nex) {
--[ 2018.11.25.20.46.50.326.0 ]--
r 213         if (n.next) {
--[ 2018.11.25.20.46.50.576.0 ]--
r 213         if (n.nex) {
--[ 2018.11.25.20.46.50.716.0 ]--
r 213         if (n.ne) {
--[ 2018.11.25.20.46.50.857.0 ]--
r 213         if (n.n) {
--[ 2018.11.25.20.46.50.982.0 ]--
r 213         if (n.) {
--[ 2018.11.25.20.46.51.732.0 ]--
r 213         if (n.l) {
--[ 2018.11.25.20.46.51.935.0 ]--
r 213         if (n.le) {
--[ 2018.11.25.20.46.52.388.0 ]--
r 213         if (n.left) {
--[ 2018.11.25.20.46.55.371.0 ]--
r 213         if (n.left ) {
--[ 2018.11.25.20.46.55.934.0 ]--
r 213         if (n.left) {
--[ 2018.11.25.20.46.57.074.0 ]--
r 213         if (n.left ) {
--[ 2018.11.25.20.46.57.246.0 ]--
r 213         if (n.left =) {
--[ 2018.11.25.20.46.57.402.0 ]--
r 213         if (n.left ==) {
--[ 2018.11.25.20.46.57.496.0 ]--
r 213         if (n.left == ) {
--[ 2018.11.25.20.46.57.652.0 ]--
r 213         if (n.left == n) {
--[ 2018.11.25.20.46.57.871.0 ]--
r 213         if (n.left == nu) {
--[ 2018.11.25.20.46.58.043.0 ]--
r 213         if (n.left == nul) {
--[ 2018.11.25.20.46.58.168.0 ]--
r 213         if (n.left == null) {
--[ 2018.11.25.20.47.10.415.0 ]--
r 214             r
--[ 2018.11.25.20.47.10.555.0 ]--
r 214             re
--[ 2018.11.25.20.47.10.805.0 ]--
r 214             ret
--[ 2018.11.25.20.47.10.883.0 ]--
r 214             retu
--[ 2018.11.25.20.47.10.993.0 ]--
r 214             retur
--[ 2018.11.25.20.47.11.118.0 ]--
r 214             return
--[ 2018.11.25.20.47.12.945.0 ]--
r 214             return;
--[ 2018.11.25.20.47.16.413.0 ]--
r 212     private vnearestTraverse(Node n) {
--[ 2018.11.25.20.47.16.554.0 ]--
r 212     private vonearestTraverse(Node n) {
--[ 2018.11.25.20.47.16.663.0 ]--
r 212     private voinearestTraverse(Node n) {
--[ 2018.11.25.20.47.16.788.0 ]--
r 212     private voidnearestTraverse(Node n) {
--[ 2018.11.25.20.47.16.866.0 ]--
r 212     private void nearestTraverse(Node n) {
--[ 2018.11.25.20.47.38.769.0 ]--
r 214             return
--[ 2018.11.25.20.47.38.925.0 ]--
r 214             retur
--[ 2018.11.25.20.47.39.096.0 ]--
r 214             retu
--[ 2018.11.25.20.47.39.409.0 ]--
r 214             ret
--[ 2018.11.25.20.47.39.581.0 ]--
r 214             re
--[ 2018.11.25.20.47.39.768.0 ]--
r 214             r
--[ 2018.11.25.20.47.40.080.0 ]--
r 214             
--[ 2018.11.25.20.47.52.203.0 ]--
r 213         if (n.left == null ) {
--[ 2018.11.25.20.47.56.983.0 ]--
r 213         if (n.left == null &) {
--[ 2018.11.25.20.47.57.155.0 ]--
r 213         if (n.left == null &&) {
--[ 2018.11.25.20.47.57.561.0 ]--
r 213         if (n.left == null && ) {
--[ 2018.11.25.20.47.58.045.0 ]--
r 213         if (n.left == null && n) {
--[ 2018.11.25.20.47.58.327.0 ]--
r 213         if (n.left == null && n.) {
--[ 2018.11.25.20.47.58.623.0 ]--
r 213         if (n.left == null && n.r) {
--[ 2018.11.25.20.47.58.764.0 ]--
r 213         if (n.left == null && n.ri) {
--[ 2018.11.25.20.47.58.905.0 ]--
r 213         if (n.left == null && n.rig) {
--[ 2018.11.25.20.47.59.014.0 ]--
r 213         if (n.left == null && n.righ) {
--[ 2018.11.25.20.47.59.123.0 ]--
r 213         if (n.left == null && n.right) {
--[ 2018.11.25.20.47.59.732.0 ]--
r 213         if (n.left == null && n.right ) {
--[ 2018.11.25.20.47.59.873.0 ]--
r 213         if (n.left == null && n.right !) {
--[ 2018.11.25.20.48.00.154.0 ]--
r 213         if (n.left == null && n.right !=) {
--[ 2018.11.25.20.48.00.295.0 ]--
r 213         if (n.left == null && n.right != ) {
--[ 2018.11.25.20.48.00.764.0 ]--
r 213         if (n.left == null && n.right != n) {
--[ 2018.11.25.20.48.00.951.0 ]--
r 213         if (n.left == null && n.right != nu) {
--[ 2018.11.25.20.48.01.123.0 ]--
r 213         if (n.left == null && n.right != nul) {
--[ 2018.11.25.20.48.01.357.0 ]--
r 213         if (n.left == null && n.right != nu) {
--[ 2018.11.25.20.48.01.498.0 ]--
r 213         if (n.left == null && n.right != n) {
--[ 2018.11.25.20.48.01.607.0 ]--
r 213         if (n.left == null && n.right != ) {
--[ 2018.11.25.20.48.01.732.0 ]--
r 213         if (n.left == null && n.right !=) {
--[ 2018.11.25.20.48.01.888.0 ]--
r 213         if (n.left == null && n.right !) {
--[ 2018.11.25.20.48.01.998.0 ]--
r 213         if (n.left == null && n.right ) {
--[ 2018.11.25.20.48.02.169.0 ]--
r 213         if (n.left == null && n.right) {
--[ 2018.11.25.20.48.02.372.0 ]--
r 213         if (n.left == null && n.righ) {
--[ 2018.11.25.20.48.02.419.0 ]--
r 213         if (n.left == null && n.rig) {
--[ 2018.11.25.20.48.02.544.0 ]--
r 213         if (n.left == null && n.ri) {
--[ 2018.11.25.20.48.02.700.0 ]--
r 213         if (n.left == null && n.r) {
--[ 2018.11.25.20.48.02.841.0 ]--
r 213         if (n.left == null && n.) {
--[ 2018.11.25.20.48.03.013.0 ]--
r 213         if (n.left == null && n) {
--[ 2018.11.25.20.48.03.232.0 ]--
r 213         if (n.left == null && ) {
--[ 2018.11.25.20.48.03.372.0 ]--
r 213         if (n.left == null &&) {
--[ 2018.11.25.20.48.03.575.0 ]--
r 213         if (n.left == null &) {
--[ 2018.11.25.20.48.03.825.0 ]--
r 213         if (n.left == null ) {
--[ 2018.11.25.20.48.04.122.0 ]--
r 213         if (n.left == null) {
--[ 2018.11.25.20.48.07.418.0 ]--
r 214             i
--[ 2018.11.25.20.48.07.543.0 ]--
r 214             if
--[ 2018.11.25.20.48.07.652.0 ]--
r 214             if 
--[ 2018.11.25.20.48.09.543.0 ]--
r 214             if
--[ 2018.11.25.20.48.09.683.0 ]--
r 214             i
--[ 2018.11.25.20.48.09.855.0 ]--
r 214             
--[ 2018.11.25.20.48.15.354.0 ]--
r 213         if (!n.left == null) {
--[ 2018.11.25.20.48.16.416.0 ]--
r 213         if (n.left == null) {
--[ 2018.11.25.20.48.17.838.0 ]--
r 214             n
--[ 2018.11.25.20.48.18.884.0 ]--
r 214             
--[ 2018.11.25.20.48.22.524.0 ]--
r 213         if (n.left = null) {
--[ 2018.11.25.20.48.23.008.0 ]--
r 213         if (n.left  null) {
--[ 2018.11.25.20.48.23.118.0 ]--
r 213         if (n.lef null) {
--[ 2018.11.25.20.48.23.149.0 ]--
r 213         if (n.le null) {
--[ 2018.11.25.20.48.23.180.0 ]--
r 213         if (n.l null) {
--[ 2018.11.25.20.48.23.227.0 ]--
r 213         if (n. null) {
--[ 2018.11.25.20.48.23.586.0 ]--
r 213         if (n null) {
--[ 2018.11.25.20.48.25.617.0 ]--
r 213         if (n =null) {
--[ 2018.11.25.20.48.25.758.0 ]--
r 213         if (n ==null) {
--[ 2018.11.25.20.48.25.929.0 ]--
r 213         if (n == null) {
--[ 2018.11.25.20.48.28.226.0 ]--
r 214             r
--[ 2018.11.25.20.48.28.320.0 ]--
r 214             re
--[ 2018.11.25.20.48.28.491.0 ]--
r 214             ret
--[ 2018.11.25.20.48.28.538.0 ]--
r 214             retu
--[ 2018.11.25.20.48.28.710.0 ]--
r 214             retur
--[ 2018.11.25.20.48.28.804.0 ]--
r 214             return
--[ 2018.11.25.20.48.30.194.0 ]--
r 214             return;
--[ 2018.11.25.20.48.43.191.0 ]--
- 217
--[ 2018.11.25.20.48.43.488.0 ]--
- 217
--[ 2018.11.25.20.48.44.706.0 ]--
- 216
--[ 2018.11.25.20.48.45.972.0 ]--
+ 216 
--[ 2018.11.25.20.48.46.878.0 ]--
r 216     
--[ 2018.11.25.20.48.47.315.0 ]--
r 216         
--[ 2018.11.25.20.48.49.080.0 ]--
r 216         n
--[ 2018.11.25.20.48.49.252.0 ]--
r 216         ne
--[ 2018.11.25.20.48.49.330.0 ]--
r 216         nea
--[ 2018.11.25.20.48.49.502.0 ]--
r 216         near
--[ 2018.11.25.20.48.51.095.0 ]--
r 216         nearestTraverse
--[ 2018.11.25.20.48.51.111.0 ]--
r 216         nearestTraverse()
--[ 2018.11.25.20.48.51.127.0 ]--
r 216         nearestTraverse();
--[ 2018.11.25.20.48.53.517.0 ]--
r 216         nearestTraverse(n);
--[ 2018.11.25.20.48.53.845.0 ]--
r 216         nearestTraverse(n.);
--[ 2018.11.25.20.48.54.563.0 ]--
r 216         nearestTraverse(n.l);
--[ 2018.11.25.20.48.54.704.0 ]--
r 216         nearestTraverse(n.le);
--[ 2018.11.25.20.48.54.798.0 ]--
r 216         nearestTraverse(n.lef);
--[ 2018.11.25.20.48.55.001.0 ]--
r 216         nearestTraverse(n.left);
--[ 2018.11.25.20.49.02.109.0 ]--
r 216         inearestTraverse(n.left);
--[ 2018.11.25.20.49.02.233.0 ]--
r 216         ifnearestTraverse(n.left);
--[ 2018.11.25.20.49.02.343.0 ]--
r 216         if nearestTraverse(n.left);
--[ 2018.11.25.20.49.02.593.0 ]--
r 216         if (nearestTraverse(n.left);
--[ 2018.11.25.20.49.05.170.0 ]--
r 216         if (nearestTraverse(n.left) ;
--[ 2018.11.25.20.49.06.311.0 ]--
r 216         if (nearestTraverse(n.left) !;
--[ 2018.11.25.20.49.06.576.0 ]--
r 216         if (nearestTraverse(n.left) !=;
--[ 2018.11.25.20.49.07.420.0 ]--
r 216         if (nearestTraverse(n.left) !;
--[ 2018.11.25.20.49.07.576.0 ]--
r 216         if (nearestTraverse(n.left) ;
--[ 2018.11.25.20.49.07.966.0 ]--
r 216         if (nearestTraverse(n.left);
--[ 2018.11.25.20.49.08.404.0 ]--
r 216         if (nearestTraverse(n.left) ;
--[ 2018.11.25.20.49.08.560.0 ]--
r 216         if (nearestTraverse(n.left) =;
--[ 2018.11.25.20.49.08.732.0 ]--
r 216         if (nearestTraverse(n.left) ==;
--[ 2018.11.25.20.49.08.857.0 ]--
r 216         if (nearestTraverse(n.left) == ;
--[ 2018.11.25.20.49.09.013.0 ]--
r 216         if (nearestTraverse(n.left) == n;
--[ 2018.11.25.20.49.09.232.0 ]--
r 216         if (nearestTraverse(n.left) == nu;
--[ 2018.11.25.20.49.09.419.0 ]--
r 216         if (nearestTraverse(n.left) == nul;
--[ 2018.11.25.20.49.09.560.0 ]--
r 216         if (nearestTraverse(n.left) == null;
--[ 2018.11.25.20.49.10.247.0 ]--
r 216         if (nearestTraverse(n.left) == nul;
--[ 2018.11.25.20.49.10.388.0 ]--
r 216         if (nearestTraverse(n.left) == nu;
--[ 2018.11.25.20.49.10.528.0 ]--
r 216         if (nearestTraverse(n.left) == n;
--[ 2018.11.25.20.49.10.653.0 ]--
r 216         if (nearestTraverse(n.left) == ;
--[ 2018.11.25.20.49.10.778.0 ]--
r 216         if (nearestTraverse(n.left) ==;
--[ 2018.11.25.20.49.10.903.0 ]--
r 216         if (nearestTraverse(n.left) =;
--[ 2018.11.25.20.49.11.059.0 ]--
r 216         if (nearestTraverse(n.left) ;
--[ 2018.11.25.20.49.11.419.0 ]--
r 216         if (nearestTraverse(n.left);
--[ 2018.11.25.20.49.12.090.0 ]--
r 216         if (nearestTraverse(n.left));
--[ 2018.11.25.20.49.14.512.0 ]--
r 216         if (nearestTraverse(n.left);
--[ 2018.11.25.20.49.20.666.0 ]--
r 216        nearestTraverse(n.left);
--[ 2018.11.25.20.49.36.163.0 ]--
+ 217         
--[ 2018.11.25.20.49.36.553.0 ]--
r 217         n
--[ 2018.11.25.20.49.36.772.0 ]--
r 217         ne
--[ 2018.11.25.20.49.36.913.0 ]--
r 217         nea
--[ 2018.11.25.20.49.37.163.0 ]--
r 217         near
--[ 2018.11.25.20.49.37.803.0 ]--
r 217         nea
--[ 2018.11.25.20.49.38.115.0 ]--
r 217         ne
--[ 2018.11.25.20.49.38.256.0 ]--
r 217         n
--[ 2018.11.25.20.49.38.428.0 ]--
r 217         
--[ 2018.11.25.20.49.38.772.0 ]--
- 217
--[ 2018.11.25.20.49.40.318.0 ]--
+ 216        nearestTraverse(n.left);
--[ 2018.11.25.20.49.42.255.0 ]--
r 217        nearestTraverse(n.);
--[ 2018.11.25.20.49.42.943.0 ]--
r 217        nearestTraverse(n.r);
--[ 2018.11.25.20.49.43.099.0 ]--
r 217        nearestTraverse(n.ri);
--[ 2018.11.25.20.49.43.192.0 ]--
r 217        nearestTraverse(n.rig);
--[ 2018.11.25.20.49.43.302.0 ]--
r 217        nearestTraverse(n.righ);
--[ 2018.11.25.20.49.43.380.0 ]--
r 217        nearestTraverse(n.right);
--[ 2018.11.25.20.50.22.903.0 ]--
r 212     private void nearestTraverse(Node n,) {
--[ 2018.11.25.20.50.23.075.0 ]--
r 212     private void nearestTraverse(Node n, ) {
--[ 2018.11.25.20.50.24.590.0 ]--
r 212     private void nearestTraverse(Node n, N) {
--[ 2018.11.25.20.50.24.715.0 ]--
r 212     private void nearestTraverse(Node n, No) {
--[ 2018.11.25.20.50.24.855.0 ]--
r 212     private void nearestTraverse(Node n, Nod) {
--[ 2018.11.25.20.50.24.996.0 ]--
r 212     private void nearestTraverse(Node n, Node) {
--[ 2018.11.25.20.50.25.168.0 ]--
r 212     private void nearestTraverse(Node n, Node ) {
--[ 2018.11.25.20.50.25.371.0 ]--
r 212     private void nearestTraverse(Node n, Node p) {
--[ 2018.11.25.20.50.25.558.0 ]--
r 212     private void nearestTraverse(Node n, Node po) {
--[ 2018.11.25.20.50.25.746.0 ]--
r 212     private void nearestTraverse(Node n, Node poi) {
--[ 2018.11.25.20.50.25.918.0 ]--
r 212     private void nearestTraverse(Node n, Node poin) {
--[ 2018.11.25.20.50.26.043.0 ]--
r 212     private void nearestTraverse(Node n, Node point) {
--[ 2018.11.25.20.50.26.277.0 ]--
r 212     private void nearestTraverse(Node n, Node poin) {
--[ 2018.11.25.20.50.26.402.0 ]--
r 212     private void nearestTraverse(Node n, Node poi) {
--[ 2018.11.25.20.50.26.543.0 ]--
r 212     private void nearestTraverse(Node n, Node po) {
--[ 2018.11.25.20.50.26.699.0 ]--
r 212     private void nearestTraverse(Node n, Node p) {
--[ 2018.11.25.20.50.26.855.0 ]--
r 212     private void nearestTraverse(Node n, Node ) {
--[ 2018.11.25.20.50.26.996.0 ]--
r 212     private void nearestTraverse(Node n, Node) {
--[ 2018.11.25.20.50.27.168.0 ]--
r 212     private void nearestTraverse(Node n, Nod) {
--[ 2018.11.25.20.50.27.339.0 ]--
r 212     private void nearestTraverse(Node n, No) {
--[ 2018.11.25.20.50.27.527.0 ]--
r 212     private void nearestTraverse(Node n, N) {
--[ 2018.11.25.20.50.27.855.0 ]--
r 212     private void nearestTraverse(Node n, ) {
--[ 2018.11.25.20.50.28.964.0 ]--
r 212     private void nearestTraverse(Node n, P) {
--[ 2018.11.25.20.50.29.183.0 ]--
r 212     private void nearestTraverse(Node n, Po) {
--[ 2018.11.25.20.50.29.323.0 ]--
r 212     private void nearestTraverse(Node n, Poi) {
--[ 2018.11.25.20.50.29.433.0 ]--
r 212     private void nearestTraverse(Node n, Poin) {
--[ 2018.11.25.20.50.29.542.0 ]--
r 212     private void nearestTraverse(Node n, Point) {
--[ 2018.11.25.20.50.29.635.0 ]--
r 212     private void nearestTraverse(Node n, Point ) {
--[ 2018.11.25.20.50.30.417.0 ]--
r 212     private void nearestTraverse(Node n, Point p) {
--[ 2018.11.25.20.50.30.526.0 ]--
r 212     private void nearestTraverse(Node n, Point pt) {
--[ 2018.11.25.20.50.32.650.0 ]--
r 212     private void nearestTraverse(Node n, Point p) {
--[ 2018.11.25.20.50.33.197.0 ]--
r 212     private void nearestTraverse(Node n, Point ) {
--[ 2018.11.25.20.50.34.494.0 ]--
r 212     private void nearestTraverse(Node n, Point c) {
--[ 2018.11.25.20.50.34.603.0 ]--
r 212     private void nearestTraverse(Node n, Point cu) {
--[ 2018.11.25.20.50.34.744.0 ]--
r 212     private void nearestTraverse(Node n, Point cur) {
--[ 2018.11.25.20.50.34.900.0 ]--
r 212     private void nearestTraverse(Node n, Point curs) {
--[ 2018.11.25.20.50.35.087.0 ]--
r 212     private void nearestTraverse(Node n, Point curso) {
--[ 2018.11.25.20.50.35.228.0 ]--
r 212     private void nearestTraverse(Node n, Point cursor) {
--[ 2018.11.25.20.50.35.853.0 ]--
r 212     private void nearestTraverse(Node n, Point cursorP) {
--[ 2018.11.25.20.50.36.150.0 ]--
r 212     private void nearestTraverse(Node n, Point cursorPt) {
--[ 2018.11.25.20.50.41.273.0 ]--
r 212     private void nearestTraverse(Node n, Point p) {
--[ 2018.11.25.20.50.45.960.0 ]--
+ 217         
--[ 2018.11.25.20.50.46.475.0 ]--
- 217
--[ 2018.11.25.20.50.55.817.0 ]--
r 216        nearestTraverse(n.left,);
--[ 2018.11.25.20.50.56.364.0 ]--
r 216        nearestTraverse(n.left, );
--[ 2018.11.25.20.50.57.036.0 ]--
r 216        nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.00.379.0 ]--
r 217        nearestTraverse(n.right,);
--[ 2018.11.25.20.51.00.550.0 ]--
r 217        nearestTraverse(n.right, );
--[ 2018.11.25.20.51.00.784.0 ]--
r 217        nearestTraverse(n.right, p);
--[ 2018.11.25.20.51.09.829.0 ]--
+ 216         
--[ 2018.11.25.20.51.14.547.0 ]--
r 217    nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.14.953.0 ]--
r 217 nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.15.312.0 ]--
r 217 n   earestTraverse(n.left, p);
--[ 2018.11.25.20.51.15.500.0 ]--
r 217 n       earestTraverse(n.left, p);
--[ 2018.11.25.20.51.16.453.0 ]--
r 217 nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.17.734.0 ]--
r 217     nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.18.046.0 ]--
r 217         nearestTraverse(n.left, p);
--[ 2018.11.25.20.51.19.014.0 ]--
r 218    nearestTraverse(n.right, p);
--[ 2018.11.25.20.51.19.218.0 ]--
r 218 nearestTraverse(n.right, p);
--[ 2018.11.25.20.51.20.186.0 ]--
r 218     nearestTraverse(n.right, p);
--[ 2018.11.25.20.51.20.342.0 ]--
r 218         nearestTraverse(n.right, p);
--[ 2018.11.25.20.51.24.982.0 ]--
r 216         i
--[ 2018.11.25.20.51.25.044.0 ]--
r 216         id
--[ 2018.11.25.20.51.25.279.0 ]--
r 216         i
--[ 2018.11.25.20.51.25.404.0 ]--
r 216         
--[ 2018.11.25.20.51.25.560.0 ]--
r 216         d
--[ 2018.11.25.20.51.25.669.0 ]--
r 216         di
--[ 2018.11.25.20.51.25.825.0 ]--
r 216         dis
--[ 2018.11.25.20.51.26.169.0 ]--
r 216         di
--[ 2018.11.25.20.51.26.278.0 ]--
r 216         d
--[ 2018.11.25.20.51.26.622.0 ]--
r 216         
--[ 2018.11.25.20.51.26.763.0 ]--
r 216         D
--[ 2018.11.25.20.51.26.841.0 ]--
r 216         DI
--[ 2018.11.25.20.51.27.028.0 ]--
r 216         DIs
--[ 2018.11.25.20.51.27.216.0 ]--
r 216         DI
--[ 2018.11.25.20.51.27.388.0 ]--
r 216         D
--[ 2018.11.25.20.51.27.466.0 ]--
r 216         
--[ 2018.11.25.20.51.28.106.0 ]--
r 216         P
--[ 2018.11.25.20.51.28.403.0 ]--
r 216         Po
--[ 2018.11.25.20.51.28.497.0 ]--
r 216         Poi
--[ 2018.11.25.20.51.28.731.0 ]--
r 216         Poin
--[ 2018.11.25.20.51.28.825.0 ]--
r 216         Point
--[ 2018.11.25.20.51.29.825.0 ]--
r 216         Point 
--[ 2018.11.25.20.51.29.981.0 ]--
r 216         Point d
--[ 2018.11.25.20.51.30.074.0 ]--
r 216         Point di
--[ 2018.11.25.20.51.30.184.0 ]--
r 216         Point dis
--[ 2018.11.25.20.51.30.403.0 ]--
r 216         Point dist
--[ 2018.11.25.20.51.31.293.0 ]--
r 216         Point dist 
--[ 2018.11.25.20.51.31.402.0 ]--
r 216         Point dist =
--[ 2018.11.25.20.51.31.480.0 ]--
r 216         Point dist = 
--[ 2018.11.25.20.51.32.199.0 ]--
r 216         Point dist = d
--[ 2018.11.25.20.51.32.324.0 ]--
r 216         Point dist = di
--[ 2018.11.25.20.51.32.402.0 ]--
r 216         Point dist = dis
--[ 2018.11.25.20.51.32.964.0 ]--
r 216         Point dist = di
--[ 2018.11.25.20.51.33.105.0 ]--
r 216         Point dist = d
--[ 2018.11.25.20.51.33.214.0 ]--
r 216         Point dist = 
--[ 2018.11.25.20.51.33.996.0 ]--
r 216         Point dist = p
--[ 2018.11.25.20.51.34.339.0 ]--
r 216         Point dist = 
--[ 2018.11.25.20.51.37.604.0 ]--
r 216         f dist = 
--[ 2018.11.25.20.51.37.776.0 ]--
r 216         fl dist = 
--[ 2018.11.25.20.51.37.916.0 ]--
r 216         flo dist = 
--[ 2018.11.25.20.51.38.072.0 ]--
r 216         floa dist = 
--[ 2018.11.25.20.51.38.276.0 ]--
r 216         float dist = 
--[ 2018.11.25.20.51.40.010.0 ]--
r 216         float dist =  
--[ 2018.11.25.20.51.40.806.0 ]--
r 216         float dist = P 
--[ 2018.11.25.20.51.41.025.0 ]--
r 216         float dist = Po 
--[ 2018.11.25.20.51.41.212.0 ]--
r 216         float dist = Poi 
--[ 2018.11.25.20.51.41.384.0 ]--
r 216         float dist = Poin 
--[ 2018.11.25.20.51.42.337.0 ]--
r 216         float dist = Poi 
--[ 2018.11.25.20.51.42.462.0 ]--
r 216         float dist = Po 
--[ 2018.11.25.20.51.42.587.0 ]--
r 216         float dist = P 
--[ 2018.11.25.20.51.42.712.0 ]--
r 216         float dist =  
--[ 2018.11.25.20.51.44.149.0 ]--
r 216         float dist = d 
--[ 2018.11.25.20.51.44.212.0 ]--
r 216         float dist = di 
--[ 2018.11.25.20.51.44.321.0 ]--
r 216         float dist = dis 
--[ 2018.11.25.20.51.44.602.0 ]--
r 216         float dist = dist 
--[ 2018.11.25.20.51.45.024.0 ]--
r 216         float dist = dis 
--[ 2018.11.25.20.51.45.149.0 ]--
r 216         float dist = di 
--[ 2018.11.25.20.51.45.305.0 ]--
r 216         float dist = d 
--[ 2018.11.25.20.51.45.415.0 ]--
r 216         float dist =  
--[ 2018.11.25.20.51.53.959.0 ]--
:/src/PointDist.java
r 2  * PointDiste is a simple tuple of a Point and a dist.
--[ 2018.11.25.20.51.55.068.0 ]--
r 2  * PointDist is a simple tuple of a Point and a dist.
--[ 2018.11.25.20.52.49.556.0 ]--
:/src/PSKDTree.java
+ 216         
--[ 2018.11.25.20.52.50.415.0 ]--
r 216         C
--[ 2018.11.25.20.52.50.509.0 ]--
r 216         CO
--[ 2018.11.25.20.52.50.696.0 ]--
r 216         COm
--[ 2018.11.25.20.52.50.821.0 ]--
r 216         COmp
--[ 2018.11.25.20.52.51.212.0 ]--
r 216         COm
--[ 2018.11.25.20.52.51.368.0 ]--
r 216         CO
--[ 2018.11.25.20.52.51.571.0 ]--
r 216         C
--[ 2018.11.25.20.52.51.805.0 ]--
r 216         Co
--[ 2018.11.25.20.52.52.008.0 ]--
r 216         Com
--[ 2018.11.25.20.52.52.055.0 ]--
r 216         Comp
--[ 2018.11.25.20.52.52.618.0 ]--
r 216         Comparable
--[ 2018.11.25.20.52.54.414.0 ]--
r 216         Comparabl
--[ 2018.11.25.20.52.54.898.0 ]--
r 216         Comparab
--[ 2018.11.25.20.52.55.476.0 ]--
r 216         Compara
--[ 2018.11.25.20.52.55.851.0 ]--
r 216         Comparat
--[ 2018.11.25.20.52.56.023.0 ]--
r 216         Comparato
--[ 2018.11.25.20.52.56.164.0 ]--
r 216         Comparator
--[ 2018.11.25.20.52.56.617.0 ]--
r 216         java.util.Comparator
--[ 2018.11.25.20.52.56.648.0 ]--
r 2 import java.util.Comparator;import java.util.Iterator;
--[ 2018.11.25.20.52.56.695.0 ]--
r 216         Comparator
--[ 2018.11.25.20.52.56.757.0 ]--
+ 2 import java.util.Comparator;
r 3 import java.util.Iterator;
--[ 2018.11.25.20.52.57.585.0 ]--
r 217         Comparator<>
--[ 2018.11.25.20.53.00.131.0 ]--
r 217         Comparator<P>
--[ 2018.11.25.20.53.00.319.0 ]--
r 217         Comparator<Po>
--[ 2018.11.25.20.53.00.694.0 ]--
r 217         Comparator<Poi>
--[ 2018.11.25.20.53.00.928.0 ]--
r 217         Comparator<Point>
--[ 2018.11.25.20.53.01.631.0 ]--
r 217         Comparator<Point> 
--[ 2018.11.25.20.53.07.208.0 ]--
r 217         Comparator<Point> d
--[ 2018.11.25.20.53.07.333.0 ]--
r 217         Comparator<Point> di
--[ 2018.11.25.20.53.07.411.0 ]--
r 217         Comparator<Point> dis
--[ 2018.11.25.20.53.07.630.0 ]--
r 217         Comparator<Point> dist
--[ 2018.11.25.20.53.08.505.0 ]--
r 217         Comparator<Point> distC
--[ 2018.11.25.20.53.08.661.0 ]--
r 217         Comparator<Point> distCa
--[ 2018.11.25.20.53.08.755.0 ]--
r 217         Comparator<Point> distCal
--[ 2018.11.25.20.53.08.958.0 ]--
r 217         Comparator<Point> distCalc
--[ 2018.11.25.20.53.09.879.0 ]--
r 217         Comparator<Point> distCalc 
--[ 2018.11.25.20.53.10.004.0 ]--
r 217         Comparator<Point> distCalc =
--[ 2018.11.25.20.53.10.114.0 ]--
r 217         Comparator<Point> distCalc = 
--[ 2018.11.25.20.53.10.692.0 ]--
r 217         Comparator<Point> distCalc = n
--[ 2018.11.25.20.53.10.770.0 ]--
r 217         Comparator<Point> distCalc = ne
--[ 2018.11.25.20.53.10.863.0 ]--
r 217         Comparator<Point> distCalc = new
--[ 2018.11.25.20.53.11.051.0 ]--
r 217         Comparator<Point> distCalc = new 
--[ 2018.11.25.20.53.11.597.0 ]--
r 217         Comparator<Point> distCalc = new C
--[ 2018.11.25.20.53.11.722.0 ]--
r 217         Comparator<Point> distCalc = new Co
--[ 2018.11.25.20.53.12.019.0 ]--
r 217         Comparator<Point> distCalc = new Com
--[ 2018.11.25.20.53.12.253.0 ]--
r 217         Comparator<Point> distCalc = new Comp
--[ 2018.11.25.20.53.12.597.0 ]--
r 217         Comparator<Point> distCalc = new Comparator
--[ 2018.11.25.20.53.12.613.0 ]--
r 217         Comparator<Point> distCalc = new Comparator<Point>
--[ 2018.11.25.20.53.12.660.0 ]--
r 217         Comparator<Point> distCalc = new Comparator<Point>() {}
--[ 2018.11.25.20.53.12.691.0 ]--
+ 217         Comparator<Point> distCalc = new Comparator<Point>() {
r 218         }
--[ 2018.11.25.20.53.12.925.0 ]--
+ 218         @Override
+ 219             public int compare(Point o1, Point o2) {
+ 220                 return 0;
r 221             }}
--[ 2018.11.25.20.53.12.972.0 ]--
r 218             @Override
+ 221             }
r 222         }
--[ 2018.11.25.20.53.41.137.0 ]--
- 217
- 217
- 217
- 217
- 217
r 217         Comparator<Point> distCalc = new Co
--[ 2018.11.25.20.53.41.528.0 ]--
r 217         Comparator<Point> distCalc = new C
--[ 2018.11.25.20.53.41.840.0 ]--
r 217         Comparator<Point> distCalc = new 
--[ 2018.11.25.20.53.43.355.0 ]--
r 217         Comparator<Point> distCalc = new
--[ 2018.11.25.20.53.43.543.0 ]--
r 217         Comparator<Point> distCalc = ne
--[ 2018.11.25.20.53.43.684.0 ]--
r 217         Comparator<Point> distCalc = n
--[ 2018.11.25.20.53.44.043.0 ]--
r 217         Comparator<Point> distCalc = 
--[ 2018.11.25.20.53.44.574.0 ]--
r 217         Comparator<Point> distCalc = p
--[ 2018.11.25.20.53.44.840.0 ]--
r 217         Comparator<Point> distCalc = p.
--[ 2018.11.25.20.53.46.355.0 ]--
r 217         Comparator<Point> distCalc = p.distanceToComparator
--[ 2018.11.25.20.53.46.370.0 ]--
r 217         Comparator<Point> distCalc = p.distanceToComparator()
--[ 2018.11.25.20.53.47.542.0 ]--
r 217         Comparator<Point> distCalc = p.distanceToComparator();
--[ 2018.11.25.20.54.02.289.0 ]--
r 218         float dist   
--[ 2018.11.25.20.54.02.460.0 ]--
r 218         float dist  
--[ 2018.11.25.20.54.02.601.0 ]--
r 218         float dis  
--[ 2018.11.25.20.54.02.757.0 ]--
r 218         float di  
--[ 2018.11.25.20.54.02.913.0 ]--
r 218         float d  
--[ 2018.11.25.20.54.03.038.0 ]--
r 218         float   
--[ 2018.11.25.20.54.03.179.0 ]--
r 218         float  
--[ 2018.11.25.20.54.03.382.0 ]--
r 218         floa  
--[ 2018.11.25.20.54.03.476.0 ]--
r 218         flo  
--[ 2018.11.25.20.54.03.616.0 ]--
r 218         fl  
--[ 2018.11.25.20.54.03.882.0 ]--
r 218         f  
--[ 2018.11.25.20.54.04.163.0 ]--
r 218           
--[ 2018.11.25.20.54.07.131.0 ]--
r 218         i  
--[ 2018.11.25.20.54.07.256.0 ]--
r 218         if  
--[ 2018.11.25.20.54.07.662.0 ]--
r 218         if   
--[ 2018.11.25.20.54.07.944.0 ]--
r 218         if ()  
--[ 2018.11.25.20.54.09.178.0 ]--
r 218         if (d)  
--[ 2018.11.25.20.54.09.287.0 ]--
r 218         if (di)  
--[ 2018.11.25.20.54.09.381.0 ]--
r 218         if (dis)  
--[ 2018.11.25.20.54.09.599.0 ]--
r 218         if (dist)  
--[ 2018.11.25.20.54.09.865.0 ]--
r 218         if (distCalc)  
--[ 2018.11.25.20.54.10.943.0 ]--
r 218         if (distCalc())  
--[ 2018.11.25.20.54.12.099.0 ]--
r 218         if (distCalc(n))  
--[ 2018.11.25.20.54.12.349.0 ]--
r 218         if (distCalc(n.))  
--[ 2018.11.25.20.54.13.255.0 ]--
r 218         if (distCalc(n))  
--[ 2018.11.25.20.54.13.411.0 ]--
r 218         if (distCalc())  
--[ 2018.11.25.20.54.13.536.0 ]--
r 218         if (distCalc)  
--[ 2018.11.25.20.54.14.239.0 ]--
r 218         if (distCalc.)  
--[ 2018.11.25.20.54.14.411.0 ]--
r 218         if (distCalc.c)  
--[ 2018.11.25.20.54.14.520.0 ]--
r 218         if (distCalc.co)  
--[ 2018.11.25.20.54.14.723.0 ]--
r 218         if (distCalc.com)  
--[ 2018.11.25.20.54.14.895.0 ]--
r 218         if (distCalc.comp)  
--[ 2018.11.25.20.54.15.379.0 ]--
r 218         if (distCalc.compare)  
--[ 2018.11.25.20.54.15.395.0 ]--
r 218         if (distCalc.compare())  
--[ 2018.11.25.20.54.17.348.0 ]--
r 218         if (distCalc.compare(n))  
--[ 2018.11.25.20.54.17.551.0 ]--
r 218         if (distCalc.compare(n.))  
--[ 2018.11.25.20.54.19.909.0 ]--
r 218         if (distCalc.compare(n.p))  
--[ 2018.11.25.20.54.20.941.0 ]--
r 218         if (distCalc.compare(n.p,))  
--[ 2018.11.25.20.54.21.097.0 ]--
r 218         if (distCalc.compare(n.p, ))  
--[ 2018.11.25.20.54.21.597.0 ]--
r 218         if (distCalc.compare(n.p, p))  
--[ 2018.11.25.20.54.23.065.0 ]--
r 218         if (distCalc.compare(n.p, p) )  
--[ 2018.11.25.20.54.23.315.0 ]--
r 218         if (distCalc.compare(n.p, p) <)  
--[ 2018.11.25.20.54.23.471.0 ]--
r 218         if (distCalc.compare(n.p, p) < )  
--[ 2018.11.25.20.54.23.783.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0)  
--[ 2018.11.25.20.54.24.783.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0)   
--[ 2018.11.25.20.54.25.705.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0) {  
--[ 2018.11.25.20.54.26.314.0 ]--
+ 218         if (distCalc.compare(n.p, p) < 0) {
+ 219   
r 220 }
--[ 2018.11.25.20.54.26.470.0 ]--
r 219 
r 220         }
--[ 2018.11.25.20.54.26.502.0 ]--
r 219             
--[ 2018.11.25.20.54.28.642.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0) {/
--[ 2018.11.25.20.54.28.767.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0) {//
--[ 2018.11.25.20.54.32.078.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0) {/
--[ 2018.11.25.20.54.32.235.0 ]--
r 218         if (distCalc.compare(n.p, p) < 0) {
--[ 2018.11.25.20.55.58.138.0 ]--
r 213     private void nearestTraverse(Node n, Point p,) {
--[ 2018.11.25.20.55.58.325.0 ]--
r 213     private void nearestTraverse(Node n, Point p, ) {
--[ 2018.11.25.20.55.58.653.0 ]--
r 213     private void nearestTraverse(Node n, Point p, P) {
--[ 2018.11.25.20.55.58.887.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Po) {
--[ 2018.11.25.20.55.59.044.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Poi) {
--[ 2018.11.25.20.55.59.184.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Poin) {
--[ 2018.11.25.20.55.59.356.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point) {
--[ 2018.11.25.20.55.59.762.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point ) {
--[ 2018.11.25.20.56.00.637.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point m) {
--[ 2018.11.25.20.56.00.762.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point mi) {
--[ 2018.11.25.20.56.00.856.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point min) {
--[ 2018.11.25.20.56.04.808.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minD) {
--[ 2018.11.25.20.56.04.902.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDi) {
--[ 2018.11.25.20.56.04.980.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDis) {
--[ 2018.11.25.20.56.05.198.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDist) {
--[ 2018.11.25.20.56.05.651.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.56.10.978.0 ]--
r 221         nearestTraverse(n.left, p,);
--[ 2018.11.25.20.56.11.181.0 ]--
r 221         nearestTraverse(n.left, p, );
--[ 2018.11.25.20.56.12.493.0 ]--
r 221         nearestTraverse(n.left, p, m);
--[ 2018.11.25.20.56.12.634.0 ]--
r 221         nearestTraverse(n.left, p, mi);
--[ 2018.11.25.20.56.12.728.0 ]--
r 221         nearestTraverse(n.left, p, min);
--[ 2018.11.25.20.56.13.759.0 ]--
r 221         nearestTraverse(n.left, p, minD);
--[ 2018.11.25.20.56.14.181.0 ]--
r 221         nearestTraverse(n.left, p, minDi);
--[ 2018.11.25.20.56.14.306.0 ]--
r 221         nearestTraverse(n.left, p, minDis);
--[ 2018.11.25.20.56.14.790.0 ]--
r 221         nearestTraverse(n.left, p, minDistP);
--[ 2018.11.25.20.56.16.992.0 ]--
r 222         nearestTraverse(n.right, p,);
--[ 2018.11.25.20.56.17.117.0 ]--
r 222         nearestTraverse(n.right, p, );
--[ 2018.11.25.20.56.17.227.0 ]--
r 222         nearestTraverse(n.right, p, m);
--[ 2018.11.25.20.56.17.383.0 ]--
r 222         nearestTraverse(n.right, p, mi);
--[ 2018.11.25.20.56.17.461.0 ]--
r 222         nearestTraverse(n.right, p, min);
--[ 2018.11.25.20.56.17.930.0 ]--
r 222         nearestTraverse(n.right, p, minD);
--[ 2018.11.25.20.56.18.070.0 ]--
r 222         nearestTraverse(n.right, p, minDi);
--[ 2018.11.25.20.56.18.242.0 ]--
r 222         nearestTraverse(n.right, p, minDis);
--[ 2018.11.25.20.56.18.601.0 ]--
r 222         nearestTraverse(n.right, p, minDistP);
--[ 2018.11.25.20.56.37.956.0 ]--
r 218         if (distCalc.compare(n.p, ) < 0) {
--[ 2018.11.25.20.56.39.191.0 ]--
r 218         if (distCalc.compare(n.p, m) < 0) {
--[ 2018.11.25.20.56.39.347.0 ]--
r 218         if (distCalc.compare(n.p, mi) < 0) {
--[ 2018.11.25.20.56.39.456.0 ]--
r 218         if (distCalc.compare(n.p, min) < 0) {
--[ 2018.11.25.20.56.40.534.0 ]--
r 218         if (distCalc.compare(n.p, minD) < 0) {
--[ 2018.11.25.20.56.40.752.0 ]--
r 218         if (distCalc.compare(n.p, minDi) < 0) {
--[ 2018.11.25.20.56.40.862.0 ]--
r 218         if (distCalc.compare(n.p, minDis) < 0) {
--[ 2018.11.25.20.56.41.205.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {
--[ 2018.11.25.20.56.47.516.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {/
--[ 2018.11.25.20.56.47.641.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//
--[ 2018.11.25.20.56.48.595.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//n
--[ 2018.11.25.20.56.49.079.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//
--[ 2018.11.25.20.56.49.235.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//f
--[ 2018.11.25.20.56.49.313.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//fo
--[ 2018.11.25.20.56.49.422.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//fou
--[ 2018.11.25.20.56.49.594.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//foun
--[ 2018.11.25.20.56.49.688.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found
--[ 2018.11.25.20.56.49.844.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found 
--[ 2018.11.25.20.56.50.000.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found  
--[ 2018.11.25.20.56.50.250.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found 
--[ 2018.11.25.20.56.50.406.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a
--[ 2018.11.25.20.56.50.516.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a 
--[ 2018.11.25.20.56.50.656.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a n
--[ 2018.11.25.20.56.50.750.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a ne
--[ 2018.11.25.20.56.50.828.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new
--[ 2018.11.25.20.56.51.063.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new 
--[ 2018.11.25.20.56.52.562.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new c
--[ 2018.11.25.20.56.52.656.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new cl
--[ 2018.11.25.20.56.52.797.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new cla
--[ 2018.11.25.20.56.52.968.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new clas
--[ 2018.11.25.20.56.53.453.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new cla
--[ 2018.11.25.20.56.53.593.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new cl
--[ 2018.11.25.20.56.53.796.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new clo
--[ 2018.11.25.20.56.53.874.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new clos
--[ 2018.11.25.20.56.54.265.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close
--[ 2018.11.25.20.56.54.343.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer
--[ 2018.11.25.20.56.54.515.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer 
--[ 2018.11.25.20.56.54.718.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer p
--[ 2018.11.25.20.56.54.890.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer po
--[ 2018.11.25.20.56.54.937.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer poi
--[ 2018.11.25.20.56.55.327.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer poin
--[ 2018.11.25.20.56.55.468.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer point
--[ 2018.11.25.20.56.55.858.0 ]--
r 218         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer point!
--[ 2018.11.25.20.57.09.792.0 ]--
r 219             m
--[ 2018.11.25.20.57.09.933.0 ]--
r 219             mi
--[ 2018.11.25.20.57.10.027.0 ]--
r 219             min
--[ 2018.11.25.20.57.11.277.0 ]--
r 219             min()
--[ 2018.11.25.20.57.11.901.0 ]--
r 219             min(
--[ 2018.11.25.20.57.12.058.0 ]--
r 219             min
--[ 2018.11.25.20.57.12.323.0 ]--
r 219             minD
--[ 2018.11.25.20.57.12.417.0 ]--
r 219             minDi
--[ 2018.11.25.20.57.12.620.0 ]--
r 219             minDis
--[ 2018.11.25.20.57.12.839.0 ]--
r 219             minDistP
--[ 2018.11.25.20.57.13.463.0 ]--
r 219             minDistP 
--[ 2018.11.25.20.57.13.635.0 ]--
r 219             minDistP =
--[ 2018.11.25.20.57.13.760.0 ]--
r 219             minDistP = 
--[ 2018.11.25.20.57.14.417.0 ]--
r 219             minDistP = n
--[ 2018.11.25.20.57.15.229.0 ]--
r 219             minDistP = n.
--[ 2018.11.25.20.57.15.588.0 ]--
r 219             minDistP = n.p
--[ 2018.11.25.20.57.15.994.0 ]--
r 219             minDistP = n.p;
--[ 2018.11.25.20.58.20.261.0 ]--
r 213     private voi nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.20.448.0 ]--
r 213     private vo nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.20.604.0 ]--
r 213     private v nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.20.854.0 ]--
r 213     private  nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.21.885.0 ]--
r 213     private P nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.22.104.0 ]--
r 213     private Po nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.22.307.0 ]--
r 213     private Poi nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.22.463.0 ]--
r 213     private Poin nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.22.588.0 ]--
r 213     private Point nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.25.040.0 ]--
r 213     private Poin nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.25.493.0 ]--
r 213     private Poi nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.25.650.0 ]--
r 213     private Po nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.25.806.0 ]--
r 213     private P nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.25.946.0 ]--
r 213     private  nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.26.321.0 ]--
r 213     private nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.35.866.0 ]--
r 213     private vnearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.36.053.0 ]--
r 213     private vonearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.36.241.0 ]--
r 213     private voinearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.36.382.0 ]--
r 213     private voidnearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.36.522.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.40.162.0 ]--
r 213     private P nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.40.396.0 ]--
r 213     private Po nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.40.599.0 ]--
r 213     private Poi nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.40.709.0 ]--
r 213     private Poin nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.40.802.0 ]--
r 213     private Point nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.20.58.45.223.0 ]--
r 215             return ;
--[ 2018.11.25.20.58.45.379.0 ]--
r 215             return n;
--[ 2018.11.25.20.58.45.614.0 ]--
r 215             return nu;
--[ 2018.11.25.20.58.45.801.0 ]--
r 215             return nul;
--[ 2018.11.25.20.58.45.942.0 ]--
r 215             return null;
--[ 2018.11.25.20.58.49.253.0 ]--
+ 223         
--[ 2018.11.25.20.58.49.910.0 ]--
- 223
--[ 2018.11.25.21.00.05.565.0 ]--
r 248 
--[ 2018.11.25.21.03.55.265.0 ]--
r 215             return m;
--[ 2018.11.25.21.03.55.405.0 ]--
r 215             return mi;
--[ 2018.11.25.21.03.55.562.0 ]--
r 215             return min;
--[ 2018.11.25.21.03.56.171.0 ]--
r 215             return minD;
--[ 2018.11.25.21.03.56.264.0 ]--
r 215             return minDi;
--[ 2018.11.25.21.03.56.421.0 ]--
r 215             return minDis;
--[ 2018.11.25.21.03.56.749.0 ]--
r 215             return minDistP;
--[ 2018.11.25.21.04.09.262.0 ]--
r 215             return n;
--[ 2018.11.25.21.04.09.480.0 ]--
r 215             return nu;
--[ 2018.11.25.21.04.09.668.0 ]--
r 215             return nul;
--[ 2018.11.25.21.04.09.808.0 ]--
r 215             return null;
--[ 2018.11.25.21.04.26.492.0 ]--
r 213     private v nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.21.04.26.664.0 ]--
r 213     private vo nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.21.04.26.789.0 ]--
r 213     private voi nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.21.04.26.929.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point minDistP) {
--[ 2018.11.25.21.04.29.585.0 ]--
r 215             return ;
--[ 2018.11.25.21.04.30.397.0 ]--
r 215             return;
--[ 2018.11.25.21.04.59.328.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point p) {
--[ 2018.11.25.21.04.59.578.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point ) {
--[ 2018.11.25.21.04.59.796.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Point) {
--[ 2018.11.25.21.05.00.593.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Poin) {
--[ 2018.11.25.21.05.00.750.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Poi) {
--[ 2018.11.25.21.05.00.890.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Po) {
--[ 2018.11.25.21.05.01.030.0 ]--
r 213     private void nearestTraverse(Node n, Point p, P) {
--[ 2018.11.25.21.05.01.437.0 ]--
r 213     private void nearestTraverse(Node n, Point p, ) {
--[ 2018.11.25.21.05.03.108.0 ]--
r 213     private void nearestTraverse(Node n, Point p, M) {
--[ 2018.11.25.21.05.03.436.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Mi) {
--[ 2018.11.25.21.05.03.795.0 ]--
r 213     private void nearestTraverse(Node n, Point p, M) {
--[ 2018.11.25.21.05.04.249.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Ma) {
--[ 2018.11.25.21.05.04.811.0 ]--
r 213     private void nearestTraverse(Node n, Point p, Max) {
--[ 2018.11.25.21.05.05.717.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxP) {
--[ 2018.11.25.21.05.06.358.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ) {
--[ 2018.11.25.21.05.07.951.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<>) {
--[ 2018.11.25.21.05.08.841.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<P>) {
--[ 2018.11.25.21.05.09.060.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Po>) {
--[ 2018.11.25.21.05.09.200.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Poi>) {
--[ 2018.11.25.21.05.09.310.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Poin>) {
--[ 2018.11.25.21.05.09.919.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point>) {
--[ 2018.11.25.21.05.11.075.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> ) {
--[ 2018.11.25.21.05.15.621.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> k) {
--[ 2018.11.25.21.05.16.558.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kN) {
--[ 2018.11.25.21.05.16.808.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNe) {
--[ 2018.11.25.21.05.17.667.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNea) {
--[ 2018.11.25.21.05.18.011.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNear) {
--[ 2018.11.25.21.05.21.151.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNeara) {
--[ 2018.11.25.21.05.21.588.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNear) {
--[ 2018.11.25.21.05.21.666.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNeare) {
--[ 2018.11.25.21.05.21.822.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNeares) {
--[ 2018.11.25.21.05.22.104.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest) {
--[ 2018.11.25.21.05.25.040.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNeareste) {
--[ 2018.11.25.21.05.25.884.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest) {
--[ 2018.11.25.21.05.27.681.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest,) {
--[ 2018.11.25.21.05.28.383.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, ) {
--[ 2018.11.25.21.05.29.867.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, i) {
--[ 2018.11.25.21.05.30.008.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, in) {
--[ 2018.11.25.21.05.30.305.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int) {
--[ 2018.11.25.21.05.30.430.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int ) {
--[ 2018.11.25.21.05.30.617.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int k) {
--[ 2018.11.25.21.05.32.086.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int ) {
--[ 2018.11.25.21.05.33.101.0 ]--
r 213     private void nearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int k) {
--[ 2018.11.25.21.05.38.053.0 ]--
r 213     private void knearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int k) {
--[ 2018.11.25.21.05.39.334.0 ]--
r 213     private void kearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int k) {
--[ 2018.11.25.21.05.39.725.0 ]--
r 213     private void kNearestTraverse(Node n, Point p, MaxPQ<Point> kNearest, int k) {
--[ 2018.11.25.21.06.06.859.0 ]--
+ 218         
--[ 2018.11.25.21.06.07.562.0 ]--
r 218         P
--[ 2018.11.25.21.06.07.780.0 ]--
r 218         Po
--[ 2018.11.25.21.06.07.874.0 ]--
r 218         Poi
--[ 2018.11.25.21.06.08.030.0 ]--
r 218         Poin
--[ 2018.11.25.21.06.08.108.0 ]--
r 218         Point
--[ 2018.11.25.21.06.08.187.0 ]--
r 218         Point 
--[ 2018.11.25.21.06.08.311.0 ]--
r 218         Point m
--[ 2018.11.25.21.06.08.421.0 ]--
r 218         Point mi
--[ 2018.11.25.21.06.08.515.0 ]--
r 218         Point min
--[ 2018.11.25.21.06.08.952.0 ]--
r 218         Point minDistP
--[ 2018.11.25.21.06.09.499.0 ]--
r 218         Point minDistP 
--[ 2018.11.25.21.06.09.749.0 ]--
r 218         Point minDistP =
--[ 2018.11.25.21.06.09.842.0 ]--
r 218         Point minDistP = 
--[ 2018.11.25.21.06.11.358.0 ]--
r 218         Point minDistP = m
--[ 2018.11.25.21.06.11.748.0 ]--
r 218         Point minDistP = 
--[ 2018.11.25.21.06.11.998.0 ]--
r 218         Point minDistP = k
--[ 2018.11.25.21.06.12.186.0 ]--
r 218         Point minDistP = kn
--[ 2018.11.25.21.06.12.857.0 ]--
r 218         Point minDistP = kNearest
--[ 2018.11.25.21.06.13.201.0 ]--
r 218         Point minDistP = kNearest.
--[ 2018.11.25.21.06.15.122.0 ]--
r 218         Point minDistP = kNearest.delMax
--[ 2018.11.25.21.06.15.138.0 ]--
r 218         Point minDistP = kNearest.delMax()
--[ 2018.11.25.21.06.16.872.0 ]--
r 218         Point minDistP = kNearest.delMax(
--[ 2018.11.25.21.06.17.387.0 ]--
r 218         Point minDistP = kNearest.delMax
--[ 2018.11.25.21.06.17.419.0 ]--
r 218         Point minDistP = kNearest.delMa
--[ 2018.11.25.21.06.17.481.0 ]--
r 218         Point minDistP = kNearest.delM
--[ 2018.11.25.21.06.17.497.0 ]--
r 218         Point minDistP = kNearest.del
--[ 2018.11.25.21.06.17.544.0 ]--
r 218         Point minDistP = kNearest.de
--[ 2018.11.25.21.06.17.591.0 ]--
r 218         Point minDistP = kNearest.d
--[ 2018.11.25.21.06.17.919.0 ]--
r 218         Point minDistP = kNearest.
--[ 2018.11.25.21.06.18.934.0 ]--
r 218         Point minDistP = kNearest.m
--[ 2018.11.25.21.06.19.262.0 ]--
r 218         Point minDistP = kNearest.
--[ 2018.11.25.21.06.19.418.0 ]--
r 218         Point minDistP = kNearest
--[ 2018.11.25.21.06.20.403.0 ]--
r 218         Point minDistP = kNearest.
--[ 2018.11.25.21.06.20.590.0 ]--
r 218         Point minDistP = kNearest.m
--[ 2018.11.25.21.06.21.418.0 ]--
r 218         Point minDistP = kNearest.max
--[ 2018.11.25.21.06.21.449.0 ]--
r 218         Point minDistP = kNearest.max()
--[ 2018.11.25.21.06.22.355.0 ]--
r 218         Point minDistP = kNearest.max();
--[ 2018.11.25.21.06.32.462.0 ]--
r 218         Point minDistP = kNearest.m();
--[ 2018.11.25.21.06.32.634.0 ]--
r 218         Point minDistP = kNearest.mi();
--[ 2018.11.25.21.06.32.743.0 ]--
r 218         Point minDistP = kNearest.min();
--[ 2018.11.25.21.06.33.275.0 ]--
r 218         Point minDistP = kNearest.mi();
--[ 2018.11.25.21.06.33.743.0 ]--
r 218         Point minDistP = kNearest.m();
--[ 2018.11.25.21.06.35.180.0 ]--
r 218         Point minDistP = kNearest.ma();
--[ 2018.11.25.21.06.35.399.0 ]--
r 218         Point minDistP = kNearest.max();
--[ 2018.11.25.21.07.51.834.0 ]--
+ 221             
--[ 2018.11.25.21.07.53.209.0 ]--
- 221
--[ 2018.11.25.21.07.55.099.0 ]--
+ 222         
--[ 2018.11.25.21.07.56.630.0 ]--
r 222         k
--[ 2018.11.25.21.07.56.958.0 ]--
r 222         kn
--[ 2018.11.25.21.07.57.317.0 ]--
r 222         kNearest
--[ 2018.11.25.21.07.57.520.0 ]--
r 222         kNearest.
--[ 2018.11.25.21.07.59.020.0 ]--
r 222         kNearest.m
--[ 2018.11.25.21.07.59.129.0 ]--
r 222         kNearest.mi
--[ 2018.11.25.21.07.59.176.0 ]--
r 222         kNearest.min
--[ 2018.11.25.21.08.00.270.0 ]--
r 222         kNearest.mi
--[ 2018.11.25.21.08.04.003.0 ]--
- 222
--[ 2018.11.25.21.08.26.935.0 ]--
r 219         if (distCalc.compare(n.p, ) < 0) {//found a new closer point!
--[ 2018.11.25.21.08.39.214.0 ]--
r 219         if (distCalc.compare(n.p, p) < 0) {//found a new closer point!
--[ 2018.11.25.21.08.48.555.0 ]--
r 220             i
--[ 2018.11.25.21.08.48.618.0 ]--
r 220             if
--[ 2018.11.25.21.08.48.727.0 ]--
r 220             if 
--[ 2018.11.25.21.08.49.305.0 ]--
r 220             if ()
--[ 2018.11.25.21.08.49.992.0 ]--
r 220             if (k)
--[ 2018.11.25.21.08.50.305.0 ]--
r 220             if (kn)
--[ 2018.11.25.21.08.50.836.0 ]--
r 220             if (k)
--[ 2018.11.25.21.08.51.117.0 ]--
r 220             if (kN)
--[ 2018.11.25.21.08.51.257.0 ]--
r 220             if (kNe)
--[ 2018.11.25.21.08.55.007.0 ]--
r 220             if (k)
--[ 2018.11.25.21.08.55.288.0 ]--
r 220             if (kn)
--[ 2018.11.25.21.08.55.553.0 ]--
r 220             minDistP = n.p;
--[ 2018.11.25.21.08.56.241.0 ]--
r 219         if (distCalc.compare(n.p, ) < 0) {//found a new closer point!
--[ 2018.11.25.21.08.56.538.0 ]--
r 219         if (distCalc.compare(n.p, minDistP) < 0) {//found a new closer point!
--[ 2018.11.25.21.09.02.349.0 ]--
r 220             i
--[ 2018.11.25.21.09.02.427.0 ]--
r 220             if
--[ 2018.11.25.21.09.02.521.0 ]--
r 220             if 
--[ 2018.11.25.21.09.02.755.0 ]--
r 220             if ()
--[ 2018.11.25.21.09.09.019.0 ]--
r 220             if (l)
--[ 2018.11.25.21.09.09.144.0 ]--
r 220             if (le)
--[ 2018.11.25.21.09.09.519.0 ]--
r 220             if (len)
--[ 2018.11.25.21.09.10.066.0 ]--
r 220             if (le)
--[ 2018.11.25.21.09.10.206.0 ]--
r 220             if (l)
--[ 2018.11.25.21.09.10.347.0 ]--
r 220             if ()
--[ 2018.11.25.21.09.10.706.0 ]--
r 220             if (L)
--[ 2018.11.25.21.09.10.909.0 ]--
r 220             if (Le)
--[ 2018.11.25.21.09.11.378.0 ]--
r 220             if (Len)
--[ 2018.11.25.21.09.11.534.0 ]--
r 220             if (Leng)
--[ 2018.11.25.21.09.12.549.0 ]--
r 220             if (Length)
--[ 2018.11.25.21.09.12.565.0 ]--
r 220             if (sun.security.util.Length)
--[ 2018.11.25.21.09.12.596.0 ]--
r 1 import sun.security.util.Length;import java.util.ArrayList;
--[ 2018.11.25.21.09.12.612.0 ]--
r 220             if (Length)
--[ 2018.11.25.21.09.12.659.0 ]--
+ 1 import sun.security.util.Length;
+ 2 
r 3 import java.util.ArrayList;
--[ 2018.11.25.21.09.12.924.0 ]--
r 222             if (Lengt)
--[ 2018.11.25.21.09.13.081.0 ]--
r 222             if (Leng)
--[ 2018.11.25.21.09.13.221.0 ]--
r 222             if (Len)
--[ 2018.11.25.21.09.13.377.0 ]--
r 222             if (Le)
--[ 2018.11.25.21.09.13.502.0 ]--
r 222             if (L)
--[ 2018.11.25.21.09.13.924.0 ]--
r 222             if ()
--[ 2018.11.25.21.09.14.408.0 ]--
r 222             if (k)
--[ 2018.11.25.21.09.14.643.0 ]--
r 222             if (kn)
--[ 2018.11.25.21.09.15.064.0 ]--
r 222             if (kNearest)
--[ 2018.11.25.21.09.15.174.0 ]--
r 222             if (kNearest.)
--[ 2018.11.25.21.09.18.204.0 ]--
r 222             if (kNearest.s)
--[ 2018.11.25.21.09.18.314.0 ]--
r 222             if (kNearest.si)
--[ 2018.11.25.21.09.18.735.0 ]--
r 222             if (kNearest.size)
--[ 2018.11.25.21.09.18.751.0 ]--
r 222             if (kNearest.size())
--[ 2018.11.25.21.09.20.032.0 ]--
r 222             if (kNearest.size()>)
--[ 2018.11.25.21.09.20.860.0 ]--
r 222             if (kNearest.size()>k)
--[ 2018.11.25.21.09.22.938.0 ]--
r 222             if (kNearest.size()>k) 
--[ 2018.11.25.21.09.23.063.0 ]--
r 222             if (kNearest.size()>k) {
--[ 2018.11.25.21.09.23.203.0 ]--
+ 223 
+ 224 }
--[ 2018.11.25.21.09.23.359.0 ]--
r 224             }
--[ 2018.11.25.21.09.23.375.0 ]--
r 223                 
--[ 2018.11.25.21.09.24.328.0 ]--
r 223                 k
--[ 2018.11.25.21.09.25.796.0 ]--
r 223                 kNearest
--[ 2018.11.25.21.09.25.921.0 ]--
r 223                 kNearest.
--[ 2018.11.25.21.09.26.140.0 ]--
r 223                 kNearest.d
--[ 2018.11.25.21.09.26.312.0 ]--
r 223                 kNearest.de
--[ 2018.11.25.21.09.26.452.0 ]--
r 223                 kNearest.del
--[ 2018.11.25.21.09.26.827.0 ]--
r 223                 kNearest.delMax
--[ 2018.11.25.21.09.26.858.0 ]--
r 223                 kNearest.delMax()
--[ 2018.11.25.21.09.27.624.0 ]--
r 223                 kNearest.delMax();
--[ 2018.11.25.21.09.30.779.0 ]--
+ 225             
--[ 2018.11.25.21.09.32.607.0 ]--
r 225             k
--[ 2018.11.25.21.09.33.326.0 ]--
r 225             
--[ 2018.11.25.21.09.33.857.0 ]--
- 225
--[ 2018.11.25.21.09.35.685.0 ]--
+ 222             
--[ 2018.11.25.21.09.36.778.0 ]--
r 222             k
--[ 2018.11.25.21.09.37.575.0 ]--
r 222             kN
--[ 2018.11.25.21.09.37.778.0 ]--
r 222             kNe
--[ 2018.11.25.21.09.37.996.0 ]--
r 222             kNearest
--[ 2018.11.25.21.09.39.246.0 ]--
r 222             kNearest.
--[ 2018.11.25.21.09.39.465.0 ]--
r 222             kNearest.i
--[ 2018.11.25.21.09.39.574.0 ]--
r 222             kNearest.in
--[ 2018.11.25.21.09.40.262.0 ]--
r 222             kNearest.insert
--[ 2018.11.25.21.09.40.293.0 ]--
r 222             kNearest.insert()
--[ 2018.11.25.21.09.40.308.0 ]--
r 222             kNearest.insert();
--[ 2018.11.25.21.09.41.792.0 ]--
r 222             kNearest.insert(n);
--[ 2018.11.25.21.09.43.667.0 ]--
r 222             kNearest.insert(n.);
--[ 2018.11.25.21.09.43.886.0 ]--
r 222             kNearest.insert(n.p);
--[ 2018.11.25.21.09.59.976.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new c point!
--[ 2018.11.25.21.10.00.069.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new cl point!
--[ 2018.11.25.21.10.00.226.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new clo point!
--[ 2018.11.25.21.10.00.241.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new clos point!
--[ 2018.11.25.21.10.00.382.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close point!
--[ 2018.11.25.21.10.00.476.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close  point!
--[ 2018.11.25.21.10.00.554.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close e point!
--[ 2018.11.25.21.10.00.616.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close en point!
--[ 2018.11.25.21.10.00.726.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close eno point!
--[ 2018.11.25.21.10.00.835.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close enou point!
--[ 2018.11.25.21.10.00.897.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close enoug point!
--[ 2018.11.25.21.10.01.022.0 ]--
r 221         if (distCalc.compare(n.p, minDistP) < 0) {//found a new close enough point!
--[ 2018.11.25.21.10.09.989.0 ]--
r 227         nearestTraverse(n.left, p, minDistP,);
--[ 2018.11.25.21.10.10.177.0 ]--
r 227         nearestTraverse(n.left, p, minDistP, );
--[ 2018.11.25.21.10.11.489.0 ]--
r 227         nearestTraverse(n.left, p, minDistP,);
--[ 2018.11.25.21.10.12.816.0 ]--
r 227         nearestTraverse(n.left, p, minDistP);
--[ 2018.11.25.21.10.13.004.0 ]--
r 227         nearestTraverse(n.left, p, minDist);
--[ 2018.11.25.21.10.13.160.0 ]--
r 227         nearestTraverse(n.left, p, minDis);
--[ 2018.11.25.21.10.13.379.0 ]--
r 227         nearestTraverse(n.left, p, minDi);
--[ 2018.11.25.21.10.13.535.0 ]--
r 227         nearestTraverse(n.left, p, minD);
--[ 2018.11.25.21.10.13.676.0 ]--
r 227         nearestTraverse(n.left, p, min);
--[ 2018.11.25.21.10.13.785.0 ]--
r 227         nearestTraverse(n.left, p, mi);
--[ 2018.11.25.21.10.13.926.0 ]--
r 227         nearestTraverse(n.left, p, m);
--[ 2018.11.25.21.10.14.066.0 ]--
r 227         nearestTraverse(n.left, p, );
--[ 2018.11.25.21.10.15.191.0 ]--
r 227         nearestTraverse(n.left, p, k);
--[ 2018.11.25.21.10.16.488.0 ]--
r 227         nearestTraverse(n.left, p, kNearest);
--[ 2018.11.25.21.10.17.315.0 ]--
r 227         nearestTraverse(n.left, p, kNearest,);
--[ 2018.11.25.21.10.17.472.0 ]--
r 227         nearestTraverse(n.left, p, kNearest, );
--[ 2018.11.25.21.10.18.237.0 ]--
r 227         nearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.25.21.10.20.330.0 ]--
+ 227         nearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.25.21.10.21.564.0 ]--
- 230
--[ 2018.11.25.21.10.23.892.0 ]--
+ 230     }
--[ 2018.11.25.21.10.26.173.0 ]--
- 229
--[ 2018.11.25.21.10.28.110.0 ]--
r 228         nearestTraverse(n.r, p, kNearest, k);
--[ 2018.11.25.21.10.28.297.0 ]--
r 228         nearestTraverse(n.ri, p, kNearest, k);
--[ 2018.11.25.21.10.28.438.0 ]--
r 228         nearestTraverse(n.rig, p, kNearest, k);
--[ 2018.11.25.21.10.28.516.0 ]--
r 228         nearestTraverse(n.righ, p, kNearest, k);
--[ 2018.11.25.21.10.28.594.0 ]--
r 228         nearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.25.21.10.34.264.0 ]--
r 227         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.25.21.10.35.686.0 ]--
r 228         kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.25.21.10.43.356.0 ]--
r 254     
--[ 2018.11.25.21.10.44.981.0 ]--
r 254         
--[ 2018.11.25.21.10.45.809.0 ]--
r 254         k
--[ 2018.11.25.21.10.49.870.0 ]--
r 254         kNearestTraverse
--[ 2018.11.25.21.10.49.886.0 ]--
r 254         kNearestTraverse()
--[ 2018.11.25.21.10.49.901.0 ]--
r 254         kNearestTraverse();
--[ 2018.11.25.21.10.52.385.0 ]--
r 254         kNearestTraverse(n);
--[ 2018.11.25.21.10.53.948.0 ]--
r 254         kNearestTraverse(n,);
--[ 2018.11.25.21.10.54.557.0 ]--
r 254         kNearestTraverse(n,p);
--[ 2018.11.25.21.10.55.088.0 ]--
r 254         kNearestTraverse(n,p,);
--[ 2018.11.25.21.10.56.103.0 ]--
r 254         kNearestTraverse(n,p);
--[ 2018.11.25.21.10.56.259.0 ]--
r 254         kNearestTraverse(n,);
--[ 2018.11.25.21.10.56.759.0 ]--
r 254         kNearestTraverse(n, );
--[ 2018.11.25.21.10.57.056.0 ]--
r 254         kNearestTraverse(n, p);
--[ 2018.11.25.21.10.57.322.0 ]--
r 254         kNearestTraverse(n, p,);
--[ 2018.11.25.21.10.57.400.0 ]--
r 254         kNearestTraverse(n, p, );
--[ 2018.11.25.21.10.59.790.0 ]--
r 254         kNearestTraverse(n, p, k);
--[ 2018.11.25.21.11.01.742.0 ]--
r 254         kNearestTraverse(n, p, kN);
--[ 2018.11.25.21.11.01.945.0 ]--
r 254         kNearestTraverse(n, p, kNe);
--[ 2018.11.25.21.11.02.258.0 ]--
r 254         kNearestTraverse(n, p, kNea);
--[ 2018.11.25.21.11.02.570.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse);
--[ 2018.11.25.21.11.02.586.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse());
--[ 2018.11.25.21.11.02.617.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse(););
--[ 2018.11.25.21.11.03.086.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse(,););
--[ 2018.11.25.21.11.03.711.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse(););
--[ 2018.11.25.21.11.03.867.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse;);
--[ 2018.11.25.21.11.05.867.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse,;);
--[ 2018.11.25.21.11.06.085.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse, ;);
--[ 2018.11.25.21.11.10.366.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse, k;);
--[ 2018.11.25.21.11.15.145.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse, ;);
--[ 2018.11.25.21.11.15.505.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse, 1;);
--[ 2018.11.25.21.11.15.817.0 ]--
r 254         kNearestTraverse(n, p, kNearestTraverse, 1);
--[ 2018.11.25.21.11.18.379.0 ]--
+ 254 
--[ 2018.11.25.21.11.18.395.0 ]--
r 254         
--[ 2018.11.25.21.11.19.020.0 ]--
r 254         N
--[ 2018.11.25.21.11.19.113.0 ]--
r 254         NO
--[ 2018.11.25.21.11.19.207.0 ]--
r 254         NOd
--[ 2018.11.25.21.11.19.394.0 ]--
r 254         NOde
--[ 2018.11.25.21.11.19.488.0 ]--
r 254         NOde 
--[ 2018.11.25.21.11.19.566.0 ]--
r 254         NOde n
--[ 2018.11.25.21.11.19.926.0 ]--
r 254         NOde 
--[ 2018.11.25.21.11.20.066.0 ]--
r 254         NOde
--[ 2018.11.25.21.11.20.176.0 ]--
r 254         NOd
--[ 2018.11.25.21.11.20.316.0 ]--
r 254         NO
--[ 2018.11.25.21.11.20.832.0 ]--
r 254         N
--[ 2018.11.25.21.11.21.019.0 ]--
r 254         No
--[ 2018.11.25.21.11.21.160.0 ]--
r 254         Nod
--[ 2018.11.25.21.11.21.316.0 ]--
r 254         Node
--[ 2018.11.25.21.11.21.410.0 ]--
r 254         Node 
--[ 2018.11.25.21.11.21.628.0 ]--
r 254         Node n
--[ 2018.11.25.21.11.22.284.0 ]--
r 254         Node n 
--[ 2018.11.25.21.11.22.425.0 ]--
r 254         Node n =
--[ 2018.11.25.21.11.22.519.0 ]--
r 254         Node n = 
--[ 2018.11.25.21.11.22.769.0 ]--
r 254         Node n = r
--[ 2018.11.25.21.11.22.816.0 ]--
r 254         Node n = ro
--[ 2018.11.25.21.11.22.909.0 ]--
r 254         Node n = roo
--[ 2018.11.25.21.11.23.019.0 ]--
r 254         Node n = root
--[ 2018.11.25.21.11.23.112.0 ]--
r 254         Node n = root;
--[ 2018.11.25.21.11.24.034.0 ]--
+ 255         
--[ 2018.11.25.21.11.24.878.0 ]--
r 255         p
--[ 2018.11.25.21.11.25.409.0 ]--
r 255         p 
--[ 2018.11.25.21.11.25.737.0 ]--
r 255         p
--[ 2018.11.25.21.11.27.674.0 ]--
r 255         
--[ 2018.11.25.21.11.28.674.0 ]--
r 255         k
--[ 2018.11.25.21.11.29.345.0 ]--
r 255         
--[ 2018.11.25.21.11.31.782.0 ]--
r 255         M
--[ 2018.11.25.21.11.32.032.0 ]--
r 255         Ma
--[ 2018.11.25.21.11.32.829.0 ]--
r 255         MaxPQ
--[ 2018.11.25.21.11.34.016.0 ]--
r 255         MaxPQ<>
--[ 2018.11.25.21.11.34.735.0 ]--
r 255         MaxPQ<P>
--[ 2018.11.25.21.11.34.953.0 ]--
r 255         MaxPQ<Po>
--[ 2018.11.25.21.11.35.469.0 ]--
r 255         MaxPQ<Point>
--[ 2018.11.25.21.11.36.187.0 ]--
r 255         MaxPQ<Point> 
--[ 2018.11.25.21.11.36.875.0 ]--
r 255         MaxPQ<Point> m
--[ 2018.11.25.21.11.37.047.0 ]--
r 255         MaxPQ<Point> ma
--[ 2018.11.25.21.11.37.265.0 ]--
r 255         MaxPQ<Point> m
--[ 2018.11.25.21.11.37.390.0 ]--
r 255         MaxPQ<Point> 
--[ 2018.11.25.21.11.37.609.0 ]--
r 255         MaxPQ<Point> k
--[ 2018.11.25.21.11.37.781.0 ]--
r 255         MaxPQ<Point> kn
--[ 2018.11.25.21.11.38.156.0 ]--
r 255         MaxPQ<Point> kNearestTraverse
--[ 2018.11.25.21.11.38.671.0 ]--
r 255         MaxPQ<Point> kNearestTraverse 
--[ 2018.11.25.21.11.38.796.0 ]--
r 255         MaxPQ<Point> kNearestTraverse =
--[ 2018.11.25.21.11.38.906.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = 
--[ 2018.11.25.21.11.39.046.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = n
--[ 2018.11.25.21.11.39.187.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = ne
--[ 2018.11.25.21.11.39.218.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new
--[ 2018.11.25.21.11.39.359.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new 
--[ 2018.11.25.21.11.40.889.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new M
--[ 2018.11.25.21.11.41.124.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new Ma
--[ 2018.11.25.21.11.41.499.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new Max
--[ 2018.11.25.21.11.41.639.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new MaxPQ
--[ 2018.11.25.21.11.41.670.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new MaxPQ<>
--[ 2018.11.25.21.11.41.702.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new MaxPQ<>()
--[ 2018.11.25.21.11.44.155.0 ]--
r 255         MaxPQ<Point> kNearestTraverse = new MaxPQ<>();
--[ 2018.11.25.21.12.14.789.0 ]--
r 255         MaxPQ<Point> kNearest = new MaxPQ<>();
--[ 2018.11.25.21.12.17.960.0 ]--
r 256         kNearestTraverse(n, p, kNearest, 1);
--[ 2018.11.25.21.12.19.866.0 ]--
+ 257         
--[ 2018.11.25.21.12.21.662.0 ]--
- 257
r 257             }
--[ 2018.11.25.21.12.22.631.0 ]--
+ 257         
--[ 2018.11.25.21.12.24.786.0 ]--
- 257
--[ 2018.11.25.21.12.25.099.0 ]--
+ 257         
r 258     }
--[ 2018.11.25.21.12.27.802.0 ]--
r 257         k
--[ 2018.11.25.21.12.28.645.0 ]--
r 257         
--[ 2018.11.25.21.12.29.020.0 ]--
r 257         r
--[ 2018.11.25.21.12.29.160.0 ]--
r 257         re
--[ 2018.11.25.21.12.29.285.0 ]--
r 257         ret
--[ 2018.11.25.21.12.29.395.0 ]--
r 257         retu
--[ 2018.11.25.21.12.29.504.0 ]--
r 257         retur
--[ 2018.11.25.21.12.29.629.0 ]--
r 257         return
--[ 2018.11.25.21.12.29.738.0 ]--
r 257         return 
--[ 2018.11.25.21.12.30.020.0 ]--
r 257         return k
--[ 2018.11.25.21.12.30.676.0 ]--
r 257         return kNearest
--[ 2018.11.25.21.12.30.910.0 ]--
r 257         return kNearest.
--[ 2018.11.25.21.12.31.191.0 ]--
r 257         return kNearest.d
--[ 2018.11.25.21.12.31.347.0 ]--
r 257         return kNearest.de
--[ 2018.11.25.21.12.31.504.0 ]--
r 257         return kNearest.del
--[ 2018.11.25.21.12.31.675.0 ]--
r 257         return kNearest.delMax
--[ 2018.11.25.21.12.31.707.0 ]--
r 257         return kNearest.delMax()
--[ 2018.11.25.21.12.32.441.0 ]--
r 257         return kNearest.delMax();
--[ 2018.11.25.21.12.35.659.0 ]--
r 257         return kNearest.deMax();
--[ 2018.11.25.21.12.35.800.0 ]--
r 257         return kNearest.dMax();
--[ 2018.11.25.21.12.35.940.0 ]--
r 257         return kNearest.Max();
--[ 2018.11.25.21.12.36.565.0 ]--
r 257         return kNearest.ax();
--[ 2018.11.25.21.12.37.221.0 ]--
r 257         return kNearest.max();
--[ 2018.11.25.21.12.45.266.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.13.25.831.0 ]--
+ 220         
--[ 2018.11.25.21.13.26.753.0 ]--
r 220         i
--[ 2018.11.25.21.13.26.909.0 ]--
r 220         if
--[ 2018.11.25.21.13.27.347.0 ]--
r 220         if 
--[ 2018.11.25.21.13.27.628.0 ]--
r 220         if ()
--[ 2018.11.25.21.13.28.128.0 ]--
r 220         if (k)
--[ 2018.11.25.21.13.29.690.0 ]--
r 220         if (kNearest)
--[ 2018.11.25.21.13.29.862.0 ]--
r 220         if (kNearest.)
--[ 2018.11.25.21.13.30.127.0 ]--
r 220         if (kNearest.i)
--[ 2018.11.25.21.13.30.237.0 ]--
r 220         if (kNearest.is)
--[ 2018.11.25.21.13.30.830.0 ]--
r 220         if (kNearest.isEmpty)
--[ 2018.11.25.21.13.30.846.0 ]--
r 220         if (kNearest.isEmpty())
--[ 2018.11.25.21.13.32.064.0 ]--
r 220         if (kNearest.isEmpty()){
--[ 2018.11.25.21.13.32.205.0 ]--
+ 221 
+ 222 }
--[ 2018.11.25.21.13.32.345.0 ]--
r 222         }
--[ 2018.11.25.21.13.32.361.0 ]--
r 221             
--[ 2018.11.25.21.13.36.173.0 ]--
r 221             P
--[ 2018.11.25.21.13.36.391.0 ]--
r 221             Po
--[ 2018.11.25.21.13.36.626.0 ]--
r 221             Poi
--[ 2018.11.25.21.13.36.719.0 ]--
r 221             Poin
--[ 2018.11.25.21.13.36.922.0 ]--
r 221             Point
--[ 2018.11.25.21.13.37.079.0 ]--
r 221             Point 
--[ 2018.11.25.21.13.37.344.0 ]--
r 221             Point m
--[ 2018.11.25.21.13.37.500.0 ]--
r 221             Point mi
--[ 2018.11.25.21.13.37.547.0 ]--
r 221             Point min
--[ 2018.11.25.21.13.38.016.0 ]--
r 221             Point mi
--[ 2018.11.25.21.13.38.453.0 ]--
r 221             Point min
--[ 2018.11.25.21.13.38.672.0 ]--
r 221             Point minD
--[ 2018.11.25.21.13.38.875.0 ]--
r 221             Point minDi
--[ 2018.11.25.21.13.38.969.0 ]--
r 221             Point minDis
--[ 2018.11.25.21.13.40.047.0 ]--
r 221             Point minDi
--[ 2018.11.25.21.13.40.203.0 ]--
r 221             Point minD
--[ 2018.11.25.21.13.40.328.0 ]--
r 221             Point min
--[ 2018.11.25.21.13.40.453.0 ]--
r 221             Point mi
--[ 2018.11.25.21.13.40.593.0 ]--
r 221             Point m
--[ 2018.11.25.21.13.40.703.0 ]--
r 221             Point 
--[ 2018.11.25.21.13.40.843.0 ]--
r 221             Point
--[ 2018.11.25.21.13.40.968.0 ]--
r 221             Poin
--[ 2018.11.25.21.13.41.109.0 ]--
r 221             Poi
--[ 2018.11.25.21.13.41.265.0 ]--
r 221             Po
--[ 2018.11.25.21.13.41.547.0 ]--
r 221             P
--[ 2018.11.25.21.13.41.984.0 ]--
r 221             
--[ 2018.11.25.21.13.56.794.0 ]--
r 221             k
--[ 2018.11.25.21.13.58.106.0 ]--
r 221             kNearest
--[ 2018.11.25.21.13.58.216.0 ]--
r 221             kNearest.
--[ 2018.11.25.21.13.58.684.0 ]--
r 221             kNearest.i
--[ 2018.11.25.21.13.58.824.0 ]--
r 221             kNearest.in
--[ 2018.11.25.21.13.58.934.0 ]--
r 221             kNearest.ins
--[ 2018.11.25.21.13.59.262.0 ]--
r 221             kNearest.insert
--[ 2018.11.25.21.13.59.278.0 ]--
r 221             kNearest.insert()
--[ 2018.11.25.21.13.59.293.0 ]--
r 221             kNearest.insert();
--[ 2018.11.25.21.13.59.934.0 ]--
r 221             kNearest.insert(n);
--[ 2018.11.25.21.14.00.152.0 ]--
r 221             kNearest.insert(n.);
--[ 2018.11.25.21.14.00.387.0 ]--
r 221             kNearest.insert(n.p);
--[ 2018.11.25.21.14.15.196.0 ]--
+ 221             
--[ 2018.11.25.21.14.15.430.0 ]--
r 221                 
--[ 2018.11.25.21.14.16.055.0 ]--
r 221             
--[ 2018.11.25.21.14.16.711.0 ]--
r 221             w
--[ 2018.11.25.21.14.16.930.0 ]--
r 221             wh
--[ 2018.11.25.21.14.17.086.0 ]--
r 221             whi
--[ 2018.11.25.21.14.17.523.0 ]--
r 221             wh
--[ 2018.11.25.21.14.17.679.0 ]--
r 221             w
--[ 2018.11.25.21.14.17.961.0 ]--
r 221             
--[ 2018.11.25.21.14.20.101.0 ]--
r 220         i (kNearest.isEmpty()){
--[ 2018.11.25.21.14.20.304.0 ]--
r 220          (kNearest.isEmpty()){
--[ 2018.11.25.21.14.21.054.0 ]--
r 220         w (kNearest.isEmpty()){
--[ 2018.11.25.21.14.21.179.0 ]--
r 220         wh (kNearest.isEmpty()){
--[ 2018.11.25.21.14.21.647.0 ]--
r 220         whi (kNearest.isEmpty()){
--[ 2018.11.25.21.14.21.819.0 ]--
r 220         whil (kNearest.isEmpty()){
--[ 2018.11.25.21.14.21.944.0 ]--
r 220         while (kNearest.isEmpty()){
--[ 2018.11.25.21.14.22.506.0 ]--
r 220         whil (kNearest.isEmpty()){
--[ 2018.11.25.21.14.22.663.0 ]--
r 220         whi (kNearest.isEmpty()){
--[ 2018.11.25.21.14.22.803.0 ]--
r 220         wh (kNearest.isEmpty()){
--[ 2018.11.25.21.14.22.959.0 ]--
r 220         w (kNearest.isEmpty()){
--[ 2018.11.25.21.14.23.131.0 ]--
r 220          (kNearest.isEmpty()){
--[ 2018.11.25.21.14.24.600.0 ]--
r 220         (kNearest.isEmpty()){
--[ 2018.11.25.21.14.27.115.0 ]--
- 221
--[ 2018.11.25.21.14.31.145.0 ]--
r 220         i(kNearest.isEmpty()){
--[ 2018.11.25.21.14.31.286.0 ]--
r 220         if(kNearest.isEmpty()){
--[ 2018.11.25.21.14.31.395.0 ]--
r 220         if (kNearest.isEmpty()){
--[ 2018.11.25.21.14.39.737.0 ]--
r 220         if (kNearest.){
--[ 2018.11.25.21.14.39.924.0 ]--
r 220         if (kNearest.s){
--[ 2018.11.25.21.14.40.065.0 ]--
r 220         if (kNearest.si){
--[ 2018.11.25.21.14.40.190.0 ]--
r 220         if (kNearest.siz){
--[ 2018.11.25.21.14.40.471.0 ]--
r 220         if (kNearest.size){
--[ 2018.11.25.21.14.40.502.0 ]--
r 220         if (kNearest.size()){
--[ 2018.11.25.21.14.41.002.0 ]--
r 220         if (kNearest.size() ){
--[ 2018.11.25.21.14.41.252.0 ]--
r 220         if (kNearest.size() <){
--[ 2018.11.25.21.14.41.361.0 ]--
r 220         if (kNearest.size() < ){
--[ 2018.11.25.21.14.41.502.0 ]--
r 220         if (kNearest.size() < k){
--[ 2018.11.25.21.14.49.188.0 ]--
+ 222             
--[ 2018.11.25.21.14.51.968.0 ]--
- 222
--[ 2018.11.25.21.14.54.889.0 ]--
+ 223         
--[ 2018.11.25.21.14.55.061.0 ]--
r 223         e
--[ 2018.11.25.21.14.55.202.0 ]--
r 223         el
--[ 2018.11.25.21.14.55.296.0 ]--
r 223         els
--[ 2018.11.25.21.14.55.374.0 ]--
r 223         else
--[ 2018.11.25.21.14.55.936.0 ]--
r 223         else 
--[ 2018.11.25.21.14.56.077.0 ]--
r 223         else {
--[ 2018.11.25.21.14.58.279.0 ]--
+ 231         
--[ 2018.11.25.21.14.58.451.0 ]--
r 231         }
--[ 2018.11.25.21.14.58.607.0 ]--
r 224             Point minDistP = kNearest.max();
--[ 2018.11.25.21.14.58.639.0 ]--
r 225             if (distCalc.compare(n.p, minDistP) < 0) {//found a new close enough point!
--[ 2018.11.25.21.14.58.654.0 ]--
r 226                 kNearest.insert(n.p);
--[ 2018.11.25.21.14.58.670.0 ]--
r 227                 if (kNearest.size()>k) {
--[ 2018.11.25.21.14.58.685.0 ]--
r 227                 if (kNearest.size() >k) {
--[ 2018.11.25.21.14.58.701.0 ]--
r 227                 if (kNearest.size() > k) {
--[ 2018.11.25.21.14.58.717.0 ]--
r 228                     kNearest.delMax();
--[ 2018.11.25.21.14.58.732.0 ]--
r 229                 }
--[ 2018.11.25.21.14.58.748.0 ]--
r 230             }
--[ 2018.11.25.21.15.08.871.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.16.22.390.0 ]--
r 260         MaxPQ<PointD> kNearest = new MaxPQ<>();
--[ 2018.11.25.21.16.22.514.0 ]--
r 260         MaxPQ<PointDi> kNearest = new MaxPQ<>();
--[ 2018.11.25.21.16.22.671.0 ]--
r 260         MaxPQ<PointDis> kNearest = new MaxPQ<>();
--[ 2018.11.25.21.16.22.889.0 ]--
r 260         MaxPQ<PointDist> kNearest = new MaxPQ<>();
--[ 2018.11.25.21.16.32.169.0 ]--
r 215     private void kNearestTraverse(Node n, Point p, MaxPQ<PointD> kNearest, int k) {
--[ 2018.11.25.21.16.32.325.0 ]--
r 215     private void kNearestTraverse(Node n, Point p, MaxPQ<PointDi> kNearest, int k) {
--[ 2018.11.25.21.16.32.450.0 ]--
r 215     private void kNearestTraverse(Node n, Point p, MaxPQ<PointDis> kNearest, int k) {
--[ 2018.11.25.21.16.32.668.0 ]--
r 215     private void kNearestTraverse(Node n, Point p, MaxPQ<PointDist> kNearest, int k) {
--[ 2018.11.25.21.16.45.697.0 ]--
r 224             PointD minDistP = kNearest.max();
--[ 2018.11.25.21.16.45.853.0 ]--
r 224             PointDi minDistP = kNearest.max();
--[ 2018.11.25.21.16.45.947.0 ]--
r 224             PointDis minDistP = kNearest.max();
--[ 2018.11.25.21.16.46.150.0 ]--
r 224             PointDist minDistP = kNearest.max();
--[ 2018.11.25.21.16.55.882.0 ]--
r 225             if (distCalc.compare(n.p, minDistP.) < 0) {//found a new close enough point!
--[ 2018.11.25.21.16.57.444.0 ]--
r 225             if (distCalc.compare(n.p, minDistP.p) < 0) {//found a new close enough point!
--[ 2018.11.25.21.16.57.460.0 ]--
r 225             if (distCalc.compare(n.p, minDistP.p()) < 0) {//found a new close enough point!
--[ 2018.11.25.21.17.10.191.0 ]--
r 226                 kNearest.insert(n.);
--[ 2018.11.25.21.17.10.457.0 ]--
r 226                 kNearest.insert(n);
--[ 2018.11.25.21.17.10.910.0 ]--
r 226                 kNearest.insert();
--[ 2018.11.25.21.17.12.394.0 ]--
r 226                 kNearest.insert(P);
--[ 2018.11.25.21.17.12.581.0 ]--
r 226                 kNearest.insert(Po);
--[ 2018.11.25.21.17.12.722.0 ]--
r 226                 kNearest.insert(Poi);
--[ 2018.11.25.21.17.12.862.0 ]--
r 226                 kNearest.insert(Poin);
--[ 2018.11.25.21.17.13.956.0 ]--
r 226                 kNearest.insert(Point);
--[ 2018.11.25.21.17.14.315.0 ]--
r 226                 kNearest.insert(PointD);
--[ 2018.11.25.21.17.14.456.0 ]--
r 226                 kNearest.insert(PointDi);
--[ 2018.11.25.21.17.14.581.0 ]--
r 226                 kNearest.insert(PointDis);
--[ 2018.11.25.21.17.14.768.0 ]--
r 226                 kNearest.insert(PointDist);
--[ 2018.11.25.21.17.15.908.0 ]--
r 226                 kNearest.insert(PointDist());
--[ 2018.11.25.21.17.16.299.0 ]--
r 226                 kNearest.insert(PointDist(n));
--[ 2018.11.25.21.17.16.502.0 ]--
r 226                 kNearest.insert(PointDist(n.));
--[ 2018.11.25.21.17.16.783.0 ]--
r 226                 kNearest.insert(PointDist(n.p));
--[ 2018.11.25.21.17.17.689.0 ]--
r 226                 kNearest.insert(PointDist(n.p,));
--[ 2018.11.25.21.17.17.861.0 ]--
r 226                 kNearest.insert(PointDist(n.p,d));
--[ 2018.11.25.21.17.17.986.0 ]--
r 226                 kNearest.insert(PointDist(n.p,di));
--[ 2018.11.25.21.17.20.532.0 ]--
r 226                 kNearest.insert(PointDist(n.p,d));
--[ 2018.11.25.21.17.20.860.0 ]--
r 226                 kNearest.insert(PointDist(n.p,));
--[ 2018.11.25.21.17.25.422.0 ]--
r 226                 kNearest.insert(PointDist(n.p, ));
--[ 2018.11.25.21.17.31.327.0 ]--
r 226                 kNearest.insert(nPointDist(n.p, ));
--[ 2018.11.25.21.17.31.483.0 ]--
r 226                 kNearest.insert(nePointDist(n.p, ));
--[ 2018.11.25.21.17.31.546.0 ]--
r 226                 kNearest.insert(newPointDist(n.p, ));
--[ 2018.11.25.21.17.31.670.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, ));
--[ 2018.11.25.21.17.42.340.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, d));
--[ 2018.11.25.21.17.42.433.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, di));
--[ 2018.11.25.21.17.42.543.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, dis));
--[ 2018.11.25.21.17.42.965.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc));
--[ 2018.11.25.21.17.43.105.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.));
--[ 2018.11.25.21.17.44.527.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.d));
--[ 2018.11.25.21.17.44.683.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.di));
--[ 2018.11.25.21.17.44.948.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.dis));
--[ 2018.11.25.21.17.45.245.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.di));
--[ 2018.11.25.21.17.45.401.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.d));
--[ 2018.11.25.21.17.46.323.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.));
--[ 2018.11.25.21.17.48.354.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.d));
--[ 2018.11.25.21.17.48.479.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.di));
--[ 2018.11.25.21.17.48.885.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.d));
--[ 2018.11.25.21.17.49.041.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc.));
--[ 2018.11.25.21.17.49.151.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCalc));
--[ 2018.11.25.21.17.49.307.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCal));
--[ 2018.11.25.21.17.49.432.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distCa));
--[ 2018.11.25.21.17.49.557.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, distC));
--[ 2018.11.25.21.17.49.682.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, dist));
--[ 2018.11.25.21.17.49.807.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, dis));
--[ 2018.11.25.21.17.49.947.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, di));
--[ 2018.11.25.21.17.50.072.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, d));
--[ 2018.11.25.21.17.50.432.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, ));
--[ 2018.11.25.21.17.53.368.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, P));
--[ 2018.11.25.21.17.53.587.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Po));
--[ 2018.11.25.21.17.53.759.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poi));
--[ 2018.11.25.21.17.53.899.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poin));
--[ 2018.11.25.21.17.54.024.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Point));
--[ 2018.11.25.21.17.54.181.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Point.));
--[ 2018.11.25.21.18.00.195.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Point));
--[ 2018.11.25.21.18.00.335.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poin));
--[ 2018.11.25.21.18.00.554.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poi));
--[ 2018.11.25.21.18.00.867.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Po));
--[ 2018.11.25.21.18.01.226.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, P));
--[ 2018.11.25.21.18.02.007.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PP));
--[ 2018.11.25.21.18.02.241.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PPo));
--[ 2018.11.25.21.18.02.366.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PPoi));
--[ 2018.11.25.21.18.02.726.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PPo));
--[ 2018.11.25.21.18.02.882.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PP));
--[ 2018.11.25.21.18.02.944.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, P));
--[ 2018.11.25.21.18.03.163.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Po));
--[ 2018.11.25.21.18.03.366.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poi));
--[ 2018.11.25.21.18.03.475.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poin));
--[ 2018.11.25.21.18.04.319.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointDist));
--[ 2018.11.25.21.18.05.350.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointDist.));
--[ 2018.11.25.21.18.06.303.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointDist));
--[ 2018.11.25.21.18.06.506.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointDis));
--[ 2018.11.25.21.18.06.725.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointDi));
--[ 2018.11.25.21.18.06.818.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, PointD));
--[ 2018.11.25.21.18.06.975.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Point));
--[ 2018.11.25.21.18.07.115.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poin));
--[ 2018.11.25.21.18.07.271.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Poi));
--[ 2018.11.25.21.18.07.412.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, Po));
--[ 2018.11.25.21.18.07.631.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, P));
--[ 2018.11.25.21.18.09.568.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, ));
--[ 2018.11.25.21.18.36.702.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n));
--[ 2018.11.25.21.18.36.796.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, np));
--[ 2018.11.25.21.18.37.186.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n));
--[ 2018.11.25.21.18.37.967.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.));
--[ 2018.11.25.21.18.38.280.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p));
--[ 2018.11.25.21.18.38.826.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.));
--[ 2018.11.25.21.18.39.732.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.d));
--[ 2018.11.25.21.18.39.826.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.di));
--[ 2018.11.25.21.18.40.592.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dis));
--[ 2018.11.25.21.18.51.495.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dist));
--[ 2018.11.25.21.18.51.511.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dist()));
--[ 2018.11.25.21.18.53.432.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dist(m)));
--[ 2018.11.25.21.18.53.760.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dist()));
--[ 2018.11.25.21.18.54.760.0 ]--
r 226                 kNearest.insert(new PointDist(n.p, n.p.dist(p)));
--[ 2018.11.25.21.19.12.772.0 ]--
r 221             kNearest.insert(new PointDist(n.p, n.p.dist(p)));
--[ 2018.11.25.21.19.17.520.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.17.520.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@9993cf0
--[ 2018.11.25.21.19.28.634.0 ]--
r 262         return kNearest.max().;
--[ 2018.11.25.21.19.28.650.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.28.650.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.28.962.0 ]--
r 262         return kNearest.max().p;
--[ 2018.11.25.21.19.28.978.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.28.978.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.30.462.0 ]--
r 262         return kNearest.max().p();
--[ 2018.11.25.21.19.30.462.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.30.477.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.30.883.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.30.899.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.32.914.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.25.21.19.32.914.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.20.50.903.0 ]--
+ 44             
--[ 2018.11.25.21.20.51.310.0 ]--
r 44             l
--[ 2018.11.25.21.20.51.497.0 ]--
r 44             li
--[ 2018.11.25.21.20.51.560.0 ]--
r 44             lis
--[ 2018.11.25.21.20.51.763.0 ]--
r 44             list
--[ 2018.11.25.21.20.52.075.0 ]--
r 44             listOfPoints
--[ 2018.11.25.21.20.52.372.0 ]--
r 44             listOfPoints.
--[ 2018.11.25.21.20.54.371.0 ]--
r 44             listOfPoints.a
--[ 2018.11.25.21.20.54.559.0 ]--
r 44             listOfPoints.ad
--[ 2018.11.25.21.20.55.059.0 ]--
r 44             listOfPoints.add
--[ 2018.11.25.21.20.55.074.0 ]--
r 44             listOfPoints.add()
--[ 2018.11.25.21.20.56.965.0 ]--
r 44             listOfPoints.add(r)
--[ 2018.11.25.21.20.57.105.0 ]--
r 44             listOfPoints.add(ro)
--[ 2018.11.25.21.20.57.183.0 ]--
r 44             listOfPoints.add(roo)
--[ 2018.11.25.21.20.57.293.0 ]--
r 44             listOfPoints.add(root)
--[ 2018.11.25.21.20.58.511.0 ]--
r 44             listOfPoints.add(root);
--[ 2018.11.25.21.21.03.901.0 ]--
r 44             listOfPoints.add(root.);
--[ 2018.11.25.21.21.04.135.0 ]--
r 44             listOfPoints.add(root.p);
--[ 2018.11.25.21.21.09.727.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.22.28.297.0 ]--
+ 233         
--[ 2018.11.25.21.22.29.110.0 ]--
r 233         /
--[ 2018.11.25.21.22.29.219.0 ]--
r 233         //
--[ 2018.11.25.21.22.29.422.0 ]--
r 233         //T
--[ 2018.11.25.21.22.29.578.0 ]--
r 233         //TO
--[ 2018.11.25.21.22.29.719.0 ]--
r 233         //TOD
--[ 2018.11.25.21.22.29.844.0 ]--
r 233         //TODO
--[ 2018.11.25.21.22.30.547.0 ]--
r 233         //TODO:
--[ 2018.11.25.21.22.30.766.0 ]--
r 233         //TODO: 
--[ 2018.11.25.21.22.32.359.0 ]--
r 233         //TODO: P
--[ 2018.11.25.21.22.32.562.0 ]--
r 233         //TODO: Pr
--[ 2018.11.25.21.22.32.687.0 ]--
r 233         //TODO: Pru
--[ 2018.11.25.21.22.32.859.0 ]--
r 233         //TODO: Prun
--[ 2018.11.25.21.22.32.968.0 ]--
r 233         //TODO: Pruni
--[ 2018.11.25.21.22.33.109.0 ]--
r 233         //TODO: Prunin
--[ 2018.11.25.21.22.33.281.0 ]--
r 233         //TODO: Pruning
--[ 2018.11.25.21.22.33.531.0 ]--
r 233         //TODO: Pruning 
--[ 2018.11.25.21.22.33.687.0 ]--
r 233         //TODO: Pruning n
--[ 2018.11.25.21.22.33.796.0 ]--
r 233         //TODO: Pruning ne
--[ 2018.11.25.21.22.33.921.0 ]--
r 233         //TODO: Pruning nee
--[ 2018.11.25.21.22.34.140.0 ]--
r 233         //TODO: Pruning need
--[ 2018.11.25.21.22.34.718.0 ]--
r 233         //TODO: Pruning needs
--[ 2018.11.25.21.22.34.858.0 ]--
r 233         //TODO: Pruning needs 
--[ 2018.11.25.21.22.34.999.0 ]--
r 233         //TODO: Pruning needs t
--[ 2018.11.25.21.22.35.093.0 ]--
r 233         //TODO: Pruning needs to
--[ 2018.11.25.21.22.35.124.0 ]--
r 233         //TODO: Pruning needs to 
--[ 2018.11.25.21.22.35.311.0 ]--
r 233         //TODO: Pruning needs to b
--[ 2018.11.25.21.22.35.436.0 ]--
r 233         //TODO: Pruning needs to be
--[ 2018.11.25.21.22.35.686.0 ]--
r 233         //TODO: Pruning needs to be 
--[ 2018.11.25.21.22.37.233.0 ]--
r 233         //TODO: Pruning needs to be i
--[ 2018.11.25.21.22.37.436.0 ]--
r 233         //TODO: Pruning needs to be im
--[ 2018.11.25.21.22.37.592.0 ]--
r 233         //TODO: Pruning needs to be imp
--[ 2018.11.25.21.22.37.827.0 ]--
r 233         //TODO: Pruning needs to be impl
--[ 2018.11.25.21.22.37.983.0 ]--
r 233         //TODO: Pruning needs to be imple
--[ 2018.11.25.21.22.38.076.0 ]--
r 233         //TODO: Pruning needs to be implem
--[ 2018.11.25.21.22.38.186.0 ]--
r 233         //TODO: Pruning needs to be impleme
--[ 2018.11.25.21.22.38.280.0 ]--
r 233         //TODO: Pruning needs to be implemen
--[ 2018.11.25.21.22.38.405.0 ]--
r 233         //TODO: Pruning needs to be implement
--[ 2018.11.25.21.22.38.717.0 ]--
r 233         //TODO: Pruning needs to be implementd
--[ 2018.11.25.21.22.39.451.0 ]--
r 233         //TODO: Pruning needs to be implement
--[ 2018.11.25.21.22.39.607.0 ]--
r 233         //TODO: Pruning needs to be implemen
--[ 2018.11.25.21.22.40.420.0 ]--
r 233         //TODO: Pruning needs to be implemene
--[ 2018.11.25.21.22.41.466.0 ]--
r 233         //TODO: Pruning needs to be implemen
--[ 2018.11.25.21.22.41.966.0 ]--
r 233         //TODO: Pruning needs to be impleme
--[ 2018.11.25.21.22.42.013.0 ]--
r 233         //TODO: Pruning needs to be implem
--[ 2018.11.25.21.22.42.060.0 ]--
r 233         //TODO: Pruning needs to be imple
--[ 2018.11.25.21.22.42.091.0 ]--
r 233         //TODO: Pruning needs to be impl
--[ 2018.11.25.21.22.42.122.0 ]--
r 233         //TODO: Pruning needs to be imp
--[ 2018.11.25.21.22.42.185.0 ]--
r 233         //TODO: Pruning needs to be im
--[ 2018.11.25.21.22.42.216.0 ]--
r 233         //TODO: Pruning needs to be i
--[ 2018.11.25.21.22.42.279.0 ]--
r 233         //TODO: Pruning needs to be 
--[ 2018.11.25.21.22.42.325.0 ]--
r 233         //TODO: Pruning needs to be
--[ 2018.11.25.21.22.42.372.0 ]--
r 233         //TODO: Pruning needs to b
--[ 2018.11.25.21.22.42.404.0 ]--
r 233         //TODO: Pruning needs to 
--[ 2018.11.25.21.22.42.435.0 ]--
r 233         //TODO: Pruning needs to
--[ 2018.11.25.21.22.42.466.0 ]--
r 233         //TODO: Pruning needs t
--[ 2018.11.25.21.22.42.513.0 ]--
r 233         //TODO: Pruning needs 
--[ 2018.11.25.21.22.42.544.0 ]--
r 233         //TODO: Pruning needs
--[ 2018.11.25.21.22.42.607.0 ]--
r 233         //TODO: Pruning need
--[ 2018.11.25.21.22.42.638.0 ]--
r 233         //TODO: Pruning nee
--[ 2018.11.25.21.22.42.669.0 ]--
r 233         //TODO: Pruning ne
--[ 2018.11.25.21.22.42.732.0 ]--
r 233         //TODO: Pruning n
--[ 2018.11.25.21.22.42.778.0 ]--
r 233         //TODO: Pruning 
--[ 2018.11.25.21.22.42.810.0 ]--
r 233         //TODO: Pruning
--[ 2018.11.25.21.22.42.825.0 ]--
r 233         //TODO: Prunin
--[ 2018.11.25.21.22.43.809.0 ]--
r 233         //TODO: Pruning
--[ 2018.11.25.21.22.46.606.0 ]--
+ 234         
--[ 2018.11.25.21.22.47.168.0 ]--
r 234         /
--[ 2018.11.25.21.22.47.262.0 ]--
r 234         //
--[ 2018.11.25.21.22.51.292.0 ]--
r 234         /
--[ 2018.11.25.21.22.51.448.0 ]--
r 234         
--[ 2018.11.25.21.22.51.776.0 ]--
- 234
--[ 2018.11.25.21.23.07.288.0 ]--
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
- 239
r 239 
--[ 2018.11.25.21.23.08.194.0 ]--
- 239
--[ 2018.11.25.21.23.16.052.0 ]--
+ 247                 Node n = root;
+ 248         MaxPQ<PointDist> kNearest = new MaxPQ<>();
+ 249         kNearestTraverse(n, p, kNearest, 1);
r 250         return kNearest.max().p();
--[ 2018.11.25.21.23.16.130.0 ]--
r 247         Node n = root;
--[ 2018.11.25.21.23.19.863.0 ]--
r 250         return kNearest.
--[ 2018.11.25.21.23.20.020.0 ]--
r 250         return kNearest
--[ 2018.11.25.21.23.21.098.0 ]--
r 250         return kNearest;
--[ 2018.11.25.21.23.25.284.0 ]--
r 249         kNearestTraverse(n, p, kNearest, );
--[ 2018.11.25.21.23.25.659.0 ]--
r 249         kNearestTraverse(n, p, kNearest, k);
--[ 2018.11.25.21.24.23.427.0 ]--
r 250         return kNearest.;
--[ 2018.11.25.21.24.23.739.0 ]--
r 250         return kNearest.p;
--[ 2018.11.25.21.24.25.660.0 ]--
r 250         return kNearest.p();
--[ 2018.11.25.21.24.26.410.0 ]--
r 250         return kNearest.p(;
--[ 2018.11.25.21.24.26.598.0 ]--
r 250         return kNearest.p;
--[ 2018.11.25.21.24.26.754.0 ]--
r 250         return kNearest.;
--[ 2018.11.25.21.24.26.895.0 ]--
r 250         return kNearest;
--[ 2018.11.25.21.24.37.861.0 ]--
r 246     public Iterable<PointD> nearest(Point p, int k) {
--[ 2018.11.25.21.24.38.017.0 ]--
r 246     public Iterable<PointDi> nearest(Point p, int k) {
--[ 2018.11.25.21.24.38.267.0 ]--
r 246     public Iterable<PointDis> nearest(Point p, int k) {
--[ 2018.11.25.21.24.38.735.0 ]--
r 246     public Iterable<PointDist> nearest(Point p, int k) {
--[ 2018.11.25.21.24.43.172.0 ]--
r 246     public Iterable<PointDis> nearest(Point p, int k) {
--[ 2018.11.25.21.24.43.344.0 ]--
r 246     public Iterable<PointDi> nearest(Point p, int k) {
--[ 2018.11.25.21.24.43.531.0 ]--
r 246     public Iterable<PointD> nearest(Point p, int k) {
--[ 2018.11.25.21.24.43.922.0 ]--
r 246     public Iterable<Point> nearest(Point p, int k) {
--[ 2018.11.25.21.24.52.795.0 ]--
r 250         f
--[ 2018.11.25.21.24.52.904.0 ]--
r 250         fo
--[ 2018.11.25.21.24.53.029.0 ]--
r 250         for
--[ 2018.11.25.21.24.53.123.0 ]--
r 250         for 
--[ 2018.11.25.21.24.53.232.0 ]--
r 250         for e
--[ 2018.11.25.21.24.53.513.0 ]--
r 250         for ea
--[ 2018.11.25.21.24.53.716.0 ]--
r 250         for eac
--[ 2018.11.25.21.24.54.404.0 ]--
r 250         for each
--[ 2018.11.25.21.24.55.044.0 ]--
r 250         for eac
--[ 2018.11.25.21.24.55.200.0 ]--
r 250         for ea
--[ 2018.11.25.21.24.55.357.0 ]--
r 250         for e
--[ 2018.11.25.21.24.55.482.0 ]--
r 250         for 
--[ 2018.11.25.21.24.55.607.0 ]--
r 250         for
--[ 2018.11.25.21.24.55.935.0 ]--
r 250         fore
--[ 2018.11.25.21.24.56.169.0 ]--
r 250         forea
--[ 2018.11.25.21.24.56.263.0 ]--
r 250         foreac
--[ 2018.11.25.21.24.56.497.0 ]--
r 250         foreach
--[ 2018.11.25.21.24.56.528.0 ]--
+ 250         for ( : ) {
+ 251     
r 252 }
--[ 2018.11.25.21.24.56.638.0 ]--
r 250         for (a : a) {
r 251     a
--[ 2018.11.25.21.24.56.700.0 ]--
r 251             a
r 252         }
--[ 2018.11.25.21.24.56.731.0 ]--
+ 250         for (a:
r 251              a) {
--[ 2018.11.25.21.24.56.762.0 ]--
r 250         for (:
r 251              ) {
r 252             
--[ 2018.11.25.21.24.58.871.0 ]--
r 250         for (p:
--[ 2018.11.25.21.24.59.340.0 ]--
r 250         for (pt:
--[ 2018.11.25.21.24.59.980.0 ]--
r 250         for (ptD:
--[ 2018.11.25.21.25.00.121.0 ]--
r 250         for (ptDi:
--[ 2018.11.25.21.25.00.199.0 ]--
r 250         for (ptDis:
--[ 2018.11.25.21.25.00.449.0 ]--
r 250         for (ptDist:
--[ 2018.11.25.21.25.02.371.0 ]--
r 250         for (ptDist: 
--[ 2018.11.25.21.25.02.652.0 ]--
r 250         for (ptDist: k
--[ 2018.11.25.21.25.03.933.0 ]--
r 250         for (ptDist: kNearest
--[ 2018.11.25.21.25.09.385.0 ]--
- 250
r 250         for (ptDist: kNearest             ) {
--[ 2018.11.25.21.25.10.244.0 ]--
r 250         for (ptDist: kNearest            ) {
--[ 2018.11.25.21.25.10.603.0 ]--
r 250         for (ptDist: kNearest           ) {
--[ 2018.11.25.21.25.10.744.0 ]--
r 250         for (ptDist: kNearest          ) {
--[ 2018.11.25.21.25.10.900.0 ]--
r 250         for (ptDist: kNearest         ) {
--[ 2018.11.25.21.25.11.056.0 ]--
r 250         for (ptDist: kNearest        ) {
--[ 2018.11.25.21.25.11.182.0 ]--
r 250         for (ptDist: kNearest       ) {
--[ 2018.11.25.21.25.11.291.0 ]--
r 250         for (ptDist: kNearest      ) {
--[ 2018.11.25.21.25.11.462.0 ]--
r 250         for (ptDist: kNearest     ) {
--[ 2018.11.25.21.25.11.619.0 ]--
r 250         for (ptDist: kNearest    ) {
--[ 2018.11.25.21.25.11.759.0 ]--
r 250         for (ptDist: kNearest   ) {
--[ 2018.11.25.21.25.11.900.0 ]--
r 250         for (ptDist: kNearest  ) {
--[ 2018.11.25.21.25.12.056.0 ]--
r 250         for (ptDist: kNearest ) {
--[ 2018.11.25.21.25.12.275.0 ]--
r 250         for (ptDist: kNearest) {
--[ 2018.11.25.21.25.17.336.0 ]--
+ 250         
--[ 2018.11.25.21.25.17.586.0 ]--
r 250         n
--[ 2018.11.25.21.25.17.727.0 ]--
r 250         ne
--[ 2018.11.25.21.25.17.789.0 ]--
r 250         new
--[ 2018.11.25.21.25.18.211.0 ]--
r 250         ne
--[ 2018.11.25.21.25.18.367.0 ]--
r 250         n
--[ 2018.11.25.21.25.18.664.0 ]--
r 250         
--[ 2018.11.25.21.25.24.866.0 ]--
r 250         S
--[ 2018.11.25.21.25.25.178.0 ]--
r 250         St
--[ 2018.11.25.21.25.25.381.0 ]--
r 250         Sta
--[ 2018.11.25.21.25.25.475.0 ]--
r 250         Stac
--[ 2018.11.25.21.25.25.631.0 ]--
r 250         Stack
--[ 2018.11.25.21.25.26.396.0 ]--
r 250         java.util.Stack
--[ 2018.11.25.21.25.26.506.0 ]--
r 5 import java.util.Iterator;import java.util.Stack;
--[ 2018.11.25.21.25.26.553.0 ]--
r 250         Stack
--[ 2018.11.25.21.25.26.584.0 ]--
+ 5 import java.util.Iterator;
r 6 import java.util.Stack;
--[ 2018.11.25.21.25.26.646.0 ]--
r 251         Stack<>
--[ 2018.11.25.21.25.27.193.0 ]--
r 251         Stack<P>
--[ 2018.11.25.21.25.27.381.0 ]--
r 251         Stack<Po>
--[ 2018.11.25.21.25.27.600.0 ]--
r 251         Stack<Poi>
--[ 2018.11.25.21.25.27.755.0 ]--
r 251         Stack<Poin>
--[ 2018.11.25.21.25.27.865.0 ]--
r 251         Stack<Point>
--[ 2018.11.25.21.25.29.068.0 ]--
r 251         Stack<Point> 
--[ 2018.11.25.21.25.30.614.0 ]--
r 251         Stack<Point> l
--[ 2018.11.25.21.25.31.098.0 ]--
r 251         Stack<Point> 
--[ 2018.11.25.21.25.31.598.0 ]--
r 251         Stack<Point> s
--[ 2018.11.25.21.25.31.817.0 ]--
r 251         Stack<Point> st
--[ 2018.11.25.21.25.31.989.0 ]--
r 251         Stack<Point> sta
--[ 2018.11.25.21.25.32.130.0 ]--
r 251         Stack<Point> stac
--[ 2018.11.25.21.25.32.286.0 ]--
r 251         Stack<Point> stack
--[ 2018.11.25.21.25.32.911.0 ]--
r 251         Stack<Point> stackO
--[ 2018.11.25.21.25.33.083.0 ]--
r 251         Stack<Point> stackOf
--[ 2018.11.25.21.25.33.989.0 ]--
r 251         Stack<Point> stackOfk
--[ 2018.11.25.21.25.34.676.0 ]--
r 251         Stack<Point> stackOf
--[ 2018.11.25.21.25.35.129.0 ]--
r 251         Stack<Point> stackOfK
--[ 2018.11.25.21.25.36.269.0 ]--
r 251         Stack<Point> stackOfKN
--[ 2018.11.25.21.25.36.441.0 ]--
r 251         Stack<Point> stackOfKNe
--[ 2018.11.25.21.25.36.597.0 ]--
r 251         Stack<Point> stackOfKNea
--[ 2018.11.25.21.25.36.785.0 ]--
r 251         Stack<Point> stackOfKNear
--[ 2018.11.25.21.25.37.003.0 ]--
r 251         Stack<Point> stackOfKNeare
--[ 2018.11.25.21.25.37.144.0 ]--
r 251         Stack<Point> stackOfKNeares
--[ 2018.11.25.21.25.37.316.0 ]--
r 251         Stack<Point> stackOfKNearest
--[ 2018.11.25.21.25.39.347.0 ]--
r 251         Stack<Point> stackOfKNearest 
--[ 2018.11.25.21.25.39.628.0 ]--
r 251         Stack<Point> stackOfKNearest =
--[ 2018.11.25.21.25.39.706.0 ]--
r 251         Stack<Point> stackOfKNearest = 
--[ 2018.11.25.21.25.39.846.0 ]--
r 251         Stack<Point> stackOfKNearest = n
--[ 2018.11.25.21.25.39.925.0 ]--
r 251         Stack<Point> stackOfKNearest = ne
--[ 2018.11.25.21.25.39.987.0 ]--
r 251         Stack<Point> stackOfKNearest = new
--[ 2018.11.25.21.25.40.081.0 ]--
r 251         Stack<Point> stackOfKNearest = new 
--[ 2018.11.25.21.25.41.706.0 ]--
r 251         Stack<Point> stackOfKNearest = new S
--[ 2018.11.25.21.25.41.971.0 ]--
r 251         Stack<Point> stackOfKNearest = new St
--[ 2018.11.25.21.25.42.127.0 ]--
r 251         Stack<Point> stackOfKNearest = new Sta
--[ 2018.11.25.21.25.42.236.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stac
--[ 2018.11.25.21.25.42.393.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack
--[ 2018.11.25.21.25.42.408.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<>
--[ 2018.11.25.21.25.42.440.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<>()
--[ 2018.11.25.21.25.43.736.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<>();
--[ 2018.11.25.21.25.45.189.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<P>();
--[ 2018.11.25.21.25.45.423.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<Po>();
--[ 2018.11.25.21.25.45.673.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<Poi>();
--[ 2018.11.25.21.25.45.814.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<Poin>();
--[ 2018.11.25.21.25.45.939.0 ]--
r 251         Stack<Point> stackOfKNearest = new Stack<Point>();
--[ 2018.11.25.21.25.54.265.0 ]--
r 252         for (ptDist: kNearest;) {
--[ 2018.11.25.21.25.55.749.0 ]--
r 252         for (ptDist: kNearest) {
--[ 2018.11.25.21.25.57.077.0 ]--
r 252         for (ptDist: kNearest); {
--[ 2018.11.25.21.25.57.967.0 ]--
r 252         for (ptDist: kNearest) {
--[ 2018.11.25.21.25.59.951.0 ]--
r 253             f
--[ 2018.11.25.21.26.00.935.0 ]--
r 253             
--[ 2018.11.25.21.26.04.278.0 ]--
r 252         for (PptDist: kNearest) {
--[ 2018.11.25.21.26.04.513.0 ]--
r 252         for (PoptDist: kNearest) {
--[ 2018.11.25.21.26.04.653.0 ]--
r 252         for (PoiptDist: kNearest) {
--[ 2018.11.25.21.26.04.794.0 ]--
r 252         for (PoinptDist: kNearest) {
--[ 2018.11.25.21.26.04.903.0 ]--
r 252         for (PointptDist: kNearest) {
--[ 2018.11.25.21.26.05.810.0 ]--
r 252         for (PointDptDist: kNearest) {
--[ 2018.11.25.21.26.05.981.0 ]--
r 252         for (PointDiptDist: kNearest) {
--[ 2018.11.25.21.26.06.075.0 ]--
r 252         for (PointDisptDist: kNearest) {
--[ 2018.11.25.21.26.06.340.0 ]--
r 252         for (PointDistptDist: kNearest) {
--[ 2018.11.25.21.26.06.497.0 ]--
r 252         for (PointDist ptDist: kNearest) {
--[ 2018.11.25.21.26.10.184.0 ]--
r 253             s
--[ 2018.11.25.21.26.10.824.0 ]--
r 253             st
--[ 2018.11.25.21.26.11.199.0 ]--
r 253             sta
--[ 2018.11.25.21.26.11.714.0 ]--
r 253             stackOfKNearest
--[ 2018.11.25.21.26.11.917.0 ]--
r 253             stackOfKNearest.
--[ 2018.11.25.21.26.12.855.0 ]--
r 253             stackOfKNearest.p
--[ 2018.11.25.21.26.12.964.0 ]--
r 253             stackOfKNearest.push
--[ 2018.11.25.21.26.12.980.0 ]--
r 253             stackOfKNearest.push()
--[ 2018.11.25.21.26.14.011.0 ]--
r 253             stackOfKNearest.push(p)
--[ 2018.11.25.21.26.17.635.0 ]--
r 253             stackOfKNearest.push(ptDist)
--[ 2018.11.25.21.26.18.103.0 ]--
r 253             stackOfKNearest.push(ptDist.)
--[ 2018.11.25.21.26.18.463.0 ]--
r 253             stackOfKNearest.push(ptDist.p)
--[ 2018.11.25.21.26.19.322.0 ]--
r 253             stackOfKNearest.push(ptDist.p())
--[ 2018.11.25.21.26.20.603.0 ]--
r 253             stackOfKNearest.push(ptDist.p());
--[ 2018.11.25.21.26.23.914.0 ]--
+ 255         
--[ 2018.11.25.21.26.24.071.0 ]--
r 255         r
--[ 2018.11.25.21.26.24.196.0 ]--
r 255         re
--[ 2018.11.25.21.26.24.336.0 ]--
r 255         ret
--[ 2018.11.25.21.26.24.383.0 ]--
r 255         retu
--[ 2018.11.25.21.26.24.586.0 ]--
r 255         retur
--[ 2018.11.25.21.26.24.696.0 ]--
r 255         return
--[ 2018.11.25.21.26.24.836.0 ]--
r 255         return 
--[ 2018.11.25.21.26.25.555.0 ]--
r 255         return p
--[ 2018.11.25.21.26.27.132.0 ]--
r 255         return pt
--[ 2018.11.25.21.26.27.992.0 ]--
r 255         return p
--[ 2018.11.25.21.26.28.445.0 ]--
r 255         return 
--[ 2018.11.25.21.26.28.679.0 ]--
r 255         return s
--[ 2018.11.25.21.26.28.913.0 ]--
r 255         return st
--[ 2018.11.25.21.26.29.054.0 ]--
r 255         return sta
--[ 2018.11.25.21.26.29.148.0 ]--
r 255         return stac
--[ 2018.11.25.21.26.29.507.0 ]--
r 255         return stackOfKNearest
--[ 2018.11.25.21.26.30.569.0 ]--
r 255         return stackOfKNearest;
--[ 2018.11.25.21.26.41.067.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.28.02.670.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) t{
--[ 2018.11.25.21.28.02.717.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) th{
--[ 2018.11.25.21.28.02.857.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) tho{
--[ 2018.11.25.21.28.03.357.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) th{
--[ 2018.11.25.21.28.03.498.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) thr{
--[ 2018.11.25.21.28.03.638.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) thro{
--[ 2018.11.25.21.28.03.716.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throw{
--[ 2018.11.25.21.28.03.919.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws{
--[ 2018.11.25.21.28.04.138.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws {
--[ 2018.11.25.21.28.05.560.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws I{
--[ 2018.11.25.21.28.05.825.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws Il{
--[ 2018.11.25.21.28.05.966.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws Ill{
--[ 2018.11.25.21.28.06.872.0 ]--
r 247     public Iterable<Point> nearest(Point p, int k) throws IllegalArgumentException{
--[ 2018.11.25.21.28.13.777.0 ]--
+ 248         
--[ 2018.11.25.21.28.14.323.0 ]--
r 248         i
--[ 2018.11.25.21.28.14.448.0 ]--
r 248         if
--[ 2018.11.25.21.28.14.542.0 ]--
r 248         if 
--[ 2018.11.25.21.28.15.214.0 ]--
r 248         if ()
--[ 2018.11.25.21.28.16.338.0 ]--
r 248         if (p)
--[ 2018.11.25.21.28.17.947.0 ]--
r 248         if (p )
--[ 2018.11.25.21.28.18.260.0 ]--
r 248         if (p =)
--[ 2018.11.25.21.28.18.385.0 ]--
r 248         if (p ==)
--[ 2018.11.25.21.28.18.885.0 ]--
r 248         if (p == )
--[ 2018.11.25.21.28.19.103.0 ]--
r 248         if (p == n)
--[ 2018.11.25.21.28.19.275.0 ]--
r 248         if (p == nu)
--[ 2018.11.25.21.28.19.463.0 ]--
r 248         if (p == nul)
--[ 2018.11.25.21.28.19.588.0 ]--
r 248         if (p == null)
--[ 2018.11.25.21.28.20.291.0 ]--
r 248         if (p == null )
--[ 2018.11.25.21.28.20.791.0 ]--
r 248         if (p == null |)
--[ 2018.11.25.21.28.20.947.0 ]--
r 248         if (p == null ||)
--[ 2018.11.25.21.28.21.228.0 ]--
r 248         if (p == null || )
--[ 2018.11.25.21.28.22.134.0 ]--
r 248         if (p == null || k)
--[ 2018.11.25.21.28.22.400.0 ]--
r 248         if (p == null || k )
--[ 2018.11.25.21.28.22.634.0 ]--
r 248         if (p == null || k <)
--[ 2018.11.25.21.28.23.462.0 ]--
r 248         if (p == null || k < )
--[ 2018.11.25.21.28.23.555.0 ]--
r 248         if (p == null || k < 0)
--[ 2018.11.25.21.28.24.727.0 ]--
r 248         if (p == null || k < 0) 
--[ 2018.11.25.21.28.24.899.0 ]--
r 248         if (p == null || k < 0) {
--[ 2018.11.25.21.28.25.086.0 ]--
+ 249 
+ 250 }
--[ 2018.11.25.21.28.25.196.0 ]--
r 250         }
--[ 2018.11.25.21.28.25.211.0 ]--
r 249             
--[ 2018.11.25.21.28.34.147.0 ]--
r 249             t
--[ 2018.11.25.21.28.34.241.0 ]--
r 249             th
--[ 2018.11.25.21.28.34.334.0 ]--
r 249             thr
--[ 2018.11.25.21.28.34.428.0 ]--
r 249             thro
--[ 2018.11.25.21.28.34.569.0 ]--
r 249             throw
--[ 2018.11.25.21.28.34.725.0 ]--
r 249             throw 
--[ 2018.11.25.21.28.34.881.0 ]--
r 249             throw n
--[ 2018.11.25.21.28.35.006.0 ]--
r 249             throw ne
--[ 2018.11.25.21.28.35.100.0 ]--
r 249             throw new
--[ 2018.11.25.21.28.35.193.0 ]--
r 249             throw new 
--[ 2018.11.25.21.28.35.631.0 ]--
r 249             throw new e
--[ 2018.11.25.21.28.36.240.0 ]--
r 249             throw new ex
--[ 2018.11.25.21.28.36.615.0 ]--
r 249             throw new exc
--[ 2018.11.25.21.28.36.802.0 ]--
r 249             throw new exce
--[ 2018.11.25.21.28.36.974.0 ]--
r 249             throw new excep
--[ 2018.11.25.21.28.37.568.0 ]--
r 249             throw new except
--[ 2018.11.25.21.28.37.881.0 ]--
r 249             throw new excep
--[ 2018.11.25.21.28.38.037.0 ]--
r 249             throw new exce
--[ 2018.11.25.21.28.38.146.0 ]--
r 249             throw new exc
--[ 2018.11.25.21.28.38.287.0 ]--
r 249             throw new ex
--[ 2018.11.25.21.28.38.412.0 ]--
r 249             throw new e
--[ 2018.11.25.21.28.38.677.0 ]--
r 249             throw new 
--[ 2018.11.25.21.28.39.755.0 ]--
r 249             throw new I
--[ 2018.11.25.21.28.40.052.0 ]--
r 249             throw new It
--[ 2018.11.25.21.28.40.333.0 ]--
r 249             throw new I
--[ 2018.11.25.21.28.40.583.0 ]--
r 249             throw new Il
--[ 2018.11.25.21.28.41.442.0 ]--
r 249             throw new IllegalArgumentException
--[ 2018.11.25.21.28.41.473.0 ]--
r 249             throw new IllegalArgumentException()
--[ 2018.11.25.21.28.42.973.0 ]--
r 249             throw new IllegalArgumentException("")
--[ 2018.11.25.21.28.43.348.0 ]--
r 249             throw new IllegalArgumentException("W")
--[ 2018.11.25.21.28.43.457.0 ]--
r 249             throw new IllegalArgumentException("Wo")
--[ 2018.11.25.21.28.43.629.0 ]--
r 249             throw new IllegalArgumentException("Woa")
--[ 2018.11.25.21.28.43.942.0 ]--
r 249             throw new IllegalArgumentException("Woah")
--[ 2018.11.25.21.28.44.254.0 ]--
r 249             throw new IllegalArgumentException("Woah ")
--[ 2018.11.25.21.28.44.426.0 ]--
r 249             throw new IllegalArgumentException("Woah t")
--[ 2018.11.25.21.28.44.504.0 ]--
r 249             throw new IllegalArgumentException("Woah th")
--[ 2018.11.25.21.28.44.629.0 ]--
r 249             throw new IllegalArgumentException("Woah the")
--[ 2018.11.25.21.28.44.738.0 ]--
r 249             throw new IllegalArgumentException("Woah ther")
--[ 2018.11.25.21.28.44.816.0 ]--
r 249             throw new IllegalArgumentException("Woah there")
--[ 2018.11.25.21.28.46.597.0 ]--
r 249             throw new IllegalArgumentException("Woah there!")
--[ 2018.11.25.21.28.46.722.0 ]--
r 249             throw new IllegalArgumentException("Woah there! ")
--[ 2018.11.25.21.28.47.378.0 ]--
r 249             throw new IllegalArgumentException("Woah there! S")
--[ 2018.11.25.21.28.47.831.0 ]--
r 249             throw new IllegalArgumentException("Woah there! St")
--[ 2018.11.25.21.28.48.003.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Sta")
--[ 2018.11.25.21.28.48.081.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay")
--[ 2018.11.25.21.28.48.175.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay ")
--[ 2018.11.25.21.28.48.300.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay i")
--[ 2018.11.25.21.28.48.456.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in")
--[ 2018.11.25.21.28.48.534.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in ")
--[ 2018.11.25.21.28.48.659.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in y")
--[ 2018.11.25.21.28.48.800.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in yo")
--[ 2018.11.25.21.28.48.847.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in you")
--[ 2018.11.25.21.28.48.987.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your")
--[ 2018.11.25.21.28.49.112.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your ")
--[ 2018.11.25.21.28.49.315.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your l")
--[ 2018.11.25.21.28.49.503.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your li")
--[ 2018.11.25.21.28.49.706.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your lim")
--[ 2018.11.25.21.28.49.815.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limi")
--[ 2018.11.25.21.28.50.143.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limit")
--[ 2018.11.25.21.28.50.315.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits")
--[ 2018.11.25.21.28.50.674.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits,")
--[ 2018.11.25.21.28.50.815.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, ")
--[ 2018.11.25.21.28.50.971.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, b")
--[ 2018.11.25.21.28.51.065.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, bo")
--[ 2018.11.25.21.28.51.159.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, boi")
--[ 2018.11.25.21.28.51.549.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, boi.")
--[ 2018.11.25.21.28.53.096.0 ]--
r 249             throw new IllegalArgumentException("Woah there! Stay in your limits, boi.");
--[ 2018.11.25.21.28.58.329.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.29.09.556.0 ]--
r 248         if (p == null || k <= 0) {
--[ 2018.11.25.21.29.11.946.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.25.21.29.36.983.0 ]--
+ 250             
--[ 2018.11.25.21.29.37.155.0 ]--
r 250             r
--[ 2018.11.25.21.29.37.280.0 ]--
r 250             re
--[ 2018.11.25.21.29.37.467.0 ]--
r 250             ret
--[ 2018.11.25.21.29.37.546.0 ]--
r 250             retu
--[ 2018.11.25.21.29.37.639.0 ]--
r 250             retur
--[ 2018.11.25.21.29.37.733.0 ]--
r 250             return
--[ 2018.11.25.21.29.37.842.0 ]--
r 250             return 
--[ 2018.11.25.21.29.37.936.0 ]--
r 250             return n
--[ 2018.11.25.21.29.38.217.0 ]--
r 250             return nu
--[ 2018.11.25.21.29.38.452.0 ]--
r 250             return nul
--[ 2018.11.25.21.29.38.561.0 ]--
r 250             return null
--[ 2018.11.25.21.29.39.483.0 ]--
r 250             return null;
--[ 2018.11.25.21.29.43.669.0 ]--
- 250
--[ 2018.11.25.21.29.47.309.0 ]--
r 248         if (p == null ) {
--[ 2018.11.25.21.29.47.778.0 ]--
r 248         if (p == null) {
--[ 2018.11.25.21.29.49.465.0 ]--
r 248         if (p == null || k <= 0) {
--[ 2018.11.25.21.29.52.433.0 ]--
r 248         if (p == null || k < 0) {
--[ 2018.11.25.21.29.53.620.0 ]--
+ 251         
--[ 2018.11.25.21.29.56.994.0 ]--
- 251
--[ 2018.11.25.21.29.58.837.0 ]--
+ 251         
--[ 2018.11.25.21.30.01.744.0 ]--
r 251         e
--[ 2018.11.25.21.30.01.915.0 ]--
r 251         el
--[ 2018.11.25.21.30.02.071.0 ]--
r 251         els
--[ 2018.11.25.21.30.02.165.0 ]--
r 251         else
--[ 2018.11.25.21.30.02.368.0 ]--
r 251         elsei
--[ 2018.11.25.21.30.02.727.0 ]--
r 251         else
--[ 2018.11.25.21.30.02.868.0 ]--
r 251         else 
--[ 2018.11.25.21.30.03.024.0 ]--
r 251         else i
--[ 2018.11.25.21.30.03.165.0 ]--
r 251         else if
--[ 2018.11.25.21.30.03.852.0 ]--
r 251         else if 
--[ 2018.11.25.21.30.04.446.0 ]--
r 251         else if ()
--[ 2018.11.25.21.30.04.977.0 ]--
r 251         else if (k)
--[ 2018.11.25.21.30.05.102.0 ]--
r 251         else if (k )
--[ 2018.11.25.21.30.05.352.0 ]--
r 251         else if (k =)
--[ 2018.11.25.21.30.05.492.0 ]--
r 251         else if (k ==)
--[ 2018.11.25.21.30.05.883.0 ]--
r 251         else if (k == )
--[ 2018.11.25.21.30.06.149.0 ]--
r 251         else if (k == 0)
--[ 2018.11.25.21.30.07.492.0 ]--
r 251         else if (k == 0) 
--[ 2018.11.25.21.30.07.726.0 ]--
r 251         else if (k == 0) {
--[ 2018.11.25.21.30.07.914.0 ]--
+ 252 
+ 253 }
--[ 2018.11.25.21.30.08.039.0 ]--
r 253         }
--[ 2018.11.25.21.30.08.054.0 ]--
r 252             
--[ 2018.11.25.21.30.08.414.0 ]--
r 252             r
--[ 2018.11.25.21.30.08.523.0 ]--
r 252             re
--[ 2018.11.25.21.30.08.710.0 ]--
r 252             ret
--[ 2018.11.25.21.30.08.789.0 ]--
r 252             retu
--[ 2018.11.25.21.30.08.898.0 ]--
r 252             retur
--[ 2018.11.25.21.30.08.992.0 ]--
r 252             return
--[ 2018.11.25.21.30.09.070.0 ]--
r 252             return 
--[ 2018.11.25.21.30.09.163.0 ]--
r 252             return n
--[ 2018.11.25.21.30.09.366.0 ]--
r 252             return nu
--[ 2018.11.25.21.30.09.601.0 ]--
r 252             return nul
--[ 2018.11.25.21.30.09.757.0 ]--
r 252             return null
--[ 2018.11.25.21.30.10.741.0 ]--
r 252             return null;
--[ 2018.11.25.21.30.10.882.0 ]--
r 252             return null; 
--[ 2018.11.25.21.30.11.788.0 ]--
r 252             return null;
--[ 2018.11.25.21.30.15.021.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.18.11.48.965.0 ]--
UpdateTree (AD): 7 0
+ /.git/objects/01/f57a50c211c9ce8b712c88369596d3af612bbe
+ /.git/objects/18/cf74106580d42da0000b22e699ee152d24f7b5
+ /.git/objects/26/72e60c59bfba44e15d702bb72d55a882f86843
+ /.git/objects/34/f3f2795e654bd3fe597baea3d7bcb36e206176
+ /.git/objects/47/c93364250869385e50097a9ace532e8cf8ec8a
+ /.git/objects/77/70c05cb896c5aeffcba6ae30090de6146a8921
+ /.git/objects/9c/9b39c5577f746c16abfd70ab4c9a9802a688d9

--[ 2018.11.26.18.11.49.124.0 ]--
+ 1 import sun.security.util.Length;
+ 2 
+ 4 import java.util.Comparator;
+ 6 import java.util.Stack;
+ 45             listOfPoints.add(root.p);
+ 217     private void kNearestTraverse(Node n, Point p, MaxPQ<PointDist> kNearest, int k) {
+ 218         if (n == null) {
+ 219             return;
r 220         }
r 221         Comparator<Point> distCalc = p.distanceToComparator();
r 222         if (kNearest.size() < k){
r 223             kNearest.insert(new PointDist(n.p, n.p.dist(p)));
r 224         }
r 225         else {
r 226             PointDist minDistP = kNearest.max();
r 227             if (distCalc.compare(n.p, minDistP.p()) < 0) {//found a new close enough point!
r 228                 kNearest.insert(new PointDist(n.p, n.p.dist(p)));
r 229                 if (kNearest.size() > k) {
r 230                     kNearest.delMax();
r 231                 }
r 232             }
r 233         }
r 234         //TODO: Pruning
r 235         kNearestTraverse(n.left, p, kNearest, k);
r 236         kNearestTraverse(n.right, p, kNearest, k);
r 237     }
r 238     // return the Point that is closest to the given Point
r 239     public Point nearest(Point p) {
r 240         Node n = root;
r 241         MaxPQ<PointDist> kNearest = new MaxPQ<>();
r 242         kNearestTraverse(n, p, kNearest, 1);
r 243         return kNearest.max().p();
+ 247     public Iterable<Point> nearest(Point p, int k) throws IllegalArgumentException{
+ 248         if (p == null || k < 0) {
+ 249             throw new IllegalArgumentException("Woah there! Stay in your limits, boi.");
+ 250         }
+ 251         else if (k == 0) {
+ 252             return null;
+ 253         }
+ 254         Node n = root;
+ 255         MaxPQ<PointDist> kNearest = new MaxPQ<>();
+ 256         kNearestTraverse(n, p, kNearest, k);
+ 257         Stack<Point> stackOfKNearest = new Stack<Point>();
+ 258         for (PointDist ptDist: kNearest) {
+ 259             stackOfKNearest.push(ptDist.p());
r 260         }
r 261         return stackOfKNearest;
--[ 2018.11.26.18.11.59.021.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.18.12.32.516.0 ]--
- 70
--[ 2018.11.26.18.12.35.749.0 ]--
- 81
--[ 2018.11.26.18.13.49.287.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.18.17.38.053.0 ]--
r 225             if (distCalc.compare(n.p, minDistP.p()) < 0) { //found a new close enough point!
--[ 2018.11.26.18.24.38.601.0 ]--
+ 233         
--[ 2018.11.26.18.24.44.563.0 ]--
- 233
--[ 2018.11.26.18.24.48.309.0 ]--
+ 234         
--[ 2018.11.26.18.26.22.476.0 ]--
+ 233         
--[ 2018.11.26.18.27.26.297.0 ]--
r 233         if
--[ 2018.11.26.18.27.26.906.0 ]--
r 233         if 
--[ 2018.11.26.18.27.29.089.0 ]--
r 233         if ()
--[ 2018.11.26.18.27.31.920.0 ]--
r 233         if (n)
--[ 2018.11.26.18.27.34.335.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.27.34.654.0 ]--
r 233         if (n.p)
--[ 2018.11.26.18.27.36.313.0 ]--
r 233         if (n.p,)
--[ 2018.11.26.18.27.38.959.0 ]--
r 233         if (n.p)
--[ 2018.11.26.18.27.39.096.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.27.39.269.0 ]--
r 233         if (n)
--[ 2018.11.26.18.27.39.429.0 ]--
r 233         if ()
--[ 2018.11.26.18.27.40.522.0 ]--
r 233         if (d)
--[ 2018.11.26.18.27.40.717.0 ]--
r 233         if (di)
--[ 2018.11.26.18.27.40.871.0 ]--
r 233         if (dir)
--[ 2018.11.26.18.27.41.127.0 ]--
r 233         if (dirs)
--[ 2018.11.26.18.27.41.522.0 ]--
r 233         if (dirst)
--[ 2018.11.26.18.27.41.842.0 ]--
r 233         if (dirs)
--[ 2018.11.26.18.27.42.050.0 ]--
r 233         if (dir)
--[ 2018.11.26.18.27.42.177.0 ]--
r 233         if (di)
--[ 2018.11.26.18.27.42.470.0 ]--
r 233         if (d)
--[ 2018.11.26.18.27.43.358.0 ]--
r 233         if (di)
--[ 2018.11.26.18.27.43.528.0 ]--
r 233         if (dis)
--[ 2018.11.26.18.27.43.675.0 ]--
r 233         if (dist)
--[ 2018.11.26.18.27.44.436.0 ]--
r 233         if (distCalc)
--[ 2018.11.26.18.27.46.001.0 ]--
r 233         if (distCalc.)
--[ 2018.11.26.18.27.46.253.0 ]--
r 233         if (distCalc.c)
--[ 2018.11.26.18.27.47.044.0 ]--
r 233         if (distCalc.compare)
--[ 2018.11.26.18.27.47.089.0 ]--
r 233         if (distCalc.compare())
--[ 2018.11.26.18.27.48.260.0 ]--
r 233         if (distCalc.compare(n))
--[ 2018.11.26.18.27.49.331.0 ]--
r 233         if (distCalc.compare(n.))
--[ 2018.11.26.18.27.49.540.0 ]--
r 233         if (distCalc.compare(n.p))
--[ 2018.11.26.18.27.50.391.0 ]--
r 233         if (distCalc.compare(n.p,))
--[ 2018.11.26.18.27.51.255.0 ]--
r 233         if (distCalc.compare(n.p, ))
--[ 2018.11.26.18.27.52.360.0 ]--
r 233         if (distCalc.compare(n.p, m))
--[ 2018.11.26.18.27.52.543.0 ]--
r 233         if (distCalc.compare(n.p, mi))
--[ 2018.11.26.18.27.52.846.0 ]--
r 233         if (distCalc.compare(n.p, min))
--[ 2018.11.26.18.27.56.963.0 ]--
r 233         if (distCalc.compare(n.p, minD))
--[ 2018.11.26.18.27.58.026.0 ]--
r 233         if (distCalc.compare(n.p, minDi))
--[ 2018.11.26.18.27.58.131.0 ]--
r 233         if (distCalc.compare(n.p, minDis))
--[ 2018.11.26.18.27.58.265.0 ]--
r 233         if (distCalc.compare(n.p, minDist))
--[ 2018.11.26.18.28.00.061.0 ]--
r 233         if (distCalc.compare(n.p, minDistP))
--[ 2018.11.26.18.28.07.321.0 ]--
r 233         if (distCalc.compare(n.p, minDist))
--[ 2018.11.26.18.28.07.793.0 ]--
r 233         if (distCalc.compare(n.p, minDis))
--[ 2018.11.26.18.28.07.842.0 ]--
r 233         if (distCalc.compare(n.p, minDi))
--[ 2018.11.26.18.28.07.888.0 ]--
r 233         if (distCalc.compare(n.p, minD))
--[ 2018.11.26.18.28.07.926.0 ]--
r 233         if (distCalc.compare(n.p, min))
--[ 2018.11.26.18.28.07.972.0 ]--
r 233         if (distCalc.compare(n.p, mi))
--[ 2018.11.26.18.28.08.004.0 ]--
r 233         if (distCalc.compare(n.p, m))
--[ 2018.11.26.18.28.08.137.0 ]--
r 233         if (distCalc.compare(n.p, ))
--[ 2018.11.26.18.28.08.545.0 ]--
r 233         if (distCalc.compare(n.p,))
--[ 2018.11.26.18.28.09.101.0 ]--
r 233         if (distCalc.compare(n.p))
--[ 2018.11.26.18.28.09.356.0 ]--
r 233         if (distCalc.compare(n.))
--[ 2018.11.26.18.28.09.812.0 ]--
r 233         if (distCalc.compare(n))
--[ 2018.11.26.18.28.09.874.0 ]--
r 233         if (distCalc.compare())
--[ 2018.11.26.18.28.09.926.0 ]--
r 233         if (distCalc.compare)
--[ 2018.11.26.18.28.09.967.0 ]--
r 233         if (distCalc.compar)
--[ 2018.11.26.18.28.10.000.0 ]--
r 233         if (distCalc.compa)
--[ 2018.11.26.18.28.10.023.0 ]--
r 233         if (distCalc.comp)
--[ 2018.11.26.18.28.10.054.0 ]--
r 233         if (distCalc.com)
--[ 2018.11.26.18.28.10.097.0 ]--
r 233         if (distCalc.co)
--[ 2018.11.26.18.28.10.129.0 ]--
r 233         if (distCalc.c)
--[ 2018.11.26.18.28.10.154.0 ]--
r 233         if (distCalc.)
--[ 2018.11.26.18.28.10.179.0 ]--
r 233         if (distCalc)
--[ 2018.11.26.18.28.10.236.0 ]--
r 233         if (distCal)
--[ 2018.11.26.18.28.10.259.0 ]--
r 233         if (distCa)
--[ 2018.11.26.18.28.10.290.0 ]--
r 233         if (distC)
--[ 2018.11.26.18.28.10.330.0 ]--
r 233         if (dist)
--[ 2018.11.26.18.28.10.356.0 ]--
r 233         if (dis)
--[ 2018.11.26.18.28.10.388.0 ]--
r 233         if (di)
--[ 2018.11.26.18.28.11.500.0 ]--
r 233         if (d)
--[ 2018.11.26.18.28.11.686.0 ]--
r 233         if ()
--[ 2018.11.26.18.28.11.868.0 ]--
r 233         if 
--[ 2018.11.26.18.28.12.060.0 ]--
r 233         if
--[ 2018.11.26.18.28.12.279.0 ]--
r 233         i
--[ 2018.11.26.18.28.12.597.0 ]--
r 233         
--[ 2018.11.26.18.28.12.908.0 ]--
- 233
--[ 2018.11.26.18.32.27.780.0 ]--
+ 230                 
--[ 2018.11.26.18.32.37.410.0 ]--
+ 232         
--[ 2018.11.26.18.32.42.929.0 ]--
- 232
--[ 2018.11.26.18.32.44.007.0 ]--
- 230
--[ 2018.11.26.18.34.09.564.0 ]--
- 234
--[ 2018.11.26.18.34.16.932.0 ]--
+ 233         
--[ 2018.11.26.18.34.18.245.0 ]--
r 233         i
--[ 2018.11.26.18.34.18.337.0 ]--
r 233         if
--[ 2018.11.26.18.34.18.493.0 ]--
r 233         if 
--[ 2018.11.26.18.34.19.120.0 ]--
r 233         if ()
--[ 2018.11.26.18.34.20.704.0 ]--
r 233         if (n)
--[ 2018.11.26.18.34.21.414.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.22.567.0 ]--
r 233         if (n.D)
--[ 2018.11.26.18.34.23.439.0 ]--
r 233         if (n.Di)
--[ 2018.11.26.18.34.23.618.0 ]--
r 233         if (n.Dir)
--[ 2018.11.26.18.34.23.709.0 ]--
r 233         if (n.Dire)
--[ 2018.11.26.18.34.24.338.0 ]--
r 233         if (n.Dir)
--[ 2018.11.26.18.34.24.510.0 ]--
r 233         if (n.Di)
--[ 2018.11.26.18.34.24.673.0 ]--
r 233         if (n.D)
--[ 2018.11.26.18.34.24.795.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.25.634.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.34.26.712.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.27.408.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.34.27.700.0 ]--
r 233         if (n.dr)
--[ 2018.11.26.18.34.28.357.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.34.29.015.0 ]--
r 233         if (n.di)
--[ 2018.11.26.18.34.29.167.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.34.30.163.0 ]--
r 233         if (n.dir.)
--[ 2018.11.26.18.34.33.669.0 ]--
r 233         if (n.dir.n)
--[ 2018.11.26.18.34.35.240.0 ]--
r 233         if (n.dir.ne)
--[ 2018.11.26.18.34.36.476.0 ]--
r 233         if (n.dir.n)
--[ 2018.11.26.18.34.36.814.0 ]--
r 233         if (n.dir.)
--[ 2018.11.26.18.34.37.780.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.34.38.878.0 ]--
r 233         if (n.di)
--[ 2018.11.26.18.34.39.076.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.34.39.203.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.39.359.0 ]--
r 233         if (n)
--[ 2018.11.26.18.34.50.162.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.50.705.0 ]--
r 233         if (n.P)
--[ 2018.11.26.18.34.51.764.0 ]--
r 233         if (n.Pa)
--[ 2018.11.26.18.34.52.381.0 ]--
r 233         if (n.P)
--[ 2018.11.26.18.34.52.570.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.53.006.0 ]--
r 233         if (n.p)
--[ 2018.11.26.18.34.53.192.0 ]--
r 233         if (n.pa)
--[ 2018.11.26.18.34.53.819.0 ]--
r 233         if (n.p)
--[ 2018.11.26.18.34.54.042.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.54.198.0 ]--
r 233         if (n)
--[ 2018.11.26.18.34.55.050.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.34.59.807.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.35.01.001.0 ]--
r 233         if (n.dir.)
--[ 2018.11.26.18.35.08.139.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.35.08.296.0 ]--
r 233         if (n.di)
--[ 2018.11.26.18.35.08.447.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.35.08.625.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.35.08.710.0 ]--
r 233         if (n)
--[ 2018.11.26.18.35.31.071.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.35.31.736.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.35.31.915.0 ]--
r 233         if (n.di)
--[ 2018.11.26.18.35.32.020.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.35.33.028.0 ]--
r 233         if (n.dir.)
--[ 2018.11.26.18.36.07.475.0 ]--
r 233         if (n.dir)
--[ 2018.11.26.18.36.07.663.0 ]--
r 233         if (n.di)
--[ 2018.11.26.18.36.07.785.0 ]--
r 233         if (n.d)
--[ 2018.11.26.18.36.07.935.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.36.08.931.0 ]--
r 233         if (n.n)
--[ 2018.11.26.18.36.10.272.0 ]--
r 233         if (n.)
--[ 2018.11.26.18.36.10.495.0 ]--
r 233         if (n)
--[ 2018.11.26.18.36.10.994.0 ]--
r 233         if ()
--[ 2018.11.26.18.36.12.143.0 ]--
r 233         if (
--[ 2018.11.26.18.36.12.294.0 ]--
r 233         if 
--[ 2018.11.26.18.36.12.437.0 ]--
r 233         if
--[ 2018.11.26.18.36.12.585.0 ]--
r 233         i
--[ 2018.11.26.18.36.12.756.0 ]--
r 233         
--[ 2018.11.26.18.36.35.143.0 ]--
+ 233                 kNearestTraverse(n.left, p, kNearest, k);
r 234 
--[ 2018.11.26.18.36.35.201.0 ]--
r 233         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.18.36.38.188.0 ]--
r 233         kNearestTraverse(n.lef, p, kNearest, k);
--[ 2018.11.26.18.36.38.344.0 ]--
r 233         kNearestTraverse(n.le, p, kNearest, k);
--[ 2018.11.26.18.36.38.468.0 ]--
r 233         kNearestTraverse(n.l, p, kNearest, k);
--[ 2018.11.26.18.36.38.837.0 ]--
r 233         kNearestTraverse(n., p, kNearest, k);
--[ 2018.11.26.18.36.39.709.0 ]--
r 233         kNearestTraverse(n.d, p, kNearest, k);
--[ 2018.11.26.18.36.40.083.0 ]--
r 233         kNearestTraverse(n.di, p, kNearest, k);
--[ 2018.11.26.18.36.40.487.0 ]--
r 233         kNearestTraverse(n.dir, p, kNearest, k);
--[ 2018.11.26.18.36.41.425.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.36.47.798.0 ]--
r 233         kNearestTraverse(n.dir.p, p, kNearest, k);
--[ 2018.11.26.18.36.50.008.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.36.50.694.0 ]--
r 233         kNearestTraverse(n.dir, p, kNearest, k);
--[ 2018.11.26.18.36.52.479.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.36.53.873.0 ]--
r 233         kNearestTraverse(n.dir.p, p, kNearest, k);
--[ 2018.11.26.18.36.55.145.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.36.56.031.0 ]--
r 233         kNearestTraverse(n.dir.m, p, kNearest, k);
--[ 2018.11.26.18.36.56.645.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.36.57.020.0 ]--
r 233         kNearestTraverse(n.dir.n, p, kNearest, k);
--[ 2018.11.26.18.37.01.215.0 ]--
r 233         kNearestTraverse(n.dir., p, kNearest, k);
--[ 2018.11.26.18.37.02.026.0 ]--
r 233         kNearestTraverse(n.dir, p, kNearest, k);
--[ 2018.11.26.18.37.03.354.0 ]--
r 233         kNearestTraverse(n.dir(), p, kNearest, k);
--[ 2018.11.26.18.37.04.674.0 ]--
r 233         kNearestTraverse(n.dir()., p, kNearest, k);
--[ 2018.11.26.18.37.06.139.0 ]--
r 233         kNearestTraverse(n.dir().m, p, kNearest, k);
--[ 2018.11.26.18.37.06.774.0 ]--
r 233         kNearestTraverse(n.dir()., p, kNearest, k);
--[ 2018.11.26.18.37.07.728.0 ]--
r 233         kNearestTraverse(n.dir().n, p, kNearest, k);
--[ 2018.11.26.18.37.08.138.0 ]--
r 233         kNearestTraverse(n.dir().ne, p, kNearest, k);
--[ 2018.11.26.18.37.09.102.0 ]--
r 233         kNearestTraverse(n.dir().nex, p, kNearest, k);
--[ 2018.11.26.18.37.09.603.0 ]--
r 233         kNearestTraverse(n.dir().next, p, kNearest, k);
--[ 2018.11.26.18.37.11.546.0 ]--
r 233         kNearestTraverse(n.dir().nextD, p, kNearest, k);
--[ 2018.11.26.18.37.11.948.0 ]--
r 233         kNearestTraverse(n.dir().nextDi, p, kNearest, k);
--[ 2018.11.26.18.37.12.239.0 ]--
r 233         kNearestTraverse(n.dir().nextDir, p, kNearest, k);
--[ 2018.11.26.18.37.12.350.0 ]--
r 233         kNearestTraverse(n.dir().nextDire, p, kNearest, k);
--[ 2018.11.26.18.37.12.627.0 ]--
r 233         kNearestTraverse(n.dir().nextDirec, p, kNearest, k);
--[ 2018.11.26.18.37.12.827.0 ]--
r 233         kNearestTraverse(n.dir().nextDirect, p, kNearest, k);
--[ 2018.11.26.18.37.12.997.0 ]--
r 233         kNearestTraverse(n.dir().nextDirecti, p, kNearest, k);
--[ 2018.11.26.18.37.13.057.0 ]--
r 233         kNearestTraverse(n.dir().nextDirectio, p, kNearest, k);
--[ 2018.11.26.18.37.13.136.0 ]--
r 233         kNearestTraverse(n.dir().nextDirection, p, kNearest, k);
--[ 2018.11.26.18.37.13.514.0 ]--
r 233         kNearestTraverse(n.dir().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.37.31.011.0 ]--
+ 246     
--[ 2018.11.26.18.37.32.546.0 ]--
- 245
--[ 2018.11.26.18.37.35.942.0 ]--
+ 238     
--[ 2018.11.26.18.37.36.251.0 ]--
+ 238     
--[ 2018.11.26.18.37.36.364.0 ]--
+ 238     
--[ 2018.11.26.18.37.38.064.0 ]--
r 240     r
--[ 2018.11.26.18.37.38.149.0 ]--
r 240     re
--[ 2018.11.26.18.37.38.465.0 ]--
r 240     r
--[ 2018.11.26.18.37.38.628.0 ]--
r 240     
--[ 2018.11.26.18.37.39.165.0 ]--
r 240     /
--[ 2018.11.26.18.37.39.300.0 ]--
r 240     //
--[ 2018.11.26.18.37.39.691.0 ]--
r 240     //r
--[ 2018.11.26.18.37.39.772.0 ]--
r 240     //re
--[ 2018.11.26.18.37.39.926.0 ]--
r 240     //ret
--[ 2018.11.26.18.37.40.066.0 ]--
r 240     //retu
--[ 2018.11.26.18.37.40.144.0 ]--
r 240     //retur
--[ 2018.11.26.18.37.40.358.0 ]--
r 240     //return
--[ 2018.11.26.18.37.40.491.0 ]--
r 240     //returns
--[ 2018.11.26.18.37.40.695.0 ]--
r 240     //returns 
--[ 2018.11.26.18.37.40.785.0 ]--
r 240     //returns t
--[ 2018.11.26.18.37.40.877.0 ]--
r 240     //returns th
--[ 2018.11.26.18.37.40.941.0 ]--
r 240     //returns the
--[ 2018.11.26.18.37.41.091.0 ]--
r 240     //returns the 
--[ 2018.11.26.18.37.41.537.0 ]--
r 240     //returns the n
--[ 2018.11.26.18.37.41.634.0 ]--
r 240     //returns the ne
--[ 2018.11.26.18.37.41.893.0 ]--
r 240     //returns the nex
--[ 2018.11.26.18.37.42.069.0 ]--
r 240     //returns the next
--[ 2018.11.26.18.37.42.360.0 ]--
r 240     //returns the next 
--[ 2018.11.26.18.37.42.523.0 ]--
r 240     //returns the next d
--[ 2018.11.26.18.37.42.634.0 ]--
r 240     //returns the next di
--[ 2018.11.26.18.37.42.731.0 ]--
r 240     //returns the next dir
--[ 2018.11.26.18.37.42.873.0 ]--
r 240     //returns the next dire
--[ 2018.11.26.18.37.43.342.0 ]--
r 240     //returns the next direc
--[ 2018.11.26.18.37.43.580.0 ]--
r 240     //returns the next direct
--[ 2018.11.26.18.37.43.676.0 ]--
r 240     //returns the next directi
--[ 2018.11.26.18.37.43.758.0 ]--
r 240     //returns the next directio
--[ 2018.11.26.18.37.43.883.0 ]--
r 240     //returns the next direction
--[ 2018.11.26.18.37.44.141.0 ]--
+ 241     
--[ 2018.11.26.18.37.46.334.0 ]--
r 241     p
--[ 2018.11.26.18.37.47.696.0 ]--
r 241     private
--[ 2018.11.26.18.37.47.779.0 ]--
r 241     private 
--[ 2018.11.26.18.37.49.931.0 ]--
r 241     private D
--[ 2018.11.26.18.37.50.140.0 ]--
r 241     private Di
--[ 2018.11.26.18.37.51.139.0 ]--
r 241     private Die
--[ 2018.11.26.18.37.51.733.0 ]--
r 241     private Di
--[ 2018.11.26.18.37.51.825.0 ]--
r 241     private Dir
--[ 2018.11.26.18.37.51.861.0 ]--
r 241     private Dire
--[ 2018.11.26.18.37.53.045.0 ]--
r 241     private Direc
--[ 2018.11.26.18.37.53.337.0 ]--
r 241     private Direct
--[ 2018.11.26.18.37.53.549.0 ]--
r 241     private Directi
--[ 2018.11.26.18.37.53.656.0 ]--
r 241     private Directio
--[ 2018.11.26.18.37.53.830.0 ]--
r 241     private Direction
--[ 2018.11.26.18.37.54.605.0 ]--
r 241     private Direction 
--[ 2018.11.26.18.38.04.489.0 ]--
r 241     private PDirection 
--[ 2018.11.26.18.38.04.673.0 ]--
r 241     private PaDirection 
--[ 2018.11.26.18.38.06.109.0 ]--
r 241     private PartitionDirection 
--[ 2018.11.26.18.38.06.140.0 ]--
r 241     private Partition Direction 
--[ 2018.11.26.18.38.06.223.0 ]--
r 241     private PartitionDirection 
--[ 2018.11.26.18.38.07.245.0 ]--
r 241     private Partition.Direction 
--[ 2018.11.26.18.38.10.293.0 ]--
r 241     private Partition.Direction ()
--[ 2018.11.26.18.38.11.186.0 ]--
r 241     private Partition.Direction (
--[ 2018.11.26.18.38.11.365.0 ]--
r 241     private Partition.Direction 
--[ 2018.11.26.18.38.13.105.0 ]--
r 241     private Partition.Direction n
--[ 2018.11.26.18.38.13.188.0 ]--
r 241     private Partition.Direction ne
--[ 2018.11.26.18.38.13.380.0 ]--
r 241     private Partition.Direction nex
--[ 2018.11.26.18.38.13.606.0 ]--
r 241     private Partition.Direction next
--[ 2018.11.26.18.38.14.402.0 ]--
r 241     private Partition.Direction nextDirection
--[ 2018.11.26.18.38.15.855.0 ]--
r 241     private Partition.Direction nextDirection 
--[ 2018.11.26.18.38.16.768.0 ]--
r 241     private Partition.Direction nextDirection ()
--[ 2018.11.26.18.38.17.650.0 ]--
r 241     private Partition.Direction nextDirection () 
--[ 2018.11.26.18.38.22.292.0 ]--
r 241     private Partition.Direction nextDirection () {}
--[ 2018.11.26.18.38.23.081.0 ]--
+ 241     private Partition.Direction nextDirection () {
r 242     }
--[ 2018.11.26.18.38.23.130.0 ]--
+ 242         
--[ 2018.11.26.18.38.27.633.0 ]--
r 241     private Partition.Direction nextDirection() {
--[ 2018.11.26.18.38.30.316.0 ]--
r 241     private Partition.Direction nextDirection(n) {
--[ 2018.11.26.18.38.31.369.0 ]--
r 241     private Partition.Direction nextDirection() {
--[ 2018.11.26.18.38.33.911.0 ]--
r 241     private Partition.Direction nextDirection(N) {
--[ 2018.11.26.18.38.34.129.0 ]--
r 241     private Partition.Direction nextDirection(No) {
--[ 2018.11.26.18.38.34.262.0 ]--
r 241     private Partition.Direction nextDirection(Nod) {
--[ 2018.11.26.18.38.34.364.0 ]--
r 241     private Partition.Direction nextDirection(Node) {
--[ 2018.11.26.18.38.34.655.0 ]--
r 241     private Partition.Direction nextDirection(Node ) {
--[ 2018.11.26.18.38.34.992.0 ]--
r 241     private Partition.Direction nextDirection(Node n) {
--[ 2018.11.26.18.38.40.060.0 ]--
r 242         i
--[ 2018.11.26.18.38.40.166.0 ]--
r 242         if
--[ 2018.11.26.18.38.40.298.0 ]--
r 242         if 
--[ 2018.11.26.18.38.41.915.0 ]--
r 242         if n
--[ 2018.11.26.18.38.42.657.0 ]--
r 242         if n.
--[ 2018.11.26.18.38.43.731.0 ]--
r 242         if n.d
--[ 2018.11.26.18.38.43.831.0 ]--
r 242         if n.di
--[ 2018.11.26.18.38.43.923.0 ]--
r 242         if n.dir
--[ 2018.11.26.18.38.44.837.0 ]--
r 242         if n.dir 
--[ 2018.11.26.18.38.45.209.0 ]--
r 242         if n.dir =
--[ 2018.11.26.18.38.45.457.0 ]--
r 242         if n.dir ==
--[ 2018.11.26.18.38.48.102.0 ]--
r 242         if (n.dir ==
--[ 2018.11.26.18.38.51.385.0 ]--
r 242         if (n.dir == 
--[ 2018.11.26.18.38.51.954.0 ]--
r 242         if (n.dir == L
--[ 2018.11.26.18.38.52.860.0 ]--
r 242         if (n.dir == LW
--[ 2018.11.26.18.38.54.161.0 ]--
r 242         if (n.dir == L
--[ 2018.11.26.18.38.54.668.0 ]--
r 242         if (n.dir == LE
--[ 2018.11.26.18.38.56.731.0 ]--
r 242         if (n.dir == Partition.Direction.LEFTRIGHT
--[ 2018.11.26.18.38.56.773.0 ]--
r 242         if (n.dir == LEFTRIGHT
--[ 2018.11.26.18.38.56.800.0 ]--
r 242         if (n.dir == .LEFTRIGHT
--[ 2018.11.26.18.38.56.838.0 ]--
r 242         if (n.dir == Direction.LEFTRIGHT
--[ 2018.11.26.18.38.56.885.0 ]--
r 242         if (n.dir == Partition.Direction.LEFTRIGHT
--[ 2018.11.26.18.39.25.538.0 ]--
r 242         if (n.dir == Partition.Direction.LEFTRIGH
--[ 2018.11.26.18.39.27.134.0 ]--
r 242         if (n.dir == Partition.Direction.LEFTRIGHT
--[ 2018.11.26.18.40.01.171.0 ]--
r 233         kNearestTraverse(n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.02.884.0 ]--
r 233         kNearestTraverse(n.dir.n().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.04.130.0 ]--
r 233         kNearestTraverse(n.dir.ne().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.04.854.0 ]--
r 233         kNearestTraverse(n.dir.n().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.05.042.0 ]--
r 233         kNearestTraverse(n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.08.849.0 ]--
- 240
- 240
- 240
r 240    
--[ 2018.11.26.18.40.31.834.0 ]--
+ 233         
--[ 2018.11.26.18.40.36.601.0 ]--
r 234         kNearestTraverse(Dn.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.36.788.0 ]--
r 234         kNearestTraverse(Din.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.36.868.0 ]--
r 234         kNearestTraverse(Dirn.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.37.378.0 ]--
r 234         kNearestTraverse(Diren.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.37.981.0 ]--
r 234         kNearestTraverse(Direcn.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.38.210.0 ]--
r 234         kNearestTraverse(Directn.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.38.315.0 ]--
r 234         kNearestTraverse(Directin.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.38.537.0 ]--
r 234         kNearestTraverse(Direction.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.38.655.0 ]--
r 234         kNearestTraverse(Directionn.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.38.966.0 ]--
r 234         kNearestTraverse(Direction n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.45.103.0 ]--
r 234         kNearestTraverse(Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.47.213.0 ]--
r 234         kNearestTraverse(Direction.N n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.48.243.0 ]--
r 234         kNearestTraverse(Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.48.854.0 ]--
r 234         kNearestTraverse(Direction.n n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.49.878.0 ]--
r 234         kNearestTraverse(Direction.ne n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.50.333.0 ]--
r 234         kNearestTraverse(Direction.nex n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.54.650.0 ]--
r 234         kNearestTraverse(Direction.ne n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.54.846.0 ]--
r 234         kNearestTraverse(Direction.n n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.55.291.0 ]--
r 234         kNearestTraverse(Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.59.068.0 ]--
r 234         kNearestTraverse(PDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.59.152.0 ]--
r 234         kNearestTraverse(PaDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.40.59.450.0 ]--
r 234         kNearestTraverse(ParDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.00.089.0 ]--
r 234         kNearestTraverse(PartitionDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.00.120.0 ]--
r 234         kNearestTraverse(Partition Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.00.176.0 ]--
r 234         kNearestTraverse(PartitionDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.00.461.0 ]--
r 234         kNearestTraverse(Partition\Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.00.934.0 ]--
r 234         kNearestTraverse(PartitionDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.01.663.0 ]--
r 234         kNearestTraverse(Partition.Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.06.087.0 ]--
r 234         kNearestTraverse(Partition.nextDirectionDirection. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.06.113.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Direction. n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.08.905.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Direction n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.408.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Directio n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.480.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Directi n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.519.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Direc n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.554.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Dire n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.593.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Dir n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.654.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()Di n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.797.0 ]--
r 234         kNearestTraverse(Partition.nextDirection()D n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.09.986.0 ]--
r 234         kNearestTraverse(Partition.nextDirection() n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.10.106.0 ]--
r 234         kNearestTraverse(Partition.nextDirection( n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.12.287.0 ]--
r 234         kNearestTraverse(Partition.nextDirection() n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.14.008.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n) n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.14.618.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.) n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.14.969.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.d) n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.15.057.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.di) n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.15.168.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) n.dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.16.666.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) .dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.146.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) dir.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.217.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) r.().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.254.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) .().nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.310.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) ).nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.358.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) .nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.406.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) nextDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.500.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) extDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.709.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) xtDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.817.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) tDirection(), p, kNearest, k);
--[ 2018.11.26.18.41.17.991.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) Direction(), p, kNearest, k);
--[ 2018.11.26.18.41.18.120.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) irection(), p, kNearest, k);
--[ 2018.11.26.18.41.18.275.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) rection(), p, kNearest, k);
--[ 2018.11.26.18.41.18.411.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) ection(), p, kNearest, k);
--[ 2018.11.26.18.41.18.611.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) ction(), p, kNearest, k);
--[ 2018.11.26.18.41.18.705.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) tion(), p, kNearest, k);
--[ 2018.11.26.18.41.18.883.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) ion(), p, kNearest, k);
--[ 2018.11.26.18.41.19.030.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) on(), p, kNearest, k);
--[ 2018.11.26.18.41.19.200.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) n(), p, kNearest, k);
--[ 2018.11.26.18.41.19.328.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) (), p, kNearest, k);
--[ 2018.11.26.18.41.19.512.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) ), p, kNearest, k);
--[ 2018.11.26.18.41.19.633.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir) , p, kNearest, k);
--[ 2018.11.26.18.41.21.463.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.33.659.0 ]--
r 234         kNearestTraverse(Partition.DnextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.34.145.0 ]--
r 234         kNearestTraverse(Partition.DinextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.34.807.0 ]--
r 234         kNearestTraverse(Partition.DirectionnextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.35.978.0 ]--
r 234         kNearestTraverse(Partition.Direction.nextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.42.613.0 ]--
r 234         kNearestTraverse(Partition..nextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.42.855.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir), p, kNearest, k);
--[ 2018.11.26.18.41.55.816.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.dir, p, kNearest, k);
--[ 2018.11.26.18.41.56.255.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.di, p, kNearest, k);
--[ 2018.11.26.18.41.56.395.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n.d, p, kNearest, k);
--[ 2018.11.26.18.41.56.531.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n., p, kNearest, k);
--[ 2018.11.26.18.41.56.949.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n, p, kNearest, k);
--[ 2018.11.26.18.41.57.706.0 ]--
r 234         kNearestTraverse(Partition.nextDirection(n), p, kNearest, k);
--[ 2018.11.26.19.08.40.317.0 ]--
r 233 
r 239 
r 240 
r 241 
r 249 
--[ 2018.11.26.19.09.07.270.0 ]--
- 234
--[ 2018.11.26.19.09.08.177.0 ]--
- 233
r 233         
--[ 2018.11.26.19.09.08.370.0 ]--
- 233
--[ 2018.11.26.19.09.30.973.0 ]--
+ 229                     
--[ 2018.11.26.19.09.40.841.0 ]--
+ 229         kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.09.40.869.0 ]--
r 229                     kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.09.46.016.0 ]--
+ 230         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.09.46.044.0 ]--
r 230                     kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.09.47.012.0 ]--
- 231
--[ 2018.11.26.19.10.44.380.0 ]--
- 229
r 229 
--[ 2018.11.26.19.10.46.473.0 ]--
+ 229 
--[ 2018.11.26.19.10.47.616.0 ]--
- 229
--[ 2018.11.26.19.10.47.808.0 ]--
- 229
--[ 2018.11.26.19.10.49.089.0 ]--
+ 230                 
--[ 2018.11.26.19.10.49.770.0 ]--
+ 230                                     kNearestTraverse(n.right, p, kNearest, k);
r 231                     kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.10.49.844.0 ]--
r 230                 kNearestTraverse(n.right, p, kNearest, k);
r 231                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.11.01.990.0 ]--
+ 233             
--[ 2018.11.26.19.11.10.452.0 ]--
r 232             } 
--[ 2018.11.26.19.11.10.544.0 ]--
r 232             } e
--[ 2018.11.26.19.11.10.636.0 ]--
r 232             } el
--[ 2018.11.26.19.11.10.756.0 ]--
r 232             } els
--[ 2018.11.26.19.11.10.822.0 ]--
r 232             } else
--[ 2018.11.26.19.11.12.118.0 ]--
r 232             } else 
--[ 2018.11.26.19.11.13.228.0 ]--
r 232             } else {
--[ 2018.11.26.19.11.13.399.0 ]--
r 232             } else {}
--[ 2018.11.26.19.11.14.092.0 ]--
+ 232             } else {
r 233             }
--[ 2018.11.26.19.11.14.116.0 ]--
+ 233                 
--[ 2018.11.26.19.11.15.275.0 ]--
r 233                 i
--[ 2018.11.26.19.11.15.460.0 ]--
r 233                 ig
--[ 2018.11.26.19.11.15.769.0 ]--
r 233                 i
--[ 2018.11.26.19.11.15.943.0 ]--
r 233                 if
--[ 2018.11.26.19.11.16.049.0 ]--
r 233                 if 
--[ 2018.11.26.19.11.16.673.0 ]--
r 233                 if ()
--[ 2018.11.26.19.11.43.591.0 ]--
r 233                 if (n)
--[ 2018.11.26.19.11.44.561.0 ]--
r 233                 if (n.)
--[ 2018.11.26.19.11.46.575.0 ]--
r 233                 if (n.p)
--[ 2018.11.26.19.11.47.651.0 ]--
r 233                 if (n.p.)
--[ 2018.11.26.19.11.49.869.0 ]--
r 233                 if (n.p.d)
--[ 2018.11.26.19.11.49.977.0 ]--
r 233                 if (n.p.di)
--[ 2018.11.26.19.11.50.750.0 ]--
r 233                 if (n.p.d)
--[ 2018.11.26.19.11.50.841.0 ]--
r 233                 if (n.p.)
--[ 2018.11.26.19.11.51.935.0 ]--
r 233                 if (n.p.xy)
--[ 2018.11.26.19.11.51.959.0 ]--
r 233                 if (n.p.xy())
--[ 2018.11.26.19.11.59.040.0 ]--
r 233                 if (n.p.xy(n))
--[ 2018.11.26.19.11.59.398.0 ]--
r 233                 if (n.p.xy(n.))
--[ 2018.11.26.19.11.59.799.0 ]--
r 233                 if (n.p.xy(n.d))
--[ 2018.11.26.19.11.59.918.0 ]--
r 233                 if (n.p.xy(n.di))
--[ 2018.11.26.19.12.00.029.0 ]--
r 233                 if (n.p.xy(n.dir))
--[ 2018.11.26.19.12.02.163.0 ]--
r 233                 if (n.p.xy(n.dir) )
--[ 2018.11.26.19.12.18.390.0 ]--
r 233                 if ( )
--[ 2018.11.26.19.12.19.689.0 ]--
+ 233                 
--[ 2018.11.26.19.12.20.323.0 ]--
r 233                 n.p.xy(n.dir)
--[ 2018.11.26.19.12.24.877.0 ]--
r 233                 rn.p.xy(n.dir)
--[ 2018.11.26.19.12.25.030.0 ]--
r 233                 ran.p.xy(n.dir)
--[ 2018.11.26.19.12.25.173.0 ]--
r 233                 radn.p.xy(n.dir)
--[ 2018.11.26.19.12.26.212.0 ]--
r 233                 radin.p.xy(n.dir)
--[ 2018.11.26.19.12.26.437.0 ]--
r 233                 radiun.p.xy(n.dir)
--[ 2018.11.26.19.12.26.562.0 ]--
r 233                 radiusn.p.xy(n.dir)
--[ 2018.11.26.19.12.26.681.0 ]--
r 233                 radius n.p.xy(n.dir)
--[ 2018.11.26.19.12.27.662.0 ]--
r 233                 radiusn.p.xy(n.dir)
--[ 2018.11.26.19.12.29.374.0 ]--
r 233                 radius n.p.xy(n.dir)
--[ 2018.11.26.19.12.32.335.0 ]--
r 233                 dradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.32.468.0 ]--
r 233                 doradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.32.536.0 ]--
r 233                 douradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.32.743.0 ]--
r 233                 doubradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.32.888.0 ]--
r 233                 doublradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.33.056.0 ]--
r 233                 doubleradius n.p.xy(n.dir)
--[ 2018.11.26.19.12.33.189.0 ]--
r 233                 double radius n.p.xy(n.dir)
--[ 2018.11.26.19.12.35.787.0 ]--
r 233                 double radius =n.p.xy(n.dir)
--[ 2018.11.26.19.12.35.915.0 ]--
r 233                 double radius = n.p.xy(n.dir)
--[ 2018.11.26.19.13.34.846.0 ]--
r 233                 double radius = dn.p.xy(n.dir)
--[ 2018.11.26.19.13.34.978.0 ]--
r 233                 double radius = din.p.xy(n.dir)
--[ 2018.11.26.19.13.35.129.0 ]--
r 233                 double radius = disn.p.xy(n.dir)
--[ 2018.11.26.19.13.35.230.0 ]--
r 233                 double radius = distn.p.xy(n.dir)
--[ 2018.11.26.19.13.35.897.0 ]--
r 233                 double radius = distCalcn.p.xy(n.dir)
--[ 2018.11.26.19.13.36.737.0 ]--
r 233                 double radius = distCalc(n.p.xy(n.dir)
--[ 2018.11.26.19.13.39.353.0 ]--
r 233                 double radius = distCalc(n.p.xy(n.dir))
--[ 2018.11.26.19.13.40.435.0 ]--
r 233                 double radius = distCalc(n.p.xy(n.dir) )
--[ 2018.11.26.19.13.47.777.0 ]--
r 233                 double radius = distCalc.(n.p.xy(n.dir) )
--[ 2018.11.26.19.13.49.375.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir) )
--[ 2018.11.26.19.16.25.234.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir)  )
--[ 2018.11.26.19.16.25.426.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir) p )
--[ 2018.11.26.19.16.26.182.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir) p. )
--[ 2018.11.26.19.16.46.032.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir) p )
--[ 2018.11.26.19.16.47.234.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir)  )
--[ 2018.11.26.19.16.47.896.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir) )
--[ 2018.11.26.19.16.49.722.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), )
--[ 2018.11.26.19.16.49.929.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),  )
--[ 2018.11.26.19.16.52.711.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p )
--[ 2018.11.26.19.16.54.532.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p. )
--[ 2018.11.26.19.16.55.551.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.x )
--[ 2018.11.26.19.16.55.724.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy )
--[ 2018.11.26.19.16.59.592.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy() )
--[ 2018.11.26.19.17.01.713.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n) )
--[ 2018.11.26.19.17.02.138.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.) )
--[ 2018.11.26.19.17.02.450.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.d) )
--[ 2018.11.26.19.17.02.616.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.di) )
--[ 2018.11.26.19.17.02.746.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir) )
--[ 2018.11.26.19.17.04.761.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir))
--[ 2018.11.26.19.17.07.425.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),p.xy(n.dir))
--[ 2018.11.26.19.17.11.763.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),p.xy(n.dir) )
--[ 2018.11.26.19.17.12.801.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),p.xy(n.dir) <)
--[ 2018.11.26.19.17.13.039.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),p.xy(n.dir) < )
--[ 2018.11.26.19.17.13.835.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir),p.xy(n.dir) < 0)
--[ 2018.11.26.19.17.21.875.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir) < 0)
--[ 2018.11.26.19.17.42.729.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir) < )
--[ 2018.11.26.19.17.42.945.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir) <)
--[ 2018.11.26.19.17.43.090.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir) )
--[ 2018.11.26.19.17.43.251.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir))
--[ 2018.11.26.19.17.45.672.0 ]--
r 233                 double radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.09.245.0 ]--
r 233                 C radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.09.464.0 ]--
r 233                 Co radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.09.542.0 ]--
r 233                 Com radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.10.085.0 ]--
r 233                 Comparable radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.11.490.0 ]--
r 233                 Comparable<> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.15.014.0 ]--
r 233                 Comparable<P> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.15.295.0 ]--
r 233                 Comparable<Po> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.15.472.0 ]--
r 233                 Comparable<Poi> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.15.734.0 ]--
r 233                 Comparable<Poin> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.16.275.0 ]--
r 233                 Comparable<Poiny> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.17.446.0 ]--
r 233                 Comparable<Poin> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.17.714.0 ]--
r 233                 Comparable<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.38.986.0 ]--
r 233                 Comparabl<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.39.112.0 ]--
r 233                 Comparab<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.39.310.0 ]--
r 233                 Compara<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.39.427.0 ]--
r 233                 Compar<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.40.822.0 ]--
r 233                 Compara<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.42.132.0 ]--
r 233                 Comparat<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.42.227.0 ]--
r 233                 Comparato<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.18.42.977.0 ]--
r 233                 Comparator<Point> radius = distCalc.compare(n.p.xy(n.dir), p.xy(n.dir));
--[ 2018.11.26.19.19.49.403.0 ]--
r 233                 Comparator<Point> radius = ;
--[ 2018.11.26.19.21.25.479.0 ]--
r 233                 d = ;
--[ 2018.11.26.19.21.25.663.0 ]--
r 233                 di = ;
--[ 2018.11.26.19.21.25.853.0 ]--
r 233                 dis = ;
--[ 2018.11.26.19.21.25.970.0 ]--
r 233                 dist = ;
--[ 2018.11.26.19.21.26.768.0 ]--
r 233                 distT = ;
--[ 2018.11.26.19.21.26.931.0 ]--
r 233                 distTo = ;
--[ 2018.11.26.19.21.27.369.0 ]--
r 233                 distToP = ;
--[ 2018.11.26.19.21.27.662.0 ]--
r 233                 distToPa = ;
--[ 2018.11.26.19.21.27.769.0 ]--
r 233                 distToPar = ;
--[ 2018.11.26.19.21.28.250.0 ]--
r 233                 distToPart = ;
--[ 2018.11.26.19.21.28.429.0 ]--
r 233                 distToParti = ;
--[ 2018.11.26.19.21.28.628.0 ]--
r 233                 distToPartit = ;
--[ 2018.11.26.19.21.28.770.0 ]--
r 233                 distToPartiti = ;
--[ 2018.11.26.19.21.28.858.0 ]--
r 233                 distToPartitio = ;
--[ 2018.11.26.19.21.28.955.0 ]--
r 233                 distToPartition = ;
--[ 2018.11.26.19.21.32.964.0 ]--
r 233                 PdistToPartition = ;
--[ 2018.11.26.19.21.33.213.0 ]--
r 233                 PodistToPartition = ;
--[ 2018.11.26.19.21.33.345.0 ]--
r 233                 PoidistToPartition = ;
--[ 2018.11.26.19.21.33.574.0 ]--
r 233                 PoindistToPartition = ;
--[ 2018.11.26.19.21.33.662.0 ]--
r 233                 PointdistToPartition = ;
--[ 2018.11.26.19.21.35.508.0 ]--
r 233                 PoindistToPartition = ;
--[ 2018.11.26.19.21.36.017.0 ]--
r 233                 PoidistToPartition = ;
--[ 2018.11.26.19.21.36.159.0 ]--
r 233                 PodistToPartition = ;
--[ 2018.11.26.19.21.36.273.0 ]--
r 233                 PdistToPartition = ;
--[ 2018.11.26.19.21.36.789.0 ]--
r 233                 distToPartition = ;
--[ 2018.11.26.19.21.38.683.0 ]--
r 233                 ddistToPartition = ;
--[ 2018.11.26.19.21.38.765.0 ]--
r 233                 dodistToPartition = ;
--[ 2018.11.26.19.21.38.837.0 ]--
r 233                 doudistToPartition = ;
--[ 2018.11.26.19.21.39.048.0 ]--
r 233                 doubdistToPartition = ;
--[ 2018.11.26.19.21.39.144.0 ]--
r 233                 doubldistToPartition = ;
--[ 2018.11.26.19.21.39.353.0 ]--
r 233                 doublrdistToPartition = ;
--[ 2018.11.26.19.21.39.399.0 ]--
r 233                 doublr distToPartition = ;
--[ 2018.11.26.19.21.40.321.0 ]--
r 233                 doublrdistToPartition = ;
--[ 2018.11.26.19.21.40.820.0 ]--
r 233                 doubldistToPartition = ;
--[ 2018.11.26.19.21.40.934.0 ]--
r 233                 doubledistToPartition = ;
--[ 2018.11.26.19.21.41.101.0 ]--
r 233                 double distToPartition = ;
--[ 2018.11.26.19.21.43.048.0 ]--
r 233                 double distToPartition = 
--[ 2018.11.26.19.21.44.750.0 ]--
r 233                 double distToPartition = n
--[ 2018.11.26.19.21.45.115.0 ]--
r 233                 double distToPartition = n.
--[ 2018.11.26.19.21.46.508.0 ]--
r 233                 double distToPartition = n.x
--[ 2018.11.26.19.21.47.346.0 ]--
r 233                 double distToPartition = n.xy
--[ 2018.11.26.19.21.49.051.0 ]--
r 233                 double distToPartition = n.xy()
--[ 2018.11.26.19.21.50.602.0 ]--
r 233                 double distToPartition = n.xy(d)
--[ 2018.11.26.19.21.50.734.0 ]--
r 233                 double distToPartition = n.xy(di)
--[ 2018.11.26.19.21.50.862.0 ]--
r 233                 double distToPartition = n.xy(dir)
--[ 2018.11.26.19.21.53.029.0 ]--
r 233                 double distToPartition = n.xy(dir) 
--[ 2018.11.26.19.21.53.265.0 ]--
r 233                 double distToPartition = n.xy(dir) -
--[ 2018.11.26.19.21.53.344.0 ]--
r 233                 double distToPartition = n.xy(dir) - 
--[ 2018.11.26.19.21.56.149.0 ]--
r 233                 double distToPartition = n.xy(dir) - p
--[ 2018.11.26.19.21.56.615.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.
--[ 2018.11.26.19.21.57.693.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.xy
--[ 2018.11.26.19.21.57.715.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.xy()
--[ 2018.11.26.19.22.00.021.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.xy(d)
--[ 2018.11.26.19.22.00.085.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.xy(di)
--[ 2018.11.26.19.22.00.226.0 ]--
r 233                 double distToPartition = n.xy(dir) - p.xy(dir)
--[ 2018.11.26.19.22.11.979.0 ]--
r 233                 double distToPartition = n.pxy(dir) - p.xy(dir)
--[ 2018.11.26.19.22.12.212.0 ]--
r 233                 double distToPartition = n.p.xy(dir) - p.xy(dir)
--[ 2018.11.26.19.22.19.597.0 ]--
r 233                 double distToPartition = n.p.xy(ndir) - p.xy(dir)
--[ 2018.11.26.19.22.19.733.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(dir)
--[ 2018.11.26.19.22.22.488.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(ndir)
--[ 2018.11.26.19.22.22.785.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(n.dir)
--[ 2018.11.26.19.22.24.916.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
--[ 2018.11.26.19.22.25.250.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(n.dir); 
--[ 2018.11.26.19.22.34.465.0 ]--
r 234                 if ( ){
--[ 2018.11.26.19.22.34.625.0 ]--
r 234                 if ( ){}
--[ 2018.11.26.19.22.35.539.0 ]--
+ 234                 if ( ){
r 235                 }
--[ 2018.11.26.19.22.35.581.0 ]--
+ 235                     
--[ 2018.11.26.19.22.38.669.0 ]--
r 234                 if (){
--[ 2018.11.26.19.23.12.378.0 ]--
r 234                 if (m){
--[ 2018.11.26.19.23.12.503.0 ]--
r 234                 if (mi){
--[ 2018.11.26.19.23.12.666.0 ]--
r 234                 if (min){
--[ 2018.11.26.19.23.14.116.0 ]--
r 234                 if (minD){
--[ 2018.11.26.19.23.15.234.0 ]--
r 234                 if (minDistP){
--[ 2018.11.26.19.23.16.094.0 ]--
r 234                 if (minDistP.){
--[ 2018.11.26.19.23.17.241.0 ]--
r 234                 if (minDistP.d){
--[ 2018.11.26.19.23.18.467.0 ]--
r 234                 if (minDistP.){
--[ 2018.11.26.19.23.33.246.0 ]--
r 234                 if (minDistP.d){
--[ 2018.11.26.19.23.33.268.0 ]--
r 234                 if (minDistP.d()){
--[ 2018.11.26.19.23.35.747.0 ]--
r 234                 if (minDistP.d() ){
--[ 2018.11.26.19.23.38.451.0 ]--
r 234                 if (minDistP.d() >){
--[ 2018.11.26.19.23.47.719.0 ]--
r 234                 if (minDistP.d() > ){
--[ 2018.11.26.19.24.01.305.0 ]--
r 234                 if (minDistP.d() >){
--[ 2018.11.26.19.24.01.512.0 ]--
r 234                 if (minDistP.d() ){
--[ 2018.11.26.19.24.02.100.0 ]--
r 234                 if (minDistP.d() <){
--[ 2018.11.26.19.24.03.272.0 ]--
r 234                 if (minDistP.d() < ){
--[ 2018.11.26.19.24.05.071.0 ]--
r 234                 if (minDistP.d() < d){
--[ 2018.11.26.19.24.05.275.0 ]--
r 234                 if (minDistP.d() < di){
--[ 2018.11.26.19.24.05.332.0 ]--
r 234                 if (minDistP.d() < dir){
--[ 2018.11.26.19.24.05.487.0 ]--
r 234                 if (minDistP.d() < dirs){
--[ 2018.11.26.19.24.05.865.0 ]--
r 234                 if (minDistP.d() < dir){
--[ 2018.11.26.19.24.06.020.0 ]--
r 234                 if (minDistP.d() < di){
--[ 2018.11.26.19.24.06.181.0 ]--
r 234                 if (minDistP.d() < dit){
--[ 2018.11.26.19.24.06.764.0 ]--
r 234                 if (minDistP.d() < di){
--[ 2018.11.26.19.24.06.853.0 ]--
r 234                 if (minDistP.d() < dis){
--[ 2018.11.26.19.24.06.953.0 ]--
r 234                 if (minDistP.d() < dist){
--[ 2018.11.26.19.24.07.365.0 ]--
r 234                 if (minDistP.d() < distToPartition){
--[ 2018.11.26.19.24.09.781.0 ]--
+ 235                     
--[ 2018.11.26.19.24.15.379.0 ]--
+ 235                                     kNearestTraverse(n.left, p, kNearest, k);
r 236 
--[ 2018.11.26.19.24.15.444.0 ]--
r 235                     kNearestTraverse(n.left, p, kNearest, k);
r 237 
--[ 2018.11.26.19.24.17.116.0 ]--
- 236
--[ 2018.11.26.19.24.17.539.0 ]--
- 236
--[ 2018.11.26.19.24.22.140.0 ]--
r 233                 double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
r 238 
--[ 2018.11.26.19.24.25.038.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.28.43.265.0 ]--
+ 235                     
--[ 2018.11.26.19.35.27.591.0 ]--
- 235
--[ 2018.11.26.19.35.33.080.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.37.09.628.0 ]--
r 234                 if (minDistP.d()  distToPartition){
--[ 2018.11.26.19.37.10.351.0 ]--
r 234                 if (minDistP.d() > distToPartition){
--[ 2018.11.26.19.37.17.034.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.39.14.658.0 ]--
r 234                 if (minDistP.d()  distToPartition){
--[ 2018.11.26.19.39.15.175.0 ]--
r 234                 if (minDistP.d() < distToPartition){
--[ 2018.11.26.19.39.22.865.0 ]--
+ 237                 
--[ 2018.11.26.19.39.32.029.0 ]--
- 242
r 242         kNearestTraversen.right, p, kNearest, k);
--[ 2018.11.26.19.39.33.216.0 ]--
+ 242         kNearestTraverse(n.left, p, kNearest, k);
r 243         kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.39.43.531.0 ]--
- 242
r 242         
--[ 2018.11.26.19.39.45.796.0 ]--
+ 237                 kNearestTraverse(n.left, p, kNearest, k);
r 238         kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.39.45.867.0 ]--
r 238                 kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.39.51.094.0 ]--
r 243 
--[ 2018.11.26.19.39.53.249.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.40.27.623.0 ]--
- 237
--[ 2018.11.26.19.40.29.710.0 ]--
+ 238 
--[ 2018.11.26.19.40.30.847.0 ]--
+ 238                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.40.32.206.0 ]--
- 239
--[ 2018.11.26.19.40.49.413.0 ]--
+ 237                 
--[ 2018.11.26.19.40.57.438.0 ]--
- 239
--[ 2018.11.26.19.41.04.031.0 ]--
r 237 
--[ 2018.11.26.19.41.06.318.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.41.19.929.0 ]--
+ 243 kNearestTraverse(n.right, p, kNearest, k);
+ 244                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.41.19.980.0 ]--
r 243         kNearestTraverse(n.right, p, kNearest, k);
r 244         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.41.22.063.0 ]--
- 245
--[ 2018.11.26.19.41.28.523.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.41.48.004.0 ]--
- 243
r 243 
--[ 2018.11.26.19.41.48.615.0 ]--
- 243
--[ 2018.11.26.19.41.51.792.0 ]--
r 237 \
--[ 2018.11.26.19.41.52.615.0 ]--
r 237 
--[ 2018.11.26.19.41.52.814.0 ]--
- 237
--[ 2018.11.26.19.42.20.164.0 ]--
+ 222             
--[ 2018.11.26.19.42.42.222.0 ]--
+ 243         
--[ 2018.11.26.19.42.43.326.0 ]--
+ 243                         kNearestTraverse(n.right, p, kNearest, k);
r 244                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.42.43.380.0 ]--
r 243         kNearestTraverse(n.right, p, kNearest, k);
r 244         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.42.49.907.0 ]--
+ 238                               kNearestTraverse(n.right, p, kNearest, k);
r 239                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.42.49.956.0 ]--
r 238                 kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.42.51.237.0 ]--
- 239
--[ 2018.11.26.19.42.51.652.0 ]--
- 239
--[ 2018.11.26.19.42.52.649.0 ]--
+ 239             }
--[ 2018.11.26.19.42.54.520.0 ]--
- 238
--[ 2018.11.26.19.42.56.409.0 ]--
- 236
--[ 2018.11.26.19.42.58.408.0 ]--
- 232
--[ 2018.11.26.19.42.59.754.0 ]--
- 231
--[ 2018.11.26.19.43.14.183.0 ]--
- 233
r 233 
--[ 2018.11.26.19.43.15.495.0 ]--
- 233
--[ 2018.11.26.19.43.17.130.0 ]--
+ 233 
--[ 2018.11.26.19.43.17.843.0 ]--
+ 233                 if (minDistP.d() < distToPartition){
r 234                 }
--[ 2018.11.26.19.43.22.962.0 ]--
- 230
- 230
- 230
- 230
r 231             } 
--[ 2018.11.26.19.43.26.016.0 ]--
- 231
r 231             }
--[ 2018.11.26.19.43.27.838.0 ]--
+ 234         
--[ 2018.11.26.19.43.28.637.0 ]--
+ 234         else {
+ 235                 double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
+ 236                 if (minDistP.d() < distToPartition){
+ 237                 }
r 238             }
--[ 2018.11.26.19.43.28.710.0 ]--
r 235             double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
r 236             if (minDistP.d() < distToPartition){
r 237             }
r 238         }
--[ 2018.11.26.19.43.32.919.0 ]--
r 234          {
--[ 2018.11.26.19.43.34.290.0 ]--
r 234         i {
--[ 2018.11.26.19.43.34.487.0 ]--
r 234         if {
--[ 2018.11.26.19.43.37.173.0 ]--
r 238         
--[ 2018.11.26.19.43.39.007.0 ]--
r 234         if 
--[ 2018.11.26.19.43.39.164.0 ]--
r 234         if
--[ 2018.11.26.19.43.39.359.0 ]--
r 234         i
--[ 2018.11.26.19.43.39.483.0 ]--
r 234         
--[ 2018.11.26.19.43.43.898.0 ]--
r 235         double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
r 236         if (minDistP.d() < distToPartition){
--[ 2018.11.26.19.43.46.069.0 ]--
r 237         }
--[ 2018.11.26.19.43.51.536.0 ]--
+ 237         
--[ 2018.11.26.19.43.57.952.0 ]--
+ 233         
--[ 2018.11.26.19.43.59.434.0 ]--
- 235
--[ 2018.11.26.19.43.59.596.0 ]--
r 234         //TODO: Prunin
--[ 2018.11.26.19.44.00.597.0 ]--
r 234         //TODO: Pruning
--[ 2018.11.26.19.44.00.814.0 ]--
r 234         //TODO: Pruning 
--[ 2018.11.26.19.44.51.459.0 ]--
r 236         if (kd() < distToPartition){
--[ 2018.11.26.19.44.52.070.0 ]--
r 236         if (kNd() < distToPartition){
--[ 2018.11.26.19.44.52.509.0 ]--
r 236         if (kNearestd() < distToPartition){
--[ 2018.11.26.19.44.53.706.0 ]--
r 236         if (kNearest.d() < distToPartition){
--[ 2018.11.26.19.44.54.097.0 ]--
r 236         if (kNearest.md() < distToPartition){
--[ 2018.11.26.19.44.54.209.0 ]--
r 236         if (kNearest.mad() < distToPartition){
--[ 2018.11.26.19.44.54.432.0 ]--
r 236         if (kNearest.maxd() < distToPartition){
--[ 2018.11.26.19.44.55.260.0 ]--
r 236         if (kNearest.max.d() < distToPartition){
--[ 2018.11.26.19.45.06.837.0 ]--
r 236         if (kNearest.max().d() < distToPartition){
--[ 2018.11.26.19.45.25.311.0 ]--
+ 237         kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.45.25.360.0 ]--
r 237             kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.46.32.984.0 ]--
r 236         if ( distToPartition){
--[ 2018.11.26.19.46.34.876.0 ]--
r 236         if (distToPartition){
--[ 2018.11.26.19.46.37.109.0 ]--
r 236         if (distToPartition ){
--[ 2018.11.26.19.46.37.347.0 ]--
r 236         if (distToPartition <){
--[ 2018.11.26.19.46.37.940.0 ]--
r 236         if (distToPartition <0){
--[ 2018.11.26.19.46.38.143.0 ]--
r 236         if (distToPartition <0 ){
--[ 2018.11.26.19.46.40.956.0 ]--
r 236         if (distToPartition < 0 ){
--[ 2018.11.26.19.46.43.038.0 ]--
- 238
--[ 2018.11.26.19.47.10.850.0 ]--
r 237             kNearestTraverse(n.r, p, kNearest, k);
--[ 2018.11.26.19.47.10.980.0 ]--
r 237             kNearestTraverse(n.ri, p, kNearest, k);
--[ 2018.11.26.19.47.11.088.0 ]--
r 237             kNearestTraverse(n.rig, p, kNearest, k);
--[ 2018.11.26.19.47.11.197.0 ]--
r 237             kNearestTraverse(n.righ, p, kNearest, k);
--[ 2018.11.26.19.47.11.296.0 ]--
r 237             kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.47.18.928.0 ]--
r 238         } 
--[ 2018.11.26.19.47.20.006.0 ]--
r 238         } e
--[ 2018.11.26.19.47.20.332.0 ]--
r 238         } el
--[ 2018.11.26.19.47.20.467.0 ]--
r 238         } els
--[ 2018.11.26.19.47.20.596.0 ]--
r 238         } else
--[ 2018.11.26.19.47.21.505.0 ]--
r 238         } else 
--[ 2018.11.26.19.47.21.942.0 ]--
r 238         } else {
--[ 2018.11.26.19.47.22.129.0 ]--
r 238         } else {}
--[ 2018.11.26.19.47.22.884.0 ]--
+ 238         } else {
r 239         }
--[ 2018.11.26.19.47.22.930.0 ]--
+ 239             
--[ 2018.11.26.19.47.35.088.0 ]--
+ 239                     kNearestTraverse(n.left, p, kNearest, k);
r 240 
--[ 2018.11.26.19.47.35.136.0 ]--
r 239             kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.47.36.642.0 ]--
- 240
--[ 2018.11.26.19.48.07.114.0 ]--
+ 238             
--[ 2018.11.26.19.48.07.976.0 ]--
r 238             i
--[ 2018.11.26.19.48.08.116.0 ]--
r 238             if
--[ 2018.11.26.19.48.08.215.0 ]--
r 238             if 
--[ 2018.11.26.19.48.08.764.0 ]--
r 238             if ()
--[ 2018.11.26.19.48.20.680.0 ]--
r 238             if (m)
--[ 2018.11.26.19.48.20.809.0 ]--
r 238             if (mi)
--[ 2018.11.26.19.48.20.927.0 ]--
r 238             if (min)
--[ 2018.11.26.19.48.21.489.0 ]--
r 238             if (mi)
--[ 2018.11.26.19.48.21.848.0 ]--
r 238             if (m)
--[ 2018.11.26.19.48.23.058.0 ]--
r 238             if ()
--[ 2018.11.26.19.48.23.714.0 ]--
r 238             if (k)
--[ 2018.11.26.19.48.24.491.0 ]--
r 238             if (kN)
--[ 2018.11.26.19.48.25.000.0 ]--
r 238             if (kNearest)
--[ 2018.11.26.19.48.25.722.0 ]--
r 238             if (kNearest.)
--[ 2018.11.26.19.48.26.520.0 ]--
r 238             if (kNearest.m)
--[ 2018.11.26.19.48.26.611.0 ]--
r 238             if (kNearest.ma)
--[ 2018.11.26.19.48.27.146.0 ]--
r 238             if (kNearest.max)
--[ 2018.11.26.19.48.27.543.0 ]--
r 238             if (kNearest.max())
--[ 2018.11.26.19.48.28.212.0 ]--
r 238             if (kNearest.max().)
--[ 2018.11.26.19.48.29.758.0 ]--
r 238             if (kNearest.max().d)
--[ 2018.11.26.19.48.34.533.0 ]--
r 238             if (kNearest.max().d())
--[ 2018.11.26.19.48.35.394.0 ]--
r 238             if (kNearest.max().d() )
--[ 2018.11.26.19.48.37.326.0 ]--
r 238             if (kNearest.max().d() >)
--[ 2018.11.26.19.48.37.836.0 ]--
r 238             if (kNearest.max().d() > )
--[ 2018.11.26.19.48.38.867.0 ]--
r 238             if (kNearest.max().d() >)
--[ 2018.11.26.19.48.39.039.0 ]--
r 238             if (kNearest.max().d() )
--[ 2018.11.26.19.48.39.595.0 ]--
r 238             if (kNearest.max().d() <)
--[ 2018.11.26.19.48.39.737.0 ]--
r 238             if (kNearest.max().d() < )
--[ 2018.11.26.19.48.41.808.0 ]--
r 238             if (kNearest.max().d() < n)
--[ 2018.11.26.19.48.42.829.0 ]--
r 238             if (kNearest.max().d() < n.)
--[ 2018.11.26.19.48.47.003.0 ]--
r 238             if (kNearest.max().d() < n.p)
--[ 2018.11.26.19.48.47.228.0 ]--
r 238             if (kNearest.max().d() < n.p.)
--[ 2018.11.26.19.48.47.783.0 ]--
r 238             if (kNearest.max().d() < n.p.d)
--[ 2018.11.26.19.48.49.914.0 ]--
r 238             if (kNearest.max().d() < n.p.)
--[ 2018.11.26.19.48.50.079.0 ]--
r 238             if (kNearest.max().d() < n.p)
--[ 2018.11.26.19.48.51.245.0 ]--
r 238             if (kNearest.max().d() < n.)
--[ 2018.11.26.19.48.51.530.0 ]--
r 238             if (kNearest.max().d() < n)
--[ 2018.11.26.19.48.51.711.0 ]--
r 238             if (kNearest.max().d() < )
--[ 2018.11.26.19.48.53.073.0 ]--
r 238             if (kNearest.max().d() < d)
--[ 2018.11.26.19.48.53.820.0 ]--
r 238             if (kNearest.max().d() < distToPartition)
--[ 2018.11.26.19.48.56.104.0 ]--
r 238             if (kNearest.max().d() < distToPartition) 
--[ 2018.11.26.19.48.56.853.0 ]--
r 238             if (kNearest.max().d() < distToPartition) {
--[ 2018.11.26.19.48.57.021.0 ]--
r 238             if (kNearest.max().d() < distToPartition) {}
--[ 2018.11.26.19.48.57.568.0 ]--
+ 238             if (kNearest.max().d() < distToPartition) {
r 239             }
--[ 2018.11.26.19.48.57.610.0 ]--
+ 239                 
--[ 2018.11.26.19.49.03.545.0 ]--
+ 239                         kNearestTraverse(n.right, p, kNearest, k);
r 240 
--[ 2018.11.26.19.49.03.593.0 ]--
r 239                 kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.49.04.517.0 ]--
- 240
--[ 2018.11.26.19.49.08.776.0 ]--
r 239                 kNearestTraverse(n.l, p, kNearest, k);
--[ 2018.11.26.19.49.08.837.0 ]--
r 239                 kNearestTraverse(n.lr, p, kNearest, k);
--[ 2018.11.26.19.49.09.660.0 ]--
r 239                 kNearestTraverse(n.l, p, kNearest, k);
--[ 2018.11.26.19.49.10.043.0 ]--
r 239                 kNearestTraverse(n.le, p, kNearest, k);
--[ 2018.11.26.19.49.10.238.0 ]--
r 239                 kNearestTraverse(n.lef, p, kNearest, k);
--[ 2018.11.26.19.49.10.362.0 ]--
r 239                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.49.22.041.0 ]--
+ 243             
--[ 2018.11.26.19.49.29.222.0 ]--
+ 243                         if (kNearest.max().d() < distToPartition) {
r 244                 kNearestTraverse(n.left, p, kNearest, k);
--[ 2018.11.26.19.49.29.379.0 ]--
r 243             if (kNearest.max().d() < distToPartition) {
--[ 2018.11.26.19.49.48.794.0 ]--
r 244                 kNearestTraverse(n.r, p, kNearest, k);
--[ 2018.11.26.19.49.48.879.0 ]--
r 244                 kNearestTraverse(n.ri, p, kNearest, k);
--[ 2018.11.26.19.49.49.007.0 ]--
r 244                 kNearestTraverse(n.rig, p, kNearest, k);
--[ 2018.11.26.19.49.49.084.0 ]--
r 244                 kNearestTraverse(n.righ, p, kNearest, k);
--[ 2018.11.26.19.49.49.232.0 ]--
r 244                 kNearestTraverse(n.right, p, kNearest, k);
--[ 2018.11.26.19.49.52.860.0 ]--
- 247
- 247
--[ 2018.11.26.19.49.57.076.0 ]--
r 246         }
--[ 2018.11.26.19.49.57.224.0 ]--
r 245             }
--[ 2018.11.26.19.50.01.148.0 ]--
r 222 
r 233 
r 234         //TODO: Pruning
--[ 2018.11.26.19.50.03.507.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.50.30.206.0 ]--
r 243             if (kNearest.max().d()  distToPartition) {
--[ 2018.11.26.19.50.31.032.0 ]--
r 243             if (kNearest.max().d() < distToPartition) {
--[ 2018.11.26.19.50.31.862.0 ]--
r 243             if (kNearest.max().d()  distToPartition) {
--[ 2018.11.26.19.50.32.154.0 ]--
r 243             if (kNearest.max().d() > distToPartition) {
--[ 2018.11.26.19.50.35.675.0 ]--
r 238             if (kNearest.max().d()  distToPartition) {
--[ 2018.11.26.19.50.36.748.0 ]--
r 238             if (kNearest.max().d() > distToPartition) {
--[ 2018.11.26.19.50.42.845.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.19.56.52.260.0 ]--
+ 70                             StdOut.println(newNode.p);
+ 82                             StdOut.println(newNode.p);
- 224
r 227             if (distCalc.compare(n.p, minDistP.p()) < 0) {//found a new close enough point!
- 234
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
r 235         kNearestTraverse(n.left, p, kNearest, k);
r 236         kNearestTraverse(n.right, p, kNearest, k);
- 238
- 238
- 238
--[ 2018.11.26.19.56.52.266.0 ]--
UpdateTree (AD): 6 0
+ /.git/logs/refs/remotes/origin/imani
+ /.git/refs/remotes/origin/imani
+ /.git/objects/10/1f0fa032812e8887be2cd2c56fe44ce35bbdc8
+ /.git/objects/7f/b38d11c5a616d59f4cc9ec456cb8b5d6a96aa6
+ /.git/objects/99/d826b1d8eb1c56467270fcc94fe7f1eb94d784
+ /.git/objects/bf/136fe248c0e7167064ca052960eb024cf7d369

--[ 2018.11.26.19.57.02.151.0 ]--
- 70
- 81
+ 222 
r 226             if (distCalc.compare(n.p, minDistP.p()) < 0) { //found a new close enough point!
+ 233 
+ 235         double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
+ 236         if (distToPartition < 0 ){
+ 237             kNearestTraverse(n.right, p, kNearest, k);
+ 238             if (kNearest.max().d() > distToPartition) {
+ 239                 kNearestTraverse(n.left, p, kNearest, k);
+ 240             }
+ 241         } else {
+ 242             kNearestTraverse(n.left, p, kNearest, k);
+ 243             if (kNearest.max().d() > distToPartition) {
+ 244                 kNearestTraverse(n.right, p, kNearest, k);
r 245             }
r 246         }
+ 248 
+ 249 
+ 250 
--[ 2018.11.26.19.57.22.008.0 ]--
+ 70                             StdOut.println(newNode.p);
+ 82                             StdOut.println(newNode.p);
- 224
r 227             if (distCalc.compare(n.p, minDistP.p()) < 0) {//found a new close enough point!
- 234
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
- 235
r 235         kNearestTraverse(n.left, p, kNearest, k);
r 236         kNearestTraverse(n.right, p, kNearest, k);
- 238
- 238
- 238
--[ 2018.11.26.19.57.29.995.0 ]--
- 70
- 81
+ 222 
r 226             if (distCalc.compare(n.p, minDistP.p()) < 0) { //found a new close enough point!
+ 233 
+ 235         double distToPartition = n.p.xy(n.dir) - p.xy(n.dir);
+ 236         if (distToPartition < 0 ){
+ 237             kNearestTraverse(n.right, p, kNearest, k);
+ 238             if (kNearest.max().d() > distToPartition) {
+ 239                 kNearestTraverse(n.left, p, kNearest, k);
+ 240             }
+ 241         } else {
+ 242             kNearestTraverse(n.left, p, kNearest, k);
+ 243             if (kNearest.max().d() > distToPartition) {
+ 244                 kNearestTraverse(n.right, p, kNearest, k);
r 245             }
r 246         }
+ 248 
+ 249 
+ 250 
--[ 2018.11.26.20.00.59.570.0 ]--
:/readme.html
r 33 Your name: 
--[ 2018.11.26.20.01.01.355.0 ]--
r 33 Your name: A
--[ 2018.11.26.20.01.01.518.0 ]--
r 33 Your name: Am
--[ 2018.11.26.20.01.01.656.0 ]--
r 33 Your name: Ami
--[ 2018.11.26.20.01.01.793.0 ]--
r 33 Your name: Amis
--[ 2018.11.26.20.01.01.880.0 ]--
r 33 Your name: Amish
--[ 2018.11.26.20.01.01.982.0 ]--
r 33 Your name: Amish 
--[ 2018.11.26.20.01.02.217.0 ]--
r 33 Your name: Amish M
--[ 2018.11.26.20.01.02.427.0 ]--
r 33 Your name: Amish Mu
--[ 2018.11.26.20.01.02.585.0 ]--
r 33 Your name: Amish Mus
--[ 2018.11.26.20.01.03.014.0 ]--
r 33 Your name: Amish Mu
--[ 2018.11.26.20.01.03.108.0 ]--
r 33 Your name: Amish M
--[ 2018.11.26.20.01.03.545.0 ]--
r 33 Your name: Amish Mi
--[ 2018.11.26.20.01.03.691.0 ]--
r 33 Your name: Amish Mis
--[ 2018.11.26.20.01.03.799.0 ]--
r 33 Your name: Amish Mish
--[ 2018.11.26.20.01.03.994.0 ]--
r 33 Your name: Amish Mishr
--[ 2018.11.26.20.01.04.232.0 ]--
r 33 Your name: Amish Mishra
--[ 2018.11.26.20.01.07.298.0 ]--
r 33 Your name: Amish Mishra,
--[ 2018.11.26.20.01.07.463.0 ]--
r 33 Your name: Amish Mishra, 
--[ 2018.11.26.20.01.07.736.0 ]--
r 33 Your name: Amish Mishra, C
--[ 2018.11.26.20.01.07.851.0 ]--
r 33 Your name: Amish Mishra, CH
--[ 2018.11.26.20.01.08.013.0 ]--
r 33 Your name: Amish Mishra, CHe
--[ 2018.11.26.20.01.08.697.0 ]--
r 33 Your name: Amish Mishra, CH
--[ 2018.11.26.20.01.08.842.0 ]--
r 33 Your name: Amish Mishra, C
--[ 2018.11.26.20.01.09.103.0 ]--
r 33 Your name: Amish Mishra, Ch
--[ 2018.11.26.20.01.09.195.0 ]--
r 33 Your name: Amish Mishra, Che
--[ 2018.11.26.20.01.09.362.0 ]--
r 33 Your name: Amish Mishra, Ches
--[ 2018.11.26.20.01.09.477.0 ]--
r 33 Your name: Amish Mishra, Chest
--[ 2018.11.26.20.01.09.602.0 ]--
r 33 Your name: Amish Mishra, Cheste
--[ 2018.11.26.20.01.09.710.0 ]--
r 33 Your name: Amish Mishra, Chester
--[ 2018.11.26.20.01.09.867.0 ]--
r 33 Your name: Amish Mishra, Chester 
--[ 2018.11.26.20.01.10.307.0 ]--
r 33 Your name: Amish Mishra, Chester C
--[ 2018.11.26.20.01.10.483.0 ]--
r 33 Your name: Amish Mishra, Chester CH
--[ 2018.11.26.20.01.10.645.0 ]--
r 33 Your name: Amish Mishra, Chester CHa
--[ 2018.11.26.20.01.10.736.0 ]--
r 33 Your name: Amish Mishra, Chester CHan
--[ 2018.11.26.20.01.11.345.0 ]--
r 33 Your name: Amish Mishra, Chester CHa
--[ 2018.11.26.20.01.11.512.0 ]--
r 33 Your name: Amish Mishra, Chester CH
--[ 2018.11.26.20.01.11.747.0 ]--
r 33 Your name: Amish Mishra, Chester C
--[ 2018.11.26.20.01.12.203.0 ]--
r 33 Your name: Amish Mishra, Chester Ch
--[ 2018.11.26.20.01.12.318.0 ]--
r 33 Your name: Amish Mishra, Chester Cha
--[ 2018.11.26.20.01.12.435.0 ]--
r 33 Your name: Amish Mishra, Chester Chan
--[ 2018.11.26.20.01.13.114.0 ]--
r 33 Your name: Amish Mishra, Chester Chan,
--[ 2018.11.26.20.01.13.231.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, 
--[ 2018.11.26.20.01.13.649.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, I
--[ 2018.11.26.20.01.13.846.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Im
--[ 2018.11.26.20.01.13.934.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Ima
--[ 2018.11.26.20.01.13.996.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Iman
--[ 2018.11.26.20.01.14.067.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani
--[ 2018.11.26.20.01.14.176.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani 
--[ 2018.11.26.20.01.14.336.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani M
--[ 2018.11.26.20.01.14.489.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Mu
--[ 2018.11.26.20.01.14.568.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Muy
--[ 2018.11.26.20.01.14.704.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Muya
--[ 2018.11.26.20.01.16.343.0 ]--
r 35 Operating system: 
--[ 2018.11.26.20.01.16.585.0 ]--
r 35 Operating system: O
--[ 2018.11.26.20.01.16.756.0 ]--
r 35 Operating system: OS
--[ 2018.11.26.20.01.17.359.0 ]--
r 35 Operating system: O
--[ 2018.11.26.20.01.17.495.0 ]--
r 35 Operating system: 
--[ 2018.11.26.20.01.18.324.0 ]--
r 35 Operating system: W
--[ 2018.11.26.20.01.18.418.0 ]--
r 35 Operating system: Wi
--[ 2018.11.26.20.01.18.531.0 ]--
r 35 Operating system: Win
--[ 2018.11.26.20.01.18.695.0 ]--
r 35 Operating system: Wins
--[ 2018.11.26.20.01.19.042.0 ]--
r 35 Operating system: Win
--[ 2018.11.26.20.01.19.147.0 ]--
r 35 Operating system: Wind
--[ 2018.11.26.20.01.19.997.0 ]--
r 35 Operating system: Windo
--[ 2018.11.26.20.01.20.141.0 ]--
r 35 Operating system: Windoe
--[ 2018.11.26.20.01.20.601.0 ]--
r 35 Operating system: Windo
--[ 2018.11.26.20.01.20.699.0 ]--
r 35 Operating system: Window
--[ 2018.11.26.20.01.20.834.0 ]--
r 35 Operating system: Windows
--[ 2018.11.26.20.01.21.523.0 ]--
r 35 Operating system: Windows 
--[ 2018.11.26.20.01.21.605.0 ]--
r 35 Operating system: Windows 1
--[ 2018.11.26.20.01.21.747.0 ]--
r 35 Operating system: Windows 10
--[ 2018.11.26.20.01.22.073.0 ]--
r 35 Operating system: Windows 10,
--[ 2018.11.26.20.01.22.258.0 ]--
r 35 Operating system: Windows 10, 
--[ 2018.11.26.20.01.22.393.0 ]--
r 35 Operating system: Windows 10, a
--[ 2018.11.26.20.01.22.503.0 ]--
r 35 Operating system: Windows 10, an
--[ 2018.11.26.20.01.22.607.0 ]--
r 35 Operating system: Windows 10, and
--[ 2018.11.26.20.01.22.737.0 ]--
r 35 Operating system: Windows 10, and 
--[ 2018.11.26.20.01.23.075.0 ]--
r 35 Operating system: Windows 10, and M
--[ 2018.11.26.20.01.23.444.0 ]--
r 35 Operating system: Windows 10, and Ma
--[ 2018.11.26.20.01.24.242.0 ]--
r 35 Operating system: Windows 10, and Mac
--[ 2018.11.26.20.01.24.465.0 ]--
r 35 Operating system: Windows 10, and Mac 
--[ 2018.11.26.20.01.24.951.0 ]--
r 35 Operating system: Windows 10, and Mac O
--[ 2018.11.26.20.01.25.082.0 ]--
r 35 Operating system: Windows 10, and Mac OS
--[ 2018.11.26.20.01.29.278.0 ]--
r 37 Lab computer or your own computer: 
--[ 2018.11.26.20.01.30.338.0 ]--
r 37 Lab computer or your own computer: P
--[ 2018.11.26.20.01.30.533.0 ]--
r 37 Lab computer or your own computer: Pe
--[ 2018.11.26.20.01.30.636.0 ]--
r 37 Lab computer or your own computer: Per
--[ 2018.11.26.20.01.30.858.0 ]--
r 37 Lab computer or your own computer: Pers
--[ 2018.11.26.20.01.30.911.0 ]--
r 37 Lab computer or your own computer: Perso
--[ 2018.11.26.20.01.31.039.0 ]--
r 37 Lab computer or your own computer: Person
--[ 2018.11.26.20.01.31.139.0 ]--
r 37 Lab computer or your own computer: Persone
--[ 2018.11.26.20.01.31.708.0 ]--
r 37 Lab computer or your own computer: Person
--[ 2018.11.26.20.01.31.822.0 ]--
r 37 Lab computer or your own computer: Persona
--[ 2018.11.26.20.01.31.955.0 ]--
r 37 Lab computer or your own computer: Personal
--[ 2018.11.26.20.01.32.052.0 ]--
r 37 Lab computer or your own computer: Personal 
--[ 2018.11.26.20.01.32.829.0 ]--
r 37 Lab computer or your own computer: Personal c
--[ 2018.11.26.20.01.32.922.0 ]--
r 37 Lab computer or your own computer: Personal co
--[ 2018.11.26.20.01.33.040.0 ]--
r 37 Lab computer or your own computer: Personal com
--[ 2018.11.26.20.01.33.209.0 ]--
r 37 Lab computer or your own computer: Personal comp
--[ 2018.11.26.20.01.33.397.0 ]--
r 37 Lab computer or your own computer: Personal compu
--[ 2018.11.26.20.01.33.520.0 ]--
r 37 Lab computer or your own computer: Personal comput
--[ 2018.11.26.20.01.33.672.0 ]--
r 37 Lab computer or your own computer: Personal compute
--[ 2018.11.26.20.01.33.778.0 ]--
r 37 Lab computer or your own computer: Personal computer
--[ 2018.11.26.20.01.33.952.0 ]--
r 37 Lab computer or your own computer: Personal computers
--[ 2018.11.26.20.01.36.561.0 ]--
r 39 Approx hours to complete assignment: 
--[ 2018.11.26.20.02.07.161.0 ]--
r 39 Approx hours to complete assignment: 1
--[ 2018.11.26.20.02.07.263.0 ]--
r 39 Approx hours to complete assignment: 10
--[ 2018.11.26.20.02.07.423.0 ]--
r 39 Approx hours to complete assignment: 10 
--[ 2018.11.26.20.02.07.794.0 ]--
r 39 Approx hours to complete assignment: 10 h
--[ 2018.11.26.20.02.07.937.0 ]--
r 39 Approx hours to complete assignment: 10 ho
--[ 2018.11.26.20.02.08.009.0 ]--
r 39 Approx hours to complete assignment: 10 hou
--[ 2018.11.26.20.02.08.163.0 ]--
r 39 Approx hours to complete assignment: 10 hour
--[ 2018.11.26.20.02.08.311.0 ]--
r 39 Approx hours to complete assignment: 10 hours
--[ 2018.11.26.20.02.10.319.0 ]--
r 41 Partner's name (if applicable): 
--[ 2018.11.26.20.02.13.283.0 ]--
r 41 Partner's name (if applicable): T
--[ 2018.11.26.20.02.13.450.0 ]--
r 41 Partner's name (if applicable): Te
--[ 2018.11.26.20.02.13.648.0 ]--
r 41 Partner's name (if applicable): Tea
--[ 2018.11.26.20.02.13.765.0 ]--
r 41 Partner's name (if applicable): Team
--[ 2018.11.26.20.02.13.943.0 ]--
r 41 Partner's name (if applicable): Team 
--[ 2018.11.26.20.02.15.052.0 ]--
r 41 Partner's name (if applicable): Team p
--[ 2018.11.26.20.02.15.184.0 ]--
r 41 Partner's name (if applicable): Team pr
--[ 2018.11.26.20.02.15.818.0 ]--
r 41 Partner's name (if applicable): Team prj
--[ 2018.11.26.20.02.15.938.0 ]--
r 41 Partner's name (if applicable): Team prje
--[ 2018.11.26.20.02.16.175.0 ]--
r 41 Partner's name (if applicable): Team prjec
--[ 2018.11.26.20.02.16.523.0 ]--
r 41 Partner's name (if applicable): Team prje
--[ 2018.11.26.20.02.16.711.0 ]--
r 41 Partner's name (if applicable): Team prj
--[ 2018.11.26.20.02.16.838.0 ]--
r 41 Partner's name (if applicable): Team pr
--[ 2018.11.26.20.02.17.374.0 ]--
r 41 Partner's name (if applicable): Team pro
--[ 2018.11.26.20.02.17.498.0 ]--
r 41 Partner's name (if applicable): Team pror
--[ 2018.11.26.20.02.18.660.0 ]--
r 41 Partner's name (if applicable): Team pro
--[ 2018.11.26.20.02.18.845.0 ]--
r 41 Partner's name (if applicable): Team proj
--[ 2018.11.26.20.02.18.939.0 ]--
r 41 Partner's name (if applicable): Team proje
--[ 2018.11.26.20.02.19.129.0 ]--
r 41 Partner's name (if applicable): Team projec
--[ 2018.11.26.20.02.19.742.0 ]--
r 41 Partner's name (if applicable): Team projecy
--[ 2018.11.26.20.02.20.599.0 ]--
r 41 Partner's name (if applicable): Team projec
--[ 2018.11.26.20.02.20.754.0 ]--
r 41 Partner's name (if applicable): Team project
--[ 2018.11.26.20.02.22.449.0 ]--
r 43 TA's or Tutor's name (if received help): 
--[ 2018.11.26.20.02.23.004.0 ]--
r 43 TA's or Tutor's name (if received help): E
--[ 2018.11.26.20.02.23.176.0 ]--
r 43 TA's or Tutor's name (if received help): Ed
--[ 2018.11.26.20.02.23.349.0 ]--
r 43 TA's or Tutor's name (if received help): Edr
--[ 2018.11.26.20.02.23.464.0 ]--
r 43 TA's or Tutor's name (if received help): Edri
--[ 2018.11.26.20.02.23.566.0 ]--
r 43 TA's or Tutor's name (if received help): Edric
--[ 2018.11.26.20.02.23.711.0 ]--
r 43 TA's or Tutor's name (if received help): Edric 
--[ 2018.11.26.20.02.23.971.0 ]--
r 43 TA's or Tutor's name (if received help): Edric Y
--[ 2018.11.26.20.02.24.196.0 ]--
r 43 TA's or Tutor's name (if received help): Edric Yu
--[ 2018.11.26.20.02.25.949.0 ]--
r 45 Did you receive help from your instructor? 
--[ 2018.11.26.20.02.37.143.0 ]--
r 45 Did you receive help from your instructor? y
--[ 2018.11.26.20.02.37.219.0 ]--
r 45 Did you receive help from your instructor? ye
--[ 2018.11.26.20.02.37.397.0 ]--
r 45 Did you receive help from your instructor? yes
--[ 2018.11.26.20.02.37.560.0 ]--
r 45 Did you receive help from your instructor? yes,
--[ 2018.11.26.20.02.37.714.0 ]--
r 45 Did you receive help from your instructor? yes, 
--[ 2018.11.26.20.02.37.840.0 ]--
r 45 Did you receive help from your instructor? yes, a
--[ 2018.11.26.20.02.38.055.0 ]--
r 45 Did you receive help from your instructor? yes, at
--[ 2018.11.26.20.02.38.193.0 ]--
r 45 Did you receive help from your instructor? yes, at 
--[ 2018.11.26.20.02.38.515.0 ]--
r 45 Did you receive help from your instructor? yes, at s
--[ 2018.11.26.20.02.38.575.0 ]--
r 45 Did you receive help from your instructor? yes, at so
--[ 2018.11.26.20.02.38.690.0 ]--
r 45 Did you receive help from your instructor? yes, at som
--[ 2018.11.26.20.02.38.822.0 ]--
r 45 Did you receive help from your instructor? yes, at some
--[ 2018.11.26.20.02.38.895.0 ]--
r 45 Did you receive help from your instructor? yes, at some 
--[ 2018.11.26.20.02.39.072.0 ]--
r 45 Did you receive help from your instructor? yes, at some p
--[ 2018.11.26.20.02.39.122.0 ]--
r 45 Did you receive help from your instructor? yes, at some po
--[ 2018.11.26.20.02.40.227.0 ]--
r 45 Did you receive help from your instructor? yes, at some poi
--[ 2018.11.26.20.02.40.406.0 ]--
r 45 Did you receive help from your instructor? yes, at some poin
--[ 2018.11.26.20.02.40.499.0 ]--
r 45 Did you receive help from your instructor? yes, at some point
--[ 2018.11.26.20.02.41.710.0 ]--
r 45 Did you receive help from your instructor? yes, at some point.
--[ 2018.11.26.20.08.40.846.0 ]--
r 56 E
--[ 2018.11.26.20.08.41.073.0 ]--
r 56 Ea
--[ 2018.11.26.20.08.41.220.0 ]--
r 56 Eac
--[ 2018.11.26.20.08.41.407.0 ]--
r 56 Each
--[ 2018.11.26.20.08.41.494.0 ]--
r 56 Each 
--[ 2018.11.26.20.08.42.959.0 ]--
r 56 Each N
--[ 2018.11.26.20.08.43.023.0 ]--
r 56 Each No
--[ 2018.11.26.20.08.43.558.0 ]--
r 56 Each N
--[ 2018.11.26.20.08.43.685.0 ]--
r 56 Each 
--[ 2018.11.26.20.08.44.002.0 ]--
r 56 Each n
--[ 2018.11.26.20.08.44.112.0 ]--
r 56 Each no
--[ 2018.11.26.20.08.44.207.0 ]--
r 56 Each nof
--[ 2018.11.26.20.08.44.711.0 ]--
r 56 Each no
--[ 2018.11.26.20.08.45.146.0 ]--
r 56 Each nod
--[ 2018.11.26.20.08.45.256.0 ]--
r 56 Each node
--[ 2018.11.26.20.08.45.407.0 ]--
r 56 Each node 
--[ 2018.11.26.20.08.45.748.0 ]--
r 56 Each node w
--[ 2018.11.26.20.08.45.875.0 ]--
r 56 Each node wh
--[ 2018.11.26.20.08.46.128.0 ]--
r 56 Each node w
--[ 2018.11.26.20.08.46.306.0 ]--
r 56 Each node 
--[ 2018.11.26.20.08.46.997.0 ]--
r 56 Each node h
--[ 2018.11.26.20.08.47.109.0 ]--
r 56 Each node he
--[ 2018.11.26.20.08.47.262.0 ]--
r 56 Each node hel
--[ 2018.11.26.20.08.47.403.0 ]--
r 56 Each node held
--[ 2018.11.26.20.08.47.563.0 ]--
r 56 Each node held 
--[ 2018.11.26.20.08.47.656.0 ]--
r 56 Each node held t
--[ 2018.11.26.20.08.47.776.0 ]--
r 56 Each node held th
--[ 2018.11.26.20.08.47.854.0 ]--
r 56 Each node held the
--[ 2018.11.26.20.08.47.950.0 ]--
r 56 Each node held the 
--[ 2018.11.26.20.08.49.780.0 ]--
r 56 Each node held the
--[ 2018.11.26.20.08.50.091.0 ]--
r 56 Each node held th
--[ 2018.11.26.20.08.50.213.0 ]--
r 56 Each node held t
--[ 2018.11.26.20.08.50.419.0 ]--
r 56 Each node held 
--[ 2018.11.26.20.08.50.829.0 ]--
r 56 Each node held i
--[ 2018.11.26.20.08.50.911.0 ]--
r 56 Each node held it
--[ 2018.11.26.20.08.51.639.0 ]--
r 56 Each node held it'
--[ 2018.11.26.20.08.51.713.0 ]--
r 56 Each node held it's
--[ 2018.11.26.20.08.51.817.0 ]--
r 56 Each node held it's 
--[ 2018.11.26.20.08.51.958.0 ]--
r 56 Each node held it's o
--[ 2018.11.26.20.08.53.215.0 ]--
r 56 Each node held it's ow
--[ 2018.11.26.20.08.53.309.0 ]--
r 56 Each node held it's own
--[ 2018.11.26.20.08.53.408.0 ]--
r 56 Each node held it's own 
--[ 2018.11.26.20.08.53.996.0 ]--
r 56 Each node held it's own p
--[ 2018.11.26.20.08.54.092.0 ]--
r 56 Each node held it's own po
--[ 2018.11.26.20.08.54.307.0 ]--
r 56 Each node held it's own poi
--[ 2018.11.26.20.08.54.520.0 ]--
r 56 Each node held it's own poin
--[ 2018.11.26.20.08.54.615.0 ]--
r 56 Each node held it's own point
--[ 2018.11.26.20.08.54.711.0 ]--
r 56 Each node held it's own point,
--[ 2018.11.26.20.08.54.842.0 ]--
r 56 Each node held it's own point, 
--[ 2018.11.26.20.08.55.098.0 ]--
r 56 Each node held it's own point, i
--[ 2018.11.26.20.08.55.392.0 ]--
r 56 Each node held it's own point, 
--[ 2018.11.26.20.08.55.534.0 ]--
r 56 Each node held it's own point,
--[ 2018.11.26.20.08.55.690.0 ]--
r 56 Each node held it's own point
--[ 2018.11.26.20.08.55.822.0 ]--
r 56 Each node held it's own poin
--[ 2018.11.26.20.08.55.963.0 ]--
r 56 Each node held it's own poi
--[ 2018.11.26.20.08.56.100.0 ]--
r 56 Each node held it's own po
--[ 2018.11.26.20.08.56.354.0 ]--
r 56 Each node held it's own pos
--[ 2018.11.26.20.08.56.453.0 ]--
r 56 Each node held it's own posi
--[ 2018.11.26.20.08.56.595.0 ]--
r 56 Each node held it's own posit
--[ 2018.11.26.20.08.56.674.0 ]--
r 56 Each node held it's own positi
--[ 2018.11.26.20.08.56.808.0 ]--
r 56 Each node held it's own positio
--[ 2018.11.26.20.08.56.889.0 ]--
r 56 Each node held it's own position
--[ 2018.11.26.20.08.57.061.0 ]--
r 56 Each node held it's own position 
--[ 2018.11.26.20.08.57.212.0 ]--
r 56 Each node held it's own position p
--[ 2018.11.26.20.08.57.443.0 ]--
r 56 Each node held it's own position po
--[ 2018.11.26.20.08.57.478.0 ]--
r 56 Each node held it's own position poi
--[ 2018.11.26.20.08.57.798.0 ]--
r 56 Each node held it's own position poin
--[ 2018.11.26.20.08.57.994.0 ]--
r 56 Each node held it's own position point
--[ 2018.11.26.20.08.58.537.0 ]--
r 56 Each node held it's own position point,
--[ 2018.11.26.20.08.58.713.0 ]--
r 56 Each node held it's own position point,t
--[ 2018.11.26.20.08.58.811.0 ]--
r 56 Each node held it's own position point,t 
--[ 2018.11.26.20.08.58.956.0 ]--
r 56 Each node held it's own position point,t e
--[ 2018.11.26.20.08.59.012.0 ]--
r 56 Each node held it's own position point,t eh
--[ 2018.11.26.20.08.59.210.0 ]--
r 56 Each node held it's own position point,t eh 
--[ 2018.11.26.20.08.59.356.0 ]--
r 56 Each node held it's own position point,t eh
--[ 2018.11.26.20.08.59.523.0 ]--
r 56 Each node held it's own position point,t e
--[ 2018.11.26.20.08.59.648.0 ]--
r 56 Each node held it's own position point,t 
--[ 2018.11.26.20.08.59.799.0 ]--
r 56 Each node held it's own position point,t
--[ 2018.11.26.20.08.59.959.0 ]--
r 56 Each node held it's own position point,
--[ 2018.11.26.20.09.00.121.0 ]--
r 56 Each node held it's own position point, 
--[ 2018.11.26.20.09.00.244.0 ]--
r 56 Each node held it's own position point, t
--[ 2018.11.26.20.09.00.335.0 ]--
r 56 Each node held it's own position point, th
--[ 2018.11.26.20.09.00.434.0 ]--
r 56 Each node held it's own position point, the
--[ 2018.11.26.20.09.00.519.0 ]--
r 56 Each node held it's own position point, the 
--[ 2018.11.26.20.09.02.024.0 ]--
r 56 Each node held it's own position point, the v
--[ 2018.11.26.20.09.02.209.0 ]--
r 56 Each node held it's own position point, the val
--[ 2018.11.26.20.09.02.396.0 ]--
r 56 Each node held it's own position point, the valu
--[ 2018.11.26.20.09.02.473.0 ]--
r 56 Each node held it's own position point, the valus
--[ 2018.11.26.20.09.02.590.0 ]--
r 56 Each node held it's own position point, the valuse
--[ 2018.11.26.20.09.03.146.0 ]--
r 56 Each node held it's own position point, the valus
--[ 2018.11.26.20.09.03.265.0 ]--
r 56 Each node held it's own position point, the valu
--[ 2018.11.26.20.09.03.579.0 ]--
r 56 Each node held it's own position point, the value
--[ 2018.11.26.20.09.03.825.0 ]--
r 56 Each node held it's own position point, the value 
--[ 2018.11.26.20.09.03.875.0 ]--
r 56 Each node held it's own position point, the value t
--[ 2018.11.26.20.09.03.978.0 ]--
r 56 Each node held it's own position point, the value th
--[ 2018.11.26.20.09.04.059.0 ]--
r 56 Each node held it's own position point, the value tha
--[ 2018.11.26.20.09.04.151.0 ]--
r 56 Each node held it's own position point, the value that
--[ 2018.11.26.20.09.04.222.0 ]--
r 56 Each node held it's own position point, the value that 
--[ 2018.11.26.20.09.04.380.0 ]--
r 56 Each node held it's own position point, the value that i
--[ 2018.11.26.20.09.04.577.0 ]--
r 56 Each node held it's own position point, the value that it
--[ 2018.11.26.20.09.04.728.0 ]--
r 56 Each node held it's own position point, the value that it 
--[ 2018.11.26.20.09.04.804.0 ]--
r 56 Each node held it's own position point, the value that it w
--[ 2018.11.26.20.09.05.120.0 ]--
r 56 Each node held it's own position point, the value that it wa
--[ 2018.11.26.20.09.05.283.0 ]--
r 56 Each node held it's own position point, the value that it was
--[ 2018.11.26.20.09.05.437.0 ]--
r 56 Each node held it's own position point, the value that it was 
--[ 2018.11.26.20.09.05.614.0 ]--
r 56 Each node held it's own position point, the value that it was a
--[ 2018.11.26.20.09.05.834.0 ]--
r 56 Each node held it's own position point, the value that it was as
--[ 2018.11.26.20.09.06.017.0 ]--
r 56 Each node held it's own position point, the value that it was ass
--[ 2018.11.26.20.09.06.142.0 ]--
r 56 Each node held it's own position point, the value that it was assi
--[ 2018.11.26.20.09.06.306.0 ]--
r 56 Each node held it's own position point, the value that it was assig
--[ 2018.11.26.20.09.06.404.0 ]--
r 56 Each node held it's own position point, the value that it was assign
--[ 2018.11.26.20.09.06.666.0 ]--
r 56 Each node held it's own position point, the value that it was assigne
--[ 2018.11.26.20.09.06.883.0 ]--
r 56 Each node held it's own position point, the value that it was assigned
--[ 2018.11.26.20.09.07.493.0 ]--
r 56 Each node held it's own position point, the value that it was assigned.
--[ 2018.11.26.20.09.07.720.0 ]--
r 56 Each node held it's own position point, the value that it was assigned. 
--[ 2018.11.26.20.09.07.814.0 ]--
r 56 Each node held it's own position point, the value that it was assigned. t
--[ 2018.11.26.20.09.08.235.0 ]--
r 56 Each node held it's own position point, the value that it was assigned. 
--[ 2018.11.26.20.09.08.435.0 ]--
r 56 Each node held it's own position point, the value that it was assigned.
--[ 2018.11.26.20.09.08.545.0 ]--
r 56 Each node held it's own position point, the value that it was assigned
--[ 2018.11.26.20.09.08.900.0 ]--
r 56 Each node held it's own position point, the value that it was assigned,
--[ 2018.11.26.20.09.09.088.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, 
--[ 2018.11.26.20.09.09.220.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, t
--[ 2018.11.26.20.09.09.392.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, te
--[ 2018.11.26.20.09.09.484.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, teh
--[ 2018.11.26.20.09.09.783.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, te
--[ 2018.11.26.20.09.09.944.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, t
--[ 2018.11.26.20.09.10.582.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, 
--[ 2018.11.26.20.09.10.849.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, i
--[ 2018.11.26.20.09.10.956.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it
--[ 2018.11.26.20.09.11.460.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it'
--[ 2018.11.26.20.09.11.632.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's
--[ 2018.11.26.20.09.11.689.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's 
--[ 2018.11.26.20.09.12.150.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's f
--[ 2018.11.26.20.09.12.785.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's 
--[ 2018.11.26.20.09.13.002.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's d
--[ 2018.11.26.20.09.13.154.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's di
--[ 2018.11.26.20.09.13.292.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's dir
--[ 2018.11.26.20.09.13.914.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's dire
--[ 2018.11.26.20.09.14.046.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direc
--[ 2018.11.26.20.09.14.301.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direct
--[ 2018.11.26.20.09.14.351.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's directi
--[ 2018.11.26.20.09.14.495.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's directio
--[ 2018.11.26.20.09.14.582.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direction
--[ 2018.11.26.20.09.14.711.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direction 
--[ 2018.11.26.20.09.15.221.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direction
--[ 2018.11.26.20.09.15.396.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's directio
--[ 2018.11.26.20.09.15.531.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's directi
--[ 2018.11.26.20.09.15.864.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direct
--[ 2018.11.26.20.09.15.986.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's direc
--[ 2018.11.26.20.09.16.108.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's dire
--[ 2018.11.26.20.09.16.228.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's dir
--[ 2018.11.26.20.09.16.375.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's di
--[ 2018.11.26.20.09.16.636.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's d
--[ 2018.11.26.20.09.16.784.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's 
--[ 2018.11.26.20.09.17.259.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's p
--[ 2018.11.26.20.09.17.379.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's pa
--[ 2018.11.26.20.09.17.472.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's par
--[ 2018.11.26.20.09.17.659.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's part
--[ 2018.11.26.20.09.17.771.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's parti
--[ 2018.11.26.20.09.17.880.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partit
--[ 2018.11.26.20.09.17.979.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partiti
--[ 2018.11.26.20.09.18.086.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partitio
--[ 2018.11.26.20.09.18.195.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition
--[ 2018.11.26.20.09.18.298.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition 
--[ 2018.11.26.20.09.18.688.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition d
--[ 2018.11.26.20.09.18.854.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition di
--[ 2018.11.26.20.09.18.948.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition dir
--[ 2018.11.26.20.09.19.180.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition dire
--[ 2018.11.26.20.09.19.356.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direc
--[ 2018.11.26.20.09.19.579.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direct
--[ 2018.11.26.20.09.19.695.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition directi
--[ 2018.11.26.20.09.19.783.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition directio
--[ 2018.11.26.20.09.19.879.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction
--[ 2018.11.26.20.09.20.113.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction,
--[ 2018.11.26.20.09.20.346.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, 
--[ 2018.11.26.20.09.20.520.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, a
--[ 2018.11.26.20.09.20.643.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, an
--[ 2018.11.26.20.09.20.792.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and
--[ 2018.11.26.20.09.20.900.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and 
--[ 2018.11.26.20.09.22.360.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and t
--[ 2018.11.26.20.09.22.470.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and th
--[ 2018.11.26.20.09.22.612.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the
--[ 2018.11.26.20.09.22.765.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the 
--[ 2018.11.26.20.09.23.517.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the n
--[ 2018.11.26.20.09.23.618.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the no
--[ 2018.11.26.20.09.24.126.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the nof
--[ 2018.11.26.20.09.24.411.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the nofe
--[ 2018.11.26.20.09.24.793.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the nof
--[ 2018.11.26.20.09.24.966.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the no
--[ 2018.11.26.20.09.25.057.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the nod
--[ 2018.11.26.20.09.25.148.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node
--[ 2018.11.26.20.09.25.499.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node 
--[ 2018.11.26.20.09.25.683.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node t
--[ 2018.11.26.20.09.25.788.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node to
--[ 2018.11.26.20.09.25.946.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node to 
--[ 2018.11.26.20.09.26.305.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node to
--[ 2018.11.26.20.09.26.476.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node t
--[ 2018.11.26.20.09.26.603.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node 
--[ 2018.11.26.20.09.27.084.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node d
--[ 2018.11.26.20.09.27.250.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node di
--[ 2018.11.26.20.09.27.388.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node dir
--[ 2018.11.26.20.09.27.449.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node dire
--[ 2018.11.26.20.09.27.653.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direc
--[ 2018.11.26.20.09.27.904.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direct
--[ 2018.11.26.20.09.28.060.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node directi
--[ 2018.11.26.20.09.28.455.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direct
--[ 2018.11.26.20.09.28.756.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direct;
--[ 2018.11.26.20.09.29.175.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direct
--[ 2018.11.26.20.09.29.316.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node direc
--[ 2018.11.26.20.09.29.493.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node dire
--[ 2018.11.26.20.09.29.618.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node dir
--[ 2018.11.26.20.09.29.764.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node di
--[ 2018.11.26.20.09.29.936.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node d
--[ 2018.11.26.20.09.30.074.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node 
--[ 2018.11.26.20.09.30.254.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the node
--[ 2018.11.26.20.09.30.640.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the nod
--[ 2018.11.26.20.09.30.830.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the no
--[ 2018.11.26.20.09.30.940.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the n
--[ 2018.11.26.20.09.31.150.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the 
--[ 2018.11.26.20.09.32.159.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and the
--[ 2018.11.26.20.09.32.329.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and th
--[ 2018.11.26.20.09.32.498.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and t
--[ 2018.11.26.20.09.32.627.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and 
--[ 2018.11.26.20.09.32.763.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and r
--[ 2018.11.26.20.09.32.819.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and re
--[ 2018.11.26.20.09.33.023.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and ref
--[ 2018.11.26.20.09.33.183.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and refe
--[ 2018.11.26.20.09.33.282.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and refer
--[ 2018.11.26.20.09.33.487.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and refere
--[ 2018.11.26.20.09.33.659.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and referen
--[ 2018.11.26.20.09.33.851.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and referenc
--[ 2018.11.26.20.09.33.991.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference
--[ 2018.11.26.20.09.34.113.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference 
--[ 2018.11.26.20.09.34.203.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference t
--[ 2018.11.26.20.09.34.291.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to
--[ 2018.11.26.20.09.34.379.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to 
--[ 2018.11.26.20.09.34.461.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to t
--[ 2018.11.26.20.09.34.560.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to th
--[ 2018.11.26.20.09.34.692.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the
--[ 2018.11.26.20.09.34.769.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the 
--[ 2018.11.26.20.09.34.952.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the n
--[ 2018.11.26.20.09.35.012.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the no
--[ 2018.11.26.20.09.35.184.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the nod
--[ 2018.11.26.20.09.35.303.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node
--[ 2018.11.26.20.09.35.507.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node 
--[ 2018.11.26.20.09.35.798.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node d
--[ 2018.11.26.20.09.35.976.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node di
--[ 2018.11.26.20.09.36.081.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node dir
--[ 2018.11.26.20.09.36.238.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node dire
--[ 2018.11.26.20.09.36.491.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node direc
--[ 2018.11.26.20.09.36.854.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node direcl
--[ 2018.11.26.20.09.37.229.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node direc
--[ 2018.11.26.20.09.37.316.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node direct
--[ 2018.11.26.20.09.37.606.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directy
--[ 2018.11.26.20.09.37.677.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directyl
--[ 2018.11.26.20.09.37.963.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directy
--[ 2018.11.26.20.09.38.122.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node direct
--[ 2018.11.26.20.09.38.330.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directl
--[ 2018.11.26.20.09.38.437.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly
--[ 2018.11.26.20.09.38.555.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly 
--[ 2018.11.26.20.09.38.646.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly y
--[ 2018.11.26.20.09.38.700.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly yo
--[ 2018.11.26.20.09.38.822.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly yo 
--[ 2018.11.26.20.09.39.001.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly yo i
--[ 2018.11.26.20.09.39.620.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly yo 
--[ 2018.11.26.20.09.40.272.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly yo
--[ 2018.11.26.20.09.40.453.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly y
--[ 2018.11.26.20.09.40.572.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly 
--[ 2018.11.26.20.09.40.715.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly t
--[ 2018.11.26.20.09.40.943.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly t 
--[ 2018.11.26.20.09.41.038.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly t o
--[ 2018.11.26.20.09.41.337.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly t 
--[ 2018.11.26.20.09.41.490.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly t
--[ 2018.11.26.20.09.41.621.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to
--[ 2018.11.26.20.09.41.773.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to 
--[ 2018.11.26.20.09.41.931.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to i
--[ 2018.11.26.20.09.42.059.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it
--[ 2018.11.26.20.09.42.436.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it'
--[ 2018.11.26.20.09.42.599.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's
--[ 2018.11.26.20.09.42.697.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's 
--[ 2018.11.26.20.09.42.829.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's l
--[ 2018.11.26.20.09.43.013.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's le
--[ 2018.11.26.20.09.43.121.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's lef
--[ 2018.11.26.20.09.43.266.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left
--[ 2018.11.26.20.09.43.386.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left 
--[ 2018.11.26.20.09.43.538.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left a
--[ 2018.11.26.20.09.43.581.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left an
--[ 2018.11.26.20.09.43.863.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and
--[ 2018.11.26.20.09.44.024.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and 
--[ 2018.11.26.20.09.44.233.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and t
--[ 2018.11.26.20.09.44.380.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to
--[ 2018.11.26.20.09.44.576.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to 
--[ 2018.11.26.20.09.44.792.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to i
--[ 2018.11.26.20.09.44.920.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to it
--[ 2018.11.26.20.09.45.769.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to it'
--[ 2018.11.26.20.09.45.898.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to it's
--[ 2018.11.26.20.09.46.140.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to it'
--[ 2018.11.26.20.09.46.560.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to it
--[ 2018.11.26.20.09.46.865.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its
--[ 2018.11.26.20.09.47.010.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its 
--[ 2018.11.26.20.09.47.214.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its t
--[ 2018.11.26.20.09.47.324.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its ti
--[ 2018.11.26.20.09.47.594.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its tig
--[ 2018.11.26.20.09.47.885.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its ti
--[ 2018.11.26.20.09.47.999.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its t
--[ 2018.11.26.20.09.48.169.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its 
--[ 2018.11.26.20.09.48.798.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its r
--[ 2018.11.26.20.09.48.887.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its ri
--[ 2018.11.26.20.09.49.031.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its rig
--[ 2018.11.26.20.09.49.130.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its righ
--[ 2018.11.26.20.09.49.314.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its right
--[ 2018.11.26.20.09.49.432.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its right.
--[ 2018.11.26.20.09.49.661.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to it's left and to its right. 
--[ 2018.11.26.20.09.54.224.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to its left and to its right. 
--[ 2018.11.26.20.10.19.543.0 ]--
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to its left and to its right.
--[ 2018.11.26.20.10.25.564.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.10.52.752.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.14.10.296.0 ]--
UpdateTree (AD): 4 0
+ /tests/.donotlog
+ /tests/input1M.txt
+ /tests/input100K.txt
+ /tests/burgerking.csv

--[ 2018.11.26.20.14.17.162.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.14.46.345.0 ]--
UpdateTree (AD): 4 0
+ /out/production/P05_KDTrees/.donotlog
+ /out/production/P05_KDTrees/input1M.txt
+ /out/production/P05_KDTrees/input100K.txt
+ /out/production/P05_KDTrees/burgerking.csv

--[ 2018.11.26.20.15.25.407.0 ]--
:/src/PSKDTree.java
- 161
r 161         
--[ 2018.11.26.20.15.25.555.0 ]--
- 161
--[ 2018.11.26.20.15.32.029.0 ]--
r 160         return m;
--[ 2018.11.26.20.15.35.890.0 ]--
r 160         return ;
--[ 2018.11.26.20.16.54.362.0 ]--
r 160         return g;
--[ 2018.11.26.20.16.54.500.0 ]--
r 160         return ge;
--[ 2018.11.26.20.16.54.589.0 ]--
r 160         return get;
--[ 2018.11.26.20.16.55.441.0 ]--
r 160         return get();
--[ 2018.11.26.20.16.56.452.0 ]--
r 160         return get(n);
--[ 2018.11.26.20.16.56.578.0 ]--
r 160         return get(ne);
--[ 2018.11.26.20.16.57.268.0 ]--
r 160         return get(nearest);
--[ 2018.11.26.20.16.57.290.0 ]--
r 160         return get(nearest());
--[ 2018.11.26.20.16.59.162.0 ]--
r 160         return get(nearest(p));
--[ 2018.11.26.20.17.09.006.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.29.46.025.0 ]--
- 100
--[ 2018.11.26.20.30.10.630.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.33.17.264.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.33.28.439.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.35.46.970.0 ]--
r 99 //            while (true) {
r 100 //                double fingerValue = finger.p.xy(finger.dir);
r 101 //                double pValue = p.xy(finger.dir);
r 102 //                if (pValue < fingerValue) { //go down the left
r 103 //                    if (finger.left == null) {
r 104 //                        return null;
r 105 //                    } else {
r 106 //                        if (finger.left.p.equals(p)) {
r 107 //                            return finger.v;
r 108 //                        }
r 109 //                        finger = finger.left;
r 110 //                    }
r 111 //                } else { //go down the right
r 112 //                    if (finger.right == null) {
r 113 //                        return null;
r 114 //                    } else {
r 115 //                        if (finger.right.p.equals(p)) {
r 116 //                            return finger.v;
r 117 //                        }
r 118 //                        finger = finger.right;
r 119 //                    }
r 120 //                }
r 121 //            }
--[ 2018.11.26.20.36.02.628.0 ]--
+ 122 
--[ 2018.11.26.20.36.02.653.0 ]--
r 122             
--[ 2018.11.26.20.36.24.719.0 ]--
r 122             w
--[ 2018.11.26.20.36.24.803.0 ]--
r 122             wh
--[ 2018.11.26.20.36.24.920.0 ]--
r 122             whi
--[ 2018.11.26.20.36.25.089.0 ]--
r 122             whil
--[ 2018.11.26.20.36.25.173.0 ]--
r 122             while
--[ 2018.11.26.20.36.27.503.0 ]--
r 122             while 
--[ 2018.11.26.20.36.27.750.0 ]--
r 122             while ()
--[ 2018.11.26.20.36.29.765.0 ]--
r 122             while (f)
--[ 2018.11.26.20.36.29.851.0 ]--
r 122             while (fi)
--[ 2018.11.26.20.36.29.991.0 ]--
r 122             while (fin)
--[ 2018.11.26.20.36.30.096.0 ]--
r 122             while (fint)
--[ 2018.11.26.20.36.30.839.0 ]--
r 122             while (fin)
--[ 2018.11.26.20.36.30.912.0 ]--
r 122             while (fing)
--[ 2018.11.26.20.36.31.119.0 ]--
r 122             while (finge)
--[ 2018.11.26.20.36.31.173.0 ]--
r 122             while (finger)
--[ 2018.11.26.20.36.31.829.0 ]--
r 122             while (finger )
--[ 2018.11.26.20.36.32.027.0 ]--
r 122             while (finger !)
--[ 2018.11.26.20.36.32.249.0 ]--
r 122             while (finger !=)
--[ 2018.11.26.20.36.32.385.0 ]--
r 122             while (finger != )
--[ 2018.11.26.20.36.32.587.0 ]--
r 122             while (finger != n)
--[ 2018.11.26.20.36.32.822.0 ]--
r 122             while (finger != nu)
--[ 2018.11.26.20.36.33.053.0 ]--
r 122             while (finger != nul)
--[ 2018.11.26.20.36.33.179.0 ]--
r 122             while (finger != null)
--[ 2018.11.26.20.36.34.359.0 ]--
r 122             while (finger != null) 
--[ 2018.11.26.20.36.34.469.0 ]--
r 122             while (finger != null) {
--[ 2018.11.26.20.36.34.634.0 ]--
+ 123 
+ 124 }
--[ 2018.11.26.20.36.34.662.0 ]--
r 124             }
--[ 2018.11.26.20.36.34.693.0 ]--
r 123                 
--[ 2018.11.26.20.36.34.822.0 ]--
+ 123                 
--[ 2018.11.26.20.36.36.803.0 ]--
- 123
r 123                                 
--[ 2018.11.26.20.36.54.670.0 ]--
r 123                 d                
--[ 2018.11.26.20.36.54.828.0 ]--
r 123                 do                
--[ 2018.11.26.20.36.55.520.0 ]--
r 123                 dou                
--[ 2018.11.26.20.36.55.685.0 ]--
r 123                 doub                
--[ 2018.11.26.20.36.55.830.0 ]--
r 123                 doubl                
--[ 2018.11.26.20.36.56.438.0 ]--
r 123                 double                
--[ 2018.11.26.20.36.56.802.0 ]--
r 123                 double                 
--[ 2018.11.26.20.36.57.171.0 ]--
r 123                 double f                
--[ 2018.11.26.20.36.57.248.0 ]--
r 123                 double fi                
--[ 2018.11.26.20.36.57.372.0 ]--
r 123                 double fin                
--[ 2018.11.26.20.36.57.475.0 ]--
r 123                 double fing                
--[ 2018.11.26.20.36.57.891.0 ]--
r 123                 double finge                
--[ 2018.11.26.20.36.57.998.0 ]--
r 123                 double finger                
--[ 2018.11.26.20.36.58.727.0 ]--
r 123                 double fingerV                
--[ 2018.11.26.20.36.59.141.0 ]--
r 123                 double fingerVa                
--[ 2018.11.26.20.36.59.280.0 ]--
r 123                 double fingerVal                
--[ 2018.11.26.20.36.59.393.0 ]--
r 123                 double fingerValu                
--[ 2018.11.26.20.36.59.512.0 ]--
r 123                 double fingerValue                
--[ 2018.11.26.20.37.00.758.0 ]--
r 123                 double fingerValue                 
--[ 2018.11.26.20.37.01.093.0 ]--
r 123                 double fingerValue =                
--[ 2018.11.26.20.37.01.198.0 ]--
r 123                 double fingerValue =                 
--[ 2018.11.26.20.37.01.719.0 ]--
r 123                 double fingerValue = f                
--[ 2018.11.26.20.37.01.910.0 ]--
r 123                 double fingerValue = fin                
--[ 2018.11.26.20.37.01.973.0 ]--
r 123                 double fingerValue = fing                
--[ 2018.11.26.20.37.02.224.0 ]--
r 123                 double fingerValue = finge                
--[ 2018.11.26.20.37.02.274.0 ]--
r 123                 double fingerValue = finger                
--[ 2018.11.26.20.37.02.458.0 ]--
r 123                 double fingerValue = finger.                
--[ 2018.11.26.20.37.03.062.0 ]--
r 123                 double fingerValue = finger.p                
--[ 2018.11.26.20.37.03.329.0 ]--
r 123                 double fingerValue = finger.p.                
--[ 2018.11.26.20.37.03.630.0 ]--
r 123                 double fingerValue = finger.p.x                
--[ 2018.11.26.20.37.05.124.0 ]--
r 123                 double fingerValue = finger.p.xy                
--[ 2018.11.26.20.37.05.720.0 ]--
r 123                 double fingerValue = finger.p.xy()                
--[ 2018.11.26.20.37.07.421.0 ]--
r 123                 double fingerValue = finger.p.xy(f)                
--[ 2018.11.26.20.37.07.489.0 ]--
r 123                 double fingerValue = finger.p.xy(fi)                
--[ 2018.11.26.20.37.07.628.0 ]--
r 123                 double fingerValue = finger.p.xy(fin)                
--[ 2018.11.26.20.37.07.693.0 ]--
r 123                 double fingerValue = finger.p.xy(fing)                
--[ 2018.11.26.20.37.07.881.0 ]--
r 123                 double fingerValue = finger.p.xy(finge)                
--[ 2018.11.26.20.37.07.958.0 ]--
r 123                 double fingerValue = finger.p.xy(finger)                
--[ 2018.11.26.20.37.08.033.0 ]--
r 123                 double fingerValue = finger.p.xy(finger.)                
--[ 2018.11.26.20.37.08.352.0 ]--
r 123                 double fingerValue = finger.p.xy(finger.d)                
--[ 2018.11.26.20.37.08.401.0 ]--
r 123                 double fingerValue = finger.p.xy(finger.di)                
--[ 2018.11.26.20.37.08.552.0 ]--
r 123                 double fingerValue = finger.p.xy(finger.dir)                
--[ 2018.11.26.20.37.10.581.0 ]--
r 123                 double fingerValue = finger.p.xy(finger.dir);                
--[ 2018.11.26.20.37.10.742.0 ]--
+ 123                 double fingerValue = finger.p.xy(finger.dir);
r 124                 
--[ 2018.11.26.20.37.12.781.0 ]--
r 124                 d
--[ 2018.11.26.20.37.12.872.0 ]--
r 124                 do
--[ 2018.11.26.20.37.13.060.0 ]--
r 124                 dou
--[ 2018.11.26.20.37.13.306.0 ]--
r 124                 doub
--[ 2018.11.26.20.37.13.506.0 ]--
r 124                 doubl
--[ 2018.11.26.20.37.13.782.0 ]--
r 124                 double
--[ 2018.11.26.20.37.13.946.0 ]--
r 124                 double 
--[ 2018.11.26.20.37.14.058.0 ]--
r 124                 double p
--[ 2018.11.26.20.37.14.523.0 ]--
r 124                 double pv
--[ 2018.11.26.20.37.14.604.0 ]--
r 124                 double pva
--[ 2018.11.26.20.37.14.752.0 ]--
r 124                 double pval
--[ 2018.11.26.20.37.14.875.0 ]--
r 124                 double pvalu
--[ 2018.11.26.20.37.15.442.0 ]--
r 124                 double pvalue
--[ 2018.11.26.20.37.16.106.0 ]--
r 124                 double pvalu
--[ 2018.11.26.20.37.16.221.0 ]--
r 124                 double pval
--[ 2018.11.26.20.37.16.345.0 ]--
r 124                 double pva
--[ 2018.11.26.20.37.16.469.0 ]--
r 124                 double pv
--[ 2018.11.26.20.37.17.162.0 ]--
r 124                 double p
--[ 2018.11.26.20.37.17.353.0 ]--
r 124                 double pV
--[ 2018.11.26.20.37.17.756.0 ]--
r 124                 double pVa
--[ 2018.11.26.20.37.17.896.0 ]--
r 124                 double pVal
--[ 2018.11.26.20.37.18.108.0 ]--
r 124                 double pValu
--[ 2018.11.26.20.37.18.245.0 ]--
r 124                 double pValue
--[ 2018.11.26.20.37.19.111.0 ]--
r 124                 double pValue 
--[ 2018.11.26.20.37.19.199.0 ]--
r 124                 double pValue =
--[ 2018.11.26.20.37.19.321.0 ]--
r 124                 double pValue = 
--[ 2018.11.26.20.37.19.929.0 ]--
r 124                 double pValue = p
--[ 2018.11.26.20.37.20.193.0 ]--
r 124                 double pValue = p.
--[ 2018.11.26.20.37.20.502.0 ]--
r 124                 double pValue = p.x
--[ 2018.11.26.20.37.22.072.0 ]--
r 124                 double pValue = p.xy
--[ 2018.11.26.20.37.22.109.0 ]--
r 124                 double pValue = p.xy()
--[ 2018.11.26.20.37.23.472.0 ]--
r 124                 double pValue = p.xy(p)
--[ 2018.11.26.20.37.25.776.0 ]--
r 124                 double pValue = p.xy()
--[ 2018.11.26.20.37.26.037.0 ]--
r 124                 double pValue = p.xy(f)
--[ 2018.11.26.20.37.26.797.0 ]--
r 124                 double pValue = p.xy(fi)
--[ 2018.11.26.20.37.26.844.0 ]--
r 124                 double pValue = p.xy(fin)
--[ 2018.11.26.20.37.26.951.0 ]--
r 124                 double pValue = p.xy(fing)
--[ 2018.11.26.20.37.27.181.0 ]--
r 124                 double pValue = p.xy(finge)
--[ 2018.11.26.20.37.27.238.0 ]--
r 124                 double pValue = p.xy(finger)
--[ 2018.11.26.20.37.27.368.0 ]--
r 124                 double pValue = p.xy(finger.)
--[ 2018.11.26.20.37.27.702.0 ]--
r 124                 double pValue = p.xy(finger.d)
--[ 2018.11.26.20.37.27.796.0 ]--
r 124                 double pValue = p.xy(finger.di)
--[ 2018.11.26.20.37.27.966.0 ]--
r 124                 double pValue = p.xy(finger.dir)
--[ 2018.11.26.20.37.28.257.0 ]--
r 124                 double pValue = p.xy(finger.dir )
--[ 2018.11.26.20.37.29.674.0 ]--
r 124                 double pValue = p.xy(finger.dir 
--[ 2018.11.26.20.37.30.525.0 ]--
r 124                 double pValue = p.xy(finger.dir
--[ 2018.11.26.20.37.30.859.0 ]--
r 124                 double pValue = p.xy(finger.dir)
--[ 2018.11.26.20.37.31.196.0 ]--
r 124                 double pValue = p.xy(finger.dir);
--[ 2018.11.26.20.37.31.352.0 ]--
+ 125                 
--[ 2018.11.26.20.37.32.684.0 ]--
r 125                 i
--[ 2018.11.26.20.37.32.764.0 ]--
r 125                 if
--[ 2018.11.26.20.37.32.948.0 ]--
r 125                 if 
--[ 2018.11.26.20.37.33.299.0 ]--
r 125                 if ()
--[ 2018.11.26.20.37.38.351.0 ]--
r 125                 if (p)
--[ 2018.11.26.20.37.38.585.0 ]--
r 125                 if (pv)
--[ 2018.11.26.20.37.38.683.0 ]--
r 125                 if (pva)
--[ 2018.11.26.20.37.39.061.0 ]--
r 125                 if (pValue)
--[ 2018.11.26.20.37.41.235.0 ]--
r 125                 if (pValue )
--[ 2018.11.26.20.37.41.509.0 ]--
r 125                 if (pValue <)
--[ 2018.11.26.20.37.41.630.0 ]--
r 125                 if (pValue < )
--[ 2018.11.26.20.37.42.775.0 ]--
r 125                 if (pValue < f)
--[ 2018.11.26.20.37.42.924.0 ]--
r 125                 if (pValue < fi)
--[ 2018.11.26.20.37.43.081.0 ]--
r 125                 if (pValue < fin)
--[ 2018.11.26.20.37.43.137.0 ]--
r 125                 if (pValue < fing)
--[ 2018.11.26.20.37.43.455.0 ]--
r 125                 if (pValue < finge)
--[ 2018.11.26.20.37.43.506.0 ]--
r 125                 if (pValue < finger)
--[ 2018.11.26.20.37.45.000.0 ]--
r 125                 if (pValue < fingerV)
--[ 2018.11.26.20.37.45.203.0 ]--
r 125                 if (pValue < fingerVa)
--[ 2018.11.26.20.37.45.337.0 ]--
r 125                 if (pValue < fingerVal)
--[ 2018.11.26.20.37.45.487.0 ]--
r 125                 if (pValue < fingerValue)
--[ 2018.11.26.20.37.46.918.0 ]--
r 125                 if (pValue < fingerValue) 
--[ 2018.11.26.20.37.47.027.0 ]--
r 125                 if (pValue < fingerValue) {
--[ 2018.11.26.20.37.47.363.0 ]--
+ 126 
+ 127 }
--[ 2018.11.26.20.37.47.385.0 ]--
r 127                 }
--[ 2018.11.26.20.37.47.413.0 ]--
r 126                     
--[ 2018.11.26.20.37.51.702.0 ]--
r 126                     f
--[ 2018.11.26.20.37.51.835.0 ]--
r 126                     fi
--[ 2018.11.26.20.37.51.928.0 ]--
r 126                     fin
--[ 2018.11.26.20.37.51.995.0 ]--
r 126                     fing
--[ 2018.11.26.20.37.52.218.0 ]--
r 126                     finge
--[ 2018.11.26.20.37.52.295.0 ]--
r 126                     finger
--[ 2018.11.26.20.37.52.536.0 ]--
r 126                     finger 
--[ 2018.11.26.20.37.52.842.0 ]--
r 126                     finger =
--[ 2018.11.26.20.37.52.948.0 ]--
r 126                     finger = 
--[ 2018.11.26.20.37.53.110.0 ]--
r 126                     finger = f
--[ 2018.11.26.20.37.53.186.0 ]--
r 126                     finger = fi
--[ 2018.11.26.20.37.53.300.0 ]--
r 126                     finger = fin
--[ 2018.11.26.20.37.53.409.0 ]--
r 126                     finger = fing
--[ 2018.11.26.20.37.53.576.0 ]--
r 126                     finger = finge
--[ 2018.11.26.20.37.53.638.0 ]--
r 126                     finger = finger
--[ 2018.11.26.20.37.53.776.0 ]--
r 126                     finger = finger.
--[ 2018.11.26.20.37.53.979.0 ]--
r 126                     finger = finger.l
--[ 2018.11.26.20.37.54.089.0 ]--
r 126                     finger = finger.le
--[ 2018.11.26.20.37.54.333.0 ]--
r 126                     finger = finger.lef
--[ 2018.11.26.20.37.54.538.0 ]--
r 126                     finger = finger.left
--[ 2018.11.26.20.37.55.156.0 ]--
r 126                     finger = finger.left;
--[ 2018.11.26.20.37.58.176.0 ]--
+ 128                 
--[ 2018.11.26.20.37.58.488.0 ]--
r 128                 e
--[ 2018.11.26.20.37.58.614.0 ]--
r 128                 el
--[ 2018.11.26.20.37.58.743.0 ]--
r 128                 els
--[ 2018.11.26.20.37.58.802.0 ]--
r 128                 else
--[ 2018.11.26.20.37.59.118.0 ]--
r 128                 else 
--[ 2018.11.26.20.37.59.302.0 ]--
r 128                 else i
--[ 2018.11.26.20.37.59.378.0 ]--
r 128                 else if
--[ 2018.11.26.20.37.59.575.0 ]--
r 128                 else if 
--[ 2018.11.26.20.38.00.564.0 ]--
r 128                 else if ()
--[ 2018.11.26.20.38.06.095.0 ]--
r 128                 else if (p)
--[ 2018.11.26.20.38.06.895.0 ]--
r 128                 else if (pV)
--[ 2018.11.26.20.38.07.096.0 ]--
r 128                 else if (pVa)
--[ 2018.11.26.20.38.07.150.0 ]--
r 128                 else if (pVal)
--[ 2018.11.26.20.38.07.935.0 ]--
r 128                 else if (pValue)
--[ 2018.11.26.20.38.08.538.0 ]--
r 128                 else if (pValue )
--[ 2018.11.26.20.38.08.924.0 ]--
r 128                 else if (pValue >)
--[ 2018.11.26.20.38.09.120.0 ]--
r 128                 else if (pValue > )
--[ 2018.11.26.20.38.09.683.0 ]--
r 128                 else if (pValue > f)
--[ 2018.11.26.20.38.09.789.0 ]--
r 128                 else if (pValue > fi)
--[ 2018.11.26.20.38.09.889.0 ]--
r 128                 else if (pValue > fin)
--[ 2018.11.26.20.38.09.935.0 ]--
r 128                 else if (pValue > fing)
--[ 2018.11.26.20.38.10.411.0 ]--
r 128                 else if (pValue > fingerValue)
--[ 2018.11.26.20.38.11.862.0 ]--
r 128                 else if (pValue > fingerValue) 
--[ 2018.11.26.20.38.11.979.0 ]--
r 128                 else if (pValue > fingerValue) {
--[ 2018.11.26.20.38.12.111.0 ]--
+ 129 
+ 130 }
--[ 2018.11.26.20.38.12.140.0 ]--
r 130                 }
--[ 2018.11.26.20.38.12.176.0 ]--
r 129                     
--[ 2018.11.26.20.38.13.021.0 ]--
r 129                     f
--[ 2018.11.26.20.38.13.118.0 ]--
r 129                     fi
--[ 2018.11.26.20.38.13.176.0 ]--
r 129                     fin
--[ 2018.11.26.20.38.13.222.0 ]--
r 129                     fing
--[ 2018.11.26.20.38.13.415.0 ]--
r 129                     finge
--[ 2018.11.26.20.38.13.489.0 ]--
r 129                     finger
--[ 2018.11.26.20.38.13.633.0 ]--
r 129                     finger 
--[ 2018.11.26.20.38.14.215.0 ]--
r 129                     finger =
--[ 2018.11.26.20.38.14.304.0 ]--
r 129                     finger = 
--[ 2018.11.26.20.38.14.464.0 ]--
r 129                     finger = f
--[ 2018.11.26.20.38.14.599.0 ]--
r 129                     finger = fi
--[ 2018.11.26.20.38.14.783.0 ]--
r 129                     finger = fin
--[ 2018.11.26.20.38.14.863.0 ]--
r 129                     finger = fing
--[ 2018.11.26.20.38.14.993.0 ]--
r 129                     finger = finge
--[ 2018.11.26.20.38.15.076.0 ]--
r 129                     finger = finger
--[ 2018.11.26.20.38.15.174.0 ]--
r 129                     finger = finger.
--[ 2018.11.26.20.38.15.413.0 ]--
r 129                     finger = finger.r
--[ 2018.11.26.20.38.15.523.0 ]--
r 129                     finger = finger.ri
--[ 2018.11.26.20.38.15.660.0 ]--
r 129                     finger = finger.rig
--[ 2018.11.26.20.38.15.729.0 ]--
r 129                     finger = finger.righ
--[ 2018.11.26.20.38.15.830.0 ]--
r 129                     finger = finger.right
--[ 2018.11.26.20.38.16.503.0 ]--
r 129                     finger = finger.right;
--[ 2018.11.26.20.38.17.320.0 ]--
+ 131                 
--[ 2018.11.26.20.38.17.925.0 ]--
r 131                 e
--[ 2018.11.26.20.38.18.162.0 ]--
r 131                 el
--[ 2018.11.26.20.38.18.220.0 ]--
r 131                 els
--[ 2018.11.26.20.38.18.287.0 ]--
r 131                 else
--[ 2018.11.26.20.38.18.391.0 ]--
r 131                 else 
--[ 2018.11.26.20.38.21.509.0 ]--
r 131                 else {
--[ 2018.11.26.20.38.21.661.0 ]--
+ 132 
+ 133 }
--[ 2018.11.26.20.38.21.689.0 ]--
r 133                 }
--[ 2018.11.26.20.38.21.723.0 ]--
r 132                     
--[ 2018.11.26.20.38.21.906.0 ]--
r 132                     r
--[ 2018.11.26.20.38.21.987.0 ]--
r 132                     re
--[ 2018.11.26.20.38.22.153.0 ]--
r 132                     ret
--[ 2018.11.26.20.38.22.518.0 ]--
r 132                     retu
--[ 2018.11.26.20.38.22.622.0 ]--
r 132                     retur
--[ 2018.11.26.20.38.22.705.0 ]--
r 132                     return
--[ 2018.11.26.20.38.22.774.0 ]--
r 132                     return 
--[ 2018.11.26.20.38.23.246.0 ]--
r 132                     return f
--[ 2018.11.26.20.38.23.335.0 ]--
r 132                     return fi
--[ 2018.11.26.20.38.23.399.0 ]--
r 132                     return fin
--[ 2018.11.26.20.38.23.513.0 ]--
r 132                     return fing
--[ 2018.11.26.20.38.24.162.0 ]--
r 132                     return finger
--[ 2018.11.26.20.38.24.729.0 ]--
r 132                     return finger.
--[ 2018.11.26.20.38.25.429.0 ]--
r 132                     return finger.v
--[ 2018.11.26.20.38.26.272.0 ]--
r 132                     return finger.v;
--[ 2018.11.26.20.38.35.830.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.26.20.38.35.833.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@3442f9b6
--[ 2018.11.26.20.39.20.590.0 ]--
+ 127                     
--[ 2018.11.26.20.39.20.600.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.614.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.866.0 ]--
r 127                     r
--[ 2018.11.26.20.39.20.883.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.894.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.903.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.917.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.935.0 ]--
r 127                     re
--[ 2018.11.26.20.39.20.945.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.20.954.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.149.0 ]--
r 127                     ret
--[ 2018.11.26.20.39.21.171.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.187.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.300.0 ]--
r 127                     retu
--[ 2018.11.26.20.39.21.313.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.331.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.410.0 ]--
r 127                     retur
--[ 2018.11.26.20.39.21.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.428.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.510.0 ]--
r 127                     return
--[ 2018.11.26.20.39.21.524.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.540.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.586.0 ]--
r 127                     return 
--[ 2018.11.26.20.39.21.604.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.21.628.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.22.556.0 ]--
r 127                     return f
--[ 2018.11.26.20.39.22.574.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.22.590.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.22.604.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.22.755.0 ]--
r 127                     return fn
--[ 2018.11.26.20.39.22.766.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.22.780.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.057.0 ]--
r 127                     return f
--[ 2018.11.26.20.39.23.070.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.087.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.239.0 ]--
r 127                     return fi
--[ 2018.11.26.20.39.23.258.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.277.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.372.0 ]--
r 127                     return fin
--[ 2018.11.26.20.39.23.381.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.403.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.459.0 ]--
r 127                     return fing
--[ 2018.11.26.20.39.23.469.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.480.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.662.0 ]--
r 127                     return finge
--[ 2018.11.26.20.39.23.687.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.705.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.754.0 ]--
r 127                     return finger
--[ 2018.11.26.20.39.23.761.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.23.774.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.24.260.0 ]--
r 127                     return finger;
--[ 2018.11.26.20.39.24.271.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.24.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.386.0 ]--
r 127                     return finger.;
--[ 2018.11.26.20.39.30.393.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.404.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.417.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.425.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.530.0 ]--
r 127                     return finger.v;
--[ 2018.11.26.20.39.30.536.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.30.550.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.072.0 ]--
+ 131                     
--[ 2018.11.26.20.39.36.081.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.088.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.175.0 ]--
r 131                     r
--[ 2018.11.26.20.39.36.191.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.203.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.215.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.221.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.262.0 ]--
r 131                     re
--[ 2018.11.26.20.39.36.269.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.284.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.540.0 ]--
r 131                     ret
--[ 2018.11.26.20.39.36.548.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.572.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.597.0 ]--
r 131                     retu
--[ 2018.11.26.20.39.36.606.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.615.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.705.0 ]--
r 131                     retur
--[ 2018.11.26.20.39.36.715.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.729.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.789.0 ]--
r 131                     return
--[ 2018.11.26.20.39.36.798.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.807.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.894.0 ]--
r 131                     return 
--[ 2018.11.26.20.39.36.902.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.36.915.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.076.0 ]--
r 131                     return f
--[ 2018.11.26.20.39.37.105.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.120.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.129.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.154.0 ]--
r 131                     return fi
--[ 2018.11.26.20.39.37.159.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.175.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.242.0 ]--
r 131                     return fin
--[ 2018.11.26.20.39.37.249.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.263.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.367.0 ]--
r 131                     return fing
--[ 2018.11.26.20.39.37.383.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.391.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.942.0 ]--
r 131                     return finger
--[ 2018.11.26.20.39.37.959.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.37.971.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.070.0 ]--
r 131                     return finger.
--[ 2018.11.26.20.39.38.086.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.100.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.111.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.118.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.538.0 ]--
r 131                     return finger.v
--[ 2018.11.26.20.39.38.550.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.38.561.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.39.147.0 ]--
r 131                     return finger.v;
--[ 2018.11.26.20.39.39.158.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.39.167.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.44.984.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.44.995.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.47.349.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.53.076.0 ]--
- 131
--[ 2018.11.26.20.39.53.099.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.53.113.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.53.123.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.54.550.0 ]--
- 127
--[ 2018.11.26.20.39.54.561.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.54.569.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.39.54.586.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.427.0 ]--
+ 135             
--[ 2018.11.26.20.40.40.437.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.450.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.530.0 ]--
r 135             r
--[ 2018.11.26.20.40.40.547.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.559.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.568.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.579.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.628.0 ]--
r 135             re
--[ 2018.11.26.20.40.40.637.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.647.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.814.0 ]--
r 135             ret
--[ 2018.11.26.20.40.40.829.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.40.845.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.064.0 ]--
r 135             retr
--[ 2018.11.26.20.40.41.095.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.121.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.332.0 ]--
r 135             ret
--[ 2018.11.26.20.40.41.348.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.627.0 ]--
r 135             retu
--[ 2018.11.26.20.40.41.642.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.651.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.963.0 ]--
r 135             retun
--[ 2018.11.26.20.40.41.976.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.41.986.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.198.0 ]--
r 135             retu
--[ 2018.11.26.20.40.42.210.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.230.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.295.0 ]--
r 135             retur
--[ 2018.11.26.20.40.42.310.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.328.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.407.0 ]--
r 135             return
--[ 2018.11.26.20.40.42.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.435.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.537.0 ]--
r 135             return 
--[ 2018.11.26.20.40.42.546.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.554.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.719.0 ]--
r 135             return f
--[ 2018.11.26.20.40.42.734.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.746.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.760.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.783.0 ]--
r 135             return fi
--[ 2018.11.26.20.40.42.793.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.802.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.918.0 ]--
r 135             return fin
--[ 2018.11.26.20.40.42.931.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.42.951.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.43.013.0 ]--
r 135             return fing
--[ 2018.11.26.20.40.43.021.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.43.031.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.43.485.0 ]--
r 135             return finger
--[ 2018.11.26.20.40.43.514.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.43.532.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.304.0 ]--
r 135             return finger.
--[ 2018.11.26.20.40.44.334.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.350.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.365.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.373.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.580.0 ]--
r 135             return finger.v
--[ 2018.11.26.20.40.44.591.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.685.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.733.0 ]--
r 135             return finger.v;
--[ 2018.11.26.20.40.44.742.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.44.758.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.50.525.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.50.535.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.53.116.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.40.53.117.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.41.41.340.0 ]--
- 131
- 131
r 131     
--[ 2018.11.26.20.41.41.662.0 ]--
- 131
--[ 2018.11.26.20.41.50.395.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.41.56.012.0 ]--
+ 130                 }
+ 131                 else {
+ 132                     return finger.v;
--[ 2018.11.26.20.42.02.115.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.43.34.790.0 ]--
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
- 99
r 99 
--[ 2018.11.26.20.43.35.393.0 ]--
- 99
--[ 2018.11.26.20.44.54.059.0 ]--
r 62 //            while (true) {
r 63 //                //comparing x's
r 64 //                double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 65 //                double newNodeValue = newNode.p.xy(finger.dir);
r 66 //                if (newNodeValue < fingerValue) { //go down the left
r 67 //                    if (finger.left == null) {
r 68 //                        if (!this.contains(newNode.p)) {
r 69 //                            listOfPoints.add(newNode.p);
r 70 //                        }
r 71 //                        finger.left = newNode;
r 72 //                        treeSize++;
r 73 //                        break; //baby
r 74 //                    } else {
r 75 //                        finger = finger.left;
r 76 //                    }
r 77 //                } else { //go down the right
r 78 //                    if (finger.right == null) {
r 79 //                        if (!this.contains(newNode.p)) {
r 80 //                            listOfPoints.add(newNode.p);
r 81 //                        }
r 82 //                        finger.right = newNode;
r 83 //                        treeSize++;
r 84 //                        break; //baby
r 85 //                    } else {
r 86 //                        finger = finger.right;
r 87 //                    }
r 88 //                }
r 89 //            }
--[ 2018.11.26.20.44.59.724.0 ]--
+ 62             
--[ 2018.11.26.20.45.11.196.0 ]--
r 62             i
--[ 2018.11.26.20.45.11.387.0 ]--
r 62             if
--[ 2018.11.26.20.45.11.484.0 ]--
r 62             if 
--[ 2018.11.26.20.45.12.320.0 ]--
r 62             if f
--[ 2018.11.26.20.45.12.473.0 ]--
r 62             if fi
--[ 2018.11.26.20.45.12.532.0 ]--
r 62             if fin
--[ 2018.11.26.20.45.12.588.0 ]--
r 62             if fing
--[ 2018.11.26.20.45.12.911.0 ]--
r 62             if finge
--[ 2018.11.26.20.45.13.030.0 ]--
r 62             if finger
--[ 2018.11.26.20.45.14.310.0 ]--
r 62             if finge
--[ 2018.11.26.20.45.14.418.0 ]--
r 62             if fing
--[ 2018.11.26.20.45.14.576.0 ]--
r 62             if fin
--[ 2018.11.26.20.45.14.729.0 ]--
r 62             if fi
--[ 2018.11.26.20.45.14.855.0 ]--
r 62             if f
--[ 2018.11.26.20.45.14.975.0 ]--
r 62             if 
--[ 2018.11.26.20.45.15.618.0 ]--
r 62             if ()
--[ 2018.11.26.20.45.16.017.0 ]--
r 62             if (f)
--[ 2018.11.26.20.45.16.101.0 ]--
r 62             if (fi)
--[ 2018.11.26.20.45.16.293.0 ]--
r 62             if (fin)
--[ 2018.11.26.20.45.16.401.0 ]--
r 62             if (fing)
--[ 2018.11.26.20.45.16.505.0 ]--
r 62             if (finge)
--[ 2018.11.26.20.45.16.619.0 ]--
r 62             if (finger)
--[ 2018.11.26.20.45.16.725.0 ]--
r 62             if (finger )
--[ 2018.11.26.20.45.17.012.0 ]--
r 62             if (finger =)
--[ 2018.11.26.20.45.17.147.0 ]--
r 62             if (finger ==)
--[ 2018.11.26.20.45.17.261.0 ]--
r 62             if (finger == )
--[ 2018.11.26.20.45.17.381.0 ]--
r 62             if (finger == n)
--[ 2018.11.26.20.45.17.586.0 ]--
r 62             if (finger == nu)
--[ 2018.11.26.20.45.17.757.0 ]--
r 62             if (finger == nul)
--[ 2018.11.26.20.45.17.895.0 ]--
r 62             if (finger == null)
--[ 2018.11.26.20.45.19.102.0 ]--
r 62             if (finger == null) 
--[ 2018.11.26.20.45.19.270.0 ]--
r 62             if (finger == null) {
--[ 2018.11.26.20.45.19.860.0 ]--
+ 63 
+ 64 }
--[ 2018.11.26.20.45.19.891.0 ]--
r 64             }
--[ 2018.11.26.20.45.19.927.0 ]--
r 63                 
--[ 2018.11.26.20.45.20.044.0 ]--
r 63                 r
--[ 2018.11.26.20.45.20.187.0 ]--
r 63                 re
--[ 2018.11.26.20.45.20.796.0 ]--
r 63                 ret
--[ 2018.11.26.20.45.22.166.0 ]--
r 63                 retu
--[ 2018.11.26.20.45.22.272.0 ]--
r 63                 retur
--[ 2018.11.26.20.45.22.438.0 ]--
r 63                 returm
--[ 2018.11.26.20.45.22.538.0 ]--
r 63                 returm 
--[ 2018.11.26.20.45.23.118.0 ]--
r 63                 returm
--[ 2018.11.26.20.45.23.249.0 ]--
r 63                 retur
--[ 2018.11.26.20.45.23.809.0 ]--
r 63                 return
--[ 2018.11.26.20.45.26.598.0 ]--
r 63                 return 
--[ 2018.11.26.20.45.26.682.0 ]--
r 63                 return n
--[ 2018.11.26.20.45.26.748.0 ]--
r 63                 return ne
--[ 2018.11.26.20.45.27.230.0 ]--
r 63                 return new
--[ 2018.11.26.20.45.27.483.0 ]--
r 63                 return new 
--[ 2018.11.26.20.45.27.891.0 ]--
r 63                 return new N
--[ 2018.11.26.20.45.27.996.0 ]--
r 63                 return new Nod
--[ 2018.11.26.20.45.28.032.0 ]--
r 63                 return new Node
--[ 2018.11.26.20.45.30.104.0 ]--
r 63                 return new Node()
--[ 2018.11.26.20.45.30.264.0 ]--
r 63                 return new Node(k)
--[ 2018.11.26.20.45.30.384.0 ]--
r 63                 return new Node(ke)
--[ 2018.11.26.20.45.31.625.0 ]--
r 63                 return new Node(key)
--[ 2018.11.26.20.45.34.408.0 ]--
r 63                 return new Node(ke)
--[ 2018.11.26.20.45.34.739.0 ]--
r 63                 return new Node(k)
--[ 2018.11.26.20.45.34.933.0 ]--
r 63                 return new Node()
--[ 2018.11.26.20.46.03.762.0 ]--
- 62
- 62
r 62             i
--[ 2018.11.26.20.46.04.106.0 ]--
r 62             
--[ 2018.11.26.20.47.00.924.0 ]--
r 113             return n;
--[ 2018.11.26.20.47.01.159.0 ]--
r 113             return nu;
--[ 2018.11.26.20.47.01.335.0 ]--
r 113             return nul;
--[ 2018.11.26.20.47.01.534.0 ]--
r 113             return null;
--[ 2018.11.26.20.47.16.529.0 ]--
r 63             while (true) {
r 64                 //comparing x's
r 65                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 66                 double newNodeValue = newNode.p.xy(finger.dir);
r 67                 if (newNodeValue < fingerValue) { //go down the left
r 68                     if (finger.left == null) {
r 69                         if (!this.contains(newNode.p)) {
r 70                             listOfPoints.add(newNode.p);
r 71                         }
r 72                         finger.left = newNode;
r 73                         treeSize++;
r 74                         break; //baby
r 75                     } else {
r 76                         finger = finger.left;
r 77                     }
r 78                 } else { //go down the right
r 79                     if (finger.right == null) {
r 80                         if (!this.contains(newNode.p)) {
r 81                             listOfPoints.add(newNode.p);
r 82                         }
r 83                         finger.right = newNode;
r 84                         treeSize++;
r 85                         break; //baby
r 86                     } else {
r 87                         finger = finger.right;
r 88                     }
r 89                 }
r 90             }
--[ 2018.11.26.20.47.19.316.0 ]--
r 62 
--[ 2018.11.26.20.47.22.373.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.20.49.04.625.0 ]--
r 63 //            while (true) {
r 64 //                //comparing x's
r 65 //                double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 66 //                double newNodeValue = newNode.p.xy(finger.dir);
r 67 //                if (newNodeValue < fingerValue) { //go down the left
r 68 //                    if (finger.left == null) {
r 69 //                        if (!this.contains(newNode.p)) {
r 70 //                            listOfPoints.add(newNode.p);
r 71 //                        }
r 72 //                        finger.left = newNode;
r 73 //                        treeSize++;
r 74 //                        break; //baby
r 75 //                    } else {
r 76 //                        finger = finger.left;
r 77 //                    }
r 78 //                } else { //go down the right
r 79 //                    if (finger.right == null) {
r 80 //                        if (!this.contains(newNode.p)) {
r 81 //                            listOfPoints.add(newNode.p);
r 82 //                        }
r 83 //                        finger.right = newNode;
r 84 //                        treeSize++;
r 85 //                        break; //baby
r 86 //                    } else {
r 87 //                        finger = finger.right;
r 88 //                    }
r 89 //                }
r 90 //            }
--[ 2018.11.26.20.49.09.231.0 ]--
r 62     
--[ 2018.11.26.20.49.09.410.0 ]--
r 62         
--[ 2018.11.26.20.49.09.926.0 ]--
r 62             
--[ 2018.11.26.20.49.10.730.0 ]--
+ 62             while (finger != null) {
+ 63                 double fingerValue = finger.p.xy(finger.dir);
+ 64                 double pValue = p.xy(finger.dir);
+ 65                 if (pValue < fingerValue) {
+ 66                     finger = finger.left;
+ 67                 }
+ 68                 else if (pValue > fingerValue) {
+ 69                     finger = finger.right;
+ 70                 }
+ 71                 else {
+ 72                     return finger.v;
+ 73                 }
r 74             }
--[ 2018.11.26.20.50.33.957.0 ]--
r 72                     return n;
--[ 2018.11.26.20.50.34.122.0 ]--
r 72                     return nu;
--[ 2018.11.26.20.50.34.336.0 ]--
r 72                     return nul;
--[ 2018.11.26.20.50.34.467.0 ]--
r 72                     return null;
--[ 2018.11.26.20.50.38.581.0 ]--
+ 75             
--[ 2018.11.26.20.50.38.804.0 ]--
r 75             r
--[ 2018.11.26.20.50.38.935.0 ]--
r 75             re
--[ 2018.11.26.20.50.39.098.0 ]--
r 75             ret
--[ 2018.11.26.20.50.39.185.0 ]--
r 75             retu
--[ 2018.11.26.20.50.39.329.0 ]--
r 75             retur
--[ 2018.11.26.20.50.39.405.0 ]--
r 75             return
--[ 2018.11.26.20.50.39.508.0 ]--
r 75             return 
--[ 2018.11.26.20.50.46.821.0 ]--
r 75             f 
--[ 2018.11.26.20.50.46.961.0 ]--
r 75             fi 
--[ 2018.11.26.20.50.47.008.0 ]--
r 75             fin 
--[ 2018.11.26.20.50.47.132.0 ]--
r 75             fing 
--[ 2018.11.26.20.50.47.329.0 ]--
r 75             finge 
--[ 2018.11.26.20.50.47.480.0 ]--
r 75             finger 
--[ 2018.11.26.20.50.59.829.0 ]--
r 75             finger  
--[ 2018.11.26.20.50.59.934.0 ]--
r 75             finger = 
--[ 2018.11.26.20.51.00.278.0 ]--
r 75             finger =  
--[ 2018.11.26.20.51.00.499.0 ]--
r 75             finger = n 
--[ 2018.11.26.20.51.00.642.0 ]--
r 75             finger = no 
--[ 2018.11.26.20.51.00.973.0 ]--
r 75             finger = noe 
--[ 2018.11.26.20.51.01.663.0 ]--
r 75             finger = no 
--[ 2018.11.26.20.51.01.909.0 ]--
r 75             finger = nod 
--[ 2018.11.26.20.51.02.445.0 ]--
r 75             finger = node 
--[ 2018.11.26.20.51.02.795.0 ]--
r 75             finger = node; 
--[ 2018.11.26.20.51.05.587.0 ]--
r 75             finger = ode; 
--[ 2018.11.26.20.51.06.000.0 ]--
r 75             finger = node; 
--[ 2018.11.26.20.51.06.178.0 ]--
r 75             finger = neode; 
--[ 2018.11.26.20.51.06.935.0 ]--
r 75             finger = node; 
--[ 2018.11.26.20.51.07.035.0 ]--
r 75             finger = nwode; 
--[ 2018.11.26.20.51.07.566.0 ]--
r 75             finger = node; 
--[ 2018.11.26.20.51.07.645.0 ]--
r 75             finger = neode; 
--[ 2018.11.26.20.51.07.758.0 ]--
r 75             finger = newode; 
--[ 2018.11.26.20.51.08.027.0 ]--
r 75             finger = newNode; 
--[ 2018.11.26.20.51.10.260.0 ]--
+ 76             
--[ 2018.11.26.20.51.46.693.0 ]--
r 76             t
--[ 2018.11.26.20.51.46.874.0 ]--
r 76             tr
--[ 2018.11.26.20.51.47.304.0 ]--
r 76             tre
--[ 2018.11.26.20.51.48.071.0 ]--
r 76             treeSize
--[ 2018.11.26.20.51.48.417.0 ]--
r 76             treeSize+
--[ 2018.11.26.20.51.48.518.0 ]--
r 76             treeSize++
--[ 2018.11.26.20.51.48.832.0 ]--
r 76             treeSize++;
--[ 2018.11.26.20.52.08.496.0 ]--
+ 77             
--[ 2018.11.26.20.52.08.712.0 ]--
+ 77             if (!this.contains(newNode.p)) {
+ 78 //                            listOfPoints.add(newNode.p);
r 79 //                        }
--[ 2018.11.26.20.52.15.979.0 ]--
r 79 /                        }
--[ 2018.11.26.20.52.16.118.0 ]--
r 79                         }
--[ 2018.11.26.20.52.17.426.0 ]--
r 78 /                            listOfPoints.add(newNode.p);
--[ 2018.11.26.20.52.17.579.0 ]--
r 78                             listOfPoints.add(newNode.p);
--[ 2018.11.26.20.52.21.377.0 ]--
r 79                     }
--[ 2018.11.26.20.52.21.762.0 ]--
r 79                 }
--[ 2018.11.26.20.52.23.133.0 ]--
r 79             }
--[ 2018.11.26.20.52.25.206.0 ]--
r 78                         listOfPoints.add(newNode.p);
--[ 2018.11.26.20.52.25.411.0 ]--
r 78                     listOfPoints.add(newNode.p);
--[ 2018.11.26.20.52.26.257.0 ]--
r 78                 listOfPoints.add(newNode.p);
--[ 2018.11.26.20.52.49.741.0 ]--
r 75             finger = newNode;
--[ 2018.11.26.20.52.52.742.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.26.20.52.52.745.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@3eeb7759
--[ 2018.11.26.20.53.00.672.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.20.53.00.684.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.26.22.58.33.183.0 ]--
+ 62             while (true) {
+ 63                 //comparing x's
+ 64                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
+ 65                 double newNodeValue = newNode.p.xy(finger.dir);
+ 66                 if (newNodeValue < fingerValue) { //go down the left
+ 67                     if (finger.left == null) {
+ 68                         if (!this.contains(newNode.p)) {
+ 69                             listOfPoints.add(newNode.p);
+ 70                         }
+ 71                         finger.left = newNode;
+ 72                         treeSize++;
+ 73                         break; //baby
+ 74                     } else {
+ 75                         finger = finger.left;
+ 76                     }
r 77                 } else { //go down the right
r 78                     if (finger.right == null) {
r 79                         if (!this.contains(newNode.p)) {
r 80                             listOfPoints.add(newNode.p);
r 81                         }
r 82                         finger.right = newNode;
r 83                         treeSize++;
r 84                         break; //baby
r 85                     } else {
r 86                         finger = finger.right;
r 87                     }
r 90         }
r 91     }
r 92 
r 93     public Value get(Point p) {
r 94         Node finger;
r 95         if(this.isEmpty()){
r 96             return null;
r 97         } else {
r 98             finger = root;
r 99             while (true) {
r 100                 //comparing x's
r 101                 double fingerValue = finger.p.xy(finger.dir);
r 102                 double pValue = p.xy(finger.dir);
r 103                 if (pValue < fingerValue) { //go down the left
r 104                     if (finger.left == null) {
r 105                         return null;
r 106                     } else {
r 107                         if (finger.left.p.equals(p)) {
r 108                             return finger.v;
r 109                         }
r 110                         finger = finger.left;
r 111                     }
r 112                 } else { //go down the right
r 113                     if (finger.right == null) {
r 114                         return null;
r 115                     } else {
r 116                         if (finger.right.p.equals(p)) {
r 117                             return finger.v;
r 118                         }
r 119                         finger = finger.right;
r 120                     }
r 121                 }
r 122             }
r 126     public boolean contains(Point p) {
r 128         if (this.isEmpty()) {
r 129             return false;
+ 132             while (true) {
r 133                 //comparing x's
+ 136                 if (pValue < fingerValue) { //go down the left
+ 137                     if (finger.left == null) {
+ 138                         return false;
+ 139                     } else {
r 140                         if (finger.left.p.equals(p)) {
r 141                             return true;
r 142                         }
r 143                         finger = finger.left;
r 144                     }
r 145                 } else { //go down the right
r 146                     if (finger.right == null) {
r 147                         return false;
r 148                     } else {
r 149                         if (finger.right.p.equals(p)) {
r 150                             return true;
r 151                         }
r 152                         finger = finger.right;
r 153                     }
r 154                 }
r 155             }
r 156         }
- 160
- 161
r 161 
r 162 
- 289
- 289
- 289
- 289
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
--[ 2018.11.26.22.59.16.296.0 ]--
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
r 127         if(get(p)!=null) return true;
r 128         return false;
+ 261 
+ 262     private static PointSearch<Character> createNewPS() {
+ 263         return new PSKDTree<>();
+ 264     }
+ 268         ///tests/input100K.txt
+ 269 
+ 270         PointSearch<Character> ps = createNewPS();
+ 271         In in = new In(args[0]);
+ 272 
+ 273         int size = 100000; //change this depending on the size of the input file!
+ 274         double[] dbl,time;
+ 275         dbl = new double[size];
+ 276         int testing_size = 10000;
+ 277         time = new double[testing_size];
+ 278         dbl = in.readAllDoubles();
+ 279         double elapsedTime=0;
+ 280 
+ 281 
+ 282         for(int i = 0; i<size-1; i=i+2){
+ 283             Point p = new Point(dbl[i],dbl[i+1]);
+ 284             ps.put(p,'r');
+ 285         }
+ 286 
+ 287 
+ 288         for(int j = 0; j<testing_size-1;j++) {
+ 289             Stopwatch rolex = new Stopwatch();
+ 290             ps.nearest(Point.uniform());
+ 291             time[j] =rolex.elapsedTime();
+ 292 
+ 293             //StdOut.printf("time elapsed: %f\n", time[j]);
+ 294             elapsedTime += time[j];
+ 295 
+ 296         }
+ 297 
+ 298         StdOut.printf("avg nearest calcs per sec: %f\n", 1/(elapsedTime/testing_size));
+ 299 
+ 300 
--[ 2018.11.26.23.00.10.474.0 ]--
+ 62             while (finger != null) {
+ 63                 double fingerValue = finger.p.xy(finger.dir);
+ 64                 double pValue = p.xy(finger.dir);
+ 65                 if (pValue < fingerValue) {
+ 66                     finger = finger.left;
+ 67                 }
+ 68                 else if (pValue > fingerValue) {
r 69                     finger = finger.right;
r 70                 }
r 71                 else {
r 72                     return null;
r 73                 }
r 74             }
r 75             finger = newNode;
r 76             treeSize++;
r 77             if (!this.contains(newNode.p)) {
r 78                 listOfPoints.add(newNode.p);
r 79             }
r 80 //            while (true) {
r 81 //                //comparing x's
r 82 //                double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
r 83 //                double newNodeValue = newNode.p.xy(finger.dir);
r 84 //                if (newNodeValue < fingerValue) { //go down the left
r 85 //                    if (finger.left == null) {
r 86 //                        if (!this.contains(newNode.p)) {
r 87 //                            listOfPoints.add(newNode.p);
r 88 //                        }
r 89 //                        finger.left = newNode;
r 90 //                        treeSize++;
r 91 //                        break; //baby
r 92 //                    } else {
r 93 //                        finger = finger.left;
r 94 //                    }
r 95 //                } else { //go down the right
r 96 //                    if (finger.right == null) {
r 97 //                        if (!this.contains(newNode.p)) {
r 98 //                            listOfPoints.add(newNode.p);
r 99 //                        }
r 100 //                        finger.right = newNode;
r 101 //                        treeSize++;
r 102 //                        break; //baby
r 103 //                    } else {
r 104 //                        finger = finger.right;
r 105 //                    }
r 106 //                }
r 107 //            }
r 108         }
r 109     }
r 110 
r 111     public Value get(Point p) {
r 112         Node finger;
r 113         if(this.isEmpty()){
r 114             return null;
r 115         } else {
r 116             finger = root;
r 117             while (finger != null) {
r 118                 double fingerValue = finger.p.xy(finger.dir);
r 119                 double pValue = p.xy(finger.dir);
r 120                 if (pValue < fingerValue) {
r 121                     finger = finger.left;
r 122                 }
r 123                 else if (pValue > fingerValue) {
r 124                     finger = finger.right;
r 125                 }
r 126                 else {
r 127                     return finger.v;
+ 130             return null;
--[ 2018.11.26.23.00.45.570.0 ]--
+ 140 <<<<<<< HEAD
+ 142 =======
r 143         return get(nearest(p));
r 144 >>>>>>> origin/master
--[ 2018.11.26.23.00.50.215.0 ]--
+ 62             while (true) {
+ 63                 //comparing x's
+ 64                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
+ 65                 double newNodeValue = newNode.p.xy(finger.dir);
+ 66                 if (newNodeValue < fingerValue) { //go down the left
+ 67                     if (finger.left == null) {
+ 68                         if (!this.contains(newNode.p)) {
+ 69                             listOfPoints.add(newNode.p);
+ 70                         }
+ 71                         finger.left = newNode;
+ 72                         treeSize++;
+ 73                         break; //baby
+ 74                     } else {
+ 75                         finger = finger.left;
+ 76                     }
r 77                 } else { //go down the right
r 78                     if (finger.right == null) {
r 79                         if (!this.contains(newNode.p)) {
r 80                             listOfPoints.add(newNode.p);
r 81                         }
r 82                         finger.right = newNode;
r 83                         treeSize++;
r 84                         break; //baby
r 85                     } else {
r 86                         finger = finger.right;
r 87                     }
r 90         }
r 91     }
r 92 
r 93     public Value get(Point p) {
r 94         Node finger;
r 95         if(this.isEmpty()){
r 96             return null;
r 97         } else {
r 98             finger = root;
r 99             while (true) {
r 100                 //comparing x's
r 101                 double fingerValue = finger.p.xy(finger.dir);
r 102                 double pValue = p.xy(finger.dir);
r 103                 if (pValue < fingerValue) { //go down the left
r 104                     if (finger.left == null) {
r 105                         return null;
r 106                     } else {
r 107                         if (finger.left.p.equals(p)) {
r 108                             return finger.v;
r 109                         }
r 110                         finger = finger.left;
r 111                     }
r 112                 } else { //go down the right
r 113                     if (finger.right == null) {
r 114                         return null;
r 115                     } else {
r 116                         if (finger.right.p.equals(p)) {
r 117                             return finger.v;
r 118                         }
r 119                         finger = finger.right;
r 120                     }
r 121                 }
r 122             }
r 126     public boolean contains(Point p) {
r 128         if (this.isEmpty()) {
r 129             return false;
+ 132             while (true) {
r 133                 //comparing x's
+ 136                 if (pValue < fingerValue) { //go down the left
+ 137                     if (finger.left == null) {
+ 138                         return false;
+ 139                     } else {
r 140                         if (finger.left.p.equals(p)) {
r 141                             return true;
r 142                         }
r 143                         finger = finger.left;
r 144                     }
r 145                 } else { //go down the right
r 146                     if (finger.right == null) {
r 147                         return false;
r 148                     } else {
r 149                         if (finger.right.p.equals(p)) {
r 150                             return true;
r 151                         }
r 152                         finger = finger.right;
r 153                     }
r 154                 }
r 155             }
r 156         }
- 160
- 161
r 161 
r 162 
- 289
- 289
- 289
- 289
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
- 292
--[ 2018.11.26.23.01.42.474.0 ]--
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
- 127
r 127         if(get(p)!=null) return true;
r 128         return false;
--[ 2018.11.26.23.01.48.617.0 ]--
- 133
- 133
--[ 2018.11.26.23.01.59.469.0 ]--
+ 259 
+ 260     private static PointSearch<Character> createNewPS() {
+ 261         return new PSKDTree<>();
+ 262     }
--[ 2018.11.26.23.02.01.057.0 ]--
+ 266         ///tests/input100K.txt
+ 267 
+ 268         PointSearch<Character> ps = createNewPS();
+ 269         In in = new In(args[0]);
+ 270 
+ 271         int size = 100000; //change this depending on the size of the input file!
+ 272         double[] dbl,time;
+ 273         dbl = new double[size];
+ 274         int testing_size = 10000;
+ 275         time = new double[testing_size];
+ 276         dbl = in.readAllDoubles();
+ 277         double elapsedTime=0;
+ 278 
+ 279 
+ 280         for(int i = 0; i<size-1; i=i+2){
+ 281             Point p = new Point(dbl[i],dbl[i+1]);
+ 282             ps.put(p,'r');
+ 283         }
+ 284 
+ 285 
+ 286         for(int j = 0; j<testing_size-1;j++) {
+ 287             Stopwatch rolex = new Stopwatch();
+ 288             ps.nearest(Point.uniform());
+ 289             time[j] =rolex.elapsedTime();
+ 290 
+ 291             //StdOut.printf("time elapsed: %f\n", time[j]);
+ 292             elapsedTime += time[j];
+ 293 
+ 294         }
+ 295 
+ 296         StdOut.printf("avg nearest calcs per sec: %f\n", 1/(elapsedTime/testing_size));
+ 297 
+ 298 
--[ 2018.11.26.23.02.11.590.0 ]--
- 62
- 62
- 62
- 62
- 62
- 62
- 62
- 62
- 62
- 62
r 62             while (finger != null) {
r 63                 double fingerValue = finger.p.xy(finger.dir);
r 64                 double pValue = p.xy(finger.dir);
r 65                 if (pValue < fingerValue) {
r 66                     finger = finger.left;
r 67                 }
r 68                 else if (pValue > fingerValue) {
r 69                     finger = finger.right;
r 70                 }
r 71                 else {
r 72                     return null;
r 73                 }
r 74             }
r 75             finger = newNode;
r 76             treeSize++;
r 77             if (!this.contains(newNode.p)) {
r 78                 listOfPoints.add(newNode.p);
--[ 2018.11.26.23.02.17.844.0 ]--
- 89
r 89             while (finger != null) {
--[ 2018.11.26.23.02.21.273.0 ]--
- 92
- 92
- 92
- 92
- 92
- 92
- 92
- 92
- 92
- 92
r 92                 if (pValue < fingerValue) {
r 93                     finger = finger.left;
r 94                 }
r 95                 else if (pValue > fingerValue) {
r 96                     finger = finger.right;
r 97                 }
r 98                 else {
r 99                     return finger.v;
--[ 2018.11.26.23.02.23.991.0 ]--
+ 102             return null;
--[ 2018.11.26.23.02.50.089.0 ]--
:/readme.html
r 33 Your name: Amish Mishra, Chester Chan, Imani Muya
r 35 Operating system: Windows 10, and Mac OS
r 37 Lab computer or your own computer: Personal computers
r 39 Approx hours to complete assignment: 10 hours
r 41 Partner's name (if applicable): Team project
r 43 TA's or Tutor's name (if received help): Edric Yu
r 45 Did you receive help from your instructor? yes, at some point.
r 56 Each node held it's own position point, the value that it was assigned, it's partition direction, and reference to the node directly to its left and to its right.
--[ 2018.11.26.23.02.50.096.0 ]--
UpdateTree (AD): 26 0
+ /.git/logs/refs/stash
+ /.git/refs/stash
+ /.git/objects/0b/56e3eb450657f584775a34df39197adab902aa
+ /.git/objects/0b/cb356576288cbf384c8b574eec4563e03716ad
+ /.git/objects/16/969f2089f19978f6283f139cc8a26dcc57b973
+ /.git/objects/1f/267b57e44ef46bfb1dda95fca4d20ca7699266
+ /.git/objects/2d/91ab5a078f574b3f43654d336eeff5c116ab7f
+ /.git/objects/32/430c3e8a3b983dcaf069873258a20ccb460f1c
+ /.git/objects/5c/714b7c229b080c45a5ede9f7ece3cedfa68f49
+ /.git/objects/60/deb5710f2ba4f37d56cca5037da055d40f22b3
+ /.git/objects/6a/553c558ca613f4f6e47b53fabc2553acef5e35
+ /.git/objects/74/35578714dc7b90afa50919c2d0d74e0fe4d4fa
+ /.git/objects/a1/86f05348fe02881ad1779a986c8aa365274ddb
+ /.git/objects/a6/87dd0fc6f46abf79c17d9c8029f2b082e36114
+ /.git/objects/a7/f256973a651eaf880995889d1e8cc1a0931572
+ /.git/objects/b1/9c420b60963d64c2b58f5e2d140beb013a2fb8
+ /.git/objects/b1/f3b258a258ba3f36906b6c25b3ffe985ee85b5
+ /.git/objects/c4/dc752bbd2cbf1631ee1b3475d2566003a33ae9
+ /.git/objects/c6/067c8ca9b1f9bae53d606c3b8682f234e22751
+ /.git/objects/ce/e224191935ec8164f35f3259ccb6222ff25258
+ /.git/objects/cf/e46f6090432f0a8c4c565adf7ca4ad0baa35ff
+ /.git/objects/d0/a1a848fb4334356d0f0a91507dbaa2256fc24b
+ /.git/objects/dc/340b3e6f04a7ba6eb3fc59e630986974d26af2
+ /.git/objects/dc/3a2a7bfa32e21f94caf8a4d152a1a70f781ed7
+ /.git/objects/f1/f18be269f204fef2c229385f3ecdb6757638f7
+ /.git/objects/f1/fba191c02dc5800114ab8150861ab78197af63

--[ 2018.11.26.23.13.48.697.0 ]--
:/src/PSKDTree.java
+ 90             }
+ 91 <<<<<<< HEAD
+ 92 =======
+ 93             finger = newNode;
+ 94             treeSize++;
+ 95             if (!this.contains(newNode.p)) {
+ 96                 listOfPoints.add(newNode.p);
+ 98 >>>>>>> 88dcba6d923e7ec4a415ef64c3f7cbb2272df5e3
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
- 126
r 126         if(get(p)!=null) return true;
r 127         return false;
r 131         return root.v;
+ 258 
+ 259     private static PointSearch<Character> createNewPS() {
+ 260         return new PSKDTree<>();
+ 261     }
+ 265         ///tests/input100K.txt
+ 266 
+ 267         PointSearch<Character> ps = createNewPS();
+ 268         In in = new In(args[0]);
+ 269 
+ 270         int size = 100000; //change this depending on the size of the input file!
+ 271         double[] dbl,time;
+ 272         dbl = new double[size];
+ 273         int testing_size = 10000;
+ 274         time = new double[testing_size];
+ 275         dbl = in.readAllDoubles();
+ 276         double elapsedTime=0;
+ 277 
+ 278 
+ 279         for(int i = 0; i<size-1; i=i+2){
+ 280             Point p = new Point(dbl[i],dbl[i+1]);
+ 281             ps.put(p,'r');
+ 282         }
+ 283 
+ 284 
+ 285         for(int j = 0; j<testing_size-1;j++) {
+ 286             Stopwatch rolex = new Stopwatch();
+ 287             ps.nearest(Point.uniform());
+ 288             time[j] =rolex.elapsedTime();
+ 289 
+ 290             //StdOut.printf("time elapsed: %f\n", time[j]);
+ 291             elapsedTime += time[j];
+ 292 
+ 293         }
+ 294 
+ 295         StdOut.printf("avg nearest calcs per sec: %f\n", 1/(elapsedTime/testing_size));
+ 296 
+ 297 
--[ 2018.11.26.23.13.48.893.0 ]--
UpdateTree (AD): 9 0
+ /.git/objects/17/638b42c425f8919082f38c338030e91cf11e24
+ /.git/objects/21/78dbc8284117228740ee4e91396816726e7afa
+ /.git/objects/4f/32b9c17fd111d369f0b8012cb293f1f89ff64d
+ /.git/objects/e5/7398c3390f66bf11705636fd3cfea8202c88ca
+ /.git/objects/f8/1c03ccf3f5d1ab28a64e2218671f65136c86cd
+ /.git/MERGE_MSG
+ /.git/MERGE_HEAD
+ /.git/MERGE_MODE
+ /readme_Chan.html

--[ 2018.11.26.23.13.48.896.0 ]--
InitFile: /readme_Chan.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

-16 bytes object overhead
-2 doubles x 8 bytes = 16 bytes
-this is a multiple of 8! we're good.

Point: 32 bytes

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->
private class Node {                // 16 object overhead
    Point p;                        // 8 bytes reference to a Point
    Value v;                        // skip
    Node left, right;               // 2 x 8 bytes reference to a Node = 16 bytes
    Partition.Direction dir;        // 8 bytes reference to the Partition.Direction boolean
}                                   // 48 bytes (a multiple of 8!)

put:
ArrayList<Point> of N Points: 8 bytes for each Point reference * N
    +
8 bytes ref to Node * N
    =16*N



How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

              file                    |             brute force               |      2d tree
--------------------------------------|---------------------------------------|---------------
`input100K.txt` (avg'd of 10k runs)   |                $275$                  |     $1170$
`input1M.txt` (avg'd over 1000 runs)  |                $22.7$                 |     $54.3$

<!-- Details and screenshots here -->
We read in the input text files and set the values to a double array. Then, we placed a pair of values from the text file into a new
Point, which we then inserted into our PointSearch constructor. From there, we ran a large number of tests setting a stop watch before
running a nearest() call on a random point (made with Point.uniform(). The time is recorded in seconds, so taking the inverse of one of
these time recordings reports the number of nearest calls that took place in 1 second. I averaged the elapsed time over the testing size
to get more reliable results, and took the inverse of that to get the # operations/second.


Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.26.23.13.49.148.0 ]--
:/readme.html
r 3 **P05_KDTrees**
r 33 Your name:
r 35 Operating system:
r 37 Lab computer or your own computer:
r 39 Approx hours to complete assignment:
r 41 Partner's name (if applicable):
r 43 TA's or Tutor's name (if received help):
r 45 Did you receive help from your instructor?
r 56 
+ 70 -16 bytes object overhead
+ 71 -2 doubles x 8 bytes = 16 bytes
r 72 -this is a multiple of 8! we're good.
r 74 Point: 32 bytes
+ 76 bytes per `PSKDTree` of $N$ points: $\sim N$
+ 78 <!-- Details and screenshots here -->
+ 79 private class Node {                // 16 object overhead
r 80 Point p;                        // 8 bytes reference to a Point
r 81 Value v;                        // skip
r 82 Node left, right;               // 2 x 8 bytes reference to a Node = 16 bytes
r 83 Partition.Direction dir;        // 8 bytes reference to the Partition.Direction boolean
r 84 }                                   // 48 bytes (a multiple of 8!)
+ 86 put:
r 87 ArrayList<Point> of N Points: 8 bytes for each Point reference * N
r 88     +
r 89     8 bytes ref to Node * N
r 90     =16*N
r 92 
+ 94     How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
+ 95     Explain how you determined the operations per second.
+ 96     (Do not count the time to read in the points from file or to build the data structure.)
+ 98     Repeat the question but with the 2d tree implementation.
+ 100     file                    |             brute force               |      2d tree
+ 101     --------------------------------------|---------------------------------------|---------------
r 102     `input100K.txt` (avg'd of 10k runs)   |                $275$                  |     $1170$
r 103     `input1M.txt` (avg'd over 1000 runs)  |                $22.7$                 |     $54.3$
+ 105     <!-- Details and screenshots here -->
+ 106     We read in the input text files and set the values to a double array. Then, we placed a pair of values from the text file into a new
+ 107     Point, which we then inserted into our PointSearch constructor. From there, we ran a large number of tests setting a stop watch before
+ 108     running a nearest() call on a random point (made with Point.uniform(). The time is recorded in seconds, so taking the inverse of one of
+ 109     these time recordings reports the number of nearest calls that took place in 1 second. I averaged the elapsed time over the testing size
+ 110     to get more reliable results, and took the inverse of that to get the # operations/second.
r 111 
+ 113     Known bugs / limitations
+ 114     -------------------------
r 116     <!-- Details and screenshots here -->
r 117 
r 119     Reflection
r 120     ===========
+ 122 <<<<<<< HEAD
+ 125 =======
+ 126     Describe whatever help (if any) that you received.
+ 127     Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.
r 129     <!-- Details and screenshots here -->
r 130 >>>>>>> 88dcba6d923e7ec4a415ef64c3f7cbb2272df5e3
r 131 
+ 133 <<<<<<< HEAD
+ 136 =======
+ 137     Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
+ 138     Give one sentence explaining what each of you contributed.
+ 139     If you used the code from the lab challenge, explain what is shared between you and your lab partner.
+ 140 
+ 141     <!-- Details and screenshots here -->
+ 142 >>>>>>> 88dcba6d923e7ec4a415ef64c3f7cbb2272df5e3
+ 143 
r 146     Describe any serious problems you encountered.
r 148     <!-- Details and screenshots here -->
r 151     List any other comments here.
r 152     Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.
r 154     <!-- Details and screenshots here -->
r 160     <!--
r 162     Leave the following, as this will format your text above to look nice in a wed browser.
r 164     -->
r 166     <!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>
--[ 2018.11.26.23.13.49.189.0 ]--
:/src/PSBruteForce.java
+ 95 
r 97      private static PointSearch<Character> createNewPS() {
r 98         return new PSBruteForce<>();
+ 100 
+ 104         ///tests/input100K.txt
+ 105 
+ 106         PointSearch<Character> ps = createNewPS();
+ 107         In in = new In(args[0]);
+ 108 
+ 109         int size = 1000000;
+ 110         double[] dbl,time;
+ 111         dbl = new double[size];
+ 112         int testing_size = 100;
+ 113         time = new double[testing_size];
+ 114         dbl = in.readAllDoubles();
+ 115         double elapsedTime=0;
+ 116 
+ 117 
+ 118         for(int i = 0; i<size-1; i=i+2){
+ 119             Point p = new Point(dbl[i],dbl[i+1]);
+ 120             ps.put(p,'r');
+ 121         }
+ 122 
+ 123 
+ 124         for(int j = 0; j<testing_size-1;j++) {
+ 125             Stopwatch rolex = new Stopwatch();
+ 126             ps.nearest(Point.uniform());
+ 127             time[j] =rolex.elapsedTime();
+ 128 
+ 129            // StdOut.printf("time elapsed: %f\n", time[j]);
+ 130             elapsedTime += time[j];
+ 131 
+ 132         }
+ 133 
+ 134         StdOut.printf("avg nearest calcs per sec: %f\n", 1/(elapsedTime/testing_size));
+ 135 
--[ 2018.11.26.23.14.46.146.0 ]--
:/src/PSKDTree.java
- 91
- 91
--[ 2018.11.26.23.14.49.243.0 ]--
- 96
--[ 2018.11.26.23.18.15.461.0 ]--
:/readme.html
r 124 =======
r 125 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.16.284.0 ]--
r 125     Describe whatever help (if any) that you received.
r 126 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.16.730.0 ]--
r 126     Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.
r 127 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.17.315.0 ]--
r 127 
r 128 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.19.443.0 ]--
r 128     <!-- Details and screenshots here -->
r 129 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.20.363.0 ]--
r 128 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
r 129     <!-- Details and screenshots here -->
--[ 2018.11.26.23.18.21.953.0 ]--
r 128     <!-- Details and screenshots here -->
r 129 Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
--[ 2018.11.26.23.18.31.577.0 ]--
- 130
- 130
- 130
- 130
--[ 2018.11.26.23.18.37.011.0 ]--
- 124
--[ 2018.11.26.23.18.39.906.0 ]--
- 122
--[ 2018.11.26.23.18.40.260.0 ]--
- 121
r 121     <!-- Details and screenshots here -->
--[ 2018.11.26.23.18.47.030.0 ]--
r 126     Edric Yu answered questions and helped with debugging. He noticed that our get function was wrong, because the Burger King locator was returning the wrong locations. That was a pretty funny catch.
r 127     <!-- Details and screenshots here -->
r 128     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.51.528.0 ]--
- 129
--[ 2018.11.26.23.18.54.190.0 ]--
r 128     Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
r 129     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.54.684.0 ]--
r 129     Give one sentence explaining what each of you contributed.
r 130     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.54.942.0 ]--
r 130     If you used the code from the lab challenge, explain what is shared between you and your lab partner.
r 131     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.55.294.0 ]--
r 131 
r 132     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.55.331.0 ]--
r 132     <!-- Details and screenshots here -->
r 133     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.55.435.0 ]--
r 133 >>>>>>> 88dcba6d923e7ec4a415ef64c3f7cbb2272df5e3
r 134     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.18.56.120.0 ]--
r 133     This was a group assignment, soo... We also uses GitHub to work as a group on things.
r 134 >>>>>>> 88dcba6d923e7ec4a415ef64c3f7cbb2272df5e3
--[ 2018.11.26.23.18.56.680.0 ]--
r 132     This was a group assignment, soo... We also uses GitHub to work as a group on things.
r 133     <!-- Details and screenshots here -->
--[ 2018.11.26.23.18.57.190.0 ]--
r 132     <!-- Details and screenshots here -->
r 133     This was a group assignment, soo... We also uses GitHub to work as a group on things.
--[ 2018.11.26.23.19.01.839.0 ]--
- 134
--[ 2018.11.26.23.19.03.453.0 ]--
- 134
- 134
--[ 2018.11.26.23.19.26.112.0 ]--
- 121
--[ 2018.11.26.23.19.36.131.0 ]--
+ 123 
--[ 2018.11.26.23.19.36.187.0 ]--
r 124     
--[ 2018.11.26.23.19.38.127.0 ]--
- 123
--[ 2018.11.26.23.19.38.295.0 ]--
- 123
--[ 2018.11.26.23.19.45.669.0 ]--
+ 126     
--[ 2018.11.26.23.19.46.155.0 ]--
+ 126     
--[ 2018.11.26.23.19.50.222.0 ]--
- 125
--[ 2018.11.26.23.19.50.629.0 ]--
- 125
--[ 2018.11.26.23.20.23.590.0 ]--
r 125 
--[ 2018.11.26.23.23.01.067.0 ]--
UpdateTree (AD): 13 4
- /readme_Chan.html
- /.git/MERGE_MODE
- /.git/MERGE_MSG
- /.git/MERGE_HEAD
+ /.git/objects/06/997549a8da4323eee90381b892371a58780790
+ /.git/objects/18/21b84143993fbbe10a9c26a8ce13e9923613b1
+ /.git/objects/21/9357914b6e15bbd67bdad6ad8b2e3f08a4c515
+ /.git/objects/25/39218fcaf422ddbe6de9d6682765b398af3879
+ /.git/objects/84/29de24762f7dd3710703b9eb48e61bd50fcd29
+ /.git/objects/9c/95cf9fbf3d7ba97b387a974fae2697a2c42cb1
+ /.git/objects/a0/443d824441814b9196b54ea102f3fd2f92761c
+ /.git/objects/a4/256b86c682256b78c9a9e27cb8031ed4231efc
+ /.git/objects/c4/0261fa19f83997ea96fb76d52134816d0b4d31
+ /.git/objects/cb/98a0feb337d03f73f3e25c5c1d96a617b41adc
+ /.git/objects/d7/415acc5e7cc30f401690b9d6d9427a7f279f60
+ /.git/objects/e8/fe36a75b0ecec37a8390348463ad332a4c4d38
+ /.git/objects/fb/914a598c11c1ff175d15c49a1be6cf8660eaa8

--[ 2018.11.26.23.23.18.427.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.23.23.51.287.0 ]--
:/src/PSKDTree.java
r 128         return g;
--[ 2018.11.26.23.23.53.018.0 ]--
r 128         return get;
--[ 2018.11.26.23.23.53.044.0 ]--
r 128         return get();
--[ 2018.11.26.23.24.00.043.0 ]--
r 128         return get(n);
--[ 2018.11.26.23.24.00.314.0 ]--
r 128         return get(ne);
--[ 2018.11.26.23.24.00.846.0 ]--
r 128         return get(nearest);
--[ 2018.11.26.23.24.00.874.0 ]--
r 128         return get(nearest());
--[ 2018.11.26.23.24.01.831.0 ]--
r 128         return get(nearest(p));
--[ 2018.11.26.23.24.09.391.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.26.23.26.58.689.0 ]--
:/readme.html
r 56 O
--[ 2018.11.26.23.26.59.000.0 ]--
r 56 Ou
--[ 2018.11.26.23.26.59.158.0 ]--
r 56 Our
--[ 2018.11.26.23.26.59.299.0 ]--
r 56 Our 
--[ 2018.11.26.23.26.59.748.0 ]--
r 56 Our N
--[ 2018.11.26.23.26.59.843.0 ]--
r 56 Our No
--[ 2018.11.26.23.27.00.047.0 ]--
r 56 Our Nof
--[ 2018.11.26.23.27.00.151.0 ]--
r 56 Our Nofe
--[ 2018.11.26.23.27.00.349.0 ]--
r 56 Our Nof
--[ 2018.11.26.23.27.00.528.0 ]--
r 56 Our No
--[ 2018.11.26.23.27.00.719.0 ]--
r 56 Our N
--[ 2018.11.26.23.27.00.854.0 ]--
r 56 Our 
--[ 2018.11.26.23.27.05.230.0 ]--
r 56 Our n
--[ 2018.11.26.23.27.05.335.0 ]--
r 56 Our no
--[ 2018.11.26.23.27.05.472.0 ]--
r 56 Our nof
--[ 2018.11.26.23.27.05.689.0 ]--
r 56 Our nofe
--[ 2018.11.26.23.27.06.014.0 ]--
r 56 Our nof
--[ 2018.11.26.23.27.06.264.0 ]--
r 56 Our no
--[ 2018.11.26.23.27.06.671.0 ]--
r 56 Our n
--[ 2018.11.26.23.27.06.858.0 ]--
r 56 Our 
--[ 2018.11.26.23.27.07.405.0 ]--
r 56 Our N
--[ 2018.11.26.23.27.07.520.0 ]--
r 56 Our No
--[ 2018.11.26.23.27.07.645.0 ]--
r 56 Our Nod
--[ 2018.11.26.23.27.07.752.0 ]--
r 56 Our Node
--[ 2018.11.26.23.27.07.975.0 ]--
r 56 Our Node 
--[ 2018.11.26.23.27.08.458.0 ]--
r 56 Our Node c
--[ 2018.11.26.23.27.08.622.0 ]--
r 56 Our Node ca
--[ 2018.11.26.23.27.08.901.0 ]--
r 56 Our Node c
--[ 2018.11.26.23.27.09.185.0 ]--
r 56 Our Node co
--[ 2018.11.26.23.27.09.297.0 ]--
r 56 Our Node con
--[ 2018.11.26.23.27.09.423.0 ]--
r 56 Our Node cont
--[ 2018.11.26.23.27.12.990.0 ]--
r 56 Our Node conta
--[ 2018.11.26.23.27.13.072.0 ]--
r 56 Our Node contai
--[ 2018.11.26.23.27.13.201.0 ]--
r 56 Our Node contain
--[ 2018.11.26.23.27.13.283.0 ]--
r 56 Our Node containr
--[ 2018.11.26.23.27.13.505.0 ]--
r 56 Our Node containrd
--[ 2018.11.26.23.27.13.712.0 ]--
r 56 Our Node containr
--[ 2018.11.26.23.27.13.867.0 ]--
r 56 Our Node contain
--[ 2018.11.26.23.27.13.949.0 ]--
r 56 Our Node containe
--[ 2018.11.26.23.27.14.129.0 ]--
r 56 Our Node contained
--[ 2018.11.26.23.27.14.241.0 ]--
r 56 Our Node contained 
--[ 2018.11.26.23.27.14.444.0 ]--
r 56 Our Node contained t
--[ 2018.11.26.23.27.14.545.0 ]--
r 56 Our Node contained th
--[ 2018.11.26.23.27.14.756.0 ]--
r 56 Our Node contained th 
--[ 2018.11.26.23.27.14.896.0 ]--
r 56 Our Node contained th e
--[ 2018.11.26.23.27.15.688.0 ]--
r 56 Our Node contained th 
--[ 2018.11.26.23.27.15.821.0 ]--
r 56 Our Node contained th
--[ 2018.11.26.23.27.16.000.0 ]--
r 56 Our Node contained the
--[ 2018.11.26.23.27.54.027.0 ]--
r 56 Our Node contained the 
--[ 2018.11.26.23.27.54.669.0 ]--
r 56 Our Node contained the l
--[ 2018.11.26.23.27.54.881.0 ]--
r 56 Our Node contained the lo
--[ 2018.11.26.23.27.54.924.0 ]--
r 56 Our Node contained the loc
--[ 2018.11.26.23.27.55.074.0 ]--
r 56 Our Node contained the loca
--[ 2018.11.26.23.27.55.242.0 ]--
r 56 Our Node contained the locat
--[ 2018.11.26.23.27.55.292.0 ]--
r 56 Our Node contained the locati
--[ 2018.11.26.23.27.55.404.0 ]--
r 56 Our Node contained the locatio
--[ 2018.11.26.23.27.55.524.0 ]--
r 56 Our Node contained the location
--[ 2018.11.26.23.27.55.689.0 ]--
r 56 Our Node contained the location 
--[ 2018.11.26.23.27.55.761.0 ]--
r 56 Our Node contained the location o
--[ 2018.11.26.23.27.55.900.0 ]--
r 56 Our Node contained the location of
--[ 2018.11.26.23.27.56.071.0 ]--
r 56 Our Node contained the location of 
--[ 2018.11.26.23.27.56.506.0 ]--
r 56 Our Node contained the location of t
--[ 2018.11.26.23.27.56.687.0 ]--
r 56 Our Node contained the location of th
--[ 2018.11.26.23.27.56.796.0 ]--
r 56 Our Node contained the location of the
--[ 2018.11.26.23.27.56.895.0 ]--
r 56 Our Node contained the location of the 
--[ 2018.11.26.23.27.57.089.0 ]--
r 56 Our Node contained the location of the p
--[ 2018.11.26.23.27.57.240.0 ]--
r 56 Our Node contained the location of the po
--[ 2018.11.26.23.27.57.750.0 ]--
r 56 Our Node contained the location of the poi
--[ 2018.11.26.23.27.57.958.0 ]--
r 56 Our Node contained the location of the poin
--[ 2018.11.26.23.27.58.048.0 ]--
r 56 Our Node contained the location of the point
--[ 2018.11.26.23.27.58.202.0 ]--
r 56 Our Node contained the location of the point,
--[ 2018.11.26.23.27.58.374.0 ]--
r 56 Our Node contained the location of the point, 
--[ 2018.11.26.23.27.58.504.0 ]--
r 56 Our Node contained the location of the point, t
--[ 2018.11.26.23.27.58.606.0 ]--
r 56 Our Node contained the location of the point, th
--[ 2018.11.26.23.27.58.766.0 ]--
r 56 Our Node contained the location of the point, the
--[ 2018.11.26.23.27.58.834.0 ]--
r 56 Our Node contained the location of the point, the 
--[ 2018.11.26.23.28.04.389.0 ]--
r 56 Our Node contained the location of the point, the v
--[ 2018.11.26.23.28.04.454.0 ]--
r 56 Our Node contained the location of the point, the va
--[ 2018.11.26.23.28.04.572.0 ]--
r 56 Our Node contained the location of the point, the val
--[ 2018.11.26.23.28.04.735.0 ]--
r 56 Our Node contained the location of the point, the valu
--[ 2018.11.26.23.28.04.853.0 ]--
r 56 Our Node contained the location of the point, the value
--[ 2018.11.26.23.28.05.015.0 ]--
r 56 Our Node contained the location of the point, the value 
--[ 2018.11.26.23.28.05.127.0 ]--
r 56 Our Node contained the location of the point, the value a
--[ 2018.11.26.23.28.05.348.0 ]--
r 56 Our Node contained the location of the point, the value as
--[ 2018.11.26.23.28.05.514.0 ]--
r 56 Our Node contained the location of the point, the value ass
--[ 2018.11.26.23.28.05.706.0 ]--
r 56 Our Node contained the location of the point, the value assi
--[ 2018.11.26.23.28.05.855.0 ]--
r 56 Our Node contained the location of the point, the value assig
--[ 2018.11.26.23.28.05.936.0 ]--
r 56 Our Node contained the location of the point, the value assign
--[ 2018.11.26.23.28.06.622.0 ]--
r 56 Our Node contained the location of the point, the value assigne
--[ 2018.11.26.23.28.06.814.0 ]--
r 56 Our Node contained the location of the point, the value assigned
--[ 2018.11.26.23.28.06.921.0 ]--
r 56 Our Node contained the location of the point, the value assigned 
--[ 2018.11.26.23.28.07.023.0 ]--
r 56 Our Node contained the location of the point, the value assigned t
--[ 2018.11.26.23.28.07.125.0 ]--
r 56 Our Node contained the location of the point, the value assigned to
--[ 2018.11.26.23.28.07.232.0 ]--
r 56 Our Node contained the location of the point, the value assigned to 
--[ 2018.11.26.23.28.07.276.0 ]--
r 56 Our Node contained the location of the point, the value assigned to t
--[ 2018.11.26.23.28.07.403.0 ]--
r 56 Our Node contained the location of the point, the value assigned to th
--[ 2018.11.26.23.28.07.520.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the
--[ 2018.11.26.23.28.07.611.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the 
--[ 2018.11.26.23.28.08.026.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the n
--[ 2018.11.26.23.28.08.152.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the no
--[ 2018.11.26.23.28.08.253.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the nod
--[ 2018.11.26.23.28.08.420.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node
--[ 2018.11.26.23.28.08.590.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node,
--[ 2018.11.26.23.28.08.758.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, 
--[ 2018.11.26.23.28.08.864.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, a
--[ 2018.11.26.23.28.09.127.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as
--[ 2018.11.26.23.28.09.371.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as 
--[ 2018.11.26.23.28.09.722.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as
--[ 2018.11.26.23.28.09.877.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, a
--[ 2018.11.26.23.28.10.007.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, 
--[ 2018.11.26.23.28.15.643.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, a
--[ 2018.11.26.23.28.15.780.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as
--[ 2018.11.26.23.28.15.949.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as 
--[ 2018.11.26.23.28.16.096.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as w
--[ 2018.11.26.23.28.16.269.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as we
--[ 2018.11.26.23.28.16.391.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as wel
--[ 2018.11.26.23.28.16.533.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well
--[ 2018.11.26.23.28.16.666.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well 
--[ 2018.11.26.23.28.16.741.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well a
--[ 2018.11.26.23.28.16.825.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as
--[ 2018.11.26.23.28.17.017.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as 
--[ 2018.11.26.23.28.17.295.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as r
--[ 2018.11.26.23.28.17.405.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as re
--[ 2018.11.26.23.28.17.623.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as ref
--[ 2018.11.26.23.28.17.742.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refe
--[ 2018.11.26.23.28.18.002.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refen
--[ 2018.11.26.23.28.18.937.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refe
--[ 2018.11.26.23.28.19.319.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refee
--[ 2018.11.26.23.28.19.652.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refe
--[ 2018.11.26.23.28.19.769.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refer
--[ 2018.11.26.23.28.19.962.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as refere
--[ 2018.11.26.23.28.20.196.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referen
--[ 2018.11.26.23.28.20.323.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenc
--[ 2018.11.26.23.28.20.423.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as reference
--[ 2018.11.26.23.28.20.652.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced
--[ 2018.11.26.23.28.20.818.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced 
--[ 2018.11.26.23.28.20.911.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced t
--[ 2018.11.26.23.28.21.005.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced to
--[ 2018.11.26.23.28.21.114.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced to 
--[ 2018.11.26.23.28.21.410.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced to
--[ 2018.11.26.23.28.21.577.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced t
--[ 2018.11.26.23.28.21.728.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced 
--[ 2018.11.26.23.28.21.873.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as referenced
--[ 2018.11.26.23.28.22.019.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as reference
--[ 2018.11.26.23.28.22.138.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references
--[ 2018.11.26.23.28.22.250.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references 
--[ 2018.11.26.23.28.22.385.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references t
--[ 2018.11.26.23.28.22.457.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to
--[ 2018.11.26.23.28.22.549.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to 
--[ 2018.11.26.23.28.22.608.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to t
--[ 2018.11.26.23.28.22.730.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to th
--[ 2018.11.26.23.28.22.815.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the
--[ 2018.11.26.23.28.22.911.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the 
--[ 2018.11.26.23.28.23.133.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the l
--[ 2018.11.26.23.28.23.488.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the le
--[ 2018.11.26.23.28.23.684.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the led
--[ 2018.11.26.23.28.24.069.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the le
--[ 2018.11.26.23.28.24.194.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the lef
--[ 2018.11.26.23.28.24.408.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left
--[ 2018.11.26.23.28.24.534.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left 
--[ 2018.11.26.23.28.24.649.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left a
--[ 2018.11.26.23.28.24.741.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left an
--[ 2018.11.26.23.28.24.878.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and
--[ 2018.11.26.23.28.24.977.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and 
--[ 2018.11.26.23.28.25.207.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and r
--[ 2018.11.26.23.28.25.319.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and ri
--[ 2018.11.26.23.28.25.804.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and rih
--[ 2018.11.26.23.28.26.134.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and ri
--[ 2018.11.26.23.28.26.669.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left and r
--[ 2018.11.26.23.28.26.762.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left an
--[ 2018.11.26.23.28.26.818.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left 
--[ 2018.11.26.23.28.26.883.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the left
--[ 2018.11.26.23.28.27.005.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the lef
--[ 2018.11.26.23.28.27.150.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the le
--[ 2018.11.26.23.28.27.308.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the l
--[ 2018.11.26.23.28.27.421.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the 
--[ 2018.11.26.23.28.27.976.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the n
--[ 2018.11.26.23.28.28.121.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the no
--[ 2018.11.26.23.28.28.262.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nod
--[ 2018.11.26.23.28.28.451.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the node
--[ 2018.11.26.23.28.28.624.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes
--[ 2018.11.26.23.28.28.769.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes 
--[ 2018.11.26.23.28.28.862.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes o
--[ 2018.11.26.23.28.28.980.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on
--[ 2018.11.26.23.28.29.137.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on 
--[ 2018.11.26.23.28.29.406.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on i
--[ 2018.11.26.23.28.29.535.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on it
--[ 2018.11.26.23.28.29.767.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its
--[ 2018.11.26.23.28.29.915.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its 
--[ 2018.11.26.23.28.30.255.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its d
--[ 2018.11.26.23.28.30.455.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its di
--[ 2018.11.26.23.28.30.562.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its dir
--[ 2018.11.26.23.28.30.716.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its dire
--[ 2018.11.26.23.28.30.947.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direc
--[ 2018.11.26.23.28.31.208.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct
--[ 2018.11.26.23.28.31.334.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct 
--[ 2018.11.26.23.28.31.397.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct l
--[ 2018.11.26.23.28.31.528.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct le
--[ 2018.11.26.23.28.32.307.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct lef
--[ 2018.11.26.23.28.32.529.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left
--[ 2018.11.26.23.28.32.693.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left 
--[ 2018.11.26.23.28.32.788.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left a
--[ 2018.11.26.23.28.32.928.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left an
--[ 2018.11.26.23.28.33.053.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and
--[ 2018.11.26.23.28.33.183.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and 
--[ 2018.11.26.23.28.33.284.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and r
--[ 2018.11.26.23.28.33.379.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and ri
--[ 2018.11.26.23.28.33.539.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and rig
--[ 2018.11.26.23.28.33.635.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and righ
--[ 2018.11.26.23.28.33.786.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right
--[ 2018.11.26.23.28.33.883.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right,
--[ 2018.11.26.23.28.34.043.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, 
--[ 2018.11.26.23.28.34.133.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, a
--[ 2018.11.26.23.28.34.300.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as
--[ 2018.11.26.23.28.34.476.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as 
--[ 2018.11.26.23.28.48.307.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as d
--[ 2018.11.26.23.28.48.440.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as di
--[ 2018.11.26.23.28.48.544.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as dir
--[ 2018.11.26.23.28.49.012.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as di
--[ 2018.11.26.23.28.49.151.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as d
--[ 2018.11.26.23.28.49.319.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as 
--[ 2018.11.26.23.28.49.448.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as
--[ 2018.11.26.23.28.52.059.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as 
--[ 2018.11.26.23.29.00.809.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, as
--[ 2018.11.26.23.29.00.940.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, a
--[ 2018.11.26.23.29.02.652.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, 
--[ 2018.11.26.23.29.10.495.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, a
--[ 2018.11.26.23.29.10.642.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, an
--[ 2018.11.26.23.29.10.725.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and
--[ 2018.11.26.23.29.10.846.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and 
--[ 2018.11.26.23.29.10.951.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and t
--[ 2018.11.26.23.29.11.034.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and th
--[ 2018.11.26.23.29.11.155.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the
--[ 2018.11.26.23.29.11.302.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the 
--[ 2018.11.26.23.29.11.996.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the d
--[ 2018.11.26.23.29.12.105.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the di
--[ 2018.11.26.23.29.12.235.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the dir
--[ 2018.11.26.23.29.12.411.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the dire
--[ 2018.11.26.23.29.12.603.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direc
--[ 2018.11.26.23.29.16.197.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direct
--[ 2018.11.26.23.29.16.386.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the directi
--[ 2018.11.26.23.29.16.423.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the directio
--[ 2018.11.26.23.29.16.591.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction
--[ 2018.11.26.23.29.16.775.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction 
--[ 2018.11.26.23.29.22.406.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction h
--[ 2018.11.26.23.29.22.722.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction 
--[ 2018.11.26.23.29.22.779.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction w
--[ 2018.11.26.23.29.22.950.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction wh
--[ 2018.11.26.23.29.23.034.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction whi
--[ 2018.11.26.23.29.23.175.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction whic
--[ 2018.11.26.23.29.23.263.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which
--[ 2018.11.26.23.29.23.896.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which 
--[ 2018.11.26.23.29.24.038.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which i
--[ 2018.11.26.23.29.24.156.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is
--[ 2018.11.26.23.29.24.262.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is 
--[ 2018.11.26.23.29.24.380.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is e
--[ 2018.11.26.23.29.24.703.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is ei
--[ 2018.11.26.23.29.24.822.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is eit
--[ 2018.11.26.23.29.24.908.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is eith
--[ 2018.11.26.23.29.24.979.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is eithe
--[ 2018.11.26.23.29.25.106.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either
--[ 2018.11.26.23.29.25.230.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either 
--[ 2018.11.26.23.29.25.373.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either l
--[ 2018.11.26.23.29.25.522.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either le
--[ 2018.11.26.23.29.25.668.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either lef
--[ 2018.11.26.23.29.25.880.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left
--[ 2018.11.26.23.29.26.348.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left 
--[ 2018.11.26.23.29.26.489.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left r
--[ 2018.11.26.23.29.26.637.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left ri
--[ 2018.11.26.23.29.26.743.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left rig
--[ 2018.11.26.23.29.26.833.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left righ
--[ 2018.11.26.23.29.26.973.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right
--[ 2018.11.26.23.29.27.021.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right 
--[ 2018.11.26.23.29.27.130.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right o
--[ 2018.11.26.23.29.27.357.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right ou
--[ 2018.11.26.23.29.27.514.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our
--[ 2018.11.26.23.29.27.690.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our 
--[ 2018.11.26.23.29.28.275.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our
--[ 2018.11.26.23.29.28.393.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right ou
--[ 2018.11.26.23.29.28.526.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our
--[ 2018.11.26.23.29.28.635.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our 
--[ 2018.11.26.23.29.29.222.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right our
--[ 2018.11.26.23.29.29.359.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right ou
--[ 2018.11.26.23.29.29.493.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right o
--[ 2018.11.26.23.29.29.650.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or
--[ 2018.11.26.23.29.29.761.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or 
--[ 2018.11.26.23.29.30.572.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p
--[ 2018.11.26.23.29.30.798.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p 
--[ 2018.11.26.23.29.30.934.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p d
--[ 2018.11.26.23.29.31.025.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p do
--[ 2018.11.26.23.29.31.159.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p dow
--[ 2018.11.26.23.29.31.299.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p down
--[ 2018.11.26.23.29.31.594.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p down.
--[ 2018.11.26.23.29.31.962.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p down. 
--[ 2018.11.26.23.29.33.117.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p down.
--[ 2018.11.26.23.29.33.299.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p down
--[ 2018.11.26.23.29.33.439.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p dow
--[ 2018.11.26.23.29.33.609.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p do
--[ 2018.11.26.23.29.33.777.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p d
--[ 2018.11.26.23.29.33.915.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p 
--[ 2018.11.26.23.29.34.091.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or p
--[ 2018.11.26.23.29.34.206.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or 
--[ 2018.11.26.23.29.34.859.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or u
--[ 2018.11.26.23.29.34.963.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up
--[ 2018.11.26.23.29.35.123.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up 
--[ 2018.11.26.23.29.35.810.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up d
--[ 2018.11.26.23.29.35.915.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up do
--[ 2018.11.26.23.29.36.042.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up dow
--[ 2018.11.26.23.29.36.169.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up down
--[ 2018.11.26.23.29.37.175.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up down.
--[ 2018.11.26.23.29.37.777.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up down. 
--[ 2018.11.26.23.29.48.292.0 ]--
r 33 Your name: 
--[ 2018.11.26.23.29.49.395.0 ]--
r 33 Your name: A
--[ 2018.11.26.23.29.49.607.0 ]--
r 33 Your name: Am
--[ 2018.11.26.23.29.49.761.0 ]--
r 33 Your name: Ami
--[ 2018.11.26.23.29.49.828.0 ]--
r 33 Your name: Amis
--[ 2018.11.26.23.29.49.990.0 ]--
r 33 Your name: Amish
--[ 2018.11.26.23.29.50.161.0 ]--
r 33 Your name: Amish 
--[ 2018.11.26.23.29.50.379.0 ]--
r 33 Your name: Amish M
--[ 2018.11.26.23.29.50.555.0 ]--
r 33 Your name: Amish Mi
--[ 2018.11.26.23.29.50.655.0 ]--
r 33 Your name: Amish Mis
--[ 2018.11.26.23.29.50.756.0 ]--
r 33 Your name: Amish Mish
--[ 2018.11.26.23.29.51.241.0 ]--
r 33 Your name: Amish Mishr
--[ 2018.11.26.23.29.51.495.0 ]--
r 33 Your name: Amish Mishra
--[ 2018.11.26.23.29.51.707.0 ]--
r 33 Your name: Amish Mishra,
--[ 2018.11.26.23.29.51.892.0 ]--
r 33 Your name: Amish Mishra, 
--[ 2018.11.26.23.29.53.129.0 ]--
r 33 Your name: Amish Mishra, C
--[ 2018.11.26.23.29.53.268.0 ]--
r 33 Your name: Amish Mishra, Ch
--[ 2018.11.26.23.29.53.657.0 ]--
r 33 Your name: Amish Mishra, Che
--[ 2018.11.26.23.29.53.862.0 ]--
r 33 Your name: Amish Mishra, Ches
--[ 2018.11.26.23.29.53.953.0 ]--
r 33 Your name: Amish Mishra, Chest
--[ 2018.11.26.23.29.54.110.0 ]--
r 33 Your name: Amish Mishra, Cheste
--[ 2018.11.26.23.29.54.204.0 ]--
r 33 Your name: Amish Mishra, Chester
--[ 2018.11.26.23.29.54.368.0 ]--
r 33 Your name: Amish Mishra, Chester 
--[ 2018.11.26.23.29.54.668.0 ]--
r 33 Your name: Amish Mishra, Chester C
--[ 2018.11.26.23.29.54.786.0 ]--
r 33 Your name: Amish Mishra, Chester Ch
--[ 2018.11.26.23.29.54.878.0 ]--
r 33 Your name: Amish Mishra, Chester Cha
--[ 2018.11.26.23.29.55.001.0 ]--
r 33 Your name: Amish Mishra, Chester Chan
--[ 2018.11.26.23.29.55.695.0 ]--
r 33 Your name: Amish Mishra, Chester Chan,
--[ 2018.11.26.23.29.55.893.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, 
--[ 2018.11.26.23.29.56.363.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, I
--[ 2018.11.26.23.29.56.475.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Im
--[ 2018.11.26.23.29.56.577.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Ima
--[ 2018.11.26.23.29.56.662.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Iman
--[ 2018.11.26.23.29.56.730.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani
--[ 2018.11.26.23.29.56.831.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani 
--[ 2018.11.26.23.29.56.997.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani M
--[ 2018.11.26.23.29.57.187.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Mu
--[ 2018.11.26.23.29.57.273.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Muy
--[ 2018.11.26.23.29.57.384.0 ]--
r 33 Your name: Amish Mishra, Chester Chan, Imani Muya
--[ 2018.11.26.23.29.59.022.0 ]--
r 35 Operating system: 
--[ 2018.11.26.23.29.59.641.0 ]--
r 35 Operating system: W
--[ 2018.11.26.23.29.59.784.0 ]--
r 35 Operating system: Wi
--[ 2018.11.26.23.29.59.943.0 ]--
r 35 Operating system: Win
--[ 2018.11.26.23.30.00.037.0 ]--
r 35 Operating system: Wind
--[ 2018.11.26.23.30.00.209.0 ]--
r 35 Operating system: Windo
--[ 2018.11.26.23.30.00.585.0 ]--
r 35 Operating system: Window
--[ 2018.11.26.23.30.00.939.0 ]--
r 35 Operating system: Window 
--[ 2018.11.26.23.30.01.266.0 ]--
r 35 Operating system: Window
--[ 2018.11.26.23.30.01.330.0 ]--
r 35 Operating system: Windows
--[ 2018.11.26.23.30.01.449.0 ]--
r 35 Operating system: Windows 
--[ 2018.11.26.23.30.02.091.0 ]--
r 35 Operating system: Windows 1
--[ 2018.11.26.23.30.02.201.0 ]--
r 35 Operating system: Windows 10
--[ 2018.11.26.23.30.02.275.0 ]--
r 35 Operating system: Windows 10 
--[ 2018.11.26.23.30.02.405.0 ]--
r 35 Operating system: Windows 10 a
--[ 2018.11.26.23.30.02.598.0 ]--
r 35 Operating system: Windows 10 an
--[ 2018.11.26.23.30.02.703.0 ]--
r 35 Operating system: Windows 10 and
--[ 2018.11.26.23.30.02.809.0 ]--
r 35 Operating system: Windows 10 and 
--[ 2018.11.26.23.30.03.048.0 ]--
r 35 Operating system: Windows 10 and M
--[ 2018.11.26.23.30.03.418.0 ]--
r 35 Operating system: Windows 10 and Ma
--[ 2018.11.26.23.30.03.676.0 ]--
r 35 Operating system: Windows 10 and Mac
--[ 2018.11.26.23.30.03.906.0 ]--
r 35 Operating system: Windows 10 and Mac 
--[ 2018.11.26.23.30.04.405.0 ]--
r 35 Operating system: Windows 10 and Mac O
--[ 2018.11.26.23.30.04.521.0 ]--
r 35 Operating system: Windows 10 and Mac OS
--[ 2018.11.26.23.30.06.282.0 ]--
r 37 Lab computer or your own computer: 
--[ 2018.11.26.23.30.07.509.0 ]--
r 37 Lab computer or your own computer: p
--[ 2018.11.26.23.30.07.724.0 ]--
r 37 Lab computer or your own computer: pe
--[ 2018.11.26.23.30.07.802.0 ]--
r 37 Lab computer or your own computer: per
--[ 2018.11.26.23.30.08.025.0 ]--
r 37 Lab computer or your own computer: pers
--[ 2018.11.26.23.30.08.085.0 ]--
r 37 Lab computer or your own computer: perso
--[ 2018.11.26.23.30.08.185.0 ]--
r 37 Lab computer or your own computer: person
--[ 2018.11.26.23.30.08.457.0 ]--
r 37 Lab computer or your own computer: persona
--[ 2018.11.26.23.30.08.563.0 ]--
r 37 Lab computer or your own computer: personal
--[ 2018.11.26.23.30.08.659.0 ]--
r 37 Lab computer or your own computer: personal 
--[ 2018.11.26.23.30.09.002.0 ]--
r 37 Lab computer or your own computer: personal c
--[ 2018.11.26.23.30.09.071.0 ]--
r 37 Lab computer or your own computer: personal co
--[ 2018.11.26.23.30.09.197.0 ]--
r 37 Lab computer or your own computer: personal com
--[ 2018.11.26.23.30.09.430.0 ]--
r 37 Lab computer or your own computer: personal como
--[ 2018.11.26.23.30.09.849.0 ]--
r 37 Lab computer or your own computer: personal com
--[ 2018.11.26.23.30.10.132.0 ]--
r 37 Lab computer or your own computer: personal comp
--[ 2018.11.26.23.30.10.308.0 ]--
r 37 Lab computer or your own computer: personal compu
--[ 2018.11.26.23.30.10.417.0 ]--
r 37 Lab computer or your own computer: personal comput
--[ 2018.11.26.23.30.10.563.0 ]--
r 37 Lab computer or your own computer: personal compute
--[ 2018.11.26.23.30.10.689.0 ]--
r 37 Lab computer or your own computer: personal computer
--[ 2018.11.26.23.30.11.168.0 ]--
r 37 Lab computer or your own computer: personal computers
--[ 2018.11.26.23.30.13.001.0 ]--
r 39 Approx hours to complete assignment: 
--[ 2018.11.26.23.30.13.642.0 ]--
r 39 Approx hours to complete assignment: 1
--[ 2018.11.26.23.30.13.783.0 ]--
r 39 Approx hours to complete assignment: 10
--[ 2018.11.26.23.30.13.889.0 ]--
r 39 Approx hours to complete assignment: 10 
--[ 2018.11.26.23.30.14.060.0 ]--
r 39 Approx hours to complete assignment: 10 h
--[ 2018.11.26.23.30.14.175.0 ]--
r 39 Approx hours to complete assignment: 10 ho
--[ 2018.11.26.23.30.14.282.0 ]--
r 39 Approx hours to complete assignment: 10 hou
--[ 2018.11.26.23.30.14.382.0 ]--
r 39 Approx hours to complete assignment: 10 hour
--[ 2018.11.26.23.30.14.568.0 ]--
r 39 Approx hours to complete assignment: 10 hours
--[ 2018.11.26.23.30.16.062.0 ]--
r 41 Partner's name (if applicable): 
--[ 2018.11.26.23.30.17.460.0 ]--
r 41 Partner's name (if applicable): T
--[ 2018.11.26.23.30.17.610.0 ]--
r 41 Partner's name (if applicable): Te
--[ 2018.11.26.23.30.17.850.0 ]--
r 41 Partner's name (if applicable): Tea
--[ 2018.11.26.23.30.17.961.0 ]--
r 41 Partner's name (if applicable): Team
--[ 2018.11.26.23.30.18.055.0 ]--
r 41 Partner's name (if applicable): Team 
--[ 2018.11.26.23.30.18.349.0 ]--
r 41 Partner's name (if applicable): Team A
--[ 2018.11.26.23.30.18.632.0 ]--
r 41 Partner's name (if applicable): Team As
--[ 2018.11.26.23.30.18.814.0 ]--
r 41 Partner's name (if applicable): Team Ass
--[ 2018.11.26.23.30.18.903.0 ]--
r 41 Partner's name (if applicable): Team Assi
--[ 2018.11.26.23.30.19.636.0 ]--
r 41 Partner's name (if applicable): Team Assig
--[ 2018.11.26.23.30.19.760.0 ]--
r 41 Partner's name (if applicable): Team Assign
--[ 2018.11.26.23.30.19.957.0 ]--
r 41 Partner's name (if applicable): Team Assignm
--[ 2018.11.26.23.30.20.098.0 ]--
r 41 Partner's name (if applicable): Team Assignmt
--[ 2018.11.26.23.30.20.285.0 ]--
r 41 Partner's name (if applicable): Team Assignmtn
--[ 2018.11.26.23.30.20.367.0 ]--
r 41 Partner's name (if applicable): Team Assignmtne
--[ 2018.11.26.23.30.20.553.0 ]--
r 41 Partner's name (if applicable): Team Assignmtnet
--[ 2018.11.26.23.30.20.909.0 ]--
r 41 Partner's name (if applicable): Team Assignmtne
--[ 2018.11.26.23.30.21.060.0 ]--
r 41 Partner's name (if applicable): Team Assignmtn
--[ 2018.11.26.23.30.21.194.0 ]--
r 41 Partner's name (if applicable): Team Assignmt
--[ 2018.11.26.23.30.21.349.0 ]--
r 41 Partner's name (if applicable): Team Assignm
--[ 2018.11.26.23.30.21.437.0 ]--
r 41 Partner's name (if applicable): Team Assignme
--[ 2018.11.26.23.30.21.594.0 ]--
r 41 Partner's name (if applicable): Team Assignmen
--[ 2018.11.26.23.30.21.712.0 ]--
r 41 Partner's name (if applicable): Team Assignment
--[ 2018.11.26.23.30.23.375.0 ]--
r 43 TA's or Tutor's name (if received help): 
--[ 2018.11.26.23.30.24.513.0 ]--
r 43 TA's or Tutor's name (if received help): E
--[ 2018.11.26.23.30.24.703.0 ]--
r 43 TA's or Tutor's name (if received help): Ed
--[ 2018.11.26.23.30.24.895.0 ]--
r 43 TA's or Tutor's name (if received help): Edt
--[ 2018.11.26.23.30.25.259.0 ]--
r 43 TA's or Tutor's name (if received help): Ed
--[ 2018.11.26.23.30.25.357.0 ]--
r 43 TA's or Tutor's name (if received help): Edr
--[ 2018.11.26.23.30.25.494.0 ]--
r 43 TA's or Tutor's name (if received help): Edri
--[ 2018.11.26.23.30.25.985.0 ]--
r 43 TA's or Tutor's name (if received help): Edri 
--[ 2018.11.26.23.30.26.297.0 ]--
r 43 TA's or Tutor's name (if received help): Edri
--[ 2018.11.26.23.30.26.694.0 ]--
r 43 TA's or Tutor's name (if received help): Edric
--[ 2018.11.26.23.30.26.862.0 ]--
r 43 TA's or Tutor's name (if received help): Edric 
--[ 2018.11.26.23.30.27.086.0 ]--
r 43 TA's or Tutor's name (if received help): Edric Y
--[ 2018.11.26.23.30.28.422.0 ]--
r 43 TA's or Tutor's name (if received help): Edric Yu
--[ 2018.11.26.23.30.29.846.0 ]--
r 45 Did you receive help from your instructor? 
--[ 2018.11.26.23.30.30.816.0 ]--
r 45 Did you receive help from your instructor? y
--[ 2018.11.26.23.30.31.098.0 ]--
r 45 Did you receive help from your instructor? ye
--[ 2018.11.26.23.30.32.160.0 ]--
r 45 Did you receive help from your instructor? y
--[ 2018.11.26.23.30.32.302.0 ]--
r 45 Did you receive help from your instructor? 
--[ 2018.11.26.23.30.32.481.0 ]--
r 45 Did you receive help from your instructor? a
--[ 2018.11.26.23.30.32.756.0 ]--
r 45 Did you receive help from your instructor? at
--[ 2018.11.26.23.30.32.889.0 ]--
r 45 Did you receive help from your instructor? at 
--[ 2018.11.26.23.30.33.036.0 ]--
r 45 Did you receive help from your instructor? at s
--[ 2018.11.26.23.30.33.102.0 ]--
r 45 Did you receive help from your instructor? at so
--[ 2018.11.26.23.30.33.242.0 ]--
r 45 Did you receive help from your instructor? at som
--[ 2018.11.26.23.30.33.316.0 ]--
r 45 Did you receive help from your instructor? at some
--[ 2018.11.26.23.30.33.486.0 ]--
r 45 Did you receive help from your instructor? at some 
--[ 2018.11.26.23.30.34.222.0 ]--
r 45 Did you receive help from your instructor? at some p
--[ 2018.11.26.23.30.34.369.0 ]--
r 45 Did you receive help from your instructor? at some pi
--[ 2018.11.26.23.30.34.623.0 ]--
r 45 Did you receive help from your instructor? at some pii
--[ 2018.11.26.23.30.35.344.0 ]--
r 45 Did you receive help from your instructor? at some pi
--[ 2018.11.26.23.30.35.504.0 ]--
r 45 Did you receive help from your instructor? at some p
--[ 2018.11.26.23.30.35.621.0 ]--
r 45 Did you receive help from your instructor? at some 
--[ 2018.11.26.23.30.35.772.0 ]--
r 45 Did you receive help from your instructor? at some
--[ 2018.11.26.23.30.35.907.0 ]--
r 45 Did you receive help from your instructor? at som
--[ 2018.11.26.23.30.36.227.0 ]--
r 45 Did you receive help from your instructor? at so
--[ 2018.11.26.23.30.36.363.0 ]--
r 45 Did you receive help from your instructor? at s
--[ 2018.11.26.23.30.36.533.0 ]--
r 45 Did you receive help from your instructor? at 
--[ 2018.11.26.23.30.36.668.0 ]--
r 45 Did you receive help from your instructor? at
--[ 2018.11.26.23.30.36.800.0 ]--
r 45 Did you receive help from your instructor? a
--[ 2018.11.26.23.30.37.023.0 ]--
r 45 Did you receive help from your instructor? 
--[ 2018.11.26.23.30.37.496.0 ]--
r 45 Did you receive help from your instructor? y
--[ 2018.11.26.23.30.37.602.0 ]--
r 45 Did you receive help from your instructor? ye
--[ 2018.11.26.23.30.37.800.0 ]--
r 45 Did you receive help from your instructor? yea
--[ 2018.11.26.23.30.37.914.0 ]--
r 45 Did you receive help from your instructor? yeah
--[ 2018.11.26.23.30.38.018.0 ]--
r 45 Did you receive help from your instructor? yeah 
--[ 2018.11.26.23.30.38.244.0 ]--
r 45 Did you receive help from your instructor? yeah a
--[ 2018.11.26.23.30.38.543.0 ]--
r 45 Did you receive help from your instructor? yeah at
--[ 2018.11.26.23.30.38.713.0 ]--
r 45 Did you receive help from your instructor? yeah at 
--[ 2018.11.26.23.30.39.113.0 ]--
r 45 Did you receive help from your instructor? yeah at
--[ 2018.11.26.23.30.39.277.0 ]--
r 45 Did you receive help from your instructor? yeah a
--[ 2018.11.26.23.30.39.394.0 ]--
r 45 Did you receive help from your instructor? yeah 
--[ 2018.11.26.23.30.39.588.0 ]--
r 45 Did you receive help from your instructor? yeah
--[ 2018.11.26.23.30.40.052.0 ]--
r 45 Did you receive help from your instructor? yeah,
--[ 2018.11.26.23.30.40.262.0 ]--
r 45 Did you receive help from your instructor? yeah, 
--[ 2018.11.26.23.30.40.378.0 ]--
r 45 Did you receive help from your instructor? yeah, a
--[ 2018.11.26.23.30.40.532.0 ]--
r 45 Did you receive help from your instructor? yeah, at
--[ 2018.11.26.23.30.40.702.0 ]--
r 45 Did you receive help from your instructor? yeah, at 
--[ 2018.11.26.23.30.40.819.0 ]--
r 45 Did you receive help from your instructor? yeah, at s
--[ 2018.11.26.23.30.40.913.0 ]--
r 45 Did you receive help from your instructor? yeah, at so
--[ 2018.11.26.23.30.41.047.0 ]--
r 45 Did you receive help from your instructor? yeah, at som
--[ 2018.11.26.23.30.41.197.0 ]--
r 45 Did you receive help from your instructor? yeah, at some
--[ 2018.11.26.23.30.41.687.0 ]--
r 45 Did you receive help from your instructor? yeah, at some 
--[ 2018.11.26.23.30.42.113.0 ]--
r 45 Did you receive help from your instructor? yeah, at some p
--[ 2018.11.26.23.30.42.245.0 ]--
r 45 Did you receive help from your instructor? yeah, at some po
--[ 2018.11.26.23.30.42.335.0 ]--
r 45 Did you receive help from your instructor? yeah, at some poi
--[ 2018.11.26.23.30.42.593.0 ]--
r 45 Did you receive help from your instructor? yeah, at some poin
--[ 2018.11.26.23.30.42.690.0 ]--
r 45 Did you receive help from your instructor? yeah, at some point
--[ 2018.11.26.23.30.51.482.0 ]--
r 56 Our Node contained the location of the point, the value assigned to the node, as well as references to the nodes on its direct left and right, and the direction which is either left right or up down.
