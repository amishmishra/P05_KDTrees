--[ 2018.11.19.16.37.23.757.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.37.23.789.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.37.23.804.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.37.23.804.1 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.37.23.804.2 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.37.23.804.3 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.37.23.804.4 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.37.23.804.5 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.37.23.804.6 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.37.23.804.7 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.37.23.820.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.37.23.820.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.37.23.820.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.37.23.820.3 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.37.23.820.4 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.37.23.820.5 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.37.24.429.0 ]--
UpdateTree (AD): 3 0
+ /.log/history.log
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.16.38.16.183.0 ]--
UpdateTree (AD): 1 0
+ /.idea/misc.xml

--[ 2018.11.19.16.38.16.276.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.16.38.16.323.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.16.44.54.794.0 ]--
UpdateTree (AD): 6 0
+ /.idea/copyright/profiles_settings.xml
+ /.idea/libraries/algs4.xml
+ /.idea/libraries/stdlib.xml
+ /.idea/.name
+ /.idea/compiler.xml
+ /.idea/uiDesigner.xml

--[ 2018.11.19.16.44.59.574.0 ]--
DisposeComponent
--[ 2018.11.19.16.44.59.713.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.16.44.59.733.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.16.44.59.739.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.16.44.59.744.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.16.44.59.747.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.16.44.59.751.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.16.44.59.754.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.16.44.59.757.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.16.44.59.772.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.16.44.59.775.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.16.44.59.777.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.16.44.59.779.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.16.44.59.782.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.16.44.59.785.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.16.44.59.788.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.16.44.59.796.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.16.45.17.628.0 ]--
UpdateTree (AD): 19 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.16.45.17.741.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.45.40.338.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.16.45.40.539.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.16.45.41.119.0 ]--
r 18         return new PSB<>();
--[ 2018.11.19.16.45.41.534.0 ]--
r 18         return new PSBr<>();
--[ 2018.11.19.16.45.41.688.0 ]--
r 18         return new PSBru<>();
--[ 2018.11.19.16.45.42.754.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.42.831.0 ]--
r 18         return new PSBruteForce();
--[ 2018.11.19.16.45.42.924.0 ]--
r 18         return new PSBruteForce<>();
--[ 2018.11.19.16.45.49.842.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.16.46.02.530.0 ]--
DisposeComponent
--[ 2018.11.19.18.05.58.646.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.18.05.58.708.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/PSKDTree$1.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.18.05.58.708.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.18.05.58.708.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.18.05.58.708.3 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.18.05.58.708.4 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.18.05.58.708.5 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.18.05.58.708.6 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.18.05.58.708.7 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.18.05.58.724.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.18.05.58.724.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.18.05.58.724.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.18.05.58.724.3 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.18.05.58.724.4 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.18.05.58.724.5 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.18.05.58.724.6 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.18.06.02.504.0 ]--
UpdateTree (AD): 9 23
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Point$4.class
- /.git/logs/refs/remotes/origin/master
- /out/production/P05_KDTrees/stdlib.jar
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/algs4.jar
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /.git/refs/remotes/origin/master
- /.git/COMMIT_EDITMSG
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Point.class
+ /.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
+ /.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
+ /.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
+ /.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
+ /.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
+ /.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
+ /.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
+ /.idea/modules.xml
+ /.idea/P05_KDTrees.iml

--[ 2018.11.19.18.06.30.170.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2018.11.19.18.06.30.201.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2018.11.19.18.06.30.373.0 ]--
DisposeComponent
--[ 2018.11.19.20.12.43.508.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.19.20.12.43.977.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.19.20.12.43.977.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.19.20.12.43.992.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.19.20.12.44.008.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.19.20.12.44.008.1 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;

    // constructor makes empty kD-tree
    public PSKDTree() {

    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node;
        newNode.p = p;
        newNode.v = v;
        if(this.isEmpty()){
            root = newNode;
        } else{
            Node finger;
            finger = root;
            while(finger.left != null || finger.right != null){

                if(newNode.dir == Partition.Direction.LEFTRIGHT && finger.p.x() >= newNode.p.x()){
                    finger = finger.left;
                } else {
                    finger = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.19.20.12.44.024.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.19.20.12.44.024.1 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.19.20.12.44.055.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.19.20.12.44.071.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.19.20.12.44.071.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.19.20.12.44.086.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.19.20.12.44.102.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.19.20.12.44.117.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.19.20.12.44.117.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.19.20.12.44.164.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.19.20.12.55.024.0 ]--
UpdateTree (AD): 26 0
+ /.git/logs/refs/remotes/origin/master
+ /.git/refs/remotes/origin/master
+ /.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
+ /.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
+ /.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
+ /.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
+ /.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
+ /.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
+ /.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
+ /.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
+ /.git/objects/68/2820a134168b0d23787b376165bef89b511f00
+ /.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
+ /.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
+ /.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
+ /.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
+ /.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
+ /.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
+ /.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
+ /.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
+ /.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
+ /.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
+ /.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
+ /.git/objects/fe/86b7d30276d409463a9786906238815afa4617
+ /.git/ORIG_HEAD
+ /.git/FETCH_HEAD
+ /.git/COMMIT_EDITMSG

--[ 2018.11.19.20.20.31.073.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar

--[ 2018.11.19.20.20.31.198.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@75f21756
--[ 2018.11.19.20.20.38.355.0 ]--
:/src/PSKDTree.java
r 25         Node newNode = new Node();
--[ 2018.11.19.20.20.43.482.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.20.48.550.0 ]--
UpdateTree (AD): 18 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.19.20.20.55.705.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new P<>();
--[ 2018.11.19.20.20.56.283.0 ]--
r 18         return new PS<>();
--[ 2018.11.19.20.20.58.564.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.58.580.0 ]--
r 18         return new PSKDTree();
--[ 2018.11.19.20.20.58.626.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.20.59.033.0 ]--
r 18         return new PSKDTree<>() ;
--[ 2018.11.19.20.20.59.970.0 ]--
r 18         return new PSKDTree<>();
--[ 2018.11.19.20.21.03.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.21.34.234.0 ]--
:/src/PSKDTree.java
- 34
--[ 2018.11.19.20.21.34.250.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.34.250.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.262.0 ]--
+ 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT 
r 35                 && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.278.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.293.0 ]--
r 35                         && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.512.0 ]--
r 35                         )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.543.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.559.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.574.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.590.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.621.0 ]--
r 35                 )&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.621.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.0 ]--
r 35                 ) && finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.50.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.50.981.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.184.0 ]--
r 35                 ) {&& finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.449.0 ]--
+ 35                 ) {
+ 36 &&
r 37 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.449.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.465.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.480.0 ]--
r 37                 } finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.21.51.480.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.496.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.512.0 ]--
r 36                     &&
--[ 2018.11.19.20.21.51.512.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.51.527.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.54.995.0 ]--
- 34
r 34                 if(newNode.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.21.55.011.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.21.55.011.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.572.0 ]--
+ 38                 } 
r 39                 else {
--[ 2018.11.19.20.22.02.587.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.587.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.884.0 ]--
+ 39                 
--[ 2018.11.19.20.22.02.900.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.02.900.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.634.0 ]--
r 39                 }
--[ 2018.11.19.20.22.03.649.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.649.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.665.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.681.1 ]--
r 39             }
--[ 2018.11.19.20.22.03.696.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.03.696.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.602.0 ]--
r 39                 }
--[ 2018.11.19.20.22.06.602.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.06.618.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.226.0 ]--
r 35 
--[ 2018.11.19.20.22.10.242.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.242.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.257.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.710.0 ]--
- 35
--[ 2018.11.19.20.22.10.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.10.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.724.0 ]--
r 35                  finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.18.740.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.755.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.18.771.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.677.0 ]--
r 35                 finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.19.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.19.693.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.505.0 ]--
r 35                     finger.p.x() >= newNode.p.x()){
--[ 2018.11.19.20.22.20.505.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.20.521.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.347.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){
--[ 2018.11.19.20.22.29.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.29.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.159.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ 
--[ 2018.11.19.20.22.30.175.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.175.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.346.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ /
--[ 2018.11.19.20.22.30.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.362.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.378.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.456.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.30.456.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.30.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.409.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.31.409.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.424.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.612.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //ou
--[ 2018.11.19.20.22.31.612.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.31.627.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //o
--[ 2018.11.19.20.22.32.861.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.32.877.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.002.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //
--[ 2018.11.19.20.22.33.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.018.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //t
--[ 2018.11.19.20.22.33.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.330.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //th
--[ 2018.11.19.20.22.33.346.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.346.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.439.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the
--[ 2018.11.19.20.22.33.439.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.471.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the 
--[ 2018.11.19.20.22.33.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.533.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.596.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the n
--[ 2018.11.19.20.22.33.611.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.611.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.689.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the ne
--[ 2018.11.19.20.22.33.705.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.767.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new
--[ 2018.11.19.20.22.33.767.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.783.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new 
--[ 2018.11.19.20.22.33.908.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.33.908.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new n
--[ 2018.11.19.20.22.34.205.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.205.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.299.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new no
--[ 2018.11.19.20.22.34.299.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.392.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new nod
--[ 2018.11.19.20.22.34.408.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.408.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.580.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node
--[ 2018.11.19.20.22.34.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.595.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.705.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node 
--[ 2018.11.19.20.22.34.705.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.720.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.830.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node i
--[ 2018.11.19.20.22.34.830.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.845.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.939.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is
--[ 2018.11.19.20.22.34.955.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.34.955.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.033.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is 
--[ 2018.11.19.20.22.35.033.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.048.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.533.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is t
--[ 2018.11.19.20.22.35.533.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.548.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to
--[ 2018.11.19.20.22.35.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.861.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to 
--[ 2018.11.19.20.22.35.876.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.876.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.954.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to t
--[ 2018.11.19.20.22.35.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.35.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.064.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to th
--[ 2018.11.19.20.22.36.064.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.079.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.173.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the
--[ 2018.11.19.20.22.36.173.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.189.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.298.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the 
--[ 2018.11.19.20.22.36.314.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.314.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the l
--[ 2018.11.19.20.22.36.454.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.454.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.548.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the le
--[ 2018.11.19.20.22.36.548.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.564.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.720.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the lef
--[ 2018.11.19.20.22.36.720.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.736.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.36.985.0 ]--
r 35                     finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.36.985.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.37.001.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.546.0 ]--
r 35                     ifinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.562.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.562.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.640.0 ]--
r 35                     iffinger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.640.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.656.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.749.0 ]--
r 35                     if finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.45.749.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.45.765.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.577.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x(){ //the new node is to the left
--[ 2018.11.19.20.22.46.593.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.593.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.46.609.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.967.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.22.48.983.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.983.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.48.999.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.795.0 ]--
r 36                         finger = finger.left;
--[ 2018.11.19.20.22.50.795.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.50.811.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.778.0 ]--
r 37                     } 
--[ 2018.11.19.20.22.57.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.57.793.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.730.0 ]--
+ 38                     
--[ 2018.11.19.20.22.59.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.0 ]--
r 38                     e
--[ 2018.11.19.20.22.59.980.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.980.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.22.59.996.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.105.0 ]--
r 38                     el
--[ 2018.11.19.20.23.00.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.183.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.199.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.215.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.324.0 ]--
r 38                     else
--[ 2018.11.19.20.23.00.340.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.340.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.355.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.0 ]--
r 38                     els
--[ 2018.11.19.20.23.00.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.980.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.00.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.121.0 ]--
r 38                     el
--[ 2018.11.19.20.23.01.121.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.136.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.261.0 ]--
r 38                     e
--[ 2018.11.19.20.23.01.261.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.574.0 ]--
r 38                     
--[ 2018.11.19.20.23.01.589.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.605.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.0 ]--
r 38                 
--[ 2018.11.19.20.23.01.839.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.01.839.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.261.0 ]--
- 38
--[ 2018.11.19.20.23.03.277.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.277.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.433.0 ]--
- 38
--[ 2018.11.19.20.23.03.448.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.03.464.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.478.0 ]--
r 38                     else {
r 39                         finger = finger.right;
r 40                     }
--[ 2018.11.19.20.23.10.478.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.10.494.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.305.0 ]--
r 41                 }
--[ 2018.11.19.20.23.17.305.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.17.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.210.0 ]--
+ 42                 
--[ 2018.11.19.20.23.21.210.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.225.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.382.0 ]--
r 42                 e
--[ 2018.11.19.20.23.21.397.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.397.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.413.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.600.0 ]--
r 42                 el
--[ 2018.11.19.20.23.21.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.647.0 ]--
r 42                 els
--[ 2018.11.19.20.23.21.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.663.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.725.0 ]--
r 42                 else
--[ 2018.11.19.20.23.21.725.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.21.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.319.0 ]--
r 42                 else 
--[ 2018.11.19.20.23.23.334.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.350.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.491.0 ]--
r 42                 else {
--[ 2018.11.19.20.23.23.491.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.506.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.959.0 ]--
r 42                 else {/
--[ 2018.11.19.20.23.23.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.23.975.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.084.0 ]--
r 42                 else {//
--[ 2018.11.19.20.23.24.084.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.100.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.0 ]--
r 42                 else {//t
--[ 2018.11.19.20.23.24.475.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.475.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.537.0 ]--
r 42                 else {//th
--[ 2018.11.19.20.23.24.553.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.553.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.647.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.24.662.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.662.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.740.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.24.740.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.881.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.24.896.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.896.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.959.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.24.959.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.24.975.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.021.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.25.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.037.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.25.162.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.162.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.709.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.25.724.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.724.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.818.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.25.818.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.834.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.927.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.25.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.25.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.0 ]--
r 42                 else {//the new nod 
--[ 2018.11.19.20.23.26.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.224.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.26.474.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.474.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.26.630.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.630.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.662.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.26.677.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.677.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.26.880.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.26.880.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.052.0 ]--
r 42                 else {//the new node is
--[ 2018.11.19.20.23.27.052.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.068.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.646.0 ]--
r 42                 else {//the new node i
--[ 2018.11.19.20.23.27.646.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.27.661.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.161.0 ]--
r 42                 else {//the new node 
--[ 2018.11.19.20.23.28.161.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.177.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.193.0 ]--
r 42                 else {//the new node
--[ 2018.11.19.20.23.28.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.239.0 ]--
r 42                 else {//the new nod
--[ 2018.11.19.20.23.28.239.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.255.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.302.0 ]--
r 42                 else {//the new no
--[ 2018.11.19.20.23.28.302.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.318.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.458.0 ]--
r 42                 else {//the new n
--[ 2018.11.19.20.23.28.474.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.489.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.692.0 ]--
r 42                 else {//the new 
--[ 2018.11.19.20.23.28.692.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.708.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.771.0 ]--
r 42                 else {//the new
--[ 2018.11.19.20.23.28.771.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.786.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.927.0 ]--
r 42                 else {//the ne
--[ 2018.11.19.20.23.28.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.28.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.114.0 ]--
r 42                 else {//the n
--[ 2018.11.19.20.23.29.114.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.130.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.270.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.29.270.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.286.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.833.0 ]--
r 42                 else {//the
--[ 2018.11.19.20.23.29.848.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.29.848.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.005.0 ]--
r 42                 else {//the 
--[ 2018.11.19.20.23.31.021.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.021.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.193.0 ]--
r 42                 else {//the c
--[ 2018.11.19.20.23.31.208.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.208.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.427.0 ]--
r 42                 else {//the cu
--[ 2018.11.19.20.23.31.442.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.442.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.583.0 ]--
r 42                 else {//the cur
--[ 2018.11.19.20.23.31.583.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.599.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.724.0 ]--
r 42                 else {//the curr
--[ 2018.11.19.20.23.31.739.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.739.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.927.0 ]--
r 42                 else {//the curre
--[ 2018.11.19.20.23.31.927.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.31.942.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.021.0 ]--
r 42                 else {//the curren
--[ 2018.11.19.20.23.32.036.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.036.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.130.0 ]--
r 42                 else {//the current
--[ 2018.11.19.20.23.32.145.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.145.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.224.0 ]--
r 42                 else {//the current 
--[ 2018.11.19.20.23.32.224.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.32.239.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.471.0 ]--
r 34                 if(f.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.486.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.486.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.0 ]--
r 34                 if(fi.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.580.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.580.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.674.0 ]--
r 34                 if(fin.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.689.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.689.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.799.0 ]--
r 34                 if(fing.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.814.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.814.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.955.0 ]--
r 34                 if(finge.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.46.970.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.46.970.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.002.0 ]--
r 34                 if(finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.23.47.002.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.47.017.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.345.0 ]--
r 42                 else {//the f 
--[ 2018.11.19.20.23.50.345.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.360.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.0 ]--
r 42                 else {//the fi 
--[ 2018.11.19.20.23.50.470.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.470.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.0 ]--
r 42                 else {//the fin 
--[ 2018.11.19.20.23.50.610.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.610.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.688.0 ]--
r 42                 else {//the fing 
--[ 2018.11.19.20.23.50.704.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.704.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.798.0 ]--
r 42                 else {//the finge 
--[ 2018.11.19.20.23.50.813.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.813.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.891.0 ]--
r 42                 else {//the finger 
--[ 2018.11.19.20.23.50.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.50.907.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.313.0 ]--
r 42                 else {//the finger  
--[ 2018.11.19.20.23.51.313.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.329.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.485.0 ]--
r 42                 else {//the finger n 
--[ 2018.11.19.20.23.51.485.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.501.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.579.0 ]--
r 42                 else {//the finger no 
--[ 2018.11.19.20.23.51.594.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.594.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.844.0 ]--
r 42                 else {//the finger nod 
--[ 2018.11.19.20.23.51.860.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.51.860.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.032.0 ]--
r 42                 else {//the finger node 
--[ 2018.11.19.20.23.52.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.047.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.157.0 ]--
r 42                 else {//the finger node  
--[ 2018.11.19.20.23.52.172.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.52.172.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.875.0 ]--
r 42                 else {//the finger node i 
--[ 2018.11.19.20.23.53.891.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.891.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.53.985.0 ]--
r 42                 else {//the finger node is 
--[ 2018.11.19.20.23.54.000.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.000.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.094.0 ]--
r 42                 else {//the finger node is  
--[ 2018.11.19.20.23.54.094.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.54.110.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.23.55.328.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.328.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.437.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.23.55.453.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.453.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.969.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.23.55.969.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.55.984.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.031.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.23.56.031.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.047.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.172.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.23.56.187.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.187.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.359.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.23.56.359.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.375.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.453.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.23.56.468.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.56.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.765.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.23.58.765.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.780.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.905.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.23.58.921.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.58.921.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.062.0 ]--
r 42                 else {//the finger node is a up down  
--[ 2018.11.19.20.23.59.062.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.23.59.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.576.0 ]--
r 42                 else {//the finger node is a up down 
--[ 2018.11.19.20.24.04.592.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.04.592.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.076.0 ]--
r 42                 else {//the finger node is a up dow 
--[ 2018.11.19.20.24.05.091.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.123.0 ]--
r 42                 else {//the finger node is a up do 
--[ 2018.11.19.20.24.05.123.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.138.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.170.0 ]--
r 42                 else {//the finger node is a up d 
--[ 2018.11.19.20.24.05.170.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.185.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.216.0 ]--
r 42                 else {//the finger node is a up  
--[ 2018.11.19.20.24.05.216.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.232.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.248.0 ]--
r 42                 else {//the finger node is a up 
--[ 2018.11.19.20.24.05.263.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.263.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.0 ]--
r 42                 else {//the finger node is a u 
--[ 2018.11.19.20.24.05.310.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.310.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.341.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.05.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.357.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.529.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.05.544.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.544.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.982.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.05.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.05.997.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.138.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.138.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.232.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.247.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.247.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.419.0 ]--
r 42                 else {//the finger node is an au 
--[ 2018.11.19.20.24.06.435.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.435.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.685.0 ]--
r 42                 else {//the finger node is an a 
--[ 2018.11.19.20.24.06.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.841.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.06.841.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.857.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.966.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.06.966.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.06.982.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.0 ]--
r 42                 else {//the finger node is an up 
--[ 2018.11.19.20.24.07.091.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.091.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.325.0 ]--
r 42                 else {//the finger node is an u 
--[ 2018.11.19.20.24.07.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.341.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.466.0 ]--
r 42                 else {//the finger node is an  
--[ 2018.11.19.20.24.07.466.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.482.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.606.0 ]--
r 42                 else {//the finger node is an 
--[ 2018.11.19.20.24.07.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.778.0 ]--
r 42                 else {//the finger node is a 
--[ 2018.11.19.20.24.07.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.794.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.981.0 ]--
r 42                 else {//the finger node is a  
--[ 2018.11.19.20.24.07.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.07.997.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.184.0 ]--
r 42                 else {//the finger node is a do 
--[ 2018.11.19.20.24.08.200.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.200.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.325.0 ]--
r 42                 else {//the finger node is a dow 
--[ 2018.11.19.20.24.08.325.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.341.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.419.0 ]--
r 42                 else {//the finger node is a down 
--[ 2018.11.19.20.24.08.419.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.434.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.606.0 ]--
r 42                 else {//the finger node is a down  
--[ 2018.11.19.20.24.08.606.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.622.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.700.0 ]--
r 42                 else {//the finger node is a down u 
--[ 2018.11.19.20.24.08.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.716.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.778.0 ]--
r 42                 else {//the finger node is a down up 
--[ 2018.11.19.20.24.08.778.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.08.794.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.044.0 ]--
r 42                 else {//the finger node is a down up  
--[ 2018.11.19.20.24.09.059.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.059.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.840.0 ]--
r 42                 else {//the finger node is a down up p 
--[ 2018.11.19.20.24.09.840.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.856.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.0 ]--
r 42                 else {//the finger node is a down up pa 
--[ 2018.11.19.20.24.09.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.09.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.106.0 ]--
r 42                 else {//the finger node is a down up par 
--[ 2018.11.19.20.24.10.106.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.122.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.293.0 ]--
r 42                 else {//the finger node is a down up part 
--[ 2018.11.19.20.24.10.309.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.309.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.371.0 ]--
r 42                 else {//the finger node is a down up parti 
--[ 2018.11.19.20.24.10.387.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.387.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.559.0 ]--
r 42                 else {//the finger node is a down up partit 
--[ 2018.11.19.20.24.10.559.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.684.0 ]--
r 42                 else {//the finger node is a down up partiti 
--[ 2018.11.19.20.24.10.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.731.0 ]--
r 42                 else {//the finger node is a down up partitio 
--[ 2018.11.19.20.24.10.746.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.746.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.824.0 ]--
r 42                 else {//the finger node is a down up partition 
--[ 2018.11.19.20.24.10.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.10.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.0 ]--
r 42                 else {//the finger node is a down up partitioni 
--[ 2018.11.19.20.24.11.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.652.0 ]--
r 42                 else {//the finger node is a down up partitionin 
--[ 2018.11.19.20.24.11.652.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.668.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.762.0 ]--
r 42                 else {//the finger node is a down up partitioning 
--[ 2018.11.19.20.24.11.777.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.793.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.824.0 ]--
r 42                 else {//the finger node is a down up partitioning  
--[ 2018.11.19.20.24.11.824.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.840.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.0 ]--
r 42                 else {//the finger node is a down up partitioning n 
--[ 2018.11.19.20.24.11.965.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.11.965.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.0 ]--
r 42                 else {//the finger node is a down up partitioning no 
--[ 2018.11.19.20.24.12.074.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.074.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.105.0 ]--
r 42                 else {//the finger node is a down up partitioning nod 
--[ 2018.11.19.20.24.12.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.0 ]--
r 42                 else {//the finger node is a down up partitioning node 
--[ 2018.11.19.20.24.12.262.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.12.262.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.277.0 ]--
+ 42                 else {//the finger node is a down up partitioning node
r 43                     
--[ 2018.11.19.20.24.14.293.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.293.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.527.0 ]--
+ 43                     
--[ 2018.11.19.20.24.14.527.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.14.543.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.043.0 ]--
r 44                     }
--[ 2018.11.19.20.24.15.058.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.058.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.074.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.105.0 ]--
r 43 
r 44                 }
--[ 2018.11.19.20.24.15.105.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.15.121.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.0 ]--
r 43     
--[ 2018.11.19.20.24.18.182.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.182.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.370.0 ]--
r 43         
--[ 2018.11.19.20.24.18.370.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.386.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.542.0 ]--
r 43             
--[ 2018.11.19.20.24.18.557.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.573.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.0 ]--
r 43                 
--[ 2018.11.19.20.24.18.870.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.18.870.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.245.0 ]--
r 43                     
--[ 2018.11.19.20.24.19.260.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.19.260.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.0 ]--
+ 43                                         if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 44                         finger = finger.left;
+ 45                     } 
+ 46                     else {
+ 47                         finger = finger.right;
r 48                     }
--[ 2018.11.19.20.24.29.727.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.727.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.743.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.758.0 ]--
r 43                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 45                     }
--[ 2018.11.19.20.24.29.774.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.774.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.29.789.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.805.0 ]--
r 43                     if (finger.p.() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.31.820.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.820.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.836.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.851.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.31.867.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.258.0 ]--
r 43                     if (finger.p.y() >= newNode.p.x()){ //the new node is to the left
--[ 2018.11.19.20.24.32.273.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.273.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.289.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.304.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.32.320.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.585.0 ]--
r 43                     if (finger.p.y() >= newNode.p.()){ //the new node is to the left
--[ 2018.11.19.20.24.34.601.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.601.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.632.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.648.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.663.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.695.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the left
--[ 2018.11.19.20.24.34.695.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.710.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.726.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.34.757.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.725.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the 
--[ 2018.11.19.20.24.36.741.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.741.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.882.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to the
--[ 2018.11.19.20.24.36.897.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.36.897.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.053.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to th
--[ 2018.11.19.20.24.37.069.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.069.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.163.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to t
--[ 2018.11.19.20.24.37.163.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.178.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.288.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to 
--[ 2018.11.19.20.24.37.303.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.303.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.460.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is to
--[ 2018.11.19.20.24.37.475.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.491.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.600.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is t
--[ 2018.11.19.20.24.37.616.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.616.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is 
--[ 2018.11.19.20.24.37.772.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.37.772.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.740.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is b
--[ 2018.11.19.20.24.39.756.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.756.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.834.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is be
--[ 2018.11.19.20.24.39.834.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.850.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.928.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is bel
--[ 2018.11.19.20.24.39.928.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.39.943.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.068.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is belo
--[ 2018.11.19.20.24.40.068.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.084.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.146.0 ]--
r 43                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
--[ 2018.11.19.20.24.40.146.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.40.162.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.0 ]--
r 50             }
--[ 2018.11.19.20.24.57.455.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.24.57.455.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.575.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.590.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.606.0 ]--
r 37                     }
--[ 2018.11.19.20.25.21.621.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.25.21.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.19.20.26.18.328.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.18.609.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.19.781.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.19.921.0 ]--
r 33             while(finger.left != null && finger.right != null){
--[ 2018.11.19.20.26.21.374.0 ]--
r 33             while(finger.left != null & finger.right != null){
--[ 2018.11.19.20.26.21.499.0 ]--
r 33             while(finger.left != null  finger.right != null){
--[ 2018.11.19.20.26.22.108.0 ]--
r 33             while(finger.left != null | finger.right != null){
--[ 2018.11.19.20.26.22.233.0 ]--
r 33             while(finger.left != null || finger.right != null){
--[ 2018.11.19.20.28.07.132.0 ]--
r 33             while(finger.left != null || finger.right != null){ 
--[ 2018.11.19.20.28.07.257.0 ]--
r 33             while(finger.left != null || finger.right != null){ /
--[ 2018.11.19.20.28.07.382.0 ]--
r 33             while(finger.left != null || finger.right != null){ //
--[ 2018.11.19.20.28.07.569.0 ]--
r 33             while(finger.left != null || finger.right != null){ //t
--[ 2018.11.19.20.28.07.647.0 ]--
r 33             while(finger.left != null || finger.right != null){ //th
--[ 2018.11.19.20.28.08.100.0 ]--
r 33             while(finger.left != null || finger.right != null){ //thi
--[ 2018.11.19.20.28.08.209.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this
--[ 2018.11.19.20.28.08.334.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this 
--[ 2018.11.19.20.28.08.444.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.08.538.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wi
--[ 2018.11.19.20.28.08.834.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this w
--[ 2018.11.19.20.28.09.006.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this wh
--[ 2018.11.19.20.28.09.162.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whi
--[ 2018.11.19.20.28.09.272.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this whil
--[ 2018.11.19.20.28.09.350.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while
--[ 2018.11.19.20.28.09.475.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while 
--[ 2018.11.19.20.28.09.615.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while l
--[ 2018.11.19.20.28.09.772.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while lo
--[ 2018.11.19.20.28.09.912.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loo
--[ 2018.11.19.20.28.10.037.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop
--[ 2018.11.19.20.28.10.131.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.396.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.537.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop wh
--[ 2018.11.19.20.28.10.693.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop w
--[ 2018.11.19.20.28.10.818.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop 
--[ 2018.11.19.20.28.10.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop s
--[ 2018.11.19.20.28.10.990.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sh
--[ 2018.11.19.20.28.11.068.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.178.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop show
--[ 2018.11.19.20.28.11.724.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop sho
--[ 2018.11.19.20.28.11.896.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shou
--[ 2018.11.19.20.28.12.052.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop shoul
--[ 2018.11.19.20.28.12.115.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should
--[ 2018.11.19.20.28.12.240.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.12.271.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.12.474.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.12.662.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should run
--[ 2018.11.19.20.28.13.380.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ru
--[ 2018.11.19.20.28.13.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should r
--[ 2018.11.19.20.28.13.630.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should 
--[ 2018.11.19.20.28.14.208.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should g
--[ 2018.11.19.20.28.14.349.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should ge
--[ 2018.11.19.20.28.14.505.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get
--[ 2018.11.19.20.28.14.599.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get 
--[ 2018.11.19.20.28.14.708.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get u
--[ 2018.11.19.20.28.14.786.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us
--[ 2018.11.19.20.28.15.005.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us 
--[ 2018.11.19.20.28.15.036.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us t
--[ 2018.11.19.20.28.15.145.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to
--[ 2018.11.19.20.28.15.255.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to 
--[ 2018.11.19.20.28.15.567.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to t
--[ 2018.11.19.20.28.15.661.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to th
--[ 2018.11.19.20.28.15.755.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the
--[ 2018.11.19.20.28.15.802.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the 
--[ 2018.11.19.20.28.15.926.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the b
--[ 2018.11.19.20.28.16.051.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bo
--[ 2018.11.19.20.28.16.161.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bot
--[ 2018.11.19.20.28.16.348.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bott
--[ 2018.11.19.20.28.16.442.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.16.754.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.17.192.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the botto
--[ 2018.11.19.20.28.18.004.0 ]--
r 33             while(finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.28.23.487.0 ]--
+ 51             
--[ 2018.11.19.20.28.24.471.0 ]--
r 51             /
--[ 2018.11.19.20.28.24.565.0 ]--
r 51             //
--[ 2018.11.19.20.28.24.706.0 ]--
r 51             //a
--[ 2018.11.19.20.28.24.877.0 ]--
r 51             //at
--[ 2018.11.19.20.28.25.002.0 ]--
r 51             //at 
--[ 2018.11.19.20.28.25.081.0 ]--
r 51             //at t
--[ 2018.11.19.20.28.25.127.0 ]--
r 51             //at th
--[ 2018.11.19.20.28.25.268.0 ]--
r 51             //at thi
--[ 2018.11.19.20.28.25.330.0 ]--
r 51             //at this
--[ 2018.11.19.20.28.25.440.0 ]--
r 51             //at this 
--[ 2018.11.19.20.28.25.534.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.25.815.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.25.862.0 ]--
r 51             //at this pio
--[ 2018.11.19.20.28.26.205.0 ]--
r 51             //at this pi
--[ 2018.11.19.20.28.26.330.0 ]--
r 51             //at this p
--[ 2018.11.19.20.28.26.502.0 ]--
r 51             //at this po
--[ 2018.11.19.20.28.26.658.0 ]--
r 51             //at this poi
--[ 2018.11.19.20.28.26.736.0 ]--
r 51             //at this poin
--[ 2018.11.19.20.28.26.877.0 ]--
r 51             //at this point
--[ 2018.11.19.20.28.26.987.0 ]--
r 51             //at this point,
--[ 2018.11.19.20.28.27.174.0 ]--
r 51             //at this point, 
--[ 2018.11.19.20.28.27.237.0 ]--
r 51             //at this point, w
--[ 2018.11.19.20.28.27.268.0 ]--
r 51             //at this point, we
--[ 2018.11.19.20.28.27.502.0 ]--
r 51             //at this point, we 
--[ 2018.11.19.20.28.27.627.0 ]--
r 51             //at this point, we a
--[ 2018.11.19.20.28.27.767.0 ]--
r 51             //at this point, we ar
--[ 2018.11.19.20.28.27.892.0 ]--
r 51             //at this point, we are
--[ 2018.11.19.20.28.27.939.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.28.017.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.28.095.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.205.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.486.0 ]--
r 51             //at this point, we are the 
--[ 2018.11.19.20.28.28.705.0 ]--
r 51             //at this point, we are the
--[ 2018.11.19.20.28.28.845.0 ]--
r 51             //at this point, we are th
--[ 2018.11.19.20.28.28.970.0 ]--
r 51             //at this point, we are t
--[ 2018.11.19.20.28.29.095.0 ]--
r 51             //at this point, we are 
--[ 2018.11.19.20.28.29.127.0 ]--
r 51             //at this point, we are a
--[ 2018.11.19.20.28.29.314.0 ]--
r 51             //at this point, we are at
--[ 2018.11.19.20.28.29.423.0 ]--
r 51             //at this point, we are at 
--[ 2018.11.19.20.28.29.501.0 ]--
r 51             //at this point, we are at t
--[ 2018.11.19.20.28.29.595.0 ]--
r 51             //at this point, we are at th
--[ 2018.11.19.20.28.29.673.0 ]--
r 51             //at this point, we are at the
--[ 2018.11.19.20.28.29.720.0 ]--
r 51             //at this point, we are at the 
--[ 2018.11.19.20.28.29.814.0 ]--
r 51             //at this point, we are at the b
--[ 2018.11.19.20.28.29.939.0 ]--
r 51             //at this point, we are at the bo
--[ 2018.11.19.20.28.30.064.0 ]--
r 51             //at this point, we are at the bot
--[ 2018.11.19.20.28.30.204.0 ]--
r 51             //at this point, we are at the bott
--[ 2018.11.19.20.28.30.298.0 ]--
r 51             //at this point, we are at the botto
--[ 2018.11.19.20.28.30.439.0 ]--
r 51             //at this point, we are at the bottom
--[ 2018.11.19.20.28.30.548.0 ]--
r 51             //at this point, we are at the bottom 
--[ 2018.11.19.20.28.30.610.0 ]--
r 51             //at this point, we are at the bottom o
--[ 2018.11.19.20.28.30.798.0 ]--
r 51             //at this point, we are at the bottom of
--[ 2018.11.19.20.28.30.907.0 ]--
r 51             //at this point, we are at the bottom of 
--[ 2018.11.19.20.28.31.001.0 ]--
r 51             //at this point, we are at the bottom of t
--[ 2018.11.19.20.28.31.079.0 ]--
r 51             //at this point, we are at the bottom of th
--[ 2018.11.19.20.28.31.189.0 ]--
r 51             //at this point, we are at the bottom of the
--[ 2018.11.19.20.28.31.329.0 ]--
r 51             //at this point, we are at the bottom of the 
--[ 2018.11.19.20.28.31.501.0 ]--
r 51             //at this point, we are at the bottom of the t
--[ 2018.11.19.20.28.31.673.0 ]--
r 51             //at this point, we are at the bottom of the tr
--[ 2018.11.19.20.28.31.767.0 ]--
r 51             //at this point, we are at the bottom of the tre
--[ 2018.11.19.20.28.31.938.0 ]--
r 51             //at this point, we are at the bottom of the tree
--[ 2018.11.19.20.28.33.157.0 ]--
r 51             //at this point, we are at the bottom of the tree 
--[ 2018.11.19.20.28.33.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (
--[ 2018.11.19.20.28.33.469.0 ]--
r 51             //at this point, we are at the bottom of the tree (f
--[ 2018.11.19.20.28.33.610.0 ]--
r 51             //at this point, we are at the bottom of the tree (fi
--[ 2018.11.19.20.28.33.688.0 ]--
r 51             //at this point, we are at the bottom of the tree (fin
--[ 2018.11.19.20.28.33.922.0 ]--
r 51             //at this point, we are at the bottom of the tree (fing
--[ 2018.11.19.20.28.34.063.0 ]--
r 51             //at this point, we are at the bottom of the tree (finge
--[ 2018.11.19.20.28.34.141.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger
--[ 2018.11.19.20.28.34.235.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger 
--[ 2018.11.19.20.28.34.313.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger i
--[ 2018.11.19.20.28.34.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is
--[ 2018.11.19.20.28.34.500.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is 
--[ 2018.11.19.20.28.34.750.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is p
--[ 2018.11.19.20.28.34.906.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is po
--[ 2018.11.19.20.28.35.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.35.266.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.35.406.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.35.531.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.35.719.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.35.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting 
--[ 2018.11.19.20.28.36.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiting
--[ 2018.11.19.20.28.36.172.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poitin
--[ 2018.11.19.20.28.36.297.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poiti
--[ 2018.11.19.20.28.36.422.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poit
--[ 2018.11.19.20.28.36.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.36.828.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poii
--[ 2018.11.19.20.28.37.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poi
--[ 2018.11.19.20.28.37.453.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.37.547.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.37.656.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poingi
--[ 2018.11.19.20.28.37.890.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poing
--[ 2018.11.19.20.28.38.031.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is poin
--[ 2018.11.19.20.28.38.125.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is point
--[ 2018.11.19.20.28.38.202.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointi
--[ 2018.11.19.20.28.38.281.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointin
--[ 2018.11.19.20.28.38.374.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing
--[ 2018.11.19.20.28.38.468.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.38.546.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.38.765.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.38.921.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.38.984.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.39.077.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.39.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.39.233.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.39.343.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.515.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the lo
--[ 2018.11.19.20.28.39.827.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.39.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.39.983.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.40.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.40.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.40.452.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last n
--[ 2018.11.19.20.28.41.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last 
--[ 2018.11.19.20.28.41.249.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the last
--[ 2018.11.19.20.28.41.389.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the las
--[ 2018.11.19.20.28.41.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the la
--[ 2018.11.19.20.28.41.639.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the l
--[ 2018.11.19.20.28.41.764.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the 
--[ 2018.11.19.20.28.41.905.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at the
--[ 2018.11.19.20.28.42.045.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at th
--[ 2018.11.19.20.28.42.155.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at t
--[ 2018.11.19.20.28.42.295.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at 
--[ 2018.11.19.20.28.42.561.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing at
--[ 2018.11.19.20.28.42.686.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing a
--[ 2018.11.19.20.28.42.811.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing 
--[ 2018.11.19.20.28.43.014.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing t
--[ 2018.11.19.20.28.43.108.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to
--[ 2018.11.19.20.28.43.217.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to 
--[ 2018.11.19.20.28.43.311.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a
--[ 2018.11.19.20.28.43.826.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a 
--[ 2018.11.19.20.28.44.404.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a l
--[ 2018.11.19.20.28.44.560.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a le
--[ 2018.11.19.20.28.44.654.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a lea
--[ 2018.11.19.20.28.44.763.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf
--[ 2018.11.19.20.28.45.060.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf 
--[ 2018.11.19.20.28.45.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf w
--[ 2018.11.19.20.28.45.373.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wi
--[ 2018.11.19.20.28.45.498.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf wit
--[ 2018.11.19.20.28.45.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with
--[ 2018.11.19.20.28.45.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with 
--[ 2018.11.19.20.28.46.013.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with n
--[ 2018.11.19.20.28.46.154.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no
--[ 2018.11.19.20.28.47.607.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no 
--[ 2018.11.19.20.28.47.732.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no f
--[ 2018.11.19.20.28.47.841.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fu
--[ 2018.11.19.20.28.47.919.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no fur
--[ 2018.11.19.20.28.48.091.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furt
--[ 2018.11.19.20.28.48.185.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furth
--[ 2018.11.19.20.28.48.309.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no furthe
--[ 2018.11.19.20.28.48.388.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further
--[ 2018.11.19.20.28.50.481.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further 
--[ 2018.11.19.20.28.50.684.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further l
--[ 2018.11.19.20.28.50.809.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further le
--[ 2018.11.19.20.28.51.106.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further lea
--[ 2018.11.19.20.28.51.403.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leav
--[ 2018.11.19.20.28.51.777.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leave
--[ 2018.11.19.20.28.51.965.0 ]--
r 51             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
--[ 2018.11.19.20.28.52.746.0 ]--
+ 52             
--[ 2018.11.19.20.30.20.070.0 ]--
r 52 
--[ 2018.11.19.20.30.52.562.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.52.578.0 ]--
r 36                 }
--[ 2018.11.19.20.30.52.593.0 ]--
r 35                     
--[ 2018.11.19.20.30.54.593.0 ]--
- 35
--[ 2018.11.19.20.30.56.874.0 ]--
+ 35                     
--[ 2018.11.19.20.30.57.155.0 ]--
- 35
- 35
--[ 2018.11.19.20.30.58.436.0 ]--
+ 35 
+ 36 }
--[ 2018.11.19.20.30.58.451.0 ]--
r 36                 }
--[ 2018.11.19.20.30.58.483.0 ]--
r 35                     
--[ 2018.11.19.20.30.59.029.0 ]--
- 35
- 35
--[ 2018.11.19.20.31.01.872.0 ]--
+ 35                     
--[ 2018.11.19.20.31.06.294.0 ]--
r 35                     i
--[ 2018.11.19.20.31.06.544.0 ]--
r 35                     
--[ 2018.11.19.20.31.07.465.0 ]--
r 35                     f
--[ 2018.11.19.20.31.07.606.0 ]--
r 35                     fi
--[ 2018.11.19.20.31.11.714.0 ]--
r 35                     f
--[ 2018.11.19.20.31.11.949.0 ]--
r 35                     
--[ 2018.11.19.20.31.16.276.0 ]--
r 35                     p
--[ 2018.11.19.20.31.16.369.0 ]--
r 35                     pa
--[ 2018.11.19.20.31.16.588.0 ]--
r 35                     par
--[ 2018.11.19.20.31.16.776.0 ]--
r 35                     pare
--[ 2018.11.19.20.31.16.885.0 ]--
r 35                     paren
--[ 2018.11.19.20.31.16.979.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.17.588.0 ]--
r 35                     parent 
--[ 2018.11.19.20.31.17.994.0 ]--
r 35                     parent
--[ 2018.11.19.20.31.18.666.0 ]--
r 35                     parentD
--[ 2018.11.19.20.31.18.806.0 ]--
r 35                     parentDi
--[ 2018.11.19.20.31.18.978.0 ]--
r 35                     parentDir
--[ 2018.11.19.20.31.20.775.0 ]--
r 35                     parentDir 
--[ 2018.11.19.20.31.20.868.0 ]--
r 35                     parentDir =
--[ 2018.11.19.20.31.20.962.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.24.383.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.24.539.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.24.805.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.25.055.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.25.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.25.930.0 ]--
r 35                     parentDir = LEFTRI
--[ 2018.11.19.20.31.26.773.0 ]--
r 35                     parentDir = LEFTR
--[ 2018.11.19.20.31.26.945.0 ]--
r 35                     parentDir = LEFT
--[ 2018.11.19.20.31.27.086.0 ]--
r 35                     parentDir = LEF
--[ 2018.11.19.20.31.27.258.0 ]--
r 35                     parentDir = LE
--[ 2018.11.19.20.31.27.539.0 ]--
r 35                     parentDir = L
--[ 2018.11.19.20.31.27.929.0 ]--
r 35                     parentDir = 
--[ 2018.11.19.20.31.37.897.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.31.40.333.0 ]--
r 35                     parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.50.801.0 ]--
r 35                     DparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.472.0 ]--
r 35                     DiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.550.0 ]--
r 35                     DirparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.628.0 ]--
r 35                     DireparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.51.878.0 ]--
r 35                     DirecparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.128.0 ]--
r 35                     DirectparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.253.0 ]--
r 35                     DirectiparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.394.0 ]--
r 35                     DirectioparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.425.0 ]--
r 35                     DirectionparentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.52.550.0 ]--
r 35                     Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.799.0 ]--
r 35                     P parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.56.986.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.549.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.57.721.0 ]--
r 35                     Pati parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.564.0 ]--
r 35                     Pat parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.736.0 ]--
r 35                     Pa parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.58.892.0 ]--
r 35                     Par parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.080.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.799.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.31.59.970.0 ]--
r 35                     Partio parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.439.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.00.595.0 ]--
r 35                     Part parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.251.0 ]--
r 35                     Parti parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.01.767.0 ]--
r 35                     Partit parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.02.204.0 ]--
r 35                     Partition parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.03.595.0 ]--
r 35                     Partition. parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.06.172.0 ]--
r 35                     Partition.Direction parentDir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.32.51.646.0 ]--
- 35
--[ 2018.11.19.20.32.59.644.0 ]--
r 52     
--[ 2018.11.19.20.32.59.987.0 ]--
r 52         
--[ 2018.11.19.20.33.00.191.0 ]--
r 52             
--[ 2018.11.19.20.33.00.347.0 ]--
r 52                 
--[ 2018.11.19.20.33.00.972.0 ]--
r 52             
--[ 2018.11.19.20.33.06.627.0 ]--
+ 52             if(finger.dir == Partition.Direction.LEFTRIGHT) {
+ 53                     if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
+ 54                         finger = finger.left;
+ 55                     }
+ 56                     else {
+ 57                         finger = finger.right;
+ 58                     }
+ 59                 }
+ 60                 else {//the finger node is a down up partitioning node
+ 61                     if (finger.p.y() >= newNode.p.y()){ //the new node is below
+ 62                         finger = finger.left;
+ 63                     }
+ 64                     else {
+ 65                         finger = finger.right;
+ 66                     }
r 67                 }
--[ 2018.11.19.20.33.06.658.0 ]--
- 53
r 53                 if (finger.p.x() >= newNode.p.x()){ //the new node is to the left
r 54                     finger = finger.left;
r 55                 }
r 56                 else {
r 57                     finger = finger.right;
r 59             }
r 60             else {//the finger node is a down up partitioning node
r 61                 if (finger.p.y() >= newNode.p.y()){ //the new node is below
r 62                     finger = finger.left;
r 63                 }
r 64                 else {
r 65                     finger = finger.right;
+ 67             }
--[ 2018.11.19.20.33.33.964.0 ]--
r 54                     ffinger.left;
--[ 2018.11.19.20.33.34.073.0 ]--
r 54                     finger.left;
--[ 2018.11.19.20.33.36.573.0 ]--
r 54                     finger.left ;
--[ 2018.11.19.20.33.36.651.0 ]--
r 54                     finger.left =;
--[ 2018.11.19.20.33.37.307.0 ]--
r 54                     finger.left = ;
--[ 2018.11.19.20.33.46.602.0 ]--
r 54                     finger.left = n;
--[ 2018.11.19.20.33.46.742.0 ]--
r 54                     finger.left = ne;
--[ 2018.11.19.20.33.46.805.0 ]--
r 54                     finger.left = new;
--[ 2018.11.19.20.33.48.023.0 ]--
r 54                     finger.left = newNode;
--[ 2018.11.19.20.33.53.694.0 ]--
r 57                     finger.
--[ 2018.11.19.20.33.53.850.0 ]--
r 57                     finger.r
--[ 2018.11.19.20.33.53.991.0 ]--
r 57                     finger.ri
--[ 2018.11.19.20.33.54.100.0 ]--
r 57                     finger.rig
--[ 2018.11.19.20.33.54.194.0 ]--
r 57                     finger.righ
--[ 2018.11.19.20.33.54.288.0 ]--
r 57                     finger.right
--[ 2018.11.19.20.33.54.788.0 ]--
r 57                     finger.right 
--[ 2018.11.19.20.33.55.303.0 ]--
r 57                     finger.right =
--[ 2018.11.19.20.33.55.397.0 ]--
r 57                     finger.right = 
--[ 2018.11.19.20.33.55.553.0 ]--
r 57                     finger.right = n
--[ 2018.11.19.20.33.55.709.0 ]--
r 57                     finger.right = ne
--[ 2018.11.19.20.33.56.131.0 ]--
r 57                     finger.right = new
--[ 2018.11.19.20.33.58.052.0 ]--
r 57                     finger.right = newNode
--[ 2018.11.19.20.33.58.912.0 ]--
r 57                     finger.right = newNode;
--[ 2018.11.19.20.34.03.426.0 ]--
r 62                     finger.
--[ 2018.11.19.20.34.03.723.0 ]--
r 62                     finger.l
--[ 2018.11.19.20.34.03.817.0 ]--
r 62                     finger.le
--[ 2018.11.19.20.34.03.942.0 ]--
r 62                     finger.lef
--[ 2018.11.19.20.34.04.098.0 ]--
r 62                     finger.left
--[ 2018.11.19.20.34.04.332.0 ]--
r 62                     finger.left 
--[ 2018.11.19.20.34.04.770.0 ]--
r 62                     finger.left =
--[ 2018.11.19.20.34.04.863.0 ]--
r 62                     finger.left = 
--[ 2018.11.19.20.34.05.004.0 ]--
r 62                     finger.left = n
--[ 2018.11.19.20.34.05.098.0 ]--
r 62                     finger.left = ne
--[ 2018.11.19.20.34.05.191.0 ]--
r 62                     finger.left = new
--[ 2018.11.19.20.34.06.301.0 ]--
r 62                     finger.left = newNode
--[ 2018.11.19.20.34.09.487.0 ]--
r 65                     finger.
--[ 2018.11.19.20.34.10.018.0 ]--
r 65                     finger.r
--[ 2018.11.19.20.34.10.690.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.11.471.0 ]--
r 65                     finger.right=
--[ 2018.11.19.20.34.12.486.0 ]--
r 65                     finger.right
--[ 2018.11.19.20.34.12.690.0 ]--
r 65                     finger.right 
--[ 2018.11.19.20.34.13.033.0 ]--
r 65                     finger.right =
--[ 2018.11.19.20.34.13.111.0 ]--
r 65                     finger.right = 
--[ 2018.11.19.20.34.13.252.0 ]--
r 65                     finger.right = n
--[ 2018.11.19.20.34.13.408.0 ]--
r 65                     finger.right = ne
--[ 2018.11.19.20.34.13.924.0 ]--
r 65                     finger.right = newNode
--[ 2018.11.19.20.34.14.517.0 ]--
r 65                     finger.right = newNode;
--[ 2018.11.19.20.34.16.798.0 ]--
r 62                     finger.left = newNode;
--[ 2018.11.19.20.34.35.731.0 ]--
r 68     
--[ 2018.11.19.20.34.35.888.0 ]--
r 68         
--[ 2018.11.19.20.34.36.403.0 ]--
r 68         }
--[ 2018.11.19.20.34.36.434.0 ]--
r 30         } else {
--[ 2018.11.19.20.34.36.450.0 ]--
r 33             while (finger.left != null || finger.right != null){ //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.450.1 ]--
r 33             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.34.36.465.0 ]--
r 34                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.481.0 ]--
r 35                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.497.0 ]--
- 37
r 37                     } else {
--[ 2018.11.19.20.34.36.497.1 ]--
- 40
r 40                 } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.512.0 ]--
r 41                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.528.0 ]--
- 43
r 43                     } else {
--[ 2018.11.19.20.34.36.543.0 ]--
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
--[ 2018.11.19.20.34.36.559.0 ]--
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
--[ 2018.11.19.20.34.36.575.0 ]--
- 52
r 52                 } else {
--[ 2018.11.19.20.34.36.575.1 ]--
- 55
r 55             } else {//the finger node is a down up partitioning node
--[ 2018.11.19.20.34.36.590.0 ]--
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
--[ 2018.11.19.20.34.36.606.0 ]--
- 58
r 58                 } else {
--[ 2018.11.19.20.36.03.804.0 ]--
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
- 48
r 48 
--[ 2018.11.19.20.36.04.898.0 ]--
- 48
--[ 2018.11.19.20.36.07.897.0 ]--
+ 49         
--[ 2018.11.19.20.36.08.147.0 ]--
+ 49                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 50             if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 51                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 52                     finger.left = newNode;
+ 53                 } else {
+ 54                     finger.right = newNode;
+ 55                 }
+ 56             } else {//the finger node is a down up partitioning node
+ 57                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 58                     finger.left = newNode;
+ 59                 } else {
+ 60                     finger.right = newNode;
+ 61                 }
r 62             }
--[ 2018.11.19.20.36.08.194.0 ]--
r 49         //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 50         if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 51             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 52                 finger.left = newNode;
r 53             } else {
r 54                 finger.right = newNode;
r 55             }
r 56         } else {//the finger node is a down up partitioning node
r 57             if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 58                 finger.left = newNode;
r 59             } else {
r 60                 finger.right = newNode;
r 61             }
r 62         }
--[ 2018.11.19.20.36.53.653.0 ]--
- 31
r 31 
--[ 2018.11.19.20.36.55.012.0 ]--
- 31
--[ 2018.11.19.20.36.57.183.0 ]--
+ 28         
--[ 2018.11.19.20.36.57.371.0 ]--
+ 28                     Node finger;
r 29             finger = root;
--[ 2018.11.19.20.36.57.418.0 ]--
r 28         Node finger;
r 29         finger = root;
--[ 2018.11.19.20.37.02.198.0 ]--
r 31             n = newNode;
--[ 2018.11.19.20.37.02.276.0 ]--
r 31             ne = newNode;
--[ 2018.11.19.20.37.02.417.0 ]--
r 31             new = newNode;
--[ 2018.11.19.20.37.03.416.0 ]--
r 31             newNode = newNode;
--[ 2018.11.19.20.37.06.666.0 ]--
r 31             newNode = r;
--[ 2018.11.19.20.37.06.790.0 ]--
r 31             newNode = ro;
--[ 2018.11.19.20.37.06.869.0 ]--
r 31             newNode = roo;
--[ 2018.11.19.20.37.06.962.0 ]--
r 31             newNode = root;
--[ 2018.11.19.20.37.37.190.0 ]--
r 29 
--[ 2018.11.19.20.37.37.456.0 ]--
- 29
--[ 2018.11.19.20.37.41.002.0 ]--
+ 32             
--[ 2018.11.19.20.37.41.580.0 ]--
r 32                     finger = root;
--[ 2018.11.19.20.37.41.611.0 ]--
r 32             finger = root;
--[ 2018.11.19.20.38.13.572.0 ]--
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
- 49
r 49 
--[ 2018.11.19.20.38.18.446.0 ]--
+ 48             
--[ 2018.11.19.20.38.18.727.0 ]--
+ 47             }
+ 48                     //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
+ 49         if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 50             if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 51                 finger.left = newNode;
+ 52             } else {
+ 53                 finger.right = newNode;
+ 54             }
+ 55         } else {//the finger node is a down up partitioning node
+ 56             if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 57                 finger.left = newNode;
+ 58             } else {
+ 59                 finger.right = newNode;
r 61         }
--[ 2018.11.19.20.38.18.774.0 ]--
r 48             //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 49             if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 50                 if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 51                     finger.left = newNode;
r 52                 } else {
r 53                     finger.right = newNode;
r 54                 }
r 55             } else {//the finger node is a down up partitioning node
r 56                 if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 57                     finger.left = newNode;
r 58                 } else {
r 59                     finger.right = newNode;
r 60                 }
r 61             }
--[ 2018.11.19.20.38.59.421.0 ]--
r 30             r
--[ 2018.11.19.20.38.59.562.0 ]--
r 30             ro
--[ 2018.11.19.20.38.59.671.0 ]--
r 30             roo
--[ 2018.11.19.20.38.59.749.0 ]--
r 30             root
--[ 2018.11.19.20.39.00.015.0 ]--
r 30             root 
--[ 2018.11.19.20.39.00.390.0 ]--
r 30             root =
--[ 2018.11.19.20.39.00.483.0 ]--
r 30             root = 
--[ 2018.11.19.20.39.00.655.0 ]--
r 30             root = n
--[ 2018.11.19.20.39.00.780.0 ]--
r 30             root = ne
--[ 2018.11.19.20.39.01.608.0 ]--
r 30             root = newNode
--[ 2018.11.19.20.39.01.952.0 ]--
r 30             root = newNode;
--[ 2018.11.19.20.39.26.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.40.13.598.0 ]--
r 67         return p;
--[ 2018.11.19.20.40.14.128.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.15.159.0 ]--
r 67         return p.v;
--[ 2018.11.19.20.40.17.050.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.20.408.0 ]--
r 67         return p.p;
--[ 2018.11.19.20.40.21.408.0 ]--
r 67         return p.;
--[ 2018.11.19.20.40.33.483.0 ]--
r 67         return .;
--[ 2018.11.19.20.40.33.874.0 ]--
r 67         return ;
--[ 2018.11.19.20.40.34.046.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.34.171.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.34.296.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.34.389.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.34.561.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.36.124.0 ]--
r 67         return this.p;
--[ 2018.11.19.20.40.38.123.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.38.279.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.38.482.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.38.873.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.39.170.0 ]--
r 67         return t;
--[ 2018.11.19.20.40.48.465.0 ]--
r 67         return th;
--[ 2018.11.19.20.40.48.605.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.48.699.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.48.855.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.49.261.0 ]--
r 67         return this.v;
--[ 2018.11.19.20.40.50.214.0 ]--
r 67         return this.;
--[ 2018.11.19.20.40.50.308.0 ]--
r 67         return this;
--[ 2018.11.19.20.40.50.433.0 ]--
r 67         return thi;
--[ 2018.11.19.20.40.50.558.0 ]--
r 67         return th;
--[ 2018.11.19.20.42.37.628.0 ]--
r 20     
--[ 2018.11.19.20.42.37.987.0 ]--
r 20         
--[ 2018.11.19.20.42.51.516.0 ]--
r 17     
--[ 2018.11.19.20.42.52.312.0 ]--
r 17     p
--[ 2018.11.19.20.42.52.390.0 ]--
r 17     pr
--[ 2018.11.19.20.42.52.578.0 ]--
r 17     pri
--[ 2018.11.19.20.42.52.718.0 ]--
r 17     priv
--[ 2018.11.19.20.42.52.812.0 ]--
r 17     priva
--[ 2018.11.19.20.42.53.031.0 ]--
r 17     privat
--[ 2018.11.19.20.42.53.203.0 ]--
r 17     private
--[ 2018.11.19.20.42.53.312.0 ]--
r 17     private 
--[ 2018.11.19.20.42.54.312.0 ]--
r 17     private t
--[ 2018.11.19.20.42.54.499.0 ]--
r 17     private tr
--[ 2018.11.19.20.42.54.749.0 ]--
r 17     private tre
--[ 2018.11.19.20.42.54.890.0 ]--
r 17     private tree
--[ 2018.11.19.20.42.55.452.0 ]--
r 17     private tree;
--[ 2018.11.19.20.43.00.607.0 ]--
r 17     private Ptree;
--[ 2018.11.19.20.43.00.779.0 ]--
r 17     private PStree;
--[ 2018.11.19.20.43.01.420.0 ]--
r 17     private PSKtree;
--[ 2018.11.19.20.43.01.982.0 ]--
r 17     private PSKDTreetree;
--[ 2018.11.19.20.43.01.997.0 ]--
r 17     private PSKDTree;
--[ 2018.11.19.20.43.02.669.0 ]--
r 17     private PSKDTree ;
--[ 2018.11.19.20.43.03.356.0 ]--
r 17     private PSKDTree t;
--[ 2018.11.19.20.43.03.544.0 ]--
r 17     private PSKDTree tr;
--[ 2018.11.19.20.43.03.622.0 ]--
r 17     private PSKDTree tre;
--[ 2018.11.19.20.43.03.778.0 ]--
r 17     private PSKDTree tree;
--[ 2018.11.19.20.43.07.918.0 ]--
r 17     private PSKDTree pskdTree;
--[ 2018.11.19.20.43.22.758.0 ]--
r 20         n
--[ 2018.11.19.20.43.22.899.0 ]--
r 20         ne
--[ 2018.11.19.20.43.22.961.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.102.0 ]--
r 20         new 
--[ 2018.11.19.20.43.23.774.0 ]--
r 20         new
--[ 2018.11.19.20.43.23.914.0 ]--
r 20         ne
--[ 2018.11.19.20.43.24.039.0 ]--
r 20         n
--[ 2018.11.19.20.43.24.164.0 ]--
r 20         
--[ 2018.11.19.20.43.24.555.0 ]--
r 20         p
--[ 2018.11.19.20.43.25.117.0 ]--
r 20         ps
--[ 2018.11.19.20.43.25.476.0 ]--
r 20         pskdTree
--[ 2018.11.19.20.43.25.945.0 ]--
r 20         pskdTree 
--[ 2018.11.19.20.43.26.461.0 ]--
r 20         pskdTree =
--[ 2018.11.19.20.43.26.617.0 ]--
r 20         pskdTree = 
--[ 2018.11.19.20.43.27.257.0 ]--
r 20         pskdTree = n
--[ 2018.11.19.20.43.27.366.0 ]--
r 20         pskdTree = ne
--[ 2018.11.19.20.43.27.429.0 ]--
r 20         pskdTree = new
--[ 2018.11.19.20.43.27.570.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.28.101.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.28.382.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.28.679.0 ]--
r 20         pskdTree = new psk
--[ 2018.11.19.20.43.29.257.0 ]--
r 20         pskdTree = new ps
--[ 2018.11.19.20.43.29.288.0 ]--
r 20         pskdTree = new p
--[ 2018.11.19.20.43.29.538.0 ]--
r 20         pskdTree = new 
--[ 2018.11.19.20.43.29.788.0 ]--
r 20         pskdTree = new P
--[ 2018.11.19.20.43.29.960.0 ]--
r 20         pskdTree = new PS
--[ 2018.11.19.20.43.30.491.0 ]--
r 20         pskdTree = new PSKDTree
--[ 2018.11.19.20.43.30.506.0 ]--
r 20         pskdTree = new PSKDTree()
--[ 2018.11.19.20.43.31.397.0 ]--
r 20         pskdTree = new PSKDTree();
--[ 2018.11.19.20.43.35.177.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.35.177.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@694598b6
--[ 2018.11.19.20.43.38.586.0 ]--
r 67         return n;
--[ 2018.11.19.20.43.38.586.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.602.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.805.0 ]--
r 67         return nu;
--[ 2018.11.19.20.43.38.805.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.820.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.38.992.0 ]--
r 67         return nul;
--[ 2018.11.19.20.43.39.008.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.008.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.102.0 ]--
r 67         return null;
--[ 2018.11.19.20.43.39.117.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.39.117.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.43.41.632.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.23.407.0 ]--
- 20
--[ 2018.11.19.20.44.24.594.0 ]--
- 17
--[ 2018.11.19.20.44.27.984.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.44.33.697.0 ]--
r 65         return ;
--[ 2018.11.19.20.44.34.931.0 ]--
r 65         return r;
--[ 2018.11.19.20.44.35.103.0 ]--
r 65         return ro;
--[ 2018.11.19.20.44.35.212.0 ]--
r 65         return roo;
--[ 2018.11.19.20.44.35.321.0 ]--
r 65         return root;
--[ 2018.11.19.20.44.35.415.0 ]--
r 65         return root.;
--[ 2018.11.19.20.44.35.681.0 ]--
r 65         return root.v;
--[ 2018.11.19.20.44.43.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.46.23.260.0 ]--
r 65         i
--[ 2018.11.19.20.46.23.369.0 ]--
r 65         if
--[ 2018.11.19.20.46.23.463.0 ]--
r 65         if 
--[ 2018.11.19.20.46.24.494.0 ]--
r 65         if ()
--[ 2018.11.19.20.46.29.945.0 ]--
r 65         if (t)
--[ 2018.11.19.20.46.30.008.0 ]--
r 65         if (th)
--[ 2018.11.19.20.46.30.164.0 ]--
r 65         if (thi)
--[ 2018.11.19.20.46.30.242.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.30.398.0 ]--
r 65         if (this,)
--[ 2018.11.19.20.46.30.961.0 ]--
r 65         if (this)
--[ 2018.11.19.20.46.31.429.0 ]--
r 65         if (this.)
--[ 2018.11.19.20.46.32.086.0 ]--
r 65         if (this.i)
--[ 2018.11.19.20.46.32.164.0 ]--
r 65         if (this.is)
--[ 2018.11.19.20.46.32.633.0 ]--
r 65         if (this.isEmpty)
--[ 2018.11.19.20.46.32.648.0 ]--
r 65         if (this.isEmpty())
--[ 2018.11.19.20.46.33.773.0 ]--
r 65         if (this.isEmpty()) 
--[ 2018.11.19.20.46.34.007.0 ]--
r 65         if (this.isEmpty()) {
--[ 2018.11.19.20.46.34.241.0 ]--
+ 66 
+ 67 }
--[ 2018.11.19.20.46.34.257.0 ]--
r 67         }
--[ 2018.11.19.20.46.34.273.0 ]--
r 66             
--[ 2018.11.19.20.46.35.663.0 ]--
r 66             r
--[ 2018.11.19.20.46.35.788.0 ]--
r 66             re
--[ 2018.11.19.20.46.35.928.0 ]--
r 66             ret
--[ 2018.11.19.20.46.36.038.0 ]--
r 66             retu
--[ 2018.11.19.20.46.36.147.0 ]--
r 66             retur
--[ 2018.11.19.20.46.36.272.0 ]--
r 66             return
--[ 2018.11.19.20.46.36.366.0 ]--
r 66             return 
--[ 2018.11.19.20.46.50.050.0 ]--
r 106     public boolean isEmpty() { return f; }
--[ 2018.11.19.20.46.50.191.0 ]--
r 106     public boolean isEmpty() { return fa; }
--[ 2018.11.19.20.46.50.347.0 ]--
r 106     public boolean isEmpty() { return fal; }
--[ 2018.11.19.20.46.50.456.0 ]--
r 106     public boolean isEmpty() { return fals; }
--[ 2018.11.19.20.46.50.550.0 ]--
r 106     public boolean isEmpty() { return false; }
--[ 2018.11.19.20.46.51.237.0 ]--
r 66             return
--[ 2018.11.19.20.46.52.893.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.46.52.893.1 ]--
CompilationStatus (AEW): 0 33 0
[Ljava.lang.String;@588d3b4b
--[ 2018.11.19.20.47.00.441.0 ]--
r 66             return 
--[ 2018.11.19.20.47.00.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.457.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.0 ]--
r 66             return t
--[ 2018.11.19.20.47.00.722.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.722.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.738.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.910.0 ]--
r 66             return tr
--[ 2018.11.19.20.47.00.926.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.00.926.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.004.0 ]--
r 66             return tru
--[ 2018.11.19.20.47.01.004.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.019.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.129.0 ]--
r 66             return true
--[ 2018.11.19.20.47.01.129.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.144.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.269.0 ]--
r 66             return true;
--[ 2018.11.19.20.47.01.269.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.01.285.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.222.0 ]--
+ 68         
--[ 2018.11.19.20.47.02.222.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.238.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.425.0 ]--
r 68         r
--[ 2018.11.19.20.47.02.425.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.441.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.519.0 ]--
r 68         re
--[ 2018.11.19.20.47.02.519.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.535.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.691.0 ]--
r 68         ret
--[ 2018.11.19.20.47.02.706.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.02.706.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.0 ]--
r 68         retu
--[ 2018.11.19.20.47.03.066.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.066.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.0 ]--
r 68         retur
--[ 2018.11.19.20.47.03.159.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.159.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.237.0 ]--
r 68         return
--[ 2018.11.19.20.47.03.253.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.253.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.331.0 ]--
r 68         return 
--[ 2018.11.19.20.47.03.331.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.347.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.456.0 ]--
r 68         return f
--[ 2018.11.19.20.47.03.472.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.472.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.487.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.659.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.03.675.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.675.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.03.769.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.769.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.847.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.03.862.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.862.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.940.0 ]--
r 68         return false
--[ 2018.11.19.20.47.03.956.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.03.956.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.0 ]--
r 68         return false;
--[ 2018.11.19.20.47.04.237.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.237.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.04.987.0 ]--
r 68         return false
--[ 2018.11.19.20.47.04.987.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.003.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.128.0 ]--
r 68         return fals
--[ 2018.11.19.20.47.05.128.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.143.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.268.0 ]--
r 68         return fal
--[ 2018.11.19.20.47.05.268.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.284.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.362.0 ]--
r 68         return fa
--[ 2018.11.19.20.47.05.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.393.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.503.0 ]--
r 68         return f
--[ 2018.11.19.20.47.05.503.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.518.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.768.0 ]--
r 68         return 
--[ 2018.11.19.20.47.05.768.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.05.784.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.096.0 ]--
r 68         return n
--[ 2018.11.19.20.47.06.112.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.112.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.299.0 ]--
r 68         return nu
--[ 2018.11.19.20.47.06.315.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.315.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.549.0 ]--
r 68         return nul
--[ 2018.11.19.20.47.06.565.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.565.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.659.0 ]--
r 68         return null
--[ 2018.11.19.20.47.06.674.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.674.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.815.0 ]--
r 68         return null;
--[ 2018.11.19.20.47.06.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.06.830.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.08.752.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.0 ]--
r 66             return n;
--[ 2018.11.19.20.47.12.321.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.321.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.0 ]--
r 66             return nu;
--[ 2018.11.19.20.47.12.540.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.540.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.728.0 ]--
r 66             return nul;
--[ 2018.11.19.20.47.12.728.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.743.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.837.0 ]--
r 66             return null;
--[ 2018.11.19.20.47.12.853.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.12.853.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.47.15.289.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.16.279.0 ]--
r 107     public boolean isEmpty() { return r; }
--[ 2018.11.19.20.49.16.497.0 ]--
r 107     public boolean isEmpty() { return ro; }
--[ 2018.11.19.20.49.17.294.0 ]--
r 107     public boolean isEmpty() { return roo; }
--[ 2018.11.19.20.49.17.513.0 ]--
r 107     public boolean isEmpty() { return root; }
--[ 2018.11.19.20.49.18.216.0 ]--
r 107     public boolean isEmpty() { return root=; }
--[ 2018.11.19.20.49.18.341.0 ]--
r 107     public boolean isEmpty() { return root==; }
--[ 2018.11.19.20.49.18.872.0 ]--
r 107     public boolean isEmpty() { return root==n; }
--[ 2018.11.19.20.49.19.012.0 ]--
r 107     public boolean isEmpty() { return root==nu; }
--[ 2018.11.19.20.49.19.231.0 ]--
r 107     public boolean isEmpty() { return root==nul; }
--[ 2018.11.19.20.49.19.340.0 ]--
r 107     public boolean isEmpty() { return root==null; }
--[ 2018.11.19.20.49.25.542.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.38.155.0 ]--
+ 107     public boolean isEmpty() { 
r 108         return root==null; }
--[ 2018.11.19.20.49.38.655.0 ]--
+ 108         
--[ 2018.11.19.20.49.40.623.0 ]--
r 108         S
--[ 2018.11.19.20.49.40.904.0 ]--
r 108         St
--[ 2018.11.19.20.49.41.061.0 ]--
r 108         Std
--[ 2018.11.19.20.49.41.545.0 ]--
r 108         StdOut
--[ 2018.11.19.20.49.42.170.0 ]--
r 108         StdOut.
--[ 2018.11.19.20.49.42.467.0 ]--
r 108         StdOut.p
--[ 2018.11.19.20.49.42.576.0 ]--
r 108         StdOut.pr
--[ 2018.11.19.20.49.42.623.0 ]--
r 108         StdOut.pri
--[ 2018.11.19.20.49.42.748.0 ]--
r 108         StdOut.prin
--[ 2018.11.19.20.49.42.873.0 ]--
r 108         StdOut.println
--[ 2018.11.19.20.49.42.888.0 ]--
r 108         StdOut.println()
--[ 2018.11.19.20.49.42.888.1 ]--
r 108         StdOut.println();
--[ 2018.11.19.20.49.44.310.0 ]--
r 108         StdOut.println(r);
--[ 2018.11.19.20.49.44.419.0 ]--
r 108         StdOut.println(ro);
--[ 2018.11.19.20.49.44.544.0 ]--
r 108         StdOut.println(roo);
--[ 2018.11.19.20.49.44.653.0 ]--
r 108         StdOut.println(root);
--[ 2018.11.19.20.49.45.747.0 ]--
r 107     public boolean isEmpty() {
--[ 2018.11.19.20.49.47.668.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.49.54.131.0 ]--
r 108         StdOut.println("root);
--[ 2018.11.19.20.49.54.506.0 ]--
r 108         StdOut.println("Hroot);
--[ 2018.11.19.20.49.54.600.0 ]--
r 108         StdOut.println("Heroot);
--[ 2018.11.19.20.49.54.803.0 ]--
r 108         StdOut.println("Heyroot);
--[ 2018.11.19.20.49.55.256.0 ]--
r 108         StdOut.println("Hey"root);
--[ 2018.11.19.20.49.55.897.0 ]--
r 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.49.58.255.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.06.978.0 ]--
- 108
--[ 2018.11.19.20.50.11.852.0 ]--
+ 108         StdOut.println("Hey"+root);
--[ 2018.11.19.20.50.21.428.0 ]--
r 108         StdOut.println(root==null);
--[ 2018.11.19.20.50.23.724.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.50.32.667.0 ]--
- 108
--[ 2018.11.19.20.50.57.037.0 ]--
+ 31             
--[ 2018.11.19.20.50.57.677.0 ]--
r 31             S
--[ 2018.11.19.20.50.57.974.0 ]--
r 31             St
--[ 2018.11.19.20.50.58.240.0 ]--
r 31             Std
--[ 2018.11.19.20.50.58.771.0 ]--
r 31             StdOut
--[ 2018.11.19.20.50.59.380.0 ]--
r 31             StdOut.
--[ 2018.11.19.20.50.59.630.0 ]--
r 31             StdOut.p
--[ 2018.11.19.20.50.59.770.0 ]--
r 31             StdOut.pr
--[ 2018.11.19.20.50.59.802.0 ]--
r 31             StdOut.pri
--[ 2018.11.19.20.50.59.989.0 ]--
r 31             StdOut.prin
--[ 2018.11.19.20.51.00.083.0 ]--
r 31             StdOut.println
--[ 2018.11.19.20.51.00.098.0 ]--
r 31             StdOut.println()
--[ 2018.11.19.20.51.00.114.0 ]--
r 31             StdOut.println();
--[ 2018.11.19.20.51.00.801.0 ]--
r 31             StdOut.println(f);
--[ 2018.11.19.20.51.00.895.0 ]--
r 31             StdOut.println(fi);
--[ 2018.11.19.20.51.01.020.0 ]--
r 31             StdOut.println(fin);
--[ 2018.11.19.20.51.01.129.0 ]--
r 31             StdOut.println(fing);
--[ 2018.11.19.20.51.01.301.0 ]--
r 31             StdOut.println(finge);
--[ 2018.11.19.20.51.01.333.0 ]--
r 31             StdOut.println(finger);
--[ 2018.11.19.20.51.03.910.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.11.945.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.12.226.0 ]--
r 31             StdOut.println(finger.v);
--[ 2018.11.19.20.51.14.241.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.16.622.0 ]--
r 31             StdOut.println(finger.);
--[ 2018.11.19.20.51.16.888.0 ]--
r 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.18.856.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.22.749.0 ]--
- 31
--[ 2018.11.19.20.51.28.857.0 ]--
+ 31             
--[ 2018.11.19.20.51.29.654.0 ]--
- 31
--[ 2018.11.19.20.51.30.341.0 ]--
+ 31             StdOut.println(finger.p);
--[ 2018.11.19.20.51.33.590.0 ]--
r 31             StdOut.println(finger.left);
--[ 2018.11.19.20.51.36.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.43.795.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.51.47.079.0 ]--
r 31             StdOut.println(finger.left != null);
--[ 2018.11.19.20.51.49.906.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.13.528.0 ]--
r 32             while (finger.left = null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.16.512.0 ]--
r 32             while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
--[ 2018.11.19.20.52.28.900.0 ]--
- 31
--[ 2018.11.19.20.52.42.600.0 ]--
+ 46             
--[ 2018.11.19.20.52.43.209.0 ]--
r 46             S
--[ 2018.11.19.20.52.43.490.0 ]--
r 46             St
--[ 2018.11.19.20.52.43.724.0 ]--
r 46             Std
--[ 2018.11.19.20.52.44.240.0 ]--
r 46             StdOut
--[ 2018.11.19.20.52.44.896.0 ]--
r 46             StdOut.
--[ 2018.11.19.20.52.45.193.0 ]--
r 46             StdOut.p
--[ 2018.11.19.20.52.45.318.0 ]--
r 46             StdOut.pr
--[ 2018.11.19.20.52.45.396.0 ]--
r 46             StdOut.pri
--[ 2018.11.19.20.52.45.443.0 ]--
r 46             StdOut.prin
--[ 2018.11.19.20.52.45.552.0 ]--
r 46             StdOut.println
--[ 2018.11.19.20.52.45.568.0 ]--
r 46             StdOut.println()
--[ 2018.11.19.20.52.45.583.0 ]--
r 46             StdOut.println();
--[ 2018.11.19.20.52.46.458.0 ]--
r 46             StdOut.println(f);
--[ 2018.11.19.20.52.46.536.0 ]--
r 46             StdOut.println(fi);
--[ 2018.11.19.20.52.46.645.0 ]--
r 46             StdOut.println(fin);
--[ 2018.11.19.20.52.46.755.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.47.098.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.47.426.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.520.0 ]--
r 46             StdOut.println(fing.di);
--[ 2018.11.19.20.52.47.786.0 ]--
r 46             StdOut.println(fing.d);
--[ 2018.11.19.20.52.47.926.0 ]--
r 46             StdOut.println(fing.);
--[ 2018.11.19.20.52.48.020.0 ]--
r 46             StdOut.println(fing);
--[ 2018.11.19.20.52.48.254.0 ]--
r 46             StdOut.println(finge);
--[ 2018.11.19.20.52.48.270.0 ]--
r 46             StdOut.println(finger);
--[ 2018.11.19.20.52.48.598.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.52.48.879.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.52.48.989.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.52.49.082.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.52.52.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.52.58.713.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.52.59.541.0 ]--
r 46             StdOut.println(finger.v;
--[ 2018.11.19.20.53.00.104.0 ]--
r 46             StdOut.println(finger.;
--[ 2018.11.19.20.53.00.354.0 ]--
r 46             StdOut.println(finger.p;
--[ 2018.11.19.20.53.02.103.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.02.103.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@e960696
--[ 2018.11.19.20.53.03.734.0 ]--
r 46             StdOut.println(finger.p);
--[ 2018.11.19.20.53.03.750.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.03.750.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$1.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.19.20.53.06.140.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.10.785.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.11.597.0 ]--
r 46             StdOut.println(finger.v);
--[ 2018.11.19.20.53.13.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.19.150.0 ]--
r 46             StdOut.println(finger.);
--[ 2018.11.19.20.53.19.306.0 ]--
r 46             StdOut.println(finger.d);
--[ 2018.11.19.20.53.19.494.0 ]--
r 46             StdOut.println(finger.di);
--[ 2018.11.19.20.53.19.681.0 ]--
r 46             StdOut.println(finger.dir);
--[ 2018.11.19.20.53.21.743.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.53.23.902.0 ]--
- 46
--[ 2018.11.19.20.53.27.354.0 ]--
+ 26         
--[ 2018.11.19.20.53.27.604.0 ]--
r 26         n
--[ 2018.11.19.20.53.27.713.0 ]--
r 26         ne
--[ 2018.11.19.20.53.27.791.0 ]--
r 26         new
--[ 2018.11.19.20.53.28.588.0 ]--
r 26         newN
--[ 2018.11.19.20.53.28.682.0 ]--
r 26         newNo
--[ 2018.11.19.20.53.28.791.0 ]--
r 26         newNod
--[ 2018.11.19.20.53.28.994.0 ]--
r 26         newNode
--[ 2018.11.19.20.53.29.088.0 ]--
r 26         newNode.
--[ 2018.11.19.20.53.33.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.35.555.0 ]--
r 26         newNode.dir=
--[ 2018.11.19.20.53.36.899.0 ]--
r 26         newNode.dir
--[ 2018.11.19.20.53.37.508.0 ]--
r 26         newNode.dir 
--[ 2018.11.19.20.53.37.789.0 ]--
r 26         newNode.dir =
--[ 2018.11.19.20.53.37.883.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.38.914.0 ]--
r 26         newNode.dir = l
--[ 2018.11.19.20.53.39.336.0 ]--
r 26         newNode.dir = 
--[ 2018.11.19.20.53.40.554.0 ]--
r 26         newNode.dir = P
--[ 2018.11.19.20.53.40.788.0 ]--
r 26         newNode.dir = Pa
--[ 2018.11.19.20.53.41.054.0 ]--
r 26         newNode.dir = Par
--[ 2018.11.19.20.53.42.772.0 ]--
r 26         newNode.dir = Partition
--[ 2018.11.19.20.53.43.663.0 ]--
r 26         newNode.dir = Partition.
--[ 2018.11.19.20.53.43.866.0 ]--
r 26         newNode.dir = Partition.D
--[ 2018.11.19.20.53.44.006.0 ]--
r 26         newNode.dir = Partition.Di
--[ 2018.11.19.20.53.44.116.0 ]--
r 26         newNode.dir = Partition.Dir
--[ 2018.11.19.20.53.44.319.0 ]--
r 26         newNode.dir = Partition.Direction
--[ 2018.11.19.20.53.44.834.0 ]--
r 26         newNode.dir = Partition.Direction.
--[ 2018.11.19.20.53.45.709.0 ]--
r 26         newNode.dir = Partition.Direction.L
--[ 2018.11.19.20.53.46.365.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.53.47.443.0 ]--
r 26         newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.53.58.316.0 ]--
r 26 
--[ 2018.11.19.20.53.59.034.0 ]--
- 26
--[ 2018.11.19.20.54.01.409.0 ]--
+ 29             
--[ 2018.11.19.20.54.02.065.0 ]--
r 29             n
--[ 2018.11.19.20.54.02.315.0 ]--
r 29             ne
--[ 2018.11.19.20.54.02.424.0 ]--
r 29             new
--[ 2018.11.19.20.54.04.064.0 ]--
r 29             ne
--[ 2018.11.19.20.54.04.252.0 ]--
r 29             n
--[ 2018.11.19.20.54.04.892.0 ]--
r 29             
--[ 2018.11.19.20.54.05.173.0 ]--
- 29
--[ 2018.11.19.20.54.06.642.0 ]--
+ 28             
--[ 2018.11.19.20.54.07.267.0 ]--
r 28             n
--[ 2018.11.19.20.54.08.142.0 ]--
r 28             newNode
--[ 2018.11.19.20.54.08.766.0 ]--
r 28             newNode.
--[ 2018.11.19.20.54.09.407.0 ]--
r 28             newNode.d
--[ 2018.11.19.20.54.09.500.0 ]--
r 28             newNode.di
--[ 2018.11.19.20.54.09.672.0 ]--
r 28             newNode.dir
--[ 2018.11.19.20.54.10.360.0 ]--
r 28             newNode.dir 
--[ 2018.11.19.20.54.10.531.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.10.672.0 ]--
r 28             newNode.dir ==
--[ 2018.11.19.20.54.11.031.0 ]--
r 28             newNode.dir =
--[ 2018.11.19.20.54.11.344.0 ]--
r 28             newNode.dir = 
--[ 2018.11.19.20.54.12.000.0 ]--
r 28             newNode.dir = P
--[ 2018.11.19.20.54.12.156.0 ]--
r 28             newNode.dir = Pa
--[ 2018.11.19.20.54.12.609.0 ]--
r 28             newNode.dir = Par
--[ 2018.11.19.20.54.12.875.0 ]--
r 28             newNode.dir = Part
--[ 2018.11.19.20.54.13.781.0 ]--
r 28             newNode.dir = Parti
--[ 2018.11.19.20.54.14.578.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.609.0 ]--
r 28             newNode.dir = LEFTRIGHT
--[ 2018.11.19.20.54.14.624.0 ]--
r 28             newNode.dir = .LEFTRIGHT
--[ 2018.11.19.20.54.14.656.0 ]--
r 28             newNode.dir = Direction.LEFTRIGHT
--[ 2018.11.19.20.54.14.687.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT
--[ 2018.11.19.20.54.15.843.0 ]--
r 28             newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.32.917.0 ]--
+ 50                     
--[ 2018.11.19.20.54.33.073.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.34.854.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.010.0 ]--
r 50                     fi.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.198.0 ]--
r 50                     fin.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.291.0 ]--
r 50                     fing.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.479.0 ]--
r 50                     finge.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.35.541.0 ]--
r 50                     finger.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.44.649.0 ]--
r 50                     f.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.45.383.0 ]--
r 50                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.50.616.0 ]--
+ 53                     
--[ 2018.11.19.20.54.50.788.0 ]--
+ 53                                         newNode.dir = Partition.Direction.LEFTRIGHT;
r 54 
--[ 2018.11.19.20.54.50.819.0 ]--
r 53                     newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.54.52.037.0 ]--
- 54
--[ 2018.11.19.20.54.56.302.0 ]--
+ 54 
--[ 2018.11.19.20.54.56.708.0 ]--
- 53
r 53                     
--[ 2018.11.19.20.54.57.333.0 ]--
- 53
--[ 2018.11.19.20.54.58.083.0 ]--
r 50                     
--[ 2018.11.19.20.54.58.473.0 ]--
- 50
--[ 2018.11.19.20.55.00.910.0 ]--
+ 49                 
--[ 2018.11.19.20.55.01.145.0 ]--
+ 49                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 50 
--[ 2018.11.19.20.55.01.176.0 ]--
r 49                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.02.035.0 ]--
- 50
--[ 2018.11.19.20.55.04.566.0 ]--
+ 56                 
--[ 2018.11.19.20.55.04.832.0 ]--
+ 56                                     newNode.dir = Partition.Direction.LEFTRIGHT;
r 57 
--[ 2018.11.19.20.55.04.863.0 ]--
r 56                 newNode.dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.19.20.55.05.690.0 ]--
- 57
--[ 2018.11.19.20.55.07.409.0 ]--
r 56                 newNode.dir = Partition.Direction.D;
--[ 2018.11.19.20.55.07.596.0 ]--
r 56                 newNode.dir = Partition.Direction.Do;
--[ 2018.11.19.20.55.07.721.0 ]--
r 56                 newNode.dir = Partition.Direction.Dow;
--[ 2018.11.19.20.55.07.877.0 ]--
r 56                 newNode.dir = Partition.Direction.Down;
--[ 2018.11.19.20.55.08.175.0 ]--
r 56                 newNode.dir = Partition.Direction.DOWNUP;
--[ 2018.11.19.20.55.13.689.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.19.20.55.41.749.0 ]--
DisposeComponent
--[ 2018.11.20.14.37.26.462.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.20.14.37.26.516.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
/.git/objects/0b/cb1ae2a966f7111b04ea0e920d0c8aec8d394b
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
/.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
/.git/objects/47/b741f8ac969a6f29b52d882c67dad075facb3e
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/54/b37f17e70ec4b3c24cf6e6a402bf8e4faefc51
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6f/cc24bfdb55009cc2634fa4baece3496212e6c6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/4fc1b94f6be829b0272be4921f5bb6b4d515ee
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a2/ffa17b91d6b6ddcc862798c60330d0113280a0
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/f0/4ec327764f5180068a195efeb8bc3d760ce43d
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/objects/fc/ffaccf82b628f54bac5ba392691067050e5dff
/.git/objects/fe/86b7d30276d409463a9786906238815afa4617
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.20.14.37.26.519.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;
    // constructor makes empty kD-tree
    public PSKDTree() {
    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node();
        newNode.p = p;
        newNode.v = v;
        Node finger;
        if(this.isEmpty()){
            newNode.dir = Partition.Direction.LEFTRIGHT;
            root = newNode;
        } else {
            finger = root;
            while (finger.left != null || finger.right != null) { //this while loop should get us to the bottom
                if (finger.dir == Partition.Direction.LEFTRIGHT) {
                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
                        finger = finger.left;
                    } else {
                        finger = finger.right;
                    }
                } else {//the finger node is a down up partitioning node
                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
                        finger = finger.left;
                    } else {
                        finger = finger.right;
                    }
                }
            }
            //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
            if (finger.dir == Partition.Direction.LEFTRIGHT) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
                    newNode = finger.left;
                } else {
                    newNode = finger.right;
                }
            } else {//the finger node is a down up partitioning node
                newNode.dir = Partition.Direction.DOWNUP;
                if (finger.p.y() >= newNode.p.y()) { //the new node is below
                    newNode = finger.left;
                } else {
                    newNode = finger.right;
                }
            }
        }

    }

    public Value get(Point p) {
        if (this.isEmpty()) {
            return null;
        }
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() {
        return root==null; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.20.14.37.26.520.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.20.14.37.26.520.1 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.20.14.37.26.533.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.20.14.37.26.534.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.20.14.37.26.536.0 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.20.14.37.26.537.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.20.14.37.26.539.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.20.14.37.26.544.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.20.14.37.26.549.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.20.14.37.26.551.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.20.14.37.26.559.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.20.14.37.26.560.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.20.14.37.26.562.0 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.20.14.37.49.616.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.37.53.909.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.14.40.15.777.0 ]--
:/src/PSKDTree.java
+ 38                         
--[ 2018.11.20.14.40.17.124.0 ]--
- 38
--[ 2018.11.20.14.40.19.268.0 ]--
+ 39                     
--[ 2018.11.20.14.40.22.680.0 ]--
r 39                     s
--[ 2018.11.20.14.40.22.913.0 ]--
r 39                     
--[ 2018.11.20.14.40.23.135.0 ]--
r 39                     S
--[ 2018.11.20.14.40.23.402.0 ]--
r 39                     St
--[ 2018.11.20.14.40.24.475.0 ]--
r 39                     Std
--[ 2018.11.20.14.40.25.275.0 ]--
r 39                     StdOut
--[ 2018.11.20.14.40.26.056.0 ]--
r 39                     StdOut.
--[ 2018.11.20.14.40.26.273.0 ]--
r 39                     StdOut.p
--[ 2018.11.20.14.40.27.119.0 ]--
r 39                     StdOut.println
--[ 2018.11.20.14.40.27.155.0 ]--
r 39                     StdOut.println()
--[ 2018.11.20.14.40.27.188.0 ]--
r 39                     StdOut.println();
--[ 2018.11.20.14.40.28.222.0 ]--
r 39                     StdOut.println("");
--[ 2018.11.20.14.40.29.187.0 ]--
r 39                     StdOut.println("p");
--[ 2018.11.20.14.40.29.350.0 ]--
r 39                     StdOut.println("pl");
--[ 2018.11.20.14.40.29.431.0 ]--
r 39                     StdOut.println("pla");
--[ 2018.11.20.14.40.29.551.0 ]--
r 39                     StdOut.println("plac");
--[ 2018.11.20.14.40.29.697.0 ]--
r 39                     StdOut.println("place");
--[ 2018.11.20.14.40.29.973.0 ]--
r 39                     StdOut.println("placed");
--[ 2018.11.20.14.40.30.848.0 ]--
r 39                     StdOut.println("placed ");
--[ 2018.11.20.14.40.32.860.0 ]--
r 39                     StdOut.println("placed X");
--[ 2018.11.20.14.40.35.405.0 ]--
+ 46                     
--[ 2018.11.20.14.40.42.403.0 ]--
r 46                     StdOut.println("placed X");
--[ 2018.11.20.14.40.44.458.0 ]--
r 46                     StdOut.println("placed ");
--[ 2018.11.20.14.40.45.168.0 ]--
r 46                     StdOut.println("placed Y");
--[ 2018.11.20.14.40.50.016.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.41.03.812.0 ]--
+ 33                 
--[ 2018.11.20.14.41.06.710.0 ]--
r 33                     StdOut.println("placed X");
--[ 2018.11.20.14.41.06.769.0 ]--
r 33                 StdOut.println("placed X");
--[ 2018.11.20.14.41.08.390.0 ]--
r 33                 StdOut.println("placed X);
--[ 2018.11.20.14.41.08.783.0 ]--
r 33                 StdOut.println("placed );
--[ 2018.11.20.14.41.08.914.0 ]--
r 33                 StdOut.println("placed);
--[ 2018.11.20.14.41.09.093.0 ]--
r 33                 StdOut.println("place);
--[ 2018.11.20.14.41.09.220.0 ]--
r 33                 StdOut.println("plac);
--[ 2018.11.20.14.41.09.355.0 ]--
r 33                 StdOut.println("pla);
--[ 2018.11.20.14.41.09.525.0 ]--
r 33                 StdOut.println("pl);
--[ 2018.11.20.14.41.09.724.0 ]--
r 33                 StdOut.println("p);
--[ 2018.11.20.14.41.09.834.0 ]--
r 33                 StdOut.println(");
--[ 2018.11.20.14.41.10.451.0 ]--
r 33                 StdOut.println("i);
--[ 2018.11.20.14.41.10.553.0 ]--
r 33                 StdOut.println("in);
--[ 2018.11.20.14.41.10.661.0 ]--
r 33                 StdOut.println("in );
--[ 2018.11.20.14.41.12.350.0 ]--
r 33                 StdOut.println("in f);
--[ 2018.11.20.14.41.12.483.0 ]--
r 33                 StdOut.println("in fi);
--[ 2018.11.20.14.41.12.560.0 ]--
r 33                 StdOut.println("in fir);
--[ 2018.11.20.14.41.12.745.0 ]--
r 33                 StdOut.println("in firs);
--[ 2018.11.20.14.41.12.826.0 ]--
r 33                 StdOut.println("in first);
--[ 2018.11.20.14.41.13.040.0 ]--
r 33                 StdOut.println("in first );
--[ 2018.11.20.14.41.13.291.0 ]--
r 33                 StdOut.println("in first h);
--[ 2018.11.20.14.41.13.381.0 ]--
r 33                 StdOut.println("in first hw);
--[ 2018.11.20.14.41.13.693.0 ]--
r 33                 StdOut.println("in first h);
--[ 2018.11.20.14.41.13.809.0 ]--
r 33                 StdOut.println("in first );
--[ 2018.11.20.14.41.13.911.0 ]--
r 33                 StdOut.println("in first w);
--[ 2018.11.20.14.41.14.151.0 ]--
r 33                 StdOut.println("in first wh);
--[ 2018.11.20.14.41.14.409.0 ]--
r 33                 StdOut.println("in first whi);
--[ 2018.11.20.14.41.14.626.0 ]--
r 33                 StdOut.println("in first whil);
--[ 2018.11.20.14.41.14.745.0 ]--
r 33                 StdOut.println("in first while);
--[ 2018.11.20.14.41.15.370.0 ]--
r 33                 StdOut.println("in first while");
--[ 2018.11.20.14.41.19.164.0 ]--
+ 34                 
--[ 2018.11.20.14.41.21.628.0 ]--
r 34                     StdOut.println("placed X");
--[ 2018.11.20.14.41.21.698.0 ]--
r 34                 StdOut.println("placed X");
--[ 2018.11.20.14.41.23.833.0 ]--
- 34
--[ 2018.11.20.14.41.28.132.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.14.52.02.603.0 ]--
r 32             while (t) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.750.0 ]--
r 32             while (tr) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.838.0 ]--
r 32             while (tru) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.02.969.0 ]--
r 32             while (true) { //this while loop should get us to the bottom
--[ 2018.11.20.14.52.38.934.0 ]--
- 33
--[ 2018.11.20.14.54.05.359.0 ]--
r 35                         finger = finger.left;]
--[ 2018.11.20.14.54.06.574.0 ]--
+ 36                         
--[ 2018.11.20.14.54.07.453.0 ]--
- 36
--[ 2018.11.20.14.54.07.655.0 ]--
r 35                         finger = finger.left;
--[ 2018.11.20.14.54.08.478.0 ]--
+ 36                         
--[ 2018.11.20.14.54.19.992.0 ]--
+ 35                         
--[ 2018.11.20.14.54.21.108.0 ]--
r 35                         i
--[ 2018.11.20.14.54.21.184.0 ]--
r 35                         if
--[ 2018.11.20.14.54.21.755.0 ]--
r 35                         if 
--[ 2018.11.20.14.54.21.927.0 ]--
r 35                         if ()
--[ 2018.11.20.14.54.22.233.0 ]--
r 35                         if (f)
--[ 2018.11.20.14.54.22.395.0 ]--
r 35                         if (fi)
--[ 2018.11.20.14.54.22.431.0 ]--
r 35                         if (fin)
--[ 2018.11.20.14.54.22.614.0 ]--
r 35                         if (fing)
--[ 2018.11.20.14.54.22.987.0 ]--
r 35                         if (fing.)
--[ 2018.11.20.14.54.23.686.0 ]--
r 35                         if (fing)
--[ 2018.11.20.14.54.23.820.0 ]--
r 35                         if (finge)
--[ 2018.11.20.14.54.23.943.0 ]--
r 35                         if (finger)
--[ 2018.11.20.14.54.24.352.0 ]--
r 35                         if (finger.)
--[ 2018.11.20.14.54.24.578.0 ]--
r 35                         if (finger.l)
--[ 2018.11.20.14.54.24.700.0 ]--
r 35                         if (finger.le)
--[ 2018.11.20.14.54.24.855.0 ]--
r 35                         if (finger.leg)
--[ 2018.11.20.14.54.25.140.0 ]--
r 35                         if (finger.legt)
--[ 2018.11.20.14.54.25.421.0 ]--
r 35                         if (finger.leg)
--[ 2018.11.20.14.54.25.532.0 ]--
r 35                         if (finger.le)
--[ 2018.11.20.14.54.25.629.0 ]--
r 35                         if (finger.lef)
--[ 2018.11.20.14.54.25.797.0 ]--
r 35                         if (finger.left)
--[ 2018.11.20.14.54.26.460.0 ]--
r 35                         if (finger.left )
--[ 2018.11.20.14.54.26.674.0 ]--
r 35                         if (finger.left !)
--[ 2018.11.20.14.54.26.857.0 ]--
r 35                         if (finger.left !=)
--[ 2018.11.20.14.54.26.970.0 ]--
r 35                         if (finger.left != )
--[ 2018.11.20.14.54.27.369.0 ]--
r 35                         if (finger.left != u)
--[ 2018.11.20.14.54.27.585.0 ]--
r 35                         if (finger.left != u;)
--[ 2018.11.20.14.54.27.739.0 ]--
r 35                         if (finger.left != u;;)
--[ 2018.11.20.14.54.27.994.0 ]--
r 35                         if (finger.left != u;)
--[ 2018.11.20.14.54.28.121.0 ]--
r 35                         if (finger.left != u)
--[ 2018.11.20.14.54.28.239.0 ]--
r 35                         if (finger.left != )
--[ 2018.11.20.14.54.28.796.0 ]--
r 35                         if (finger.left != n)
--[ 2018.11.20.14.54.29.133.0 ]--
r 35                         if (finger.left != nu)
--[ 2018.11.20.14.54.29.328.0 ]--
r 35                         if (finger.left != nul)
--[ 2018.11.20.14.54.29.438.0 ]--
r 35                         if (finger.left != null)
--[ 2018.11.20.14.54.30.787.0 ]--
r 35                         if (finger.left != null){
--[ 2018.11.20.14.54.32.477.0 ]--
+ 37                         
--[ 2018.11.20.14.54.33.152.0 ]--
r 37                         }
--[ 2018.11.20.14.54.33.400.0 ]--
r 35                         if (finger.left != null) {
--[ 2018.11.20.14.54.33.437.0 ]--
r 36                             finger = finger.left;
--[ 2018.11.20.14.54.47.017.0 ]--
+ 38                         
--[ 2018.11.20.14.54.47.234.0 ]--
r 38                         e
--[ 2018.11.20.14.54.47.384.0 ]--
r 38                         el
--[ 2018.11.20.14.54.47.464.0 ]--
r 38                         els
--[ 2018.11.20.14.54.47.517.0 ]--
r 38                         else
--[ 2018.11.20.14.54.48.175.0 ]--
r 38                         else 
--[ 2018.11.20.14.54.48.418.0 ]--
r 38                         else {
--[ 2018.11.20.14.54.55.499.0 ]--
+ 39 
+ 40 }
--[ 2018.11.20.14.54.55.522.0 ]--
r 40                         }
--[ 2018.11.20.14.54.55.547.0 ]--
r 39                             
--[ 2018.11.20.14.54.55.740.0 ]--
+ 39                             
--[ 2018.11.20.14.54.57.242.0 ]--
- 39
--[ 2018.11.20.14.55.10.238.0 ]--
- 59
--[ 2018.11.20.14.55.14.697.0 ]--
+ 39                                                 newNode = finger.left;
r 40 
--[ 2018.11.20.14.55.14.751.0 ]--
r 39                             newNode = finger.left;
--[ 2018.11.20.14.55.16.688.0 ]--
r 40     
--[ 2018.11.20.14.55.16.825.0 ]--
r 40         
--[ 2018.11.20.14.55.17.004.0 ]--
r 40             
--[ 2018.11.20.14.55.17.168.0 ]--
r 40                 
--[ 2018.11.20.14.55.17.331.0 ]--
r 40                     
--[ 2018.11.20.14.55.17.519.0 ]--
r 40                         
--[ 2018.11.20.14.55.17.656.0 ]--
r 40                             
--[ 2018.11.20.14.55.17.813.0 ]--
r 40                                 
--[ 2018.11.20.14.55.18.516.0 ]--
r 40                             
--[ 2018.11.20.14.55.19.124.0 ]--
r 40                             b
--[ 2018.11.20.14.55.19.221.0 ]--
r 40                             br
--[ 2018.11.20.14.55.19.316.0 ]--
r 40                             bre
--[ 2018.11.20.14.55.19.451.0 ]--
r 40                             brea
--[ 2018.11.20.14.55.19.787.0 ]--
r 40                             breal
--[ 2018.11.20.14.55.20.477.0 ]--
r 40                             brea
--[ 2018.11.20.14.55.20.859.0 ]--
r 40                             break
--[ 2018.11.20.14.55.21.225.0 ]--
r 40                             break;
--[ 2018.11.20.14.55.21.622.0 ]--
r 40                             break; 
--[ 2018.11.20.14.55.22.093.0 ]--
r 40                             break; /
--[ 2018.11.20.14.55.22.162.0 ]--
r 40                             break; //
--[ 2018.11.20.14.55.22.375.0 ]--
r 40                             break; //b
--[ 2018.11.20.14.55.22.444.0 ]--
r 40                             break; //ba
--[ 2018.11.20.14.55.22.567.0 ]--
r 40                             break; //bab
--[ 2018.11.20.14.55.22.759.0 ]--
r 40                             break; //baby
--[ 2018.11.20.14.55.35.066.0 ]--
- 35
- 35
- 35
- 35
- 35
- 35
r 35                         
--[ 2018.11.20.14.55.36.373.0 ]--
+ 35                         if (finger.left != null) {
+ 36                             finger = finger.left;
+ 37                         }
+ 38                         else {
+ 39                             newNode = finger.left;
+ 40                             break; //baby
r 41                         }
--[ 2018.11.20.14.55.39.601.0 ]--
- 42
--[ 2018.11.20.14.55.44.611.0 ]--
+ 43                         if (finger.left != null) {
+ 44                             finger = finger.left;
+ 45                         }
+ 46                         else {
+ 47                             newNode = finger.left;
+ 48                             break; //baby
r 49                         }
--[ 2018.11.20.14.55.51.276.0 ]--
r 43                         if (finger.r != null) {
r 44                             finger = finger.r;
r 47                             newNode = finger.r;
--[ 2018.11.20.14.55.51.341.0 ]--
r 43                         if (finger.ri != null) {
r 44                             finger = finger.ri;
r 47                             newNode = finger.ri;
--[ 2018.11.20.14.55.51.501.0 ]--
r 43                         if (finger.rig != null) {
r 44                             finger = finger.rig;
r 47                             newNode = finger.rig;
--[ 2018.11.20.14.55.51.608.0 ]--
r 43                         if (finger.righ != null) {
r 44                             finger = finger.righ;
r 47                             newNode = finger.righ;
--[ 2018.11.20.14.55.51.689.0 ]--
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
r 47                             newNode = finger.right;
--[ 2018.11.20.14.55.52.412.0 ]--
+ 43                         if (finger.right
r 44                          != null) {
--[ 2018.11.20.14.55.52.449.0 ]--
r 44                                 != null) {
--[ 2018.11.20.14.55.52.472.0 ]--
+ 45                             finger = finger.right
r 46                             ;
--[ 2018.11.20.14.55.52.500.0 ]--
+ 49                             newNode = finger.right
r 50                             ;
--[ 2018.11.20.14.55.53.428.0 ]--
- 43
- 43
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
- 47
r 47                             newNode = finger.right;
--[ 2018.11.20.14.56.10.896.0 ]--
- 62
- 62
- 62
- 62
- 62
r 62   
--[ 2018.11.20.14.57.59.835.0 ]--
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
- 33
r 33                 
--[ 2018.11.20.14.58.01.168.0 ]--
+ 33                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
+ 34                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
+ 35                         if (finger.left != null) {
+ 36                             finger = finger.left;
+ 37                         }
+ 38                         else {
+ 39                             newNode = finger.left;
+ 40                             break; //baby
+ 41                         }
+ 42                     } else {
+ 43                         if (finger.right != null) {
+ 44                             finger = finger.right;
+ 45                         }
+ 46                         else {
+ 47                             newNode = finger.right;
+ 48                             break; //baby
+ 49                         }
+ 50                     }
+ 51                     StdOut.println("placed X");
+ 52                 } else {//the finger node is a down up partitioning node
+ 53                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
+ 54                         finger = finger.left;
+ 55                     } else {
+ 56                         finger = finger.right;
+ 57                     }
+ 58                     StdOut.println("placed Y");
r 59                 }
--[ 2018.11.20.14.58.02.233.0 ]--
r 33 //                if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34 //                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35 //                        if (finger.left != null) {
r 36 //                            finger = finger.left;
r 37 //                        }
r 38 //                        else {
r 39 //                            newNode = finger.left;
r 40 //                            break; //baby
r 41 //                        }
r 42 //                    } else {
r 43 //                        if (finger.right != null) {
r 44 //                            finger = finger.right;
r 45 //                        }
r 46 //                        else {
r 47 //                            newNode = finger.right;
r 48 //                            break; //baby
r 49 //                        }
r 50 //                    }
r 51 //                    StdOut.println("placed X");
r 52 //                } else {//the finger node is a down up partitioning node
r 53 //                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54 //                        finger = finger.left;
r 55 //                    } else {
r 56 //                        finger = finger.right;
r 57 //                    }
r 58 //                    StdOut.println("placed Y");
r 59 //                }
--[ 2018.11.20.14.58.08.616.0 ]--
+ 33                 
--[ 2018.11.20.14.58.13.896.0 ]--
- 33
--[ 2018.11.20.14.58.15.063.0 ]--
r 33                 if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34                     if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35                         if (finger.left != null) {
r 36                             finger = finger.left;
r 37                         }
r 38                         else {
r 39                             newNode = finger.left;
r 40                             break; //baby
r 41                         }
r 42                     } else {
r 43                         if (finger.right != null) {
r 44                             finger = finger.right;
r 45                         }
r 46                         else {
r 47                             newNode = finger.right;
r 48                             break; //baby
r 49                         }
r 50                     }
r 51                     StdOut.println("placed X");
r 52                 } else {//the finger node is a down up partitioning node
r 53                     if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54                         finger = finger.left;
r 55                     } else {
r 56                         finger = finger.right;
r 57                     }
r 58                     StdOut.println("placed Y");
r 59                 }
--[ 2018.11.20.14.58.27.189.0 ]--
r 32 //            while (true) { //this while loop should get us to the bottom
r 33 //                if (finger.dir == Partition.Direction.LEFTRIGHT) {
r 34 //                    if (finger.p.x() >= newNode.p.x()) { //the new node is to the left
r 35 //                        if (finger.left != null) {
r 36 //                            finger = finger.left;
r 37 //                        }
r 38 //                        else {
r 39 //                            newNode = finger.left;
r 40 //                            break; //baby
r 41 //                        }
r 42 //                    } else {
r 43 //                        if (finger.right != null) {
r 44 //                            finger = finger.right;
r 45 //                        }
r 46 //                        else {
r 47 //                            newNode = finger.right;
r 48 //                            break; //baby
r 49 //                        }
r 50 //                    }
r 51 //                    StdOut.println("placed X");
r 52 //                } else {//the finger node is a down up partitioning node
r 53 //                    if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 54 //                        finger = finger.left;
r 55 //                    } else {
r 56 //                        finger = finger.right;
r 57 //                    }
r 58 //                    StdOut.println("placed Y");
r 59 //                }
r 60 //            }
r 61 //            //at this point, we are at the bottom of the tree (finger is pointing to a leaf with no further leaves
r 62 //  
r 63 //            } else {//the finger node is a down up partitioning node
r 64 //                newNode.dir = Partition.Direction.DOWNUP;
r 65 //                if (finger.p.y() >= newNode.p.y()) { //the new node is below
r 66 //                    newNode = finger.left;
r 67 //                } else {
r 68 //                    newNode = finger.right;
r 69 //                }
r 70 //            }
r 71 //        }
--[ 2018.11.20.14.58.40.382.0 ]--
+ 32             
--[ 2018.11.20.14.58.43.709.0 ]--
r 32             w
--[ 2018.11.20.14.58.43.790.0 ]--
r 32             wh
--[ 2018.11.20.14.58.43.945.0 ]--
r 32             whi
--[ 2018.11.20.14.58.44.101.0 ]--
r 32             whil
--[ 2018.11.20.14.58.44.193.0 ]--
r 32             while
--[ 2018.11.20.14.58.44.607.0 ]--
r 32             while 
--[ 2018.11.20.14.58.44.872.0 ]--
r 32             while ()
--[ 2018.11.20.14.58.45.053.0 ]--
r 32             while (t)
--[ 2018.11.20.14.58.45.249.0 ]--
r 32             while (tr)
--[ 2018.11.20.14.58.45.328.0 ]--
r 32             while (tru)
--[ 2018.11.20.14.58.45.470.0 ]--
r 32             while (true)
--[ 2018.11.20.14.58.46.469.0 ]--
r 32             while (true )
--[ 2018.11.20.14.58.47.049.0 ]--
r 32             while (true)
--[ 2018.11.20.14.58.47.777.0 ]--
r 32             while (true){
--[ 2018.11.20.14.58.47.944.0 ]--
+ 33 
+ 34 }
--[ 2018.11.20.14.58.47.980.0 ]--
r 34             }
--[ 2018.11.20.14.58.48.018.0 ]--
r 33                 
--[ 2018.11.20.14.58.49.088.0 ]--
r 33                 s
--[ 2018.11.20.14.58.49.189.0 ]--
r 33                 so
--[ 2018.11.20.14.58.50.864.0 ]--
r 33                 so 
--[ 2018.11.20.14.58.50.950.0 ]--
r 33                 so p
--[ 2018.11.20.14.58.51.051.0 ]--
r 33                 so pa
--[ 2018.11.20.14.58.51.203.0 ]--
r 33                 so par
--[ 2018.11.20.14.58.51.393.0 ]--
r 33                 so part
--[ 2018.11.20.14.58.51.500.0 ]--
r 33                 so parti
--[ 2018.11.20.14.58.51.614.0 ]--
r 33                 so partin
--[ 2018.11.20.14.58.51.741.0 ]--
r 33                 so partini
--[ 2018.11.20.14.58.51.881.0 ]--
r 33                 so partinio
--[ 2018.11.20.14.58.51.955.0 ]--
r 33                 so partinion
--[ 2018.11.20.14.58.52.292.0 ]--
r 33                 so partinio
--[ 2018.11.20.14.58.52.407.0 ]--
r 33                 so partini
--[ 2018.11.20.14.58.52.518.0 ]--
r 33                 so partin
--[ 2018.11.20.14.58.52.672.0 ]--
r 33                 so parti
--[ 2018.11.20.14.58.52.797.0 ]--
r 33                 so part
--[ 2018.11.20.14.58.52.898.0 ]--
r 33                 so par
--[ 2018.11.20.14.58.53.053.0 ]--
r 33                 so pa
--[ 2018.11.20.14.58.53.152.0 ]--
r 33                 so p
--[ 2018.11.20.14.58.53.329.0 ]--
r 33                 so 
--[ 2018.11.20.14.58.53.382.0 ]--
r 33                 so
--[ 2018.11.20.14.58.53.533.0 ]--
r 33                 s
--[ 2018.11.20.14.58.53.902.0 ]--
r 33                 
--[ 2018.11.20.14.59.03.502.0 ]--
r 33                 f
--[ 2018.11.20.14.59.03.638.0 ]--
r 33                 fi
--[ 2018.11.20.14.59.03.812.0 ]--
r 33                 fin
--[ 2018.11.20.14.59.03.904.0 ]--
r 33                 fing
--[ 2018.11.20.14.59.04.229.0 ]--
r 33                 finge
--[ 2018.11.20.14.59.04.338.0 ]--
r 33                 finger
--[ 2018.11.20.14.59.04.442.0 ]--
r 33                 finger.
--[ 2018.11.20.14.59.05.453.0 ]--
r 33                 finger.p
--[ 2018.11.20.14.59.05.716.0 ]--
r 33                 finger.p.
--[ 2018.11.20.14.59.07.640.0 ]--
r 33                 finger.p.x
--[ 2018.11.20.14.59.07.766.0 ]--
r 33                 finger.p.xy
--[ 2018.11.20.14.59.09.292.0 ]--
r 33                 finger.p.x
--[ 2018.11.20.14.59.09.486.0 ]--
r 33                 finger.p.
--[ 2018.11.20.14.59.09.623.0 ]--
r 33                 finger.p
--[ 2018.11.20.14.59.09.809.0 ]--
r 33                 finger.
--[ 2018.11.20.14.59.09.929.0 ]--
r 33                 finger
--[ 2018.11.20.14.59.10.063.0 ]--
r 33                 finge
--[ 2018.11.20.14.59.10.242.0 ]--
r 33                 fing
--[ 2018.11.20.14.59.10.418.0 ]--
r 33                 fin
--[ 2018.11.20.14.59.10.541.0 ]--
r 33                 fi
--[ 2018.11.20.14.59.10.816.0 ]--
r 33                 f
--[ 2018.11.20.14.59.11.282.0 ]--
r 33                 
--[ 2018.11.20.14.59.19.487.0 ]--
r 33                 i
--[ 2018.11.20.14.59.19.634.0 ]--
r 33                 if
--[ 2018.11.20.14.59.20.687.0 ]--
r 33                 if 
--[ 2018.11.20.14.59.20.881.0 ]--
r 33                 if ()
--[ 2018.11.20.14.59.22.151.0 ]--
r 33                 if (f)
--[ 2018.11.20.14.59.22.243.0 ]--
r 33                 if (fi)
--[ 2018.11.20.14.59.22.377.0 ]--
r 33                 if (fin)
--[ 2018.11.20.14.59.22.441.0 ]--
r 33                 if (fing)
--[ 2018.11.20.14.59.23.050.0 ]--
r 33                 if (finger)
--[ 2018.11.20.14.59.23.504.0 ]--
r 33                 if (finger.)
--[ 2018.11.20.14.59.23.870.0 ]--
r 33                 if (finger.p)
--[ 2018.11.20.14.59.24.479.0 ]--
r 33                 if (finger.p.)
--[ 2018.11.20.14.59.25.920.0 ]--
r 33                 if (finger.p.x)
--[ 2018.11.20.14.59.26.058.0 ]--
r 33                 if (finger.p.xy)
--[ 2018.11.20.14.59.27.096.0 ]--
r 33                 if (finger.p.xy())
--[ 2018.11.20.14.59.28.567.0 ]--
r 33                 if (finger.p.xy(L))
--[ 2018.11.20.14.59.28.655.0 ]--
r 33                 if (finger.p.xy(LE))
--[ 2018.11.20.14.59.29.684.0 ]--
r 33                 if (finger.p.xy(LEF))
--[ 2018.11.20.14.59.30.316.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.30.361.0 ]--
r 33                 if (finger.p.xy(LEFTRIGHT))
--[ 2018.11.20.14.59.30.374.0 ]--
r 33                 if (finger.p.xy(.LEFTRIGHT))
--[ 2018.11.20.14.59.30.396.0 ]--
r 33                 if (finger.p.xy(Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.30.414.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.32.903.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) )
--[ 2018.11.20.14.59.33.157.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) <)
--[ 2018.11.20.14.59.33.505.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < )
--[ 2018.11.20.14.59.34.051.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < f)
--[ 2018.11.20.14.59.34.132.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fi)
--[ 2018.11.20.14.59.34.395.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fin)
--[ 2018.11.20.14.59.34.633.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.35.208.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing.)
--[ 2018.11.20.14.59.35.776.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.36.055.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finge)
--[ 2018.11.20.14.59.36.249.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.36.653.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger )
--[ 2018.11.20.14.59.37.167.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.37.420.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger.)
--[ 2018.11.20.14.59.38.219.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finger)
--[ 2018.11.20.14.59.38.363.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < finge)
--[ 2018.11.20.14.59.38.782.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fing)
--[ 2018.11.20.14.59.38.948.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fin)
--[ 2018.11.20.14.59.39.133.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < fi)
--[ 2018.11.20.14.59.39.279.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < f)
--[ 2018.11.20.14.59.39.437.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) < )
--[ 2018.11.20.14.59.39.614.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) <)
--[ 2018.11.20.14.59.39.806.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT) )
--[ 2018.11.20.14.59.40.213.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT))
--[ 2018.11.20.14.59.49.017.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGHT)
--[ 2018.11.20.14.59.49.500.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIGH)
--[ 2018.11.20.14.59.49.535.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRIG)
--[ 2018.11.20.14.59.49.559.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTRI)
--[ 2018.11.20.14.59.49.590.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFTR)
--[ 2018.11.20.14.59.49.623.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LEFT)
--[ 2018.11.20.14.59.49.704.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.LE)
--[ 2018.11.20.14.59.49.752.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.L)
--[ 2018.11.20.14.59.49.811.0 ]--
r 33                 if (finger.p.xy(Partition.Direction.)
--[ 2018.11.20.14.59.49.837.0 ]--
r 33                 if (finger.p.xy(Partition.Direction)
--[ 2018.11.20.14.59.49.885.0 ]--
r 33                 if (finger.p.xy(Partition.Directio)
--[ 2018.11.20.14.59.49.913.0 ]--
r 33                 if (finger.p.xy(Partition.Direct)
--[ 2018.11.20.14.59.49.947.0 ]--
r 33                 if (finger.p.xy(Partition.Direc)
--[ 2018.11.20.14.59.49.972.0 ]--
r 33                 if (finger.p.xy(Partition.Dire)
--[ 2018.11.20.14.59.49.997.0 ]--
r 33                 if (finger.p.xy(Partition.Dir)
--[ 2018.11.20.14.59.50.016.0 ]--
r 33                 if (finger.p.xy(Partition.Di)
--[ 2018.11.20.14.59.50.082.0 ]--
r 33                 if (finger.p.xy(Partition.D)
--[ 2018.11.20.14.59.50.110.0 ]--
r 33                 if (finger.p.xy(Partition.)
--[ 2018.11.20.14.59.50.133.0 ]--
r 33                 if (finger.p.xy(Partition)
--[ 2018.11.20.14.59.50.181.0 ]--
r 33                 if (finger.p.xy(Partitio)
--[ 2018.11.20.14.59.50.227.0 ]--
r 33                 if (finger.p.xy(Partiti)
--[ 2018.11.20.14.59.50.258.0 ]--
r 33                 if (finger.p.xy(Partit)
--[ 2018.11.20.14.59.50.283.0 ]--
r 33                 if (finger.p.xy(Parti)
--[ 2018.11.20.14.59.50.306.0 ]--
r 33                 if (finger.p.xy(Part)
--[ 2018.11.20.14.59.50.334.0 ]--
r 33                 if (finger.p.xy(Par)
--[ 2018.11.20.14.59.50.365.0 ]--
r 33                 if (finger.p.xy(Pa)
--[ 2018.11.20.14.59.50.399.0 ]--
r 33                 if (finger.p.xy(P)
--[ 2018.11.20.14.59.50.567.0 ]--
r 33                 if (finger.p.xy()
--[ 2018.11.20.14.59.50.746.0 ]--
r 33                 if (finger.p.xy)
--[ 2018.11.20.14.59.50.978.0 ]--
r 33                 if (finger.p.x)
--[ 2018.11.20.14.59.51.125.0 ]--
r 33                 if (finger.p.)
--[ 2018.11.20.14.59.51.297.0 ]--
r 33                 if (finger.p)
--[ 2018.11.20.14.59.51.486.0 ]--
r 33                 if (finger.)
--[ 2018.11.20.14.59.51.763.0 ]--
r 33                 if (finger)
--[ 2018.11.20.14.59.51.922.0 ]--
r 33                 if (finge)
--[ 2018.11.20.14.59.52.109.0 ]--
r 33                 if (fing)
--[ 2018.11.20.14.59.52.368.0 ]--
r 33                 if (fin)
--[ 2018.11.20.14.59.54.743.0 ]--
r 33                 if (fi)
--[ 2018.11.20.14.59.54.976.0 ]--
r 33                 if (f)
--[ 2018.11.20.14.59.55.392.0 ]--
r 33                 if ()
--[ 2018.11.20.15.00.19.122.0 ]--
r 33                 if (p)
--[ 2018.11.20.15.00.19.429.0 ]--
r 33                 if (p.)
--[ 2018.11.20.15.00.20.302.0 ]--
r 33                 if (p.x)
--[ 2018.11.20.15.00.20.750.0 ]--
r 33                 if (p.)
--[ 2018.11.20.15.00.20.811.0 ]--
r 33                 if (p)
--[ 2018.11.20.15.00.20.994.0 ]--
r 33                 if ()
--[ 2018.11.20.15.00.39.803.0 ]--
+ 33 
+ 34 }
--[ 2018.11.20.15.00.39.822.0 ]--
r 34             }
--[ 2018.11.20.15.00.39.863.0 ]--
r 33                 
--[ 2018.11.20.15.00.41.367.0 ]--
- 33
- 33
--[ 2018.11.20.15.00.44.104.0 ]--
+ 33                 
--[ 2018.11.20.15.01.31.580.0 ]--
r 33                 /
--[ 2018.11.20.15.01.31.688.0 ]--
r 33                 //
--[ 2018.11.20.15.01.31.868.0 ]--
r 33                 //c
--[ 2018.11.20.15.01.31.963.0 ]--
r 33                 //co
--[ 2018.11.20.15.01.32.081.0 ]--
r 33                 //com
--[ 2018.11.20.15.01.32.194.0 ]--
r 33                 //comp
--[ 2018.11.20.15.01.32.308.0 ]--
r 33                 //compa
--[ 2018.11.20.15.01.32.504.0 ]--
r 33                 //compar
--[ 2018.11.20.15.01.32.722.0 ]--
r 33                 //compari
--[ 2018.11.20.15.01.32.857.0 ]--
r 33                 //comparin
--[ 2018.11.20.15.01.32.983.0 ]--
r 33                 //comparing
--[ 2018.11.20.15.01.33.051.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.33.221.0 ]--
r 33                 //comparing e
--[ 2018.11.20.15.01.33.495.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.33.880.0 ]--
r 33                 //comparing X
--[ 2018.11.20.15.01.34.151.0 ]--
r 33                 //comparing X'
--[ 2018.11.20.15.01.34.244.0 ]--
r 33                 //comparing X's
--[ 2018.11.20.15.01.34.467.0 ]--
+ 34                 
--[ 2018.11.20.15.01.35.210.0 ]--
- 34
--[ 2018.11.20.15.01.35.310.0 ]--
r 33                 //comparing X'
--[ 2018.11.20.15.01.35.432.0 ]--
r 33                 //comparing X
--[ 2018.11.20.15.01.35.776.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.35.927.0 ]--
r 33                 //comparing s
--[ 2018.11.20.15.01.36.216.0 ]--
r 33                 //comparing s'
--[ 2018.11.20.15.01.36.600.0 ]--
r 33                 //comparing s's
--[ 2018.11.20.15.01.36.892.0 ]--
r 33                 //comparing s'
--[ 2018.11.20.15.01.37.019.0 ]--
r 33                 //comparing s
--[ 2018.11.20.15.01.37.158.0 ]--
r 33                 //comparing 
--[ 2018.11.20.15.01.37.354.0 ]--
r 33                 //comparing x
--[ 2018.11.20.15.01.37.508.0 ]--
r 33                 //comparing x'
--[ 2018.11.20.15.01.37.571.0 ]--
r 33                 //comparing x's
--[ 2018.11.20.15.01.37.698.0 ]--
+ 34                 
--[ 2018.11.20.15.02.04.715.0 ]--
r 34                 n
--[ 2018.11.20.15.02.04.808.0 ]--
r 34                 ne
--[ 2018.11.20.15.02.04.888.0 ]--
r 34                 new
--[ 2018.11.20.15.02.12.265.0 ]--
r 34                 ne
--[ 2018.11.20.15.02.12.472.0 ]--
r 34                 n
--[ 2018.11.20.15.02.12.748.0 ]--
r 34                 
--[ 2018.11.20.15.02.42.936.0 ]--
r 34                 f
--[ 2018.11.20.15.02.43.003.0 ]--
r 34                 fi
--[ 2018.11.20.15.02.43.127.0 ]--
r 34                 fin
--[ 2018.11.20.15.02.43.273.0 ]--
r 34                 fing
--[ 2018.11.20.15.02.43.496.0 ]--
r 34                 finge
--[ 2018.11.20.15.02.43.620.0 ]--
r 34                 finger
--[ 2018.11.20.15.02.43.702.0 ]--
r 34                 finger.
--[ 2018.11.20.15.02.45.002.0 ]--
r 34                 finger
--[ 2018.11.20.15.02.45.118.0 ]--
r 34                 finge
--[ 2018.11.20.15.02.45.321.0 ]--
r 34                 fing
--[ 2018.11.20.15.02.46.916.0 ]--
r 34                 fin
--[ 2018.11.20.15.02.47.084.0 ]--
r 34                 fi
--[ 2018.11.20.15.02.47.234.0 ]--
r 34                 f
--[ 2018.11.20.15.02.47.417.0 ]--
r 34                 
--[ 2018.11.20.15.03.02.385.0 ]--
r 35                 if (n)
--[ 2018.11.20.15.03.02.563.0 ]--
r 35                 if (ne)
--[ 2018.11.20.15.03.02.640.0 ]--
r 35                 if (new)
--[ 2018.11.20.15.03.03.785.0 ]--
r 35                 if (new )
--[ 2018.11.20.15.03.04.451.0 ]--
r 35                 if (new)
--[ 2018.11.20.15.03.04.962.0 ]--
r 35                 if (newN)
--[ 2018.11.20.15.03.05.404.0 ]--
r 35                 if (newNode)
--[ 2018.11.20.15.03.06.197.0 ]--
r 35                 if (newNode.)
--[ 2018.11.20.15.03.06.662.0 ]--
r 35                 if (newNode.p)
--[ 2018.11.20.15.03.07.348.0 ]--
r 35                 if (newNode.p.)
--[ 2018.11.20.15.03.08.801.0 ]--
r 35                 if (newNode.p.x)
--[ 2018.11.20.15.03.10.111.0 ]--
r 35                 if (newNode.p.xy)
--[ 2018.11.20.15.03.10.128.0 ]--
r 35                 if (newNode.p.xy())
--[ 2018.11.20.15.03.12.812.0 ]--
r 35                 if (newNode.p.xy(f))
--[ 2018.11.20.15.03.13.052.0 ]--
r 35                 if (newNode.p.xy(fi))
--[ 2018.11.20.15.03.13.112.0 ]--
r 35                 if (newNode.p.xy(fin))
--[ 2018.11.20.15.03.13.213.0 ]--
r 35                 if (newNode.p.xy(fing))
--[ 2018.11.20.15.03.13.430.0 ]--
r 35                 if (newNode.p.xy(finge))
--[ 2018.11.20.15.03.13.478.0 ]--
r 35                 if (newNode.p.xy(finger))
--[ 2018.11.20.15.03.14.296.0 ]--
r 35                 if (newNode.p.xy(finger.))
--[ 2018.11.20.15.03.14.909.0 ]--
r 35                 if (newNode.p.xy(finger.d))
--[ 2018.11.20.15.03.15.439.0 ]--
r 35                 if (newNode.p.xy(finger.dir))
--[ 2018.11.20.15.03.17.651.0 ]--
r 35                 if (newNode.p.xy(finger.dir)
--[ 2018.11.20.15.03.19.255.0 ]--
r 35                 if (newNode.p.xy(finger.dir))
--[ 2018.11.20.15.03.47.050.0 ]--
r 35                 if (newNode.p.xy(finger.dir)) 
--[ 2018.11.20.15.03.49.646.0 ]--
r 35                 if (newNode.p.xy(finger.dir)) {
--[ 2018.11.20.15.03.51.433.0 ]--
r 35                 if (newNode.p.xy(finger.dir)){
--[ 2018.11.20.15.07.14.367.0 ]--
r 35                 if (newNode.p.xy(finger.dir) ){
--[ 2018.11.20.15.07.29.762.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >){
--[ 2018.11.20.15.07.32.706.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ){
--[ 2018.11.20.15.07.40.235.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > r){
--[ 2018.11.20.15.07.40.672.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ro){
--[ 2018.11.20.15.07.40.830.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > roo){
--[ 2018.11.20.15.07.41.006.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > root){
--[ 2018.11.20.15.07.41.702.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > roo){
--[ 2018.11.20.15.07.41.861.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ro){
--[ 2018.11.20.15.07.41.994.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > r){
--[ 2018.11.20.15.07.42.155.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > ){
--[ 2018.11.20.15.07.42.939.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > f){
--[ 2018.11.20.15.07.43.066.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fi){
--[ 2018.11.20.15.07.43.237.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fin){
--[ 2018.11.20.15.07.44.053.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > fing){
--[ 2018.11.20.15.07.44.219.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finge){
--[ 2018.11.20.15.07.44.322.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finger){
--[ 2018.11.20.15.07.45.175.0 ]--
r 35                 if (newNode.p.xy(finger.dir) > finger.){
--[ 2018.11.20.15.07.49.434.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.){
--[ 2018.11.20.15.07.52.162.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.d){
--[ 2018.11.20.15.07.52.318.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.di){
--[ 2018.11.20.15.07.52.416.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.dir){
--[ 2018.11.20.15.07.52.974.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.di){
--[ 2018.11.20.15.07.53.164.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.d){
--[ 2018.11.20.15.07.53.332.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.){
--[ 2018.11.20.15.07.54.864.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p){
--[ 2018.11.20.15.07.55.259.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.){
--[ 2018.11.20.15.07.56.881.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy){
--[ 2018.11.20.15.07.56.894.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy()){
--[ 2018.11.20.15.07.58.658.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(f)){
--[ 2018.11.20.15.07.58.881.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fi)){
--[ 2018.11.20.15.07.58.939.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fin)){
--[ 2018.11.20.15.07.59.006.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(fing)){
--[ 2018.11.20.15.07.59.247.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finge)){
--[ 2018.11.20.15.07.59.297.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger)){
--[ 2018.11.20.15.07.59.536.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger,)){
--[ 2018.11.20.15.08.00.675.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger)){
--[ 2018.11.20.15.08.00.983.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.)){
--[ 2018.11.20.15.08.01.283.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.d)){
--[ 2018.11.20.15.08.01.466.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.di)){
--[ 2018.11.20.15.08.01.568.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger.p.xy(finger.dir)){
--[ 2018.11.20.15.08.04.477.0 ]--
+ 36 
+ 37 }
--[ 2018.11.20.15.08.04.507.0 ]--
r 37                 }
--[ 2018.11.20.15.08.04.535.0 ]--
r 36                     
--[ 2018.11.20.15.08.41.222.0 ]--
r 34                 f
--[ 2018.11.20.15.08.41.317.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.41.502.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.41.885.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.41.987.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.42.081.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.42.721.0 ]--
r 34                 fingerD
--[ 2018.11.20.15.08.42.907.0 ]--
r 34                 fingerDi
--[ 2018.11.20.15.08.42.970.0 ]--
r 34                 fingerDir
--[ 2018.11.20.15.08.44.592.0 ]--
r 34                 fingerDi
--[ 2018.11.20.15.08.44.756.0 ]--
r 34                 fingerD
--[ 2018.11.20.15.08.44.917.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.45.066.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.45.235.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.45.432.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.45.564.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.45.721.0 ]--
r 34                 f
--[ 2018.11.20.15.08.46.130.0 ]--
r 34                 
--[ 2018.11.20.15.08.51.207.0 ]--
r 34                 F
--[ 2018.11.20.15.08.51.354.0 ]--
r 34                 Fi
--[ 2018.11.20.15.08.51.549.0 ]--
r 34                 Fin
--[ 2018.11.20.15.08.51.607.0 ]--
r 34                 Fing
--[ 2018.11.20.15.08.51.742.0 ]--
r 34                 Finge
--[ 2018.11.20.15.08.51.824.0 ]--
r 34                 Finger
--[ 2018.11.20.15.08.52.598.0 ]--
r 34                 Finge
--[ 2018.11.20.15.08.52.777.0 ]--
r 34                 Fing
--[ 2018.11.20.15.08.52.916.0 ]--
r 34                 Fin
--[ 2018.11.20.15.08.53.073.0 ]--
r 34                 Fi
--[ 2018.11.20.15.08.53.148.0 ]--
r 34                 F
--[ 2018.11.20.15.08.53.487.0 ]--
r 34                 
--[ 2018.11.20.15.08.53.874.0 ]--
r 34                 f
--[ 2018.11.20.15.08.54.015.0 ]--
r 34                 fi
--[ 2018.11.20.15.08.54.121.0 ]--
r 34                 fin
--[ 2018.11.20.15.08.54.220.0 ]--
r 34                 fing
--[ 2018.11.20.15.08.54.371.0 ]--
r 34                 finge
--[ 2018.11.20.15.08.54.476.0 ]--
r 34                 finger
--[ 2018.11.20.15.08.55.121.0 ]--
r 34                 fingerv
--[ 2018.11.20.15.08.55.381.0 ]--
r 34                 fingerva
--[ 2018.11.20.15.08.55.480.0 ]--
r 34                 fingerval
--[ 2018.11.20.15.08.56.008.0 ]--
r 34                 fingervalu
--[ 2018.11.20.15.08.56.147.0 ]--
r 34                 fingervalue
--[ 2018.11.20.15.09.00.067.0 ]--
r 34                 ifingervalue
--[ 2018.11.20.15.09.00.195.0 ]--
r 34                 infingervalue
--[ 2018.11.20.15.09.00.270.0 ]--
r 34                 intfingervalue
--[ 2018.11.20.15.09.00.510.0 ]--
r 34                 int fingervalue
--[ 2018.11.20.15.09.02.190.0 ]--
r 34                 intfingervalue
--[ 2018.11.20.15.09.02.398.0 ]--
r 34                 infingervalue
--[ 2018.11.20.15.09.02.692.0 ]--
r 34                 ifingervalue
--[ 2018.11.20.15.09.03.263.0 ]--
r 34                 fingervalue
--[ 2018.11.20.15.09.07.204.0 ]--
r 34                 dfingervalue
--[ 2018.11.20.15.09.07.340.0 ]--
r 34                 dofingervalue
--[ 2018.11.20.15.09.07.425.0 ]--
r 34                 doufingervalue
--[ 2018.11.20.15.09.07.792.0 ]--
r 34                 doubfingervalue
--[ 2018.11.20.15.09.07.994.0 ]--
r 34                 doublfingervalue
--[ 2018.11.20.15.09.08.213.0 ]--
r 34                 doublefingervalue
--[ 2018.11.20.15.09.08.294.0 ]--
r 34                 double fingervalue
--[ 2018.11.20.15.09.11.206.0 ]--
r 34                 double fingervalue 
--[ 2018.11.20.15.09.11.873.0 ]--
r 34                 double fingervalue =
--[ 2018.11.20.15.09.11.955.0 ]--
r 34                 double fingervalue = 
--[ 2018.11.20.15.09.12.807.0 ]--
r 34                 double fingervalue = f
--[ 2018.11.20.15.09.12.921.0 ]--
r 34                 double fingervalue = fi
--[ 2018.11.20.15.09.13.104.0 ]--
r 34                 double fingervalue = fin
--[ 2018.11.20.15.09.13.140.0 ]--
r 34                 double fingervalue = fing
--[ 2018.11.20.15.09.13.293.0 ]--
r 34                 double fingervalue = finge
--[ 2018.11.20.15.09.13.396.0 ]--
r 34                 double fingervalue = finger
--[ 2018.11.20.15.09.13.580.0 ]--
r 34                 double fingervalue = finger,
--[ 2018.11.20.15.09.14.722.0 ]--
r 34                 .double fingervalue = finger,
--[ 2018.11.20.15.09.15.471.0 ]--
r 34                 double fingervalue = finger,
--[ 2018.11.20.15.09.17.096.0 ]--
r 34                 double fingervalue = finger
--[ 2018.11.20.15.09.17.482.0 ]--
r 34                 double fingervalue = finger.
--[ 2018.11.20.15.09.17.892.0 ]--
r 34                 double fingervalue = finger.p
--[ 2018.11.20.15.09.18.198.0 ]--
r 34                 double fingervalue = finger.p.
--[ 2018.11.20.15.09.19.320.0 ]--
r 34                 double fingervalue = finger.p.x
--[ 2018.11.20.15.09.19.335.0 ]--
r 34                 double fingervalue = finger.p.x()
--[ 2018.11.20.15.09.19.885.0 ]--
r 34                 double fingervalue = finger.p.x(
--[ 2018.11.20.15.09.20.086.0 ]--
r 34                 double fingervalue = finger.p.x
--[ 2018.11.20.15.09.20.644.0 ]--
r 34                 double fingervalue = finger.p.xy
--[ 2018.11.20.15.09.21.391.0 ]--
r 34                 double fingervalue = finger.p.xy()
--[ 2018.11.20.15.09.24.363.0 ]--
r 34                 double fingervalue = finger.p.xy(d)
--[ 2018.11.20.15.09.24.718.0 ]--
r 34                 double fingervalue = finger.p.xy()
--[ 2018.11.20.15.09.25.596.0 ]--
r 34                 double fingervalue = finger.p.xy(f)
--[ 2018.11.20.15.09.25.675.0 ]--
r 34                 double fingervalue = finger.p.xy(fi)
--[ 2018.11.20.15.09.25.773.0 ]--
r 34                 double fingervalue = finger.p.xy(fin)
--[ 2018.11.20.15.09.26.018.0 ]--
r 34                 double fingervalue = finger.p.xy(fine)
--[ 2018.11.20.15.09.26.339.0 ]--
r 34                 double fingervalue = finger.p.xy(fin)
--[ 2018.11.20.15.09.26.465.0 ]--
r 34                 double fingervalue = finger.p.xy(fing)
--[ 2018.11.20.15.09.26.649.0 ]--
r 34                 double fingervalue = finger.p.xy(finge)
--[ 2018.11.20.15.09.26.751.0 ]--
r 34                 double fingervalue = finger.p.xy(finger)
--[ 2018.11.20.15.09.27.966.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.)
--[ 2018.11.20.15.09.28.552.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.d)
--[ 2018.11.20.15.09.28.683.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.di)
--[ 2018.11.20.15.09.28.844.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir)
--[ 2018.11.20.15.09.30.121.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir())
--[ 2018.11.20.15.09.31.002.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir()
--[ 2018.11.20.15.09.31.168.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir)
--[ 2018.11.20.15.09.32.949.0 ]--
r 34                 double fingervalue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.38.375.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= g){
--[ 2018.11.20.15.09.38.532.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gi){
--[ 2018.11.20.15.09.38.623.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gin){
--[ 2018.11.20.15.09.38.962.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= gi){
--[ 2018.11.20.15.09.39.089.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= g){
--[ 2018.11.20.15.09.39.262.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= ){
--[ 2018.11.20.15.09.39.564.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= f){
--[ 2018.11.20.15.09.39.816.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fi){
--[ 2018.11.20.15.09.39.903.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fin){
--[ 2018.11.20.15.09.40.029.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fing){
--[ 2018.11.20.15.09.40.197.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finge){
--[ 2018.11.20.15.09.40.280.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= finger){
--[ 2018.11.20.15.09.41.884.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingerv){
--[ 2018.11.20.15.09.42.603.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingervalue){
--[ 2018.11.20.15.09.49.480.0 ]--
r 34                 double fingeralue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.49.834.0 ]--
r 34                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.09.53.444.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingeralue){
--[ 2018.11.20.15.09.53.781.0 ]--
r 35                 if (newNode.p.xy(finger.dir) >= fingerValue){
--[ 2018.11.20.15.10.09.455.0 ]--
+ 34                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.11.735.0 ]--
r 35                 double fingeValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.11.938.0 ]--
r 35                 double fingValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.109.0 ]--
r 35                 double finValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.267.0 ]--
r 35                 double fiValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.12.373.0 ]--
r 35                 double fValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.211.0 ]--
r 35                 double Value = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.669.0 ]--
r 35                 double nValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.13.959.0 ]--
r 35                 double neValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.054.0 ]--
r 35                 double newValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.406.0 ]--
r 35                 double newNValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.625.0 ]--
r 35                 double newNoValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.14.993.0 ]--
r 35                 double newNodValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.15.069.0 ]--
r 35                 double newNodeValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.361.0 ]--
r 35                 double newNodeValue = n.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.472.0 ]--
r 35                 double newNodeValue = ne.p.xy(finger.dir);
--[ 2018.11.20.15.10.43.541.0 ]--
r 35                 double newNodeValue = new.p.xy(finger.dir);
--[ 2018.11.20.15.10.44.277.0 ]--
r 35                 double newNodeValue = newN.p.xy(finger.dir);
--[ 2018.11.20.15.10.44.757.0 ]--
r 35                 double newNodeValue = newNo.p.xy(finger.dir);
--[ 2018.11.20.15.10.45.256.0 ]--
r 35                 double newNodeValue = newNod.p.xy(finger.dir);
--[ 2018.11.20.15.10.45.334.0 ]--
r 35                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.10.46.743.0 ]--
r 35                 double newNodeValue = newNodeV.p.xy(finger.dir);
--[ 2018.11.20.15.10.47.044.0 ]--
r 35                 double newNodeValue = newNodeVa.p.xy(finger.dir);
--[ 2018.11.20.15.10.47.749.0 ]--
r 35                 double newNodeValue = newNodeV.p.xy(finger.dir);
--[ 2018.11.20.15.10.48.170.0 ]--
r 35                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.11.02.881.0 ]--
r 36                 if (n >= fingerValue){
--[ 2018.11.20.15.11.02.980.0 ]--
r 36                 if (ne >= fingerValue){
--[ 2018.11.20.15.11.03.133.0 ]--
r 36                 if (new >= fingerValue){
--[ 2018.11.20.15.11.04.840.0 ]--
r 36                 if (newNodeValue >= fingerValue){
--[ 2018.11.20.15.11.46.599.0 ]--
r 70 //
--[ 2018.11.20.15.12.14.640.0 ]--
r 36                 if (newNodeValue = fingerValue){
--[ 2018.11.20.15.12.15.317.0 ]--
r 36                 if (newNodeValue  fingerValue){
--[ 2018.11.20.15.12.15.748.0 ]--
r 36                 if (newNodeValue < fingerValue){
--[ 2018.11.20.15.12.21.614.0 ]--
r 37                     i
--[ 2018.11.20.15.12.21.744.0 ]--
r 37                     if
--[ 2018.11.20.15.12.21.900.0 ]--
r 37                     if 
--[ 2018.11.20.15.12.22.437.0 ]--
r 37                     if ()
--[ 2018.11.20.15.12.23.743.0 ]--
r 37                     if (i)
--[ 2018.11.20.15.12.23.868.0 ]--
r 37                     if (if)
--[ 2018.11.20.15.12.24.055.0 ]--
r 37                     if (i)
--[ 2018.11.20.15.12.24.164.0 ]--
r 37                     if ()
--[ 2018.11.20.15.12.24.288.0 ]--
r 37                     if (f)
--[ 2018.11.20.15.12.24.413.0 ]--
r 37                     if (fi)
--[ 2018.11.20.15.12.24.645.0 ]--
r 37                     if (fin)
--[ 2018.11.20.15.12.24.754.0 ]--
r 37                     if (fing)
--[ 2018.11.20.15.12.25.160.0 ]--
r 37                     if (fing.)
--[ 2018.11.20.15.12.25.892.0 ]--
r 37                     if (fing)
--[ 2018.11.20.15.12.26.061.0 ]--
r 37                     if (finge)
--[ 2018.11.20.15.12.26.186.0 ]--
r 37                     if (finger)
--[ 2018.11.20.15.12.27.221.0 ]--
r 37                     if (finger.)
--[ 2018.11.20.15.12.27.437.0 ]--
r 37                     if (finger.l)
--[ 2018.11.20.15.12.27.598.0 ]--
r 37                     if (finger.lf)
--[ 2018.11.20.15.12.28.105.0 ]--
r 37                     if (finger.l)
--[ 2018.11.20.15.12.28.469.0 ]--
r 37                     if (finger.le)
--[ 2018.11.20.15.12.28.699.0 ]--
r 37                     if (finger.lef)
--[ 2018.11.20.15.12.28.881.0 ]--
r 37                     if (finger.left)
--[ 2018.11.20.15.12.30.012.0 ]--
r 37                     if (finger.left )
--[ 2018.11.20.15.12.30.200.0 ]--
r 37                     if (finger.left !)
--[ 2018.11.20.15.12.30.436.0 ]--
r 37                     if (finger.left !=)
--[ 2018.11.20.15.12.30.662.0 ]--
r 37                     if (finger.left != )
--[ 2018.11.20.15.12.30.855.0 ]--
r 37                     if (finger.left != n)
--[ 2018.11.20.15.12.31.089.0 ]--
r 37                     if (finger.left != nu)
--[ 2018.11.20.15.12.31.324.0 ]--
r 37                     if (finger.left != nul)
--[ 2018.11.20.15.12.31.442.0 ]--
r 37                     if (finger.left != null)
--[ 2018.11.20.15.12.32.504.0 ]--
r 37                     if (finger.left != null){
--[ 2018.11.20.15.12.32.771.0 ]--
+ 38 
+ 39 }
--[ 2018.11.20.15.12.32.786.0 ]--
r 39                     }
--[ 2018.11.20.15.12.32.817.0 ]--
r 38                         
--[ 2018.11.20.15.12.34.266.0 ]--
r 38                         f
--[ 2018.11.20.15.12.34.391.0 ]--
r 38                         fi
--[ 2018.11.20.15.12.34.703.0 ]--
r 38                         fin
--[ 2018.11.20.15.12.34.875.0 ]--
r 38                         fing
--[ 2018.11.20.15.12.35.328.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.35.438.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.35.556.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.35.806.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.35.946.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.36.040.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.36.290.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.37.057.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.37.197.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.37.343.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.37.489.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.37.630.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.37.755.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.38.976.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.39.132.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.39.364.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.39.486.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.39.580.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.39.767.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.39.908.0 ]--
r 38                         finger.left 
--[ 2018.11.20.15.12.40.389.0 ]--
r 38                         finger.left =
--[ 2018.11.20.15.12.40.524.0 ]--
r 38                         finger.left = 
--[ 2018.11.20.15.12.42.355.0 ]--
r 38                         finger.left = n
--[ 2018.11.20.15.12.43.104.0 ]--
r 38                         finger.left = ne
--[ 2018.11.20.15.12.43.474.0 ]--
r 38                         finger.left = new
--[ 2018.11.20.15.12.45.752.0 ]--
r 38                         finger.left = ne
--[ 2018.11.20.15.12.46.272.0 ]--
r 38                         finger.left = n
--[ 2018.11.20.15.12.46.287.0 ]--
r 38                         finger.left = 
--[ 2018.11.20.15.12.46.334.0 ]--
r 38                         finger.left =
--[ 2018.11.20.15.12.46.350.0 ]--
r 38                         finger.left 
--[ 2018.11.20.15.12.46.397.0 ]--
r 38                         finger.left
--[ 2018.11.20.15.12.46.429.0 ]--
r 38                         finger.lef
--[ 2018.11.20.15.12.46.473.0 ]--
r 38                         finger.le
--[ 2018.11.20.15.12.46.488.0 ]--
r 38                         finger.l
--[ 2018.11.20.15.12.46.520.0 ]--
r 38                         finger.
--[ 2018.11.20.15.12.46.567.0 ]--
r 38                         finger
--[ 2018.11.20.15.12.46.613.0 ]--
r 38                         finge
--[ 2018.11.20.15.12.46.629.0 ]--
r 38                         fing
--[ 2018.11.20.15.12.46.676.0 ]--
r 38                         fin
--[ 2018.11.20.15.12.46.691.0 ]--
r 38                         fi
--[ 2018.11.20.15.12.46.739.0 ]--
r 38                         f
--[ 2018.11.20.15.12.46.785.0 ]--
r 38                         
--[ 2018.11.20.15.12.46.816.0 ]--
- 38
--[ 2018.11.20.15.12.47.727.0 ]--
+ 38 
+ 39 }
--[ 2018.11.20.15.12.47.743.0 ]--
r 39                     }
--[ 2018.11.20.15.12.47.764.0 ]--
r 38                         
--[ 2018.11.20.15.12.48.295.0 ]--
r 38                         n
--[ 2018.11.20.15.12.48.373.0 ]--
r 38                         ne
--[ 2018.11.20.15.12.48.482.0 ]--
r 38                         new
--[ 2018.11.20.15.12.49.217.0 ]--
r 38                         newN
--[ 2018.11.20.15.12.49.357.0 ]--
r 38                         newNo
--[ 2018.11.20.15.12.49.571.0 ]--
r 38                         newNod
--[ 2018.11.20.15.12.49.763.0 ]--
r 38                         newNode
--[ 2018.11.20.15.12.49.935.0 ]--
r 38                         newNode 
--[ 2018.11.20.15.12.50.644.0 ]--
r 38                         newNode =
--[ 2018.11.20.15.12.50.800.0 ]--
r 38                         newNode = 
--[ 2018.11.20.15.12.50.929.0 ]--
r 38                         newNode = f
--[ 2018.11.20.15.12.50.999.0 ]--
r 38                         newNode = fi
--[ 2018.11.20.15.12.51.171.0 ]--
r 38                         newNode = fil
--[ 2018.11.20.15.12.51.449.0 ]--
r 38                         newNode = fi
--[ 2018.11.20.15.12.51.622.0 ]--
r 38                         newNode = fin
--[ 2018.11.20.15.12.51.739.0 ]--
r 38                         newNode = fing
--[ 2018.11.20.15.12.51.847.0 ]--
r 38                         newNode = finge
--[ 2018.11.20.15.12.51.918.0 ]--
r 38                         newNode = finger
--[ 2018.11.20.15.12.52.200.0 ]--
r 38                         newNode = finger.
--[ 2018.11.20.15.12.52.523.0 ]--
r 38                         newNode = finger.l
--[ 2018.11.20.15.12.52.654.0 ]--
r 38                         newNode = finger.le
--[ 2018.11.20.15.12.52.758.0 ]--
r 38                         newNode = finger.lef
--[ 2018.11.20.15.12.52.899.0 ]--
r 38                         newNode = finger.left
--[ 2018.11.20.15.12.53.726.0 ]--
r 38                         newNode = finger.left;
--[ 2018.11.20.15.12.56.845.0 ]--
+ 40                     
--[ 2018.11.20.15.13.01.598.0 ]--
r 40                     e
--[ 2018.11.20.15.13.01.692.0 ]--
r 40                     el
--[ 2018.11.20.15.13.01.895.0 ]--
r 40                     ele
--[ 2018.11.20.15.13.01.926.0 ]--
r 40                     ele 
--[ 2018.11.20.15.13.02.498.0 ]--
r 40                     ele
--[ 2018.11.20.15.13.02.639.0 ]--
r 40                     el
--[ 2018.11.20.15.13.02.795.0 ]--
r 40                     els
--[ 2018.11.20.15.13.02.842.0 ]--
r 40                     else
--[ 2018.11.20.15.13.02.999.0 ]--
r 40                     else 
--[ 2018.11.20.15.13.03.389.0 ]--
r 40                     else {
--[ 2018.11.20.15.13.03.540.0 ]--
+ 41 
+ 42 }
--[ 2018.11.20.15.13.03.555.0 ]--
r 42                     }
--[ 2018.11.20.15.13.03.571.0 ]--
r 41                         
--[ 2018.11.20.15.13.05.783.0 ]--
r 41                         n
--[ 2018.11.20.15.13.05.908.0 ]--
r 41                         ne
--[ 2018.11.20.15.13.05.970.0 ]--
r 41                         new
--[ 2018.11.20.15.13.07.486.0 ]--
r 41                         ne
--[ 2018.11.20.15.13.07.667.0 ]--
r 41                         n
--[ 2018.11.20.15.13.08.077.0 ]--
r 41                         
--[ 2018.11.20.15.13.16.106.0 ]--
r 37                     if (finger.left = null){
--[ 2018.11.20.15.13.16.340.0 ]--
r 37                     if (finger.left == null){
--[ 2018.11.20.15.13.27.864.0 ]--
r 41                         f
--[ 2018.11.20.15.13.28.002.0 ]--
r 41                         fi
--[ 2018.11.20.15.13.28.093.0 ]--
r 41                         fin
--[ 2018.11.20.15.13.28.224.0 ]--
r 41                         fing
--[ 2018.11.20.15.13.28.621.0 ]--
r 41                         finge
--[ 2018.11.20.15.13.28.742.0 ]--
r 41                         finger
--[ 2018.11.20.15.13.28.850.0 ]--
r 41                         finger 
--[ 2018.11.20.15.13.29.197.0 ]--
r 41                         finger =
--[ 2018.11.20.15.13.29.303.0 ]--
r 41                         finger = 
--[ 2018.11.20.15.13.29.371.0 ]--
r 41                         finger = f
--[ 2018.11.20.15.13.29.489.0 ]--
r 41                         finger = fi
--[ 2018.11.20.15.13.29.581.0 ]--
r 41                         finger = fin
--[ 2018.11.20.15.13.29.715.0 ]--
r 41                         finger = fing
--[ 2018.11.20.15.13.29.846.0 ]--
r 41                         finger = finge
--[ 2018.11.20.15.13.29.923.0 ]--
r 41                         finger = finger
--[ 2018.11.20.15.13.30.017.0 ]--
r 41                         finger = finger.
--[ 2018.11.20.15.13.30.214.0 ]--
r 41                         finger = finger.l
--[ 2018.11.20.15.13.30.333.0 ]--
r 41                         finger = finger.le
--[ 2018.11.20.15.13.31.046.0 ]--
r 41                         finger = finger.lef
--[ 2018.11.20.15.13.31.233.0 ]--
r 41                         finger = finger.left
--[ 2018.11.20.15.13.31.637.0 ]--
r 41                         finger = finger.left;
--[ 2018.11.20.15.13.34.472.0 ]--
+ 39                         
--[ 2018.11.20.15.13.34.728.0 ]--
r 39                         b
--[ 2018.11.20.15.13.34.847.0 ]--
r 39                         br
--[ 2018.11.20.15.13.34.903.0 ]--
r 39                         bre
--[ 2018.11.20.15.13.35.077.0 ]--
r 39                         brea
--[ 2018.11.20.15.13.35.163.0 ]--
r 39                         break
--[ 2018.11.20.15.13.35.361.0 ]--
r 39                         break;
--[ 2018.11.20.15.13.35.828.0 ]--
r 39                         break; 
--[ 2018.11.20.15.13.36.149.0 ]--
r 39                         break; /
--[ 2018.11.20.15.13.36.265.0 ]--
r 39                         break; //
--[ 2018.11.20.15.13.36.479.0 ]--
r 39                         break; //b
--[ 2018.11.20.15.13.36.557.0 ]--
r 39                         break; //ba
--[ 2018.11.20.15.13.37.428.0 ]--
r 39                         break; //bab
--[ 2018.11.20.15.13.37.616.0 ]--
r 39                         break; //baby
--[ 2018.11.20.15.13.44.810.0 ]--
r 44                 }
--[ 2018.11.20.15.13.48.224.0 ]--
+ 45                 
--[ 2018.11.20.15.13.48.947.0 ]--
r 45                 e
--[ 2018.11.20.15.13.49.061.0 ]--
r 45                 el
--[ 2018.11.20.15.13.49.141.0 ]--
r 45                 els
--[ 2018.11.20.15.13.49.248.0 ]--
r 45                 else
--[ 2018.11.20.15.13.49.856.0 ]--
r 45                 else 
--[ 2018.11.20.15.13.50.148.0 ]--
r 45                 else {
--[ 2018.11.20.15.13.50.282.0 ]--
r 45                 else { 
--[ 2018.11.20.15.13.51.758.0 ]--
r 45                 else { /
--[ 2018.11.20.15.13.51.882.0 ]--
r 45                 else { //
--[ 2018.11.20.15.13.52.105.0 ]--
r 45                 else { //g
--[ 2018.11.20.15.13.52.187.0 ]--
r 45                 else { //go
--[ 2018.11.20.15.13.52.323.0 ]--
r 45                 else { //go 
--[ 2018.11.20.15.13.52.510.0 ]--
r 45                 else { //go d
--[ 2018.11.20.15.13.52.590.0 ]--
r 45                 else { //go do
--[ 2018.11.20.15.13.52.717.0 ]--
r 45                 else { //go dow
--[ 2018.11.20.15.13.52.797.0 ]--
r 45                 else { //go down
--[ 2018.11.20.15.13.52.892.0 ]--
r 45                 else { //go down 
--[ 2018.11.20.15.13.52.991.0 ]--
r 45                 else { //go down t
--[ 2018.11.20.15.13.53.065.0 ]--
r 45                 else { //go down th
--[ 2018.11.20.15.13.53.148.0 ]--
r 45                 else { //go down the
--[ 2018.11.20.15.13.53.216.0 ]--
r 45                 else { //go down the 
--[ 2018.11.20.15.13.53.347.0 ]--
r 45                 else { //go down the g
--[ 2018.11.20.15.13.53.423.0 ]--
r 45                 else { //go down the gi
--[ 2018.11.20.15.13.53.784.0 ]--
r 45                 else { //go down the g
--[ 2018.11.20.15.13.53.883.0 ]--
r 45                 else { //go down the 
--[ 2018.11.20.15.13.54.009.0 ]--
r 45                 else { //go down the r
--[ 2018.11.20.15.13.54.071.0 ]--
r 45                 else { //go down the ri
--[ 2018.11.20.15.13.54.215.0 ]--
r 45                 else { //go down the rig
--[ 2018.11.20.15.13.54.292.0 ]--
r 45                 else { //go down the righ
--[ 2018.11.20.15.13.54.371.0 ]--
r 45                 else { //go down the right
--[ 2018.11.20.15.13.57.620.0 ]--
r 36                 if (newNodeValue < fingerValue){ 
--[ 2018.11.20.15.13.57.922.0 ]--
r 36                 if (newNodeValue < fingerValue){ /
--[ 2018.11.20.15.13.58.033.0 ]--
r 36                 if (newNodeValue < fingerValue){ //
--[ 2018.11.20.15.13.58.280.0 ]--
r 36                 if (newNodeValue < fingerValue){ //g
--[ 2018.11.20.15.13.58.637.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go
--[ 2018.11.20.15.13.58.757.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go 
--[ 2018.11.20.15.13.58.819.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go d
--[ 2018.11.20.15.13.59.621.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go do
--[ 2018.11.20.15.13.59.734.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go dow
--[ 2018.11.20.15.13.59.795.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down
--[ 2018.11.20.15.13.59.929.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down 
--[ 2018.11.20.15.14.00.006.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down t
--[ 2018.11.20.15.14.00.090.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down th
--[ 2018.11.20.15.14.00.176.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the
--[ 2018.11.20.15.14.00.289.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the 
--[ 2018.11.20.15.14.00.374.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the l
--[ 2018.11.20.15.14.00.769.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the le
--[ 2018.11.20.15.14.00.926.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the lef
--[ 2018.11.20.15.14.01.112.0 ]--
r 36                 if (newNodeValue < fingerValue){ //go down the left
--[ 2018.11.20.15.14.04.955.0 ]--
+ 46                     
--[ 2018.11.20.15.14.15.573.0 ]--
+ 46                                        if (finger.left == null){
+ 47                         newNode = finger.left;
+ 48                         break; //baby
+ 49                     }
+ 50                     else {
+ 51                         finger = finger.left;
r 52                     } 
--[ 2018.11.20.15.14.15.635.0 ]--
r 46                     if (finger.left == null){
--[ 2018.11.20.15.14.18.481.0 ]--
r 46                     if (finger.r == null){
--[ 2018.11.20.15.14.18.599.0 ]--
r 46                     if (finger.ri == null){
--[ 2018.11.20.15.14.18.798.0 ]--
r 46                     if (finger.rig == null){
--[ 2018.11.20.15.14.18.847.0 ]--
r 46                     if (finger.righ == null){
--[ 2018.11.20.15.14.19.034.0 ]--
r 46                     if (finger.right == null){
--[ 2018.11.20.15.14.21.472.0 ]--
r 47                         newNode = finger.r;
--[ 2018.11.20.15.14.21.621.0 ]--
r 47                         newNode = finger.ri;
--[ 2018.11.20.15.14.21.772.0 ]--
r 47                         newNode = finger.rig;
--[ 2018.11.20.15.14.21.894.0 ]--
r 47                         newNode = finger.righ;
--[ 2018.11.20.15.14.21.997.0 ]--
r 47                         newNode = finger.right;
--[ 2018.11.20.15.14.24.452.0 ]--
r 51                         finger = finger.r;
--[ 2018.11.20.15.14.24.586.0 ]--
r 51                         finger = finger.ri;
--[ 2018.11.20.15.14.24.734.0 ]--
r 51                         finger = finger.rig;
--[ 2018.11.20.15.14.24.853.0 ]--
r 51                         finger = finger.righ;
--[ 2018.11.20.15.14.24.964.0 ]--
r 51                         finger = finger.right;
--[ 2018.11.20.15.14.57.366.0 ]--
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
- 55
r 55 //           
--[ 2018.11.20.15.14.59.385.0 ]--
- 55
--[ 2018.11.20.15.15.01.573.0 ]--
- 55
--[ 2018.11.20.15.15.15.476.0 ]--
+ 55             
--[ 2018.11.20.15.15.15.655.0 ]--
r 55             }
--[ 2018.11.20.15.15.15.689.0 ]--
r 32             while (true) {
--[ 2018.11.20.15.15.15.699.0 ]--
r 36                 if (newNodeValue < fingerValue) { //go down the left
--[ 2018.11.20.15.15.15.713.0 ]--
r 37                     if (finger.left == null) {
--[ 2018.11.20.15.15.15.720.0 ]--
- 40
r 40                     } else {
--[ 2018.11.20.15.15.15.729.0 ]--
- 43
r 43                 } else { //go down the right
--[ 2018.11.20.15.15.15.740.0 ]--
r 44                     if (finger.right == null) {
--[ 2018.11.20.15.15.15.756.0 ]--
- 47
r 47                     } else {
--[ 2018.11.20.15.15.15.770.0 ]--
r 49                     }
--[ 2018.11.20.15.15.15.773.0 ]--
r 52         }
--[ 2018.11.20.15.15.34.394.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.16.08.653.0 ]--
r 38                         n;
--[ 2018.11.20.15.16.08.988.0 ]--
r 38                         ;
--[ 2018.11.20.15.16.09.339.0 ]--
r 38                         f;
--[ 2018.11.20.15.16.09.482.0 ]--
r 38                         fi;
--[ 2018.11.20.15.16.09.585.0 ]--
r 38                         fin;
--[ 2018.11.20.15.16.09.659.0 ]--
r 38                         fing;
--[ 2018.11.20.15.16.09.859.0 ]--
r 38                         finge;
--[ 2018.11.20.15.16.09.970.0 ]--
r 38                         finger;
--[ 2018.11.20.15.16.10.046.0 ]--
r 38                         finger.;
--[ 2018.11.20.15.16.10.378.0 ]--
r 38                         finger.l;
--[ 2018.11.20.15.16.10.512.0 ]--
r 38                         finger.le;
--[ 2018.11.20.15.16.10.810.0 ]--
r 38                         finger.lef;
--[ 2018.11.20.15.16.10.945.0 ]--
r 38                         finger.left;
--[ 2018.11.20.15.16.11.051.0 ]--
r 38                         finger.left ;
--[ 2018.11.20.15.16.11.515.0 ]--
r 38                         finger.left =;
--[ 2018.11.20.15.16.11.597.0 ]--
r 38                         finger.left = ;
--[ 2018.11.20.15.16.11.737.0 ]--
r 38                         finger.left = n;
--[ 2018.11.20.15.16.11.859.0 ]--
r 38                         finger.left = ne;
--[ 2018.11.20.15.16.11.946.0 ]--
r 38                         finger.left = new;
--[ 2018.11.20.15.16.13.246.0 ]--
r 38                         finger.left = newNode;
--[ 2018.11.20.15.16.20.861.0 ]--
r 45                          = finger.right;
--[ 2018.11.20.15.16.20.972.0 ]--
r 45                         = finger.right;
--[ 2018.11.20.15.16.21.322.0 ]--
r 45                          finger.right;
--[ 2018.11.20.15.16.21.638.0 ]--
r 45                         finger.right;
--[ 2018.11.20.15.16.23.295.0 ]--
r 45                         finger.right
--[ 2018.11.20.15.16.23.708.0 ]--
r 45                         finger.right 
--[ 2018.11.20.15.16.23.954.0 ]--
r 45                         finger.right =
--[ 2018.11.20.15.16.24.039.0 ]--
r 45                         finger.right = 
--[ 2018.11.20.15.16.24.208.0 ]--
r 45                         finger.right = m
--[ 2018.11.20.15.16.24.354.0 ]--
r 45                         finger.right = me
--[ 2018.11.20.15.16.24.656.0 ]--
- 44
r 44                     if (finger.right == null) { finger.right = me
--[ 2018.11.20.15.16.25.768.0 ]--
+ 44                     if (finger.right == null) {
r 45                         finger.right = me
--[ 2018.11.20.15.16.28.228.0 ]--
r 45                         finger.right = m
--[ 2018.11.20.15.16.28.371.0 ]--
r 45                         finger.right = 
--[ 2018.11.20.15.16.28.815.0 ]--
r 45                         finger.right = n
--[ 2018.11.20.15.16.29.153.0 ]--
r 45                         finger.right = ne
--[ 2018.11.20.15.16.29.208.0 ]--
r 45                         finger.right = new
--[ 2018.11.20.15.16.30.489.0 ]--
r 45                         finger.right = newNode
--[ 2018.11.20.15.16.30.725.0 ]--
r 45                         finger.right = newNode;
--[ 2018.11.20.15.16.36.215.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.16.57.180.0 ]--
+ 52             
--[ 2018.11.20.15.16.58.847.0 ]--
r 52             S
--[ 2018.11.20.15.16.59.128.0 ]--
r 52             St
--[ 2018.11.20.15.16.59.347.0 ]--
r 52             Std
--[ 2018.11.20.15.16.59.942.0 ]--
r 52             StdOut
--[ 2018.11.20.15.17.00.726.0 ]--
r 52             StdOut.
--[ 2018.11.20.15.17.01.008.0 ]--
r 52             StdOut.p
--[ 2018.11.20.15.17.01.072.0 ]--
r 52             StdOut.pr
--[ 2018.11.20.15.17.01.192.0 ]--
r 52             StdOut.pri
--[ 2018.11.20.15.17.01.244.0 ]--
r 52             StdOut.prin
--[ 2018.11.20.15.17.01.351.0 ]--
r 52             StdOut.println
--[ 2018.11.20.15.17.01.367.0 ]--
r 52             StdOut.println()
--[ 2018.11.20.15.17.01.382.0 ]--
r 52             StdOut.println();
--[ 2018.11.20.15.17.02.069.0 ]--
r 52             StdOut.println(z);
--[ 2018.11.20.15.17.02.956.0 ]--
r 52             StdOut.println();
--[ 2018.11.20.15.17.03.328.0 ]--
r 52             StdOut.println("");
--[ 2018.11.20.15.17.03.598.0 ]--
r 52             StdOut.println("I");
--[ 2018.11.20.15.17.03.709.0 ]--
r 52             StdOut.println("I ");
--[ 2018.11.20.15.17.03.907.0 ]--
r 52             StdOut.println("I m");
--[ 2018.11.20.15.17.03.995.0 ]--
r 52             StdOut.println("I ma");
--[ 2018.11.20.15.17.04.110.0 ]--
r 52             StdOut.println("I mad");
--[ 2018.11.20.15.17.04.294.0 ]--
r 52             StdOut.println("I made");
--[ 2018.11.20.15.17.04.340.0 ]--
r 52             StdOut.println("I made ");
--[ 2018.11.20.15.17.04.427.0 ]--
r 52             StdOut.println("I made i");
--[ 2018.11.20.15.17.04.561.0 ]--
r 52             StdOut.println("I made it");
--[ 2018.11.20.15.17.04.641.0 ]--
r 52             StdOut.println("I made it ");
--[ 2018.11.20.15.17.04.756.0 ]--
r 52             StdOut.println("I made it o");
--[ 2018.11.20.15.17.04.899.0 ]--
r 52             StdOut.println("I made it ou");
--[ 2018.11.20.15.17.05.026.0 ]--
r 52             StdOut.println("I made it out");
--[ 2018.11.20.15.17.05.356.0 ]--
r 52             StdOut.println("I made it out ");
--[ 2018.11.20.15.17.05.845.0 ]--
r 52             StdOut.println("I made it out");
--[ 2018.11.20.15.17.06.142.0 ]--
r 52             StdOut.println("I made it out,");
--[ 2018.11.20.15.17.06.315.0 ]--
r 52             StdOut.println("I made it out, ");
--[ 2018.11.20.15.17.06.483.0 ]--
r 52             StdOut.println("I made it out, p");
--[ 2018.11.20.15.17.06.587.0 ]--
r 52             StdOut.println("I made it out, pa");
--[ 2018.11.20.15.17.06.680.0 ]--
r 52             StdOut.println("I made it out, pap");
--[ 2018.11.20.15.17.06.774.0 ]--
r 52             StdOut.println("I made it out, papa");
--[ 2018.11.20.15.17.07.200.0 ]--
r 52             StdOut.println("I made it out, papa!");
--[ 2018.11.20.15.17.12.748.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.17.33.316.0 ]--
- 52
--[ 2018.11.20.15.18.05.975.0 ]--
+ 30             
--[ 2018.11.20.15.18.06.991.0 ]--
r 30             S
--[ 2018.11.20.15.18.07.869.0 ]--
r 30             StdOut
--[ 2018.11.20.15.18.08.727.0 ]--
r 30             StdOut.
--[ 2018.11.20.15.18.09.018.0 ]--
r 30             StdOut.p
--[ 2018.11.20.15.18.09.114.0 ]--
r 30             StdOut.pr
--[ 2018.11.20.15.18.09.167.0 ]--
r 30             StdOut.pri
--[ 2018.11.20.15.18.09.320.0 ]--
r 30             StdOut.prin
--[ 2018.11.20.15.18.09.362.0 ]--
r 30             StdOut.println
--[ 2018.11.20.15.18.09.376.0 ]--
r 30             StdOut.println()
--[ 2018.11.20.15.18.09.387.0 ]--
r 30             StdOut.println();
--[ 2018.11.20.15.18.10.236.0 ]--
r 30             StdOut.println("");
--[ 2018.11.20.15.18.10.480.0 ]--
r 30             StdOut.println("P");
--[ 2018.11.20.15.18.10.617.0 ]--
r 30             StdOut.println("Pa");
--[ 2018.11.20.15.18.10.710.0 ]--
r 30             StdOut.println("Pap");
--[ 2018.11.20.15.18.10.812.0 ]--
r 30             StdOut.println("Papa");
--[ 2018.11.20.15.18.11.079.0 ]--
r 30             StdOut.println("Papa,");
--[ 2018.11.20.15.18.11.256.0 ]--
r 30             StdOut.println("Papa, ");
--[ 2018.11.20.15.18.11.447.0 ]--
r 30             StdOut.println("Papa, I");
--[ 2018.11.20.15.18.11.685.0 ]--
r 30             StdOut.println("Papa, I'");
--[ 2018.11.20.15.18.11.836.0 ]--
r 30             StdOut.println("Papa, I'm");
--[ 2018.11.20.15.18.11.913.0 ]--
r 30             StdOut.println("Papa, I'm ");
--[ 2018.11.20.15.18.12.029.0 ]--
r 30             StdOut.println("Papa, I'm i");
--[ 2018.11.20.15.18.12.196.0 ]--
r 30             StdOut.println("Papa, I'm in");
--[ 2018.11.20.15.18.13.302.0 ]--
r 30             StdOut.println("Papa, I'm in ");
--[ 2018.11.20.15.18.13.412.0 ]--
r 30             StdOut.println("Papa, I'm in t");
--[ 2018.11.20.15.18.13.457.0 ]--
r 30             StdOut.println("Papa, I'm in th");
--[ 2018.11.20.15.18.13.611.0 ]--
r 30             StdOut.println("Papa, I'm in the");
--[ 2018.11.20.15.18.13.653.0 ]--
r 30             StdOut.println("Papa, I'm in the ");
--[ 2018.11.20.15.18.13.807.0 ]--
r 30             StdOut.println("Papa, I'm in the e");
--[ 2018.11.20.15.18.13.856.0 ]--
r 30             StdOut.println("Papa, I'm in the em");
--[ 2018.11.20.15.18.13.953.0 ]--
r 30             StdOut.println("Papa, I'm in the emp");
--[ 2018.11.20.15.18.14.187.0 ]--
r 30             StdOut.println("Papa, I'm in the empt");
--[ 2018.11.20.15.18.14.293.0 ]--
r 30             StdOut.println("Papa, I'm in the empty");
--[ 2018.11.20.15.18.14.601.0 ]--
r 30             StdOut.println("Papa, I'm in the empty!");
--[ 2018.11.20.15.18.20.315.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.18.32.386.0 ]--
- 30
--[ 2018.11.20.15.18.36.499.0 ]--
+ 32             
--[ 2018.11.20.15.18.36.696.0 ]--
+ 32                         StdOut.println("Papa, I'm in the empty!");
r 33 
--[ 2018.11.20.15.18.36.739.0 ]--
r 32             StdOut.println("Papa, I'm in the empty!");
--[ 2018.11.20.15.18.37.607.0 ]--
- 33
--[ 2018.11.20.15.18.43.608.0 ]--
r 32             StdOut.println();
--[ 2018.11.20.15.18.44.371.0 ]--
- 32
--[ 2018.11.20.15.18.53.674.0 ]--
+ 39                         
--[ 2018.11.20.15.18.56.570.0 ]--
r 39                         P
--[ 2018.11.20.15.18.56.869.0 ]--
r 39                         Pr
--[ 2018.11.20.15.18.56.991.0 ]--
r 39                         Pri
--[ 2018.11.20.15.18.57.686.0 ]--
r 39                         Pr
--[ 2018.11.20.15.18.57.773.0 ]--
r 39                         P
--[ 2018.11.20.15.18.58.076.0 ]--
r 39                         
--[ 2018.11.20.15.18.58.253.0 ]--
r 39                         S
--[ 2018.11.20.15.18.58.516.0 ]--
r 39                         St
--[ 2018.11.20.15.18.58.727.0 ]--
r 39                         Std
--[ 2018.11.20.15.18.59.194.0 ]--
r 39                         StdOut
--[ 2018.11.20.15.18.59.839.0 ]--
r 39                         StdOut.
--[ 2018.11.20.15.19.00.226.0 ]--
r 39                         StdOut.p
--[ 2018.11.20.15.19.00.369.0 ]--
r 39                         StdOut.pr
--[ 2018.11.20.15.19.00.486.0 ]--
r 39                         StdOut.pri
--[ 2018.11.20.15.19.00.520.0 ]--
r 39                         StdOut.prin
--[ 2018.11.20.15.19.00.614.0 ]--
r 39                         StdOut.println
--[ 2018.11.20.15.19.00.627.0 ]--
r 39                         StdOut.println()
--[ 2018.11.20.15.19.00.638.0 ]--
r 39                         StdOut.println();
--[ 2018.11.20.15.19.01.850.0 ]--
r 39                         StdOut.println(ne);
--[ 2018.11.20.15.19.01.923.0 ]--
r 39                         StdOut.println(new);
--[ 2018.11.20.15.19.04.354.0 ]--
r 39                         StdOut.println(newNode);
--[ 2018.11.20.15.19.10.353.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.19.18.515.0 ]--
r 39                         StdOut.println(newNode.);
--[ 2018.11.20.15.19.18.832.0 ]--
r 39                         StdOut.println(newNode.v);
--[ 2018.11.20.15.19.22.321.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.19.39.316.0 ]--
- 39
--[ 2018.11.20.15.19.46.095.0 ]--
+ 42                         
--[ 2018.11.20.15.19.46.877.0 ]--
r 42                         S
--[ 2018.11.20.15.19.47.155.0 ]--
r 42                         St
--[ 2018.11.20.15.19.47.388.0 ]--
r 42                         Std
--[ 2018.11.20.15.19.47.890.0 ]--
r 42                         StdOut
--[ 2018.11.20.15.19.48.597.0 ]--
r 42                         StdOut.
--[ 2018.11.20.15.19.48.887.0 ]--
r 42                         StdOut.p
--[ 2018.11.20.15.19.48.959.0 ]--
r 42                         StdOut.pr
--[ 2018.11.20.15.19.49.010.0 ]--
r 42                         StdOut.pri
--[ 2018.11.20.15.19.49.135.0 ]--
r 42                         StdOut.prin
--[ 2018.11.20.15.19.49.291.0 ]--
r 42                         StdOut.println
--[ 2018.11.20.15.19.49.328.0 ]--
r 42                         StdOut.println()
--[ 2018.11.20.15.19.49.335.0 ]--
r 42                         StdOut.println();
--[ 2018.11.20.15.19.50.349.0 ]--
r 42                         StdOut.println(f);
--[ 2018.11.20.15.19.50.452.0 ]--
r 42                         StdOut.println(fi);
--[ 2018.11.20.15.19.50.500.0 ]--
r 42                         StdOut.println(fin);
--[ 2018.11.20.15.19.50.686.0 ]--
r 42                         StdOut.println(fing);
--[ 2018.11.20.15.19.50.869.0 ]--
r 42                         StdOut.println(finge);
--[ 2018.11.20.15.19.50.969.0 ]--
r 42                         StdOut.println(finger);
--[ 2018.11.20.15.19.52.124.0 ]--
r 42                         StdOut.println(finger.);
--[ 2018.11.20.15.19.54.937.0 ]--
r 42                         StdOut.println(finger.p);
--[ 2018.11.20.15.19.55.986.0 ]--
r 42                         StdOut.println(finger.);
--[ 2018.11.20.15.19.56.782.0 ]--
r 42                         StdOut.println(finger.p);
--[ 2018.11.20.15.19.59.831.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.20.09.030.0 ]--
- 42
--[ 2018.11.20.15.21.18.920.0 ]--
+ 56 Node newNode = new Node();
+ 57         newNode.p = p;
+ 58         newNode.v = v;
+ 59         Node finger;
+ 60         if(this.isEmpty()){
+ 61             newNode.dir = Partition.Direction.LEFTRIGHT;
+ 62             root = newNode;
+ 63         } else {
+ 64             finger = root;
+ 65             while (true) {
+ 66                 //comparing x's
+ 67                 double fingerValue = finger.p.xy(finger.dir);
+ 68                 double newNodeValue = newNode.p.xy(finger.dir);
+ 69                 if (newNodeValue < fingerValue) { //go down the left
+ 70                     if (finger.left == null) {
+ 71                         finger.left = newNode;
+ 72                         break; //baby
+ 73                     } else {
+ 74                         finger = finger.left;
+ 75                     }
+ 76                 } else { //go down the right
+ 77                     if (finger.right == null) {
+ 78                         finger.right = newNode;
+ 79                         break; //baby
+ 80                     } else {
+ 81                         finger = finger.right;
r 82                     }
r 83                 }
r 84             }
r 85         }
--[ 2018.11.20.15.21.19.019.0 ]--
r 56         Node newNode = new Node();
--[ 2018.11.20.15.21.27.734.0 ]--
- 56
--[ 2018.11.20.15.21.28.856.0 ]--
- 56
--[ 2018.11.20.15.21.29.243.0 ]--
- 56
--[ 2018.11.20.15.21.39.958.0 ]--
r 58             .dir = Partition.Direction.LEFTRIGHT;
--[ 2018.11.20.15.21.40.517.0 ]--
- 58
--[ 2018.11.20.15.21.47.720.0 ]--
r 58                 root = newNode;
--[ 2018.11.20.15.21.49.019.0 ]--
- 58
r 58 r        } else {
--[ 2018.11.20.15.21.50.216.0 ]--
+ 58                 root = newNode;
r 59         } else {
--[ 2018.11.20.15.21.50.769.0 ]--
- 58
--[ 2018.11.20.15.21.51.456.0 ]--
+ 58 
--[ 2018.11.20.15.21.52.626.0 ]--
r 58     
--[ 2018.11.20.15.21.52.812.0 ]--
r 58         
--[ 2018.11.20.15.21.52.994.0 ]--
r 58             
--[ 2018.11.20.15.21.53.530.0 ]--
r 58             r
--[ 2018.11.20.15.21.53.592.0 ]--
r 58             re
--[ 2018.11.20.15.21.53.770.0 ]--
r 58             ret
--[ 2018.11.20.15.21.53.864.0 ]--
r 58             retu
--[ 2018.11.20.15.21.53.964.0 ]--
r 58             retur
--[ 2018.11.20.15.21.54.043.0 ]--
r 58             return
--[ 2018.11.20.15.21.54.095.0 ]--
r 58             return 
--[ 2018.11.20.15.21.54.215.0 ]--
r 58             return n
--[ 2018.11.20.15.21.54.400.0 ]--
r 58             return nu
--[ 2018.11.20.15.21.54.582.0 ]--
r 58             return nul
--[ 2018.11.20.15.21.54.710.0 ]--
r 58             return null
--[ 2018.11.20.15.21.55.326.0 ]--
r 58             return null;
--[ 2018.11.20.15.22.12.652.0 ]--
- 64
--[ 2018.11.20.15.22.16.663.0 ]--
r 64                 if (p < fingerValue) { //go down the left
--[ 2018.11.20.15.22.25.665.0 ]--
r 64                 if (newNodeValue < fingerValue) { //go down the left
--[ 2018.11.20.15.22.26.744.0 ]--
+ 64                 double newNodeValue = newNode.p.xy(finger.dir);
--[ 2018.11.20.15.22.31.502.0 ]--
r 64                 double newNodeValue = .p.xy(finger.dir);
--[ 2018.11.20.15.22.31.631.0 ]--
r 64                 double newNodeValue = p.xy(finger.dir);
--[ 2018.11.20.15.22.37.834.0 ]--
r 64                 double pValue = p.xy(finger.dir);
--[ 2018.11.20.15.22.41.363.0 ]--
r 65                 if (pValue < fingerValue) { //go down the left
--[ 2018.11.20.15.23.11.219.0 ]--
r 66                     if (finger.left == p) {
--[ 2018.11.20.15.23.14.537.0 ]--
r 66                     if (finger.left. == p) {
--[ 2018.11.20.15.23.15.520.0 ]--
r 66                     if (finger.left.p == p) {
--[ 2018.11.20.15.23.23.071.0 ]--
- 67
r 67                         r
--[ 2018.11.20.15.23.23.297.0 ]--
r 67                         re
--[ 2018.11.20.15.23.23.502.0 ]--
r 67                         reu
--[ 2018.11.20.15.23.23.558.0 ]--
r 67                         reut
--[ 2018.11.20.15.23.23.992.0 ]--
r 67                         reu
--[ 2018.11.20.15.23.24.102.0 ]--
r 67                         re
--[ 2018.11.20.15.23.24.279.0 ]--
r 67                         ret
--[ 2018.11.20.15.23.24.387.0 ]--
r 67                         retu
--[ 2018.11.20.15.23.24.567.0 ]--
r 67                         retur
--[ 2018.11.20.15.23.24.624.0 ]--
r 67                         return
--[ 2018.11.20.15.23.24.737.0 ]--
r 67                         return 
--[ 2018.11.20.15.23.26.421.0 ]--
r 67                         return f
--[ 2018.11.20.15.23.26.484.0 ]--
r 67                         return fi
--[ 2018.11.20.15.23.26.621.0 ]--
r 67                         return fin
--[ 2018.11.20.15.23.26.736.0 ]--
r 67                         return fing
--[ 2018.11.20.15.23.26.931.0 ]--
r 67                         return finge
--[ 2018.11.20.15.23.27.032.0 ]--
r 67                         return finger
--[ 2018.11.20.15.23.29.032.0 ]--
r 67                         return finger.
--[ 2018.11.20.15.23.29.462.0 ]--
r 67                         return finger.v
--[ 2018.11.20.15.23.30.337.0 ]--
r 67                         return finger.v;
--[ 2018.11.20.15.23.35.263.0 ]--
r 67                         return finger.lv;
--[ 2018.11.20.15.23.35.428.0 ]--
r 67                         return finger.lev;
--[ 2018.11.20.15.23.35.527.0 ]--
r 67                         return finger.lefv;
--[ 2018.11.20.15.23.35.700.0 ]--
r 67                         return finger.leftv;
--[ 2018.11.20.15.23.37.766.0 ]--
r 67                         return finger.left.v;
--[ 2018.11.20.15.23.56.430.0 ]--
r 67                         return finger.v;
--[ 2018.11.20.15.23.56.828.0 ]--
r 67                         re
--[ 2018.11.20.15.23.56.895.0 ]--
r 67                         reut
--[ 2018.11.20.15.23.57.153.0 ]--
+ 67                         finger.left = newNode;
r 68                         break; //baby
--[ 2018.11.20.15.23.57.841.0 ]--
r 66                     if (finger.left == p) {
--[ 2018.11.20.15.23.58.463.0 ]--
r 66                     if (finger.left == null) {
--[ 2018.11.20.15.24.08.031.0 ]--
- 67
r 67                         r
--[ 2018.11.20.15.24.08.120.0 ]--
r 67                         re
--[ 2018.11.20.15.24.08.372.0 ]--
r 67                         ret
--[ 2018.11.20.15.24.08.398.0 ]--
r 67                         retu
--[ 2018.11.20.15.24.08.515.0 ]--
r 67                         retur
--[ 2018.11.20.15.24.08.567.0 ]--
r 67                         return
--[ 2018.11.20.15.24.08.698.0 ]--
r 67                         return 
--[ 2018.11.20.15.24.08.854.0 ]--
r 67                         return n
--[ 2018.11.20.15.24.09.067.0 ]--
r 67                         return nu
--[ 2018.11.20.15.24.09.260.0 ]--
r 67                         return nul
--[ 2018.11.20.15.24.09.382.0 ]--
r 67                         return null
--[ 2018.11.20.15.24.11.741.0 ]--
r 67                         return null;
--[ 2018.11.20.15.24.17.895.0 ]--
+ 68                         
--[ 2018.11.20.15.24.18.540.0 ]--
- 68
--[ 2018.11.20.15.24.19.144.0 ]--
+ 68                         
--[ 2018.11.20.15.24.19.500.0 ]--
r 68                     
--[ 2018.11.20.15.24.19.855.0 ]--
r 68                     e
--[ 2018.11.20.15.24.20.082.0 ]--
r 68                     el
--[ 2018.11.20.15.24.20.249.0 ]--
r 68                     els
--[ 2018.11.20.15.24.20.399.0 ]--
r 68                     else
--[ 2018.11.20.15.24.20.811.0 ]--
r 68                     elsei
--[ 2018.11.20.15.24.20.906.0 ]--
r 68                     elseif
--[ 2018.11.20.15.24.22.028.0 ]--
r 68                     elseif 
--[ 2018.11.20.15.24.22.427.0 ]--
r 68                     elseif
--[ 2018.11.20.15.24.22.610.0 ]--
r 68                     elsei
--[ 2018.11.20.15.24.22.777.0 ]--
r 68                     else
--[ 2018.11.20.15.24.23.165.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.23.280.0 ]--
r 68                     else f
--[ 2018.11.20.15.24.23.330.0 ]--
r 68                     else fi
--[ 2018.11.20.15.24.23.913.0 ]--
r 68                     else f
--[ 2018.11.20.15.24.24.012.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.24.195.0 ]--
r 68                     else i
--[ 2018.11.20.15.24.24.279.0 ]--
r 68                     else if
--[ 2018.11.20.15.24.25.028.0 ]--
r 68                     else if 
--[ 2018.11.20.15.24.25.237.0 ]--
r 68                     else if ()
--[ 2018.11.20.15.24.25.783.0 ]--
r 68                     else if (f)
--[ 2018.11.20.15.24.25.851.0 ]--
r 68                     else if (fi)
--[ 2018.11.20.15.24.26.075.0 ]--
r 68                     else if (fin)
--[ 2018.11.20.15.24.26.138.0 ]--
r 68                     else if (fing)
--[ 2018.11.20.15.24.26.841.0 ]--
r 68                     else if (finge)
--[ 2018.11.20.15.24.26.911.0 ]--
r 68                     else if (finger)
--[ 2018.11.20.15.24.27.530.0 ]--
r 68                     else if (finger.)
--[ 2018.11.20.15.24.28.339.0 ]--
r 68                     else if (finger)
--[ 2018.11.20.15.24.28.846.0 ]--
r 68                     else if (fing)
--[ 2018.11.20.15.24.28.926.0 ]--
r 68                     else if (fin)
--[ 2018.11.20.15.24.28.978.0 ]--
r 68                     else if (fi)
--[ 2018.11.20.15.24.29.525.0 ]--
r 68                     else if (f)
--[ 2018.11.20.15.24.29.581.0 ]--
r 68                     else if ()
--[ 2018.11.20.15.24.29.635.0 ]--
r 68                     else if
--[ 2018.11.20.15.24.29.678.0 ]--
r 68                     else i
--[ 2018.11.20.15.24.29.705.0 ]--
r 68                     else 
--[ 2018.11.20.15.24.29.738.0 ]--
r 68                     else
--[ 2018.11.20.15.24.29.764.0 ]--
r 68                     els
--[ 2018.11.20.15.24.29.787.0 ]--
r 68                     el
--[ 2018.11.20.15.24.29.806.0 ]--
r 68                     e
--[ 2018.11.20.15.24.29.843.0 ]--
r 68                     
--[ 2018.11.20.15.24.29.879.0 ]--
- 68
--[ 2018.11.20.15.24.35.504.0 ]--
+ 69                         
--[ 2018.11.20.15.24.35.757.0 ]--
r 69                         i
--[ 2018.11.20.15.24.35.873.0 ]--
r 69                         if
--[ 2018.11.20.15.24.35.986.0 ]--
r 69                         if 
--[ 2018.11.20.15.24.36.473.0 ]--
r 69                         if ()
--[ 2018.11.20.15.24.36.693.0 ]--
r 69                         if (f)
--[ 2018.11.20.15.24.36.747.0 ]--
r 69                         if (fi)
--[ 2018.11.20.15.24.36.894.0 ]--
r 69                         if (fin)
--[ 2018.11.20.15.24.37.032.0 ]--
r 69                         if (fing)
--[ 2018.11.20.15.24.37.493.0 ]--
r 69                         if (finge)
--[ 2018.11.20.15.24.37.588.0 ]--
r 69                         if (finger)
--[ 2018.11.20.15.24.47.806.0 ]--
r 69                         if (finger.)
--[ 2018.11.20.15.24.48.809.0 ]--
r 69                         if (finger.l)
--[ 2018.11.20.15.24.49.085.0 ]--
r 69                         if (finger.le)
--[ 2018.11.20.15.24.49.735.0 ]--
r 69                         if (finger.lef)
--[ 2018.11.20.15.24.50.026.0 ]--
r 69                         if (finger.left)
--[ 2018.11.20.15.24.50.718.0 ]--
r 69                         if (finger.left.)
--[ 2018.11.20.15.24.51.731.0 ]--
r 69                         if (finger.left.p)
--[ 2018.11.20.15.24.51.810.0 ]--
r 69                         if (finger.left.p )
--[ 2018.11.20.15.24.52.135.0 ]--
r 69                         if (finger.left.p =)
--[ 2018.11.20.15.24.52.249.0 ]--
r 69                         if (finger.left.p = )
--[ 2018.11.20.15.24.52.450.0 ]--
r 69                         if (finger.left.p = p)
--[ 2018.11.20.15.24.53.596.0 ]--
r 69                         if (finger.left.p = p) 
--[ 2018.11.20.15.24.53.778.0 ]--
r 69                         if (finger.left.p = p) {
--[ 2018.11.20.15.24.53.902.0 ]--
+ 70 
+ 71 }
--[ 2018.11.20.15.24.53.922.0 ]--
r 71                         }
--[ 2018.11.20.15.24.53.936.0 ]--
r 70                             
--[ 2018.11.20.15.24.54.369.0 ]--
r 70                             r
--[ 2018.11.20.15.24.54.445.0 ]--
r 70                             re
--[ 2018.11.20.15.24.54.652.0 ]--
r 70                             ret
--[ 2018.11.20.15.24.54.701.0 ]--
r 70                             retu
--[ 2018.11.20.15.24.54.849.0 ]--
r 70                             retur
--[ 2018.11.20.15.24.54.921.0 ]--
r 70                             return
--[ 2018.11.20.15.24.55.017.0 ]--
r 70                             return 
--[ 2018.11.20.15.24.56.301.0 ]--
r 70                             return f
--[ 2018.11.20.15.24.56.387.0 ]--
r 70                             return fi
--[ 2018.11.20.15.24.56.485.0 ]--
r 70                             return fin
--[ 2018.11.20.15.24.56.599.0 ]--
r 70                             return fing
--[ 2018.11.20.15.24.56.815.0 ]--
r 70                             return finge
--[ 2018.11.20.15.24.56.934.0 ]--
r 70                             return finger
--[ 2018.11.20.15.24.57.021.0 ]--
r 70                             return finger.
--[ 2018.11.20.15.24.57.336.0 ]--
r 70                             return finger.v
--[ 2018.11.20.15.24.57.964.0 ]--
r 70                             return finger.v;
--[ 2018.11.20.15.25.00.639.0 ]--
r 69                         if (finger.left.p == p) {
--[ 2018.11.20.15.25.25.825.0 ]--
- 66
- 66
- 66
- 66
- 66
- 66
- 66
r 66 c
--[ 2018.11.20.15.25.27.996.0 ]--
+ 66                     if (finger.left == null) {
+ 67                         return null;
+ 68                     } else {
+ 69                         if (finger.left.p == p) {
+ 70                             return finger.v;
+ 71                         }
+ 72                         finger = finger.left;
r 73                     }
--[ 2018.11.20.15.25.49.578.0 ]--
+ 75                     if (finger.left == null) {
+ 76                         return null;
r 77                     } else {
r 78                         if (finger.left.p == p) {
r 79                             return finger.v;
r 80                         }
r 81                         finger = finger.left;
--[ 2018.11.20.15.25.52.605.0 ]--
r 75                     if (finger.r == null) {
--[ 2018.11.20.15.25.52.790.0 ]--
r 75                     if (finger.ri == null) {
--[ 2018.11.20.15.25.52.946.0 ]--
r 75                     if (finger.rig == null) {
--[ 2018.11.20.15.25.53.118.0 ]--
r 75                     if (finger.righ == null) {
--[ 2018.11.20.15.25.53.228.0 ]--
r 75                     if (finger.right == null) {
--[ 2018.11.20.15.25.56.004.0 ]--
r 78                         if (finger.r.p == p) {
--[ 2018.11.20.15.25.56.144.0 ]--
r 78                         if (finger.ri.p == p) {
--[ 2018.11.20.15.25.56.316.0 ]--
r 78                         if (finger.rig.p == p) {
--[ 2018.11.20.15.25.56.394.0 ]--
r 78                         if (finger.righ.p == p) {
--[ 2018.11.20.15.25.56.514.0 ]--
r 78                         if (finger.right.p == p) {
--[ 2018.11.20.15.25.58.988.0 ]--
r 81                         finger = finger.r;
--[ 2018.11.20.15.25.59.127.0 ]--
r 81                         finger = finger.ri;
--[ 2018.11.20.15.25.59.283.0 ]--
r 81                         finger = finger.rig;
--[ 2018.11.20.15.25.59.361.0 ]--
r 81                         finger = finger.righ;
--[ 2018.11.20.15.25.59.484.0 ]--
r 81                         finger = finger.right;
--[ 2018.11.20.15.26.18.155.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.27.25.656.0 ]--
r 69                         if (finger.left.p  p) {
--[ 2018.11.20.15.27.25.671.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.687.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.703.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.703.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.718.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.937.0 ]--
r 69                         if (finger.left.p p) {
--[ 2018.11.20.15.27.25.937.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.25.952.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.621.0 ]--
r 69                         if (finger.left.p. p) {
--[ 2018.11.20.15.27.26.637.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.653.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.668.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.684.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.684.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.700.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.715.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.981.0 ]--
r 69                         if (finger.left.p.e p) {
--[ 2018.11.20.15.27.26.981.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.996.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.26.996.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.043.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.043.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.059.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.074.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.343.0 ]--
r 69                         if (finger.left.p.eq p) {
--[ 2018.11.20.15.27.27.343.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.359.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.468.0 ]--
r 69                         if (finger.left.p.equ p) {
--[ 2018.11.20.15.27.27.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.501.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.568.0 ]--
r 69                         if (finger.left.p.equa p) {
--[ 2018.11.20.15.27.27.576.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.587.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.689.0 ]--
r 69                         if (finger.left.p.equal p) {
--[ 2018.11.20.15.27.27.689.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.689.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.892.0 ]--
r 69                         if (finger.left.p.equals p) {
--[ 2018.11.20.15.27.27.892.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.27.908.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.194.0 ]--
r 69                         if (finger.left.p.equals() p) {
--[ 2018.11.20.15.27.29.194.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.209.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.29.998.0 ]--
r 69                         if (finger.left.p.equals( p) {
--[ 2018.11.20.15.27.30.014.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.014.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.029.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.045.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.045.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.061.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.076.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.076.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.092.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.30.092.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.151.0 ]--
r 69                         if (finger.left.p.equals(p) {
--[ 2018.11.20.15.27.31.151.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.167.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.844.0 ]--
r 69                         if (finger.left.p.equals(p)) {
--[ 2018.11.20.15.27.31.860.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.860.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.31.876.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.34.862.0 ]--
r 78                         if (finger.right.p ==p) {
--[ 2018.11.20.15.27.34.878.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.34.878.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.112.0 ]--
r 78                         if (finger.right.p =p) {
--[ 2018.11.20.15.27.35.112.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.128.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.175.0 ]--
r 78                         if (finger.right.p p) {
--[ 2018.11.20.15.27.35.175.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.190.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.206.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.222.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.222.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.237.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.253.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.253.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.269.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.476.0 ]--
r 78                         if (finger.right.pp) {
--[ 2018.11.20.15.27.35.476.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.476.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.491.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.491.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.507.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.507.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.35.522.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.087.0 ]--
r 78                         if (finger.right.p.p) {
--[ 2018.11.20.15.27.36.103.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.118.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.118.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.433.0 ]--
r 78                         if (finger.right.p.ep) {
--[ 2018.11.20.15.27.36.438.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.443.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.630.0 ]--
r 78                         if (finger.right.p.eqp) {
--[ 2018.11.20.15.27.36.630.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.630.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.748.0 ]--
r 78                         if (finger.right.p.equp) {
--[ 2018.11.20.15.27.36.748.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.764.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.890.0 ]--
r 78                         if (finger.right.p.equap) {
--[ 2018.11.20.15.27.36.899.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.899.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.993.0 ]--
r 78                         if (finger.right.p.equalp) {
--[ 2018.11.20.15.27.36.993.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.36.993.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.305.0 ]--
r 78                         if (finger.right.p.equalsp) {
--[ 2018.11.20.15.27.37.321.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.321.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.915.0 ]--
r 78                         if (finger.right.p.equals(p) {
--[ 2018.11.20.15.27.37.915.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.931.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.37.946.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.979.0 ]--
r 78                         if (finger.right.p.equals(p)) {
--[ 2018.11.20.15.27.38.979.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.995.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.38.995.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.39.010.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.27.39.010.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.243.0 ]--
+ 17     
--[ 2018.11.20.15.28.54.243.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.259.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.562.0 ]--
r 17     p
--[ 2018.11.20.15.28.54.578.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.578.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.578.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.593.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.609.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.609.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.718.0 ]--
r 17     pr
--[ 2018.11.20.15.28.54.718.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.54.734.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.015.0 ]--
r 17     priv
--[ 2018.11.20.15.28.55.015.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.031.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.062.0 ]--
r 17     priva
--[ 2018.11.20.15.28.55.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.077.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.265.0 ]--
r 17     privat
--[ 2018.11.20.15.28.55.265.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.281.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.421.0 ]--
r 17     private
--[ 2018.11.20.15.28.55.421.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.444.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.453.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.453.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.468.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.468.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.515.0 ]--
r 17     private 
--[ 2018.11.20.15.28.55.531.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.28.55.531.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.562.0 ]--
r 17     private P
--[ 2018.11.20.15.29.05.562.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.583.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.598.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.598.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.614.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.833.0 ]--
r 17     private Po
--[ 2018.11.20.15.29.05.833.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.848.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.05.988.0 ]--
r 17     private Poi
--[ 2018.11.20.15.29.06.004.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.004.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.129.0 ]--
r 17     private Poin
--[ 2018.11.20.15.29.06.129.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.129.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.317.0 ]--
r 17     private Point
--[ 2018.11.20.15.29.06.317.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.332.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.472.0 ]--
r 17     private Points
--[ 2018.11.20.15.29.06.472.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.06.503.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.029.0 ]--
r 17     private Point
--[ 2018.11.20.15.29.07.029.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.045.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.154.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.07.170.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.07.170.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.080.0 ]--
r 17     private Point f
--[ 2018.11.20.15.29.08.095.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.095.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.095.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.111.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.111.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.127.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.361.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.08.361.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.377.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.377.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.392.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.767.0 ]--
r 17     private Point r
--[ 2018.11.20.15.29.08.783.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.783.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.798.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.08.814.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.189.0 ]--
r 17     private Point 
--[ 2018.11.20.15.29.09.189.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.189.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.204.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.204.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.220.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.09.236.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.061.0 ]--
r 17     private Point s
--[ 2018.11.20.15.29.10.061.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.061.2 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.077.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.077.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.093.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.093.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.233.0 ]--
r 17     private Point st
--[ 2018.11.20.15.29.10.249.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.249.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.408.0 ]--
r 17     private Point sta
--[ 2018.11.20.15.29.10.416.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.426.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.481.0 ]--
r 17     private Point stac
--[ 2018.11.20.15.29.10.486.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.493.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.939.0 ]--
r 17     private Point stack
--[ 2018.11.20.15.29.10.955.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.10.955.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.408.0 ]--
r 17     private Point stackO
--[ 2018.11.20.15.29.11.408.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.424.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.568.0 ]--
r 17     private Point stackOf
--[ 2018.11.20.15.29.11.568.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.11.584.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.104.0 ]--
r 17     private Point stackOfP
--[ 2018.11.20.15.29.12.104.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.119.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.276.0 ]--
r 17     private Point stackOfPo
--[ 2018.11.20.15.29.12.276.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.291.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.507.0 ]--
r 17     private Point stackOfPoi
--[ 2018.11.20.15.29.12.507.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.523.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.648.0 ]--
r 17     private Point stackOfPoin
--[ 2018.11.20.15.29.12.664.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.679.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.695.0 ]--
r 17     private Point stackOfPoint
--[ 2018.11.20.15.29.12.710.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.12.710.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.249.0 ]--
r 17     private Point stackOfPoints
--[ 2018.11.20.15.29.13.264.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.264.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.13.993.0 ]--
r 17     private Point stackOfPoints;
--[ 2018.11.20.15.29.14.009.0 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.14.009.1 ]--
UpdateTree (AD): 1 1
- /.git/index.lock
+ /.git/index.lock

--[ 2018.11.20.15.29.29.711.0 ]--
r 17     private sPoint stackOfPoints;
--[ 2018.11.20.15.29.30.024.0 ]--
r 17     private stPoint stackOfPoints;
--[ 2018.11.20.15.29.30.368.0 ]--
r 17     private sPoint stackOfPoints;
--[ 2018.11.20.15.29.30.520.0 ]--
r 17     private Point stackOfPoints;
--[ 2018.11.20.15.29.31.121.0 ]--
r 17     private SPoint stackOfPoints;
--[ 2018.11.20.15.29.31.402.0 ]--
r 17     private StPoint stackOfPoints;
--[ 2018.11.20.15.29.31.625.0 ]--
r 17     private StaPoint stackOfPoints;
--[ 2018.11.20.15.29.31.844.0 ]--
r 17     private StacPoint stackOfPoints;
--[ 2018.11.20.15.29.32.042.0 ]--
r 17     private StackPoint stackOfPoints;
--[ 2018.11.20.15.29.33.631.0 ]--
r 17     private Stack<Point stackOfPoints;
--[ 2018.11.20.15.29.35.739.0 ]--
r 17     private Stack<Point> stackOfPoints;
--[ 2018.11.20.15.29.36.415.0 ]--
r 17     private Stack<Point>  stackOfPoints;
--[ 2018.11.20.15.29.37.818.0 ]--
r 17     private Stack<Point> = stackOfPoints;
--[ 2018.11.20.15.29.37.931.0 ]--
r 17     private Stack<Point> =  stackOfPoints;
--[ 2018.11.20.15.29.38.337.0 ]--
r 17     private Stack<Point> = stackOfPoints;
--[ 2018.11.20.15.29.38.539.0 ]--
r 17     private Stack<Point>  stackOfPoints;
--[ 2018.11.20.15.29.41.624.0 ]--
r 17     private Stack<Point> p stackOfPoints;
--[ 2018.11.20.15.29.41.727.0 ]--
r 17     private Stack<Point> po stackOfPoints;
--[ 2018.11.20.15.29.41.915.0 ]--
r 17     private Stack<Point> poi stackOfPoints;
--[ 2018.11.20.15.29.42.149.0 ]--
r 17     private Stack<Point> poin stackOfPoints;
--[ 2018.11.20.15.29.42.321.0 ]--
r 17     private Stack<Point> point stackOfPoints;
--[ 2018.11.20.15.29.42.510.0 ]--
r 17     private Stack<Point> points stackOfPoints;
--[ 2018.11.20.15.29.47.103.0 ]--
r 17     private Stack<Point> pointStack stackOfPoints;
--[ 2018.11.20.15.29.48.568.0 ]--
r 17     private Stack<Point> pointStac stackOfPoints;
--[ 2018.11.20.15.29.48.837.0 ]--
r 17     private Stack<Point> pointSta stackOfPoints;
--[ 2018.11.20.15.29.49.030.0 ]--
r 17     private Stack<Point> pointSt stackOfPoints;
--[ 2018.11.20.15.29.49.202.0 ]--
r 17     private Stack<Point> pointS stackOfPoints;
--[ 2018.11.20.15.29.49.374.0 ]--
r 17     private Stack<Point> point stackOfPoints;
--[ 2018.11.20.15.29.50.103.0 ]--
r 17     private Stack<Point> points stackOfPoints;
--[ 2018.11.20.15.29.57.655.0 ]--
r 17     private Stack<Point> points /stackOfPoints;
--[ 2018.11.20.15.29.57.780.0 ]--
r 17     private Stack<Point> points //stackOfPoints;
--[ 2018.11.20.15.30.03.444.0 ]--
r 17     private Stack<Point> points; //stackOfPoints;
--[ 2018.11.20.15.30.30.252.0 ]--
r 17     private Stack<Point> s; //stackOfPoints;
--[ 2018.11.20.15.30.30.550.0 ]--
r 17     private Stack<Point> st; //stackOfPoints;
--[ 2018.11.20.15.30.30.710.0 ]--
r 17     private Stack<Point> sta; //stackOfPoints;
--[ 2018.11.20.15.30.31.165.0 ]--
r 17     private Stack<Point> stak; //stackOfPoints;
--[ 2018.11.20.15.30.31.780.0 ]--
r 17     private Stack<Point> sta; //stackOfPoints;
--[ 2018.11.20.15.30.32.108.0 ]--
r 17     private Stack<Point> stac; //stackOfPoints;
--[ 2018.11.20.15.30.32.217.0 ]--
r 17     private Stack<Point> stack; //stackOfPoints;
--[ 2018.11.20.15.30.32.834.0 ]--
r 17     private Stack<Point> stackO; //stackOfPoints;
--[ 2018.11.20.15.30.32.977.0 ]--
r 17     private Stack<Point> stackOf; //stackOfPoints;
--[ 2018.11.20.15.30.33.467.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.33.671.0 ]--
r 17     private Stack<Point> stackOfPi; //stackOfPoints;
--[ 2018.11.20.15.30.33.827.0 ]--
r 17     private Stack<Point> stackOfPin; //stackOfPoints;
--[ 2018.11.20.15.30.33.921.0 ]--
r 17     private Stack<Point> stackOfPint; //stackOfPoints;
--[ 2018.11.20.15.30.34.265.0 ]--
r 17     private Stack<Point> stackOfPin; //stackOfPoints;
--[ 2018.11.20.15.30.34.390.0 ]--
r 17     private Stack<Point> stackOfPi; //stackOfPoints;
--[ 2018.11.20.15.30.34.492.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.34.773.0 ]--
r 17     private Stack<Point> stackOfPpo; //stackOfPoints;
--[ 2018.11.20.15.30.36.056.0 ]--
r 17     private Stack<Point> stackOfPp; //stackOfPoints;
--[ 2018.11.20.15.30.36.213.0 ]--
r 17     private Stack<Point> stackOfP; //stackOfPoints;
--[ 2018.11.20.15.30.36.689.0 ]--
r 17     private Stack<Point> stackOfPo; //stackOfPoints;
--[ 2018.11.20.15.30.36.783.0 ]--
r 17     private Stack<Point> stackOfPoi; //stackOfPoints;
--[ 2018.11.20.15.30.36.893.0 ]--
r 17     private Stack<Point> stackOfPoin; //stackOfPoints;
--[ 2018.11.20.15.30.37.033.0 ]--
r 17     private Stack<Point> stackOfPoint; //stackOfPoints;
--[ 2018.11.20.15.30.37.268.0 ]--
r 17     private Stack<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.30.46.089.0 ]--
+ 20         
--[ 2018.11.20.15.30.47.598.0 ]--
r 20         s
--[ 2018.11.20.15.30.47.817.0 ]--
r 20         st
--[ 2018.11.20.15.30.47.962.0 ]--
r 20         sta
--[ 2018.11.20.15.30.48.056.0 ]--
r 20         stac
--[ 2018.11.20.15.30.48.149.0 ]--
r 20         stack
--[ 2018.11.20.15.30.48.415.0 ]--
r 20         stackOfPoints
--[ 2018.11.20.15.30.48.667.0 ]--
r 20         stackOfPoints 
--[ 2018.11.20.15.30.49.151.0 ]--
r 20         stackOfPoints =
--[ 2018.11.20.15.30.49.218.0 ]--
r 20         stackOfPoints = 
--[ 2018.11.20.15.30.49.375.0 ]--
r 20         stackOfPoints = n
--[ 2018.11.20.15.30.49.496.0 ]--
r 20         stackOfPoints = ne
--[ 2018.11.20.15.30.49.933.0 ]--
r 20         stackOfPoints = new
--[ 2018.11.20.15.30.50.105.0 ]--
r 20         stackOfPoints = new 
--[ 2018.11.20.15.30.50.340.0 ]--
r 20         stackOfPoints = new S
--[ 2018.11.20.15.30.50.558.0 ]--
r 20         stackOfPoints = new St
--[ 2018.11.20.15.30.50.776.0 ]--
r 20         stackOfPoints = new Sta
--[ 2018.11.20.15.30.51.134.0 ]--
r 20         stackOfPoints = new Stack
--[ 2018.11.20.15.30.51.165.0 ]--
r 20         stackOfPoints = new Stack<>
--[ 2018.11.20.15.30.51.181.0 ]--
r 20         stackOfPoints = new Stack<>()
--[ 2018.11.20.15.30.53.136.0 ]--
r 20         stackOfPoints = new Stack<P>()
--[ 2018.11.20.15.30.53.354.0 ]--
r 20         stackOfPoints = new Stack<Po>()
--[ 2018.11.20.15.30.53.639.0 ]--
r 20         stackOfPoints = new Stack<Poi>()
--[ 2018.11.20.15.30.53.733.0 ]--
r 20         stackOfPoints = new Stack<Poin>()
--[ 2018.11.20.15.30.53.874.0 ]--
r 20         stackOfPoints = new Stack<Point>()
--[ 2018.11.20.15.30.55.055.0 ]--
r 20         stackOfPoints = new Stack<Point>();
--[ 2018.11.20.15.31.01.656.0 ]--
+ 41                         
--[ 2018.11.20.15.31.01.815.0 ]--
r 41                         s
--[ 2018.11.20.15.31.01.987.0 ]--
r 41                         st
--[ 2018.11.20.15.31.02.190.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.02.268.0 ]--
r 41                         stav
--[ 2018.11.20.15.31.02.346.0 ]--
r 41                         stavk
--[ 2018.11.20.15.31.02.679.0 ]--
r 41                         stav
--[ 2018.11.20.15.31.02.819.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.02.948.0 ]--
r 41                         st
--[ 2018.11.20.15.31.03.646.0 ]--
r 41                         sta
--[ 2018.11.20.15.31.03.770.0 ]--
r 41                         stac
--[ 2018.11.20.15.31.03.880.0 ]--
r 41                         stack
--[ 2018.11.20.15.31.04.317.0 ]--
r 41                         stackOfPoints
--[ 2018.11.20.15.31.05.039.0 ]--
r 41                         stackOfPoints.
--[ 2018.11.20.15.31.06.564.0 ]--
r 41                         stackOfPoints.p
--[ 2018.11.20.15.31.06.767.0 ]--
r 41                         stackOfPoints.ps
--[ 2018.11.20.15.31.06.845.0 ]--
r 41                         stackOfPoints.psu
--[ 2018.11.20.15.31.07.254.0 ]--
r 41                         stackOfPoints.ps
--[ 2018.11.20.15.31.07.379.0 ]--
r 41                         stackOfPoints.p
--[ 2018.11.20.15.31.07.545.0 ]--
r 41                         stackOfPoints.pu
--[ 2018.11.20.15.31.07.779.0 ]--
r 41                         stackOfPoints.pus
--[ 2018.11.20.15.31.08.013.0 ]--
r 41                         stackOfPoints.push
--[ 2018.11.20.15.31.09.654.0 ]--
r 41                         stackOfPoints.push()
--[ 2018.11.20.15.31.12.484.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.12.656.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.12.765.0 ]--
r 41                         stackOfPoints.push(new)
--[ 2018.11.20.15.31.13.374.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.13.573.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.13.729.0 ]--
r 41                         stackOfPoints.push()
--[ 2018.11.20.15.31.16.001.0 ]--
r 41                         stackOfPoints.push(n)
--[ 2018.11.20.15.31.16.188.0 ]--
r 41                         stackOfPoints.push(ne)
--[ 2018.11.20.15.31.16.219.0 ]--
r 41                         stackOfPoints.push(new)
--[ 2018.11.20.15.31.17.535.0 ]--
r 41                         stackOfPoints.push(newNode)
--[ 2018.11.20.15.31.18.569.0 ]--
r 41                         stackOfPoints.push(newNode.)
--[ 2018.11.20.15.31.19.679.0 ]--
r 41                         stackOfPoints.push(newNode.p)
--[ 2018.11.20.15.31.21.332.0 ]--
r 41                         stackOfPoints.push(newNode.p);
--[ 2018.11.20.15.31.30.856.0 ]--
+ 49                         
--[ 2018.11.20.15.31.31.106.0 ]--
+ 49                                                 stackOfPoints.push(newNode.p);
r 50 
--[ 2018.11.20.15.31.31.121.0 ]--
r 49                         stackOfPoints.push(newNode.p);
--[ 2018.11.20.15.31.32.103.0 ]--
- 50
--[ 2018.11.20.15.31.40.242.0 ]--
r 101     public Iterable<Point> points() { return s; }
--[ 2018.11.20.15.31.40.440.0 ]--
r 101     public Iterable<Point> points() { return st; }
--[ 2018.11.20.15.31.40.602.0 ]--
r 101     public Iterable<Point> points() { return sta; }
--[ 2018.11.20.15.31.41.040.0 ]--
r 101     public Iterable<Point> points() { return stackOfPoints; }
--[ 2018.11.20.15.31.46.416.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.32.06.316.0 ]--
+ 41                         
--[ 2018.11.20.15.32.06.716.0 ]--
r 41                         i
--[ 2018.11.20.15.32.06.935.0 ]--
r 41                         if
--[ 2018.11.20.15.32.07.094.0 ]--
r 41                         if 
--[ 2018.11.20.15.32.07.720.0 ]--
r 41                         if ()
--[ 2018.11.20.15.32.08.586.0 ]--
r 41                         if (n)
--[ 2018.11.20.15.32.09.065.0 ]--
r 41                         if (ne)
--[ 2018.11.20.15.32.09.456.0 ]--
r 41                         if (newNode)
--[ 2018.11.20.15.32.09.628.0 ]--
r 41                         if (newNode.)
--[ 2018.11.20.15.32.10.667.0 ]--
r 41                         if (newNode)
--[ 2018.11.20.15.32.10.777.0 ]--
r 41                         if (newNod)
--[ 2018.11.20.15.32.10.902.0 ]--
r 41                         if (newNo)
--[ 2018.11.20.15.32.11.027.0 ]--
r 41                         if (newN)
--[ 2018.11.20.15.32.11.167.0 ]--
r 41                         if (new)
--[ 2018.11.20.15.32.11.292.0 ]--
r 41                         if (ne)
--[ 2018.11.20.15.32.11.524.0 ]--
r 41                         if (n)
--[ 2018.11.20.15.32.11.771.0 ]--
r 41                         if ()
--[ 2018.11.20.15.32.11.974.0 ]--
r 41                         if (s)
--[ 2018.11.20.15.32.12.177.0 ]--
r 41                         if (st)
--[ 2018.11.20.15.32.12.333.0 ]--
r 41                         if (sta)
--[ 2018.11.20.15.32.12.443.0 ]--
r 41                         if (stac)
--[ 2018.11.20.15.32.12.671.0 ]--
r 41                         if (stackOfPoints)
--[ 2018.11.20.15.32.13.453.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.13.916.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.14.009.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.14.578.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.15.094.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.15.265.0 ]--
r 41                         if (stackOfPoints.con)
--[ 2018.11.20.15.32.15.520.0 ]--
r 41                         if (stackOfPoints.co)
--[ 2018.11.20.15.32.15.644.0 ]--
r 41                         if (stackOfPoints.c)
--[ 2018.11.20.15.32.15.910.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.16.832.0 ]--
r 41                         if (stackOfPoints.g)
--[ 2018.11.20.15.32.17.367.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.17.646.0 ]--
r 41                         if (stackOfPoints)
--[ 2018.11.20.15.32.18.167.0 ]--
r 41                         if (stackOfPoints.)
--[ 2018.11.20.15.32.40.820.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.164.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.333.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.41.548.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.42.167.0 ]--
r 17     private Array<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.128.0 ]--
r 17     private S<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.667.0 ]--
r 17     private <Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.47.917.0 ]--
r 17     private a<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.245.0 ]--
r 17     private <Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.518.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.48.915.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.49.613.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.49.870.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.52.296.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.52.473.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.53.017.0 ]--
r 17     private A<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.105.0 ]--
r 17     private Ar<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.246.0 ]--
r 17     private Arr<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.424.0 ]--
r 17     private Arra<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.506.0 ]--
r 17     private Array<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.725.0 ]--
r 17     private ArrayL<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.54.896.0 ]--
r 17     private ArrayLi<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.340.0 ]--
r 17     private ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.355.0 ]--
r 17     private java.util.ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.386.0 ]--
r 1 import java.util.ArrayList;import java.util.Iterator;
--[ 2018.11.20.15.32.55.402.0 ]--
r 17     private ArrayList<Point> stackOfPoints; //stackOfPoints;
--[ 2018.11.20.15.32.55.442.0 ]--
+ 1 import java.util.ArrayList;
r 2 import java.util.Iterator;
--[ 2018.11.20.15.33.00.353.0 ]--
r 18     private ArrayList<Point> lOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.460.0 ]--
r 18     private ArrayList<Point> liOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.554.0 ]--
r 18     private ArrayList<Point> lisOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.00.741.0 ]--
r 18     private ArrayList<Point> listOfPoints; //stackOfPoints;
--[ 2018.11.20.15.33.05.509.0 ]--
r 21         listOfPoints = new Stack<Point>();
--[ 2018.11.20.15.33.09.636.0 ]--
r 21         listOfPoints = new A<Point>();
--[ 2018.11.20.15.33.09.870.0 ]--
r 21         listOfPoints = new Ar<Point>();
--[ 2018.11.20.15.33.10.376.0 ]--
r 21         listOfPoints = new Arr<Point>();
--[ 2018.11.20.15.33.10.586.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.10.601.0 ]--
r 21         listOfPoints = new ArrayList();
--[ 2018.11.20.15.33.10.633.0 ]--
r 21         listOfPoints = new ArrayList<>();
--[ 2018.11.20.15.33.13.405.0 ]--
r 21         listOfPoints = new ArrayList<p>();
--[ 2018.11.20.15.33.13.619.0 ]--
r 21         listOfPoints = new ArrayList<po>();
--[ 2018.11.20.15.33.13.744.0 ]--
r 21         listOfPoints = new ArrayList<poi>();
--[ 2018.11.20.15.33.13.900.0 ]--
r 21         listOfPoints = new ArrayList<poin>();
--[ 2018.11.20.15.33.14.036.0 ]--
r 21         listOfPoints = new ArrayList<point>();
--[ 2018.11.20.15.33.14.714.0 ]--
r 21         listOfPoints = new ArrayList<poin>();
--[ 2018.11.20.15.33.14.870.0 ]--
r 21         listOfPoints = new ArrayList<poi>();
--[ 2018.11.20.15.33.15.011.0 ]--
r 21         listOfPoints = new ArrayList<po>();
--[ 2018.11.20.15.33.15.136.0 ]--
r 21         listOfPoints = new ArrayList<p>();
--[ 2018.11.20.15.33.15.565.0 ]--
r 21         listOfPoints = new ArrayList<>();
--[ 2018.11.20.15.33.15.846.0 ]--
r 21         listOfPoints = new ArrayList<P>();
--[ 2018.11.20.15.33.16.051.0 ]--
r 21         listOfPoints = new ArrayList<Po>();
--[ 2018.11.20.15.33.16.207.0 ]--
r 21         listOfPoints = new ArrayList<Poi>();
--[ 2018.11.20.15.33.16.316.0 ]--
r 21         listOfPoints = new ArrayList<Poin>();
--[ 2018.11.20.15.33.16.468.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.16.706.0 ]--
r 21         listOfPoints = new ArrayList<Points>();
--[ 2018.11.20.15.33.17.915.0 ]--
r 21         listOfPoints = new ArrayList<Point>();
--[ 2018.11.20.15.33.23.624.0 ]--
r 42                         if (listOfPoints.)
--[ 2018.11.20.15.33.24.969.0 ]--
r 43                         listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.24.985.0 ]--
r 43                             listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.26.729.0 ]--
r 43                             listOfPoints.(newNode.p);
--[ 2018.11.20.15.33.27.166.0 ]--
r 43                             listOfPoints(newNode.p);
--[ 2018.11.20.15.33.27.758.0 ]--
r 43                             listOfPoints.(newNode.p);
--[ 2018.11.20.15.33.34.946.0 ]--
r 43                             listOfPoints.add(newNode.p);
--[ 2018.11.20.15.33.42.653.0 ]--
r 51                         listOfPoints.push(newNode.p);
--[ 2018.11.20.15.33.44.155.0 ]--
r 51                         listOfPoints.a(newNode.p);
--[ 2018.11.20.15.33.44.333.0 ]--
r 51                         listOfPoints.ad(newNode.p);
--[ 2018.11.20.15.33.44.518.0 ]--
r 51                         listOfPoints.add(newNode.p);
--[ 2018.11.20.15.33.49.514.0 ]--
r 42                         if (listOfPoints.c)
--[ 2018.11.20.15.33.49.639.0 ]--
r 42                         if (listOfPoints.co)
--[ 2018.11.20.15.33.50.344.0 ]--
r 42                         if (listOfPoints.contains)
--[ 2018.11.20.15.33.50.376.0 ]--
r 42                         if (listOfPoints.contains())
--[ 2018.11.20.15.33.52.235.0 ]--
r 42                         if (listOfPoints.contains(p))
--[ 2018.11.20.15.34.37.205.0 ]--
+ 22         
--[ 2018.11.20.15.34.37.671.0 ]--
r 22         l
--[ 2018.11.20.15.34.37.842.0 ]--
r 22         li
--[ 2018.11.20.15.34.37.889.0 ]--
r 22         lis
--[ 2018.11.20.15.34.38.326.0 ]--
r 22         listOfPoints
--[ 2018.11.20.15.34.39.779.0 ]--
r 22         listOfPoints.
--[ 2018.11.20.15.34.40.057.0 ]--
r 22         listOfPoints.i
--[ 2018.11.20.15.34.40.229.0 ]--
r 22         listOfPoints.in
--[ 2018.11.20.15.34.40.629.0 ]--
r 22         listOfPoints.ins
--[ 2018.11.20.15.34.41.272.0 ]--
r 22         listOfPoints.in
--[ 2018.11.20.15.34.41.998.0 ]--
r 22         listOfPoints.i
--[ 2018.11.20.15.34.42.263.0 ]--
r 22         listOfPoints.
--[ 2018.11.20.15.34.42.441.0 ]--
r 22         listOfPoints
--[ 2018.11.20.15.34.42.555.0 ]--
r 22         listOfPoint
--[ 2018.11.20.15.34.42.711.0 ]--
r 22         listOfPoin
--[ 2018.11.20.15.34.42.867.0 ]--
r 22         listOfPoi
--[ 2018.11.20.15.34.42.983.0 ]--
r 22         listOfPo
--[ 2018.11.20.15.34.43.108.0 ]--
r 22         listOfP
--[ 2018.11.20.15.34.43.249.0 ]--
r 22         listOf
--[ 2018.11.20.15.34.43.390.0 ]--
r 22         listO
--[ 2018.11.20.15.34.43.514.0 ]--
r 22         list
--[ 2018.11.20.15.34.43.670.0 ]--
r 22         lis
--[ 2018.11.20.15.34.43.952.0 ]--
r 22         li
--[ 2018.11.20.15.34.44.264.0 ]--
r 22         l
--[ 2018.11.20.15.34.44.698.0 ]--
r 22         
--[ 2018.11.20.15.34.45.058.0 ]--
- 22
--[ 2018.11.20.15.34.55.157.0 ]--
r 42                         if (listOfPoints.contains(p)){
--[ 2018.11.20.15.34.57.514.0 ]--
+ 44                             
--[ 2018.11.20.15.34.57.733.0 ]--
r 44                             }
--[ 2018.11.20.15.34.57.749.0 ]--
r 42                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.34.57.764.0 ]--
r 44                         }
--[ 2018.11.20.15.35.38.670.0 ]--
+ 52                                                 if (listOfPoints.contains(p)) {
+ 53                             listOfPoints.add(newNode.p);
r 54                         }
--[ 2018.11.20.15.35.38.686.0 ]--
r 52                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.35.51.899.0 ]--
r 42                         if (t) {
--[ 2018.11.20.15.35.51.968.0 ]--
r 42                         if (th) {
--[ 2018.11.20.15.35.52.109.0 ]--
r 42                         if (thi) {
--[ 2018.11.20.15.35.52.203.0 ]--
r 42                         if (this) {
--[ 2018.11.20.15.35.52.482.0 ]--
r 42                         if (this.) {
--[ 2018.11.20.15.35.52.982.0 ]--
r 42                         if (this.g) {
--[ 2018.11.20.15.35.53.185.0 ]--
r 42                         if (this.ge) {
--[ 2018.11.20.15.35.53.357.0 ]--
r 42                         if (this.get) {
--[ 2018.11.20.15.35.54.493.0 ]--
r 42                         if (this.get()) {
--[ 2018.11.20.15.35.57.475.0 ]--
r 42                         if (this.get(n)) {
--[ 2018.11.20.15.35.57.679.0 ]--
r 42                         if (this.get(ne)) {
--[ 2018.11.20.15.35.57.725.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.35.57.978.0 ]--
r 42                         if (this.get(new.)) {
--[ 2018.11.20.15.35.58.353.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.35.58.794.0 ]--
r 42                         if (this.get(newN)) {
--[ 2018.11.20.15.35.58.904.0 ]--
r 42                         if (this.get(newNo)) {
--[ 2018.11.20.15.35.59.075.0 ]--
r 42                         if (this.get(newNod)) {
--[ 2018.11.20.15.35.59.247.0 ]--
r 42                         if (this.get(newNode)) {
--[ 2018.11.20.15.35.59.407.0 ]--
r 42                         if (this.get(newNode.)) {
--[ 2018.11.20.15.35.59.764.0 ]--
r 42                         if (this.get(newNode.p)) {
--[ 2018.11.20.15.36.04.308.0 ]--
r 42                         if (this.get(newNode.p) ) {
--[ 2018.11.20.15.36.05.185.0 ]--
r 42                         if (this.get(newNode.p) =) {
--[ 2018.11.20.15.36.05.764.0 ]--
r 42                         if (this.get(newNode.p) ==) {
--[ 2018.11.20.15.36.05.953.0 ]--
r 42                         if (this.get(newNode.p) == ) {
--[ 2018.11.20.15.36.06.187.0 ]--
r 42                         if (this.get(newNode.p) == n) {
--[ 2018.11.20.15.36.06.409.0 ]--
r 42                         if (this.get(newNode.p) == nu) {
--[ 2018.11.20.15.36.06.577.0 ]--
r 42                         if (this.get(newNode.p) == nul) {
--[ 2018.11.20.15.36.06.702.0 ]--
r 42                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.36.20.283.0 ]--
r 52                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.36.25.253.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.15.36.25.253.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@7c770fb4
--[ 2018.11.20.15.36.29.168.0 ]--
r 106     public Iterable<Point> points() { return l; }
--[ 2018.11.20.15.36.29.183.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.199.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.310.0 ]--
r 106     public Iterable<Point> points() { return li; }
--[ 2018.11.20.15.36.29.310.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.326.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.404.0 ]--
r 106     public Iterable<Point> points() { return lis; }
--[ 2018.11.20.15.36.29.404.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.786.0 ]--
r 106     public Iterable<Point> points() { return list; }
--[ 2018.11.20.15.36.29.802.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.29.802.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.30.057.0 ]--
r 106     public Iterable<Point> points() { return listOfPoints; }
--[ 2018.11.20.15.36.30.057.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.30.073.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.33.671.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.36.33.671.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.37.20.993.0 ]--
r 42 //                        if (this.get(newNode.p) == null) {
r 43 //                            listOfPoints.add(newNode.p);
r 44 //                        }
--[ 2018.11.20.15.37.24.999.0 ]--
r 52 //                        if (this.get(newNode.p) == null) {
r 53 //                            listOfPoints.add(newNode.p);
r 54 //                        }
--[ 2018.11.20.15.37.28.197.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.37.37.222.0 ]--
r 52                         if (this.get(newNode.p) == null) {
r 53                             listOfPoints.add(newNode.p);
r 54                         }
--[ 2018.11.20.15.37.38.076.0 ]--
r 42                         if (this.get(newNode.p) == null) {
r 43                             listOfPoints.add(newNode.p);
r 44                         }
--[ 2018.11.20.15.37.54.970.0 ]--
r 42                         if (l) {
--[ 2018.11.20.15.37.55.624.0 ]--
r 42                         if (li) {
--[ 2018.11.20.15.37.55.764.0 ]--
r 42                         if (lis) {
--[ 2018.11.20.15.37.56.014.0 ]--
r 42                         if (list) {
--[ 2018.11.20.15.37.56.230.0 ]--
r 42                         if (listOfPoints) {
--[ 2018.11.20.15.37.56.876.0 ]--
r 42                         if (listOfPoints.) {
--[ 2018.11.20.15.37.57.173.0 ]--
r 42                         if (listOfPoints.c) {
--[ 2018.11.20.15.37.57.282.0 ]--
r 42                         if (listOfPoints.co) {
--[ 2018.11.20.15.37.57.439.0 ]--
r 42                         if (listOfPoints.con) {
--[ 2018.11.20.15.37.57.713.0 ]--
r 42                         if (listOfPoints.contains) {
--[ 2018.11.20.15.37.57.744.0 ]--
r 42                         if (listOfPoints.contains()) {
--[ 2018.11.20.15.37.59.109.0 ]--
r 42                         if (listOfPoints.contains(p)) {
--[ 2018.11.20.15.38.02.484.0 ]--
r 42                         if (listOfPoints.contains()) {
--[ 2018.11.20.15.38.02.726.0 ]--
r 42                         if (listOfPoints.contains(n)) {
--[ 2018.11.20.15.38.02.804.0 ]--
r 42                         if (listOfPoints.contains(ne)) {
--[ 2018.11.20.15.38.02.866.0 ]--
r 42                         if (listOfPoints.contains(new)) {
--[ 2018.11.20.15.38.04.134.0 ]--
r 42                         if (listOfPoints.contains(newNode)) {
--[ 2018.11.20.15.38.04.306.0 ]--
r 42                         if (listOfPoints.contains(newNode.)) {
--[ 2018.11.20.15.38.04.578.0 ]--
r 42                         if (listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.20.389.0 ]--
r 52                         if (listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.24.553.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.38.38.263.0 ]--
r 52                         if (!listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.41.041.0 ]--
r 42                         if (!listOfPoints.contains(newNode.p)) {
--[ 2018.11.20.15.38.44.499.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.39.28.755.0 ]--
+ 44                             
--[ 2018.11.20.15.39.29.133.0 ]--
r 44                             P
--[ 2018.11.20.15.39.29.360.0 ]--
r 44                             Pr
--[ 2018.11.20.15.39.29.893.0 ]--
r 44                             P
--[ 2018.11.20.15.39.30.030.0 ]--
r 44                             
--[ 2018.11.20.15.39.30.202.0 ]--
r 44                             S
--[ 2018.11.20.15.39.30.455.0 ]--
r 44                             St
--[ 2018.11.20.15.39.30.659.0 ]--
r 44                             Std
--[ 2018.11.20.15.39.31.002.0 ]--
r 44                             StdOut
--[ 2018.11.20.15.39.31.821.0 ]--
r 44                             StdOut.
--[ 2018.11.20.15.39.32.071.0 ]--
r 44                             StdOut.p
--[ 2018.11.20.15.39.32.165.0 ]--
r 44                             StdOut.pr
--[ 2018.11.20.15.39.32.274.0 ]--
r 44                             StdOut.pri
--[ 2018.11.20.15.39.32.321.0 ]--
r 44                             StdOut.prin
--[ 2018.11.20.15.39.32.455.0 ]--
r 44                             StdOut.println
--[ 2018.11.20.15.39.32.455.1 ]--
r 44                             StdOut.println()
--[ 2018.11.20.15.39.32.470.0 ]--
r 44                             StdOut.println();
--[ 2018.11.20.15.39.34.799.0 ]--
r 44                             StdOut.println(n);
--[ 2018.11.20.15.39.34.893.0 ]--
r 44                             StdOut.println(ne);
--[ 2018.11.20.15.39.34.971.0 ]--
r 44                             StdOut.println(new);
--[ 2018.11.20.15.39.36.204.0 ]--
r 44                             StdOut.println(newN);
--[ 2018.11.20.15.39.36.341.0 ]--
r 44                             StdOut.println(newNo);
--[ 2018.11.20.15.39.36.528.0 ]--
r 44                             StdOut.println(newNod);
--[ 2018.11.20.15.39.36.718.0 ]--
r 44                             StdOut.println(newNode);
--[ 2018.11.20.15.39.36.837.0 ]--
r 44                             StdOut.println(newNode.);
--[ 2018.11.20.15.39.37.352.0 ]--
r 44                             StdOut.println(newNode.p);
--[ 2018.11.20.15.39.45.228.0 ]--
+ 55                             
--[ 2018.11.20.15.39.45.415.0 ]--
+ 55                                                         StdOut.println(newNode.p);
r 56 
--[ 2018.11.20.15.39.45.447.0 ]--
r 55                             StdOut.println(newNode.p);
--[ 2018.11.20.15.39.46.422.0 ]--
- 56
--[ 2018.11.20.15.39.50.001.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.40.15.728.0 ]--
r 42                         if (t) {
--[ 2018.11.20.15.40.15.790.0 ]--
r 42                         if (th) {
--[ 2018.11.20.15.40.15.946.0 ]--
r 42                         if (thi) {
--[ 2018.11.20.15.40.16.040.0 ]--
r 42                         if (this) {
--[ 2018.11.20.15.40.16.202.0 ]--
r 42                         if (this.) {
--[ 2018.11.20.15.40.20.279.0 ]--
r 42                         if (this.get) {
--[ 2018.11.20.15.40.20.294.0 ]--
r 42                         if (this.get()) {
--[ 2018.11.20.15.40.24.119.0 ]--
r 42                         if (this.get(n)) {
--[ 2018.11.20.15.40.24.306.0 ]--
r 42                         if (this.get(ne)) {
--[ 2018.11.20.15.40.24.338.0 ]--
r 42                         if (this.get(new)) {
--[ 2018.11.20.15.40.25.331.0 ]--
r 42                         if (this.get(newn)) {
--[ 2018.11.20.15.40.25.922.0 ]--
r 42                         if (this.get(newNode)) {
--[ 2018.11.20.15.40.26.313.0 ]--
r 42                         if (this.get(newNode.)) {
--[ 2018.11.20.15.40.26.664.0 ]--
r 42                         if (this.get(newNode.p)) {
--[ 2018.11.20.15.40.32.542.0 ]--
r 42                         if (this.get(newNode.p) ) {
--[ 2018.11.20.15.40.33.458.0 ]--
r 42                         if (this.get(newNode.p) =) {
--[ 2018.11.20.15.40.34.424.0 ]--
r 42                         if (this.get(newNode.p) ==) {
--[ 2018.11.20.15.40.34.734.0 ]--
r 42                         if (this.get(newNode.p) == ) {
--[ 2018.11.20.15.40.34.984.0 ]--
r 42                         if (this.get(newNode.p) == n) {
--[ 2018.11.20.15.40.35.250.0 ]--
r 42                         if (this.get(newNode.p) == nu) {
--[ 2018.11.20.15.40.35.453.0 ]--
r 42                         if (this.get(newNode.p) == nul) {
--[ 2018.11.20.15.40.35.609.0 ]--
r 42                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.40.58.516.0 ]--
r 53                         if (this.get(newNode.p) == null) {
--[ 2018.11.20.15.41.02.967.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.41.16.260.0 ]--
+ 42                         
--[ 2018.11.20.15.41.16.439.0 ]--
r 42                         S
--[ 2018.11.20.15.41.16.724.0 ]--
r 42                         St
--[ 2018.11.20.15.41.16.931.0 ]--
r 42                         Std
--[ 2018.11.20.15.41.17.758.0 ]--
r 42                         StdOut
--[ 2018.11.20.15.41.18.525.0 ]--
r 42                         StdOut.
--[ 2018.11.20.15.41.18.801.0 ]--
r 42                         StdOut.p
--[ 2018.11.20.15.41.18.941.0 ]--
r 42                         StdOut.pr
--[ 2018.11.20.15.41.18.988.0 ]--
r 42                         StdOut.pri
--[ 2018.11.20.15.41.19.160.0 ]--
r 42                         StdOut.prin
--[ 2018.11.20.15.41.19.285.0 ]--
r 42                         StdOut.println
--[ 2018.11.20.15.41.19.301.0 ]--
r 42                         StdOut.println()
--[ 2018.11.20.15.41.19.317.0 ]--
r 42                         StdOut.println();
--[ 2018.11.20.15.41.19.954.0 ]--
r 42                         StdOut.println(this.get(newNode.p));
--[ 2018.11.20.15.41.24.940.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.41.36.389.0 ]--
r 42                         StdOut.println("this.get(newNode.p));
--[ 2018.11.20.15.41.36.615.0 ]--
r 42                         StdOut.println("hthis.get(newNode.p));
--[ 2018.11.20.15.41.36.818.0 ]--
r 42                         StdOut.println("hethis.get(newNode.p));
--[ 2018.11.20.15.41.36.916.0 ]--
r 42                         StdOut.println("heythis.get(newNode.p));
--[ 2018.11.20.15.41.37.353.0 ]--
r 42                         StdOut.println("hey"this.get(newNode.p));
--[ 2018.11.20.15.41.37.695.0 ]--
r 42                         StdOut.println("hey"+this.get(newNode.p));
--[ 2018.11.20.15.41.41.897.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.45.01.535.0 ]--
+ 104     
--[ 2018.11.20.15.45.03.401.0 ]--
r 104     p
--[ 2018.11.20.15.45.03.602.0 ]--
r 104     pr
--[ 2018.11.20.15.45.03.696.0 ]--
r 104     pri
--[ 2018.11.20.15.45.03.883.0 ]--
r 104     priv
--[ 2018.11.20.15.45.03.977.0 ]--
r 104     priva
--[ 2018.11.20.15.45.04.071.0 ]--
r 104     privat
--[ 2018.11.20.15.45.04.211.0 ]--
r 104     private
--[ 2018.11.20.15.45.04.910.0 ]--
r 104     private 
--[ 2018.11.20.15.45.08.217.0 ]--
r 104     private P
--[ 2018.11.20.15.45.08.610.0 ]--
r 104     private Po
--[ 2018.11.20.15.45.08.673.0 ]--
r 104     private Poi
--[ 2018.11.20.15.45.08.782.0 ]--
r 104     private Poin
--[ 2018.11.20.15.45.08.985.0 ]--
r 104     private Point
--[ 2018.11.20.15.45.09.681.0 ]--
r 104     private Point 
--[ 2018.11.20.15.45.10.941.0 ]--
r 104     private Point t
--[ 2018.11.20.15.45.11.128.0 ]--
r 104     private Point tr
--[ 2018.11.20.15.45.11.222.0 ]--
r 104     private Point tra
--[ 2018.11.20.15.45.11.417.0 ]--
r 104     private Point trav
--[ 2018.11.20.15.45.11.580.0 ]--
r 104     private Point trave
--[ 2018.11.20.15.45.11.705.0 ]--
r 104     private Point traver
--[ 2018.11.20.15.45.11.877.0 ]--
r 104     private Point travers
--[ 2018.11.20.15.45.11.955.0 ]--
r 104     private Point traverse
--[ 2018.11.20.15.45.13.446.0 ]--
r 104     private Point traverse()
--[ 2018.11.20.15.47.37.170.0 ]--
r 101         return false
--[ 2018.11.20.15.47.37.689.0 ]--
r 101         return fals
--[ 2018.11.20.15.47.37.720.0 ]--
r 101         return fal
--[ 2018.11.20.15.47.37.736.0 ]--
r 101         return fa
--[ 2018.11.20.15.47.37.783.0 ]--
r 101         return f
--[ 2018.11.20.15.47.37.814.0 ]--
r 101         return 
--[ 2018.11.20.15.47.37.861.0 ]--
r 101         return
--[ 2018.11.20.15.47.37.923.0 ]--
r 101         retur
--[ 2018.11.20.15.47.37.939.0 ]--
r 101         retu
--[ 2018.11.20.15.47.38.048.0 ]--
r 101         ret
--[ 2018.11.20.15.47.38.205.0 ]--
r 101         re
--[ 2018.11.20.15.47.38.564.0 ]--
r 101         r
--[ 2018.11.20.15.47.39.255.0 ]--
r 101         
--[ 2018.11.20.15.47.40.789.0 ]--
+ 101         while (true) {
+ 102                 //comparing x's
+ 103                 double fingerValue = finger.p.xy(finger.dir);
+ 104                 double pValue = p.xy(finger.dir);
+ 105                 if (pValue < fingerValue) { //go down the left
+ 106                     if (finger.left == null) {
+ 107                         return null;
+ 108                     } else {
+ 109                         if (finger.left.p.equals(p)) {
+ 110                             return finger.v;
+ 111                         }
+ 112                         finger = finger.left;
+ 113                     }
+ 114                 } else { //go down the right
+ 115                     if (finger.right == null) {
+ 116                         return null;
+ 117                     } else {
+ 118                         if (finger.right.p.equals(p)) {
+ 119                             return finger.v;
+ 120                         }
+ 121                         finger = finger.right;
+ 122                     }
+ 123                 }
r 124             }
--[ 2018.11.20.15.47.40.836.0 ]--
- 102
- 102
r 102             //comparing x's
r 103             double fingerValue = finger.p.xy(finger.dir);
r 104             double pValue = p.xy(finger.dir);
r 105             if (pValue < fingerValue) { //go down the left
r 106                 if (finger.left == null) {
r 107                     return null;
r 108                 } else {
r 109                     if (finger.left.p.equals(p)) {
r 110                         return finger.v;
r 112                     finger = finger.left;
r 113                 }
r 114             } else { //go down the right
r 115                 if (finger.right == null) {
r 116                     return null;
r 117                 } else {
r 118                     if (finger.right.p.equals(p)) {
r 119                         return finger.v;
+ 121                     finger = finger.right;
+ 124         }
--[ 2018.11.20.15.48.04.491.0 ]--
+ 101         
--[ 2018.11.20.15.48.05.229.0 ]--
+ 101         Node finger;
+ 102         if(this.isEmpty()){
+ 103             return null;
+ 104         } else {
r 105             finger = root;
--[ 2018.11.20.15.48.11.103.0 ]--
r 103             return nul;
--[ 2018.11.20.15.48.11.275.0 ]--
r 103             return nu;
--[ 2018.11.20.15.48.11.462.0 ]--
r 103             return n;
--[ 2018.11.20.15.48.11.601.0 ]--
r 103             return ;
--[ 2018.11.20.15.48.12.206.0 ]--
r 103             return f;
--[ 2018.11.20.15.48.12.347.0 ]--
r 103             return fa;
--[ 2018.11.20.15.48.12.848.0 ]--
r 103             return fal;
--[ 2018.11.20.15.48.12.915.0 ]--
r 103             return fals;
--[ 2018.11.20.15.48.12.993.0 ]--
r 103             return false;
--[ 2018.11.20.15.48.50.562.0 ]--
r 112                     return null
--[ 2018.11.20.15.48.51.077.0 ]--
r 112                     return nul
--[ 2018.11.20.15.48.51.109.0 ]--
r 112                     return nu
--[ 2018.11.20.15.48.51.142.0 ]--
r 112                     return n
--[ 2018.11.20.15.48.51.303.0 ]--
r 112                     return 
--[ 2018.11.20.15.48.51.450.0 ]--
r 112                     return
--[ 2018.11.20.15.48.51.559.0 ]--
r 112                     retur
--[ 2018.11.20.15.48.51.653.0 ]--
r 112                     retu
--[ 2018.11.20.15.48.51.781.0 ]--
r 112                     ret
--[ 2018.11.20.15.48.51.906.0 ]--
r 112                     re
--[ 2018.11.20.15.48.52.062.0 ]--
r 112                     r
--[ 2018.11.20.15.48.52.485.0 ]--
r 112                     
--[ 2018.11.20.15.48.54.763.0 ]--
r 112                     c
--[ 2018.11.20.15.48.54.919.0 ]--
r 112                     co
--[ 2018.11.20.15.48.55.049.0 ]--
r 112                     con
--[ 2018.11.20.15.48.55.205.0 ]--
r 112                     cont
--[ 2018.11.20.15.48.55.314.0 ]--
r 112                     conti
--[ 2018.11.20.15.48.55.345.0 ]--
r 112                     contin
--[ 2018.11.20.15.48.55.583.0 ]--
r 112                     continu
--[ 2018.11.20.15.48.55.677.0 ]--
r 112                     continue
--[ 2018.11.20.15.48.56.148.0 ]--
r 112                     continue;
--[ 2018.11.20.15.51.48.580.0 ]--
r 112                     continue
--[ 2018.11.20.15.51.48.846.0 ]--
r 112                     continu
--[ 2018.11.20.15.51.48.990.0 ]--
r 112                     contin
--[ 2018.11.20.15.51.49.153.0 ]--
r 112                     conti
--[ 2018.11.20.15.51.49.277.0 ]--
r 112                     cont
--[ 2018.11.20.15.51.49.387.0 ]--
r 112                     con
--[ 2018.11.20.15.51.49.526.0 ]--
r 112                     co
--[ 2018.11.20.15.51.49.697.0 ]--
r 112                     c
--[ 2018.11.20.15.51.49.994.0 ]--
r 112                     
--[ 2018.11.20.15.51.50.669.0 ]--
r 112                     r
--[ 2018.11.20.15.51.50.825.0 ]--
r 112                     re
--[ 2018.11.20.15.51.51.065.0 ]--
r 112                     ret
--[ 2018.11.20.15.51.51.221.0 ]--
r 112                     retu
--[ 2018.11.20.15.51.51.317.0 ]--
r 112                     retur
--[ 2018.11.20.15.51.51.469.0 ]--
r 112                     return
--[ 2018.11.20.15.51.51.719.0 ]--
r 112                     return 
--[ 2018.11.20.15.51.51.966.0 ]--
r 112                     return n
--[ 2018.11.20.15.51.52.202.0 ]--
r 112                     return nu
--[ 2018.11.20.15.51.52.380.0 ]--
r 112                     return nul
--[ 2018.11.20.15.51.52.516.0 ]--
r 112                     return null
--[ 2018.11.20.15.51.52.734.0 ]--
r 112                     return null;
--[ 2018.11.20.15.51.55.148.0 ]--
r 112                     return nul;
--[ 2018.11.20.15.51.55.335.0 ]--
r 112                     return nu;
--[ 2018.11.20.15.51.55.449.0 ]--
r 112                     return n;
--[ 2018.11.20.15.51.55.602.0 ]--
r 112                     return ;
--[ 2018.11.20.15.51.57.303.0 ]--
r 112                     return a;
--[ 2018.11.20.15.51.57.439.0 ]--
r 112                     return as;
--[ 2018.11.20.15.51.57.467.0 ]--
r 112                     return asl;
--[ 2018.11.20.15.51.57.577.0 ]--
r 112                     return asle;
--[ 2018.11.20.15.51.57.993.0 ]--
r 112                     return asl;
--[ 2018.11.20.15.51.58.102.0 ]--
r 112                     return as;
--[ 2018.11.20.15.51.58.226.0 ]--
r 112                     return a;
--[ 2018.11.20.15.52.02.283.0 ]--
r 112                     return ;
--[ 2018.11.20.15.52.02.866.0 ]--
r 112                     return f;
--[ 2018.11.20.15.52.03.026.0 ]--
r 112                     return fa;
--[ 2018.11.20.15.52.03.198.0 ]--
r 112                     return fal;
--[ 2018.11.20.15.52.03.245.0 ]--
r 112                     return fals;
--[ 2018.11.20.15.52.03.338.0 ]--
r 112                     return false;
--[ 2018.11.20.15.52.09.529.0 ]--
r 115                         return t;
--[ 2018.11.20.15.52.09.701.0 ]--
r 115                         return tr;
--[ 2018.11.20.15.52.09.920.0 ]--
r 115                         return tru;
--[ 2018.11.20.15.52.10.046.0 ]--
r 115                         return true;
--[ 2018.11.20.15.52.14.722.0 ]--
r 121                     return nul;
--[ 2018.11.20.15.52.14.879.0 ]--
r 121                     return nu;
--[ 2018.11.20.15.52.15.050.0 ]--
r 121                     return n;
--[ 2018.11.20.15.52.15.238.0 ]--
r 121                     return ;
--[ 2018.11.20.15.52.17.280.0 ]--
r 121                     return f;
--[ 2018.11.20.15.52.18.213.0 ]--
r 121                     return fa;
--[ 2018.11.20.15.52.18.443.0 ]--
r 121                     return fam;
--[ 2018.11.20.15.52.18.529.0 ]--
r 121                     return fami;
--[ 2018.11.20.15.52.18.779.0 ]--
r 121                     return famis;
--[ 2018.11.20.15.52.19.029.0 ]--
r 121                     return famish;
--[ 2018.11.20.15.52.19.445.0 ]--
r 121                     return famishl;
--[ 2018.11.20.15.52.19.623.0 ]--
r 121                     return famishls;
--[ 2018.11.20.15.52.19.772.0 ]--
r 121                     return famishlse;
--[ 2018.11.20.15.52.22.829.0 ]--
r 121                     return famislse;
--[ 2018.11.20.15.52.23.157.0 ]--
r 121                     return familse;
--[ 2018.11.20.15.52.23.313.0 ]--
r 121                     return famlse;
--[ 2018.11.20.15.52.24.058.0 ]--
r 121                     return false;
--[ 2018.11.20.15.52.27.452.0 ]--
r 124                         return finger.;
--[ 2018.11.20.15.52.27.665.0 ]--
r 124                         return finger;
--[ 2018.11.20.15.52.27.852.0 ]--
r 124                         return finge;
--[ 2018.11.20.15.52.28.010.0 ]--
r 124                         return fing;
--[ 2018.11.20.15.52.28.198.0 ]--
r 124                         return fin;
--[ 2018.11.20.15.52.28.370.0 ]--
r 124                         return fi;
--[ 2018.11.20.15.52.28.634.0 ]--
r 124                         return f;
--[ 2018.11.20.15.52.28.978.0 ]--
r 124                         return ;
--[ 2018.11.20.15.52.29.744.0 ]--
r 124                         return t;
--[ 2018.11.20.15.52.30.041.0 ]--
r 124                         return tr;
--[ 2018.11.20.15.52.30.166.0 ]--
r 124                         return tru;
--[ 2018.11.20.15.52.30.306.0 ]--
r 124                         return true;
--[ 2018.11.20.15.52.39.281.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.15.52.39.281.1 ]--
CompilationStatus (AEW): 0 31 0
[Ljava.lang.String;@51deaae4
--[ 2018.11.20.15.52.43.987.0 ]--
r 132     private Point traverse(
--[ 2018.11.20.15.52.43.987.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.003.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.483.0 ]--
r 132     private Point traverse
--[ 2018.11.20.15.52.44.498.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.498.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.514.0 ]--
r 132     private Point travers
--[ 2018.11.20.15.52.44.514.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.530.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.561.0 ]--
r 132     private Point traver
--[ 2018.11.20.15.52.44.577.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.577.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.592.0 ]--
r 132     private Point trave
--[ 2018.11.20.15.52.44.592.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.608.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.608.1 ]--
r 132     private Point trav
--[ 2018.11.20.15.52.44.623.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.623.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.639.0 ]--
r 132     private Point tra
--[ 2018.11.20.15.52.44.639.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.655.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.670.0 ]--
r 132     private Point tr
--[ 2018.11.20.15.52.44.686.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.686.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.733.0 ]--
r 132     private Point t
--[ 2018.11.20.15.52.44.733.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.748.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.764.0 ]--
r 132     private Point 
--[ 2018.11.20.15.52.44.764.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.780.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.780.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.795.0 ]--
r 132     private Point
--[ 2018.11.20.15.52.44.795.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.811.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.827.0 ]--
r 132     private Poin
--[ 2018.11.20.15.52.44.846.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.854.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.861.0 ]--
r 132     private Poi
--[ 2018.11.20.15.52.44.861.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.861.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.892.0 ]--
r 132     private Po
--[ 2018.11.20.15.52.44.892.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.892.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.939.0 ]--
r 132     private P
--[ 2018.11.20.15.52.44.939.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.939.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.955.0 ]--
r 132     private 
--[ 2018.11.20.15.52.44.955.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.970.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.44.970.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.002.0 ]--
r 132     private
--[ 2018.11.20.15.52.45.002.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.002.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.143.0 ]--
r 132     privat
--[ 2018.11.20.15.52.45.159.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.159.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.174.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.190.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.190.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.206.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.221.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.300.0 ]--
r 132     priva
--[ 2018.11.20.15.52.45.300.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.316.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.470.0 ]--
r 132     priv
--[ 2018.11.20.15.52.45.470.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.470.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.564.0 ]--
r 132     pri
--[ 2018.11.20.15.52.45.579.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.579.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.720.0 ]--
r 132     pr
--[ 2018.11.20.15.52.45.720.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.735.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.907.0 ]--
r 132     p
--[ 2018.11.20.15.52.45.923.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.45.923.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.266.0 ]--
r 132     
--[ 2018.11.20.15.52.46.266.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.266.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.282.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.282.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.298.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.298.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.313.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.329.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.46.329.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.48.494.0 ]--
- 131
--[ 2018.11.20.15.52.48.510.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.48.510.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.59.175.0 ]--
+ 131     
--[ 2018.11.20.15.52.59.191.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.52.59.191.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.264.0 ]--
r 131     }
--[ 2018.11.20.15.53.00.264.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.295.0 ]--
r 102         if (this.isEmpty()){
--[ 2018.11.20.15.53.00.295.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.311.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.311.1 ]--
r 102         if (this.isEmpty()) {
--[ 2018.11.20.15.53.00.311.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.326.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.326.1 ]--
r 106             while (true) {
--[ 2018.11.20.15.53.00.326.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.1 ]--
r 107                 //comparing x's
--[ 2018.11.20.15.53.00.342.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.342.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.358.0 ]--
r 108                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.15.53.00.358.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.358.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.0 ]--
r 109                 double pValue = p.xy(finger.dir);
--[ 2018.11.20.15.53.00.373.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.373.3 ]--
r 110                 if (pValue < fingerValue) { //go down the left
--[ 2018.11.20.15.53.00.389.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.389.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.389.2 ]--
r 111                     if (finger.left == null) {
--[ 2018.11.20.15.53.00.404.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.404.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.404.2 ]--
r 112                         return false;
--[ 2018.11.20.15.53.00.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.420.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.420.2 ]--
r 113                     } else {
--[ 2018.11.20.15.53.00.420.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.442.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.445.0 ]--
r 114                         if (finger.left.p.equals(p)) {
--[ 2018.11.20.15.53.00.450.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.456.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.0 ]--
r 115                             return true;
--[ 2018.11.20.15.53.00.459.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.459.3 ]--
r 116                         }
--[ 2018.11.20.15.53.00.475.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.475.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.475.2 ]--
r 117                         finger = finger.left;
--[ 2018.11.20.15.53.00.491.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.491.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.491.2 ]--
r 118                     }
--[ 2018.11.20.15.53.00.506.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.506.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.506.2 ]--
r 119                 } else { //go down the right
--[ 2018.11.20.15.53.00.522.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.522.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.522.2 ]--
r 120                     if (finger.right == null) {
--[ 2018.11.20.15.53.00.538.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.538.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.538.2 ]--
r 121                         return false;
--[ 2018.11.20.15.53.00.553.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.553.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.553.2 ]--
r 122                     } else {
--[ 2018.11.20.15.53.00.569.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.569.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.569.2 ]--
r 123                         if (finger.right.p.equals(p)) {
--[ 2018.11.20.15.53.00.569.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.584.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.584.1 ]--
r 124                             return true;
--[ 2018.11.20.15.53.00.584.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.600.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.600.1 ]--
r 125                         }
--[ 2018.11.20.15.53.00.600.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.616.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.616.1 ]--
r 126                         finger = finger.right;
--[ 2018.11.20.15.53.00.616.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.642.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.644.0 ]--
r 127                     }
--[ 2018.11.20.15.53.00.647.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.647.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.647.2 ]--
r 128                 }
--[ 2018.11.20.15.53.00.662.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.662.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.662.2 ]--
r 129             }
--[ 2018.11.20.15.53.00.662.3 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.678.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.678.1 ]--
r 130         }
--[ 2018.11.20.15.53.00.678.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.00.693.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.12.962.0 ]--
r 54                         if (this.ge(newNode.p) == null) {
--[ 2018.11.20.15.53.12.962.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.12.978.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.165.0 ]--
r 54                         if (this.g(newNode.p) == null) {
--[ 2018.11.20.15.53.13.182.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.182.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.440.0 ]--
r 54                         if (this.(newNode.p) == null) {
--[ 2018.11.20.15.53.13.446.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.447.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.447.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.463.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.478.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.784.0 ]--
r 54                         if (this.c(newNode.p) == null) {
--[ 2018.11.20.15.53.13.784.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.799.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.799.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.815.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.13.831.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.561.0 ]--
r 54                         if (this.co(newNode.p) == null) {
--[ 2018.11.20.15.53.14.561.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.608.0 ]--
r 54                         if (this.con(newNode.p) == null) {
--[ 2018.11.20.15.53.14.623.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.623.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.670.0 ]--
r 54                         if (this.cont(newNode.p) == null) {
--[ 2018.11.20.15.53.14.686.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.686.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.811.0 ]--
r 54                         if (this.conta(newNode.p) == null) {
--[ 2018.11.20.15.53.14.811.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.811.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.842.0 ]--
r 54                         if (this.contai(newNode.p) == null) {
--[ 2018.11.20.15.53.14.842.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.858.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.937.0 ]--
r 54                         if (this.contain(newNode.p) == null) {
--[ 2018.11.20.15.53.14.943.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.14.950.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.15.019.0 ]--
r 54                         if (this.contains(newNode.p) == null) {
--[ 2018.11.20.15.53.15.019.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.15.035.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.157.0 ]--
r 43                         if (this.ge(newNode.p) == null) {
--[ 2018.11.20.15.53.20.157.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.157.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.313.0 ]--
r 43                         if (this.g(newNode.p) == null) {
--[ 2018.11.20.15.53.20.313.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.328.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.683.0 ]--
r 43                         if (this.(newNode.p) == null) {
--[ 2018.11.20.15.53.20.683.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.699.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.699.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.714.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.714.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.730.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.20.730.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.108.0 ]--
r 43                         if (this.c(newNode.p) == null) {
--[ 2018.11.20.15.53.21.108.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.124.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.124.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.139.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.139.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.155.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.155.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.710.0 ]--
r 43                         if (this.co(newNode.p) == null) {
--[ 2018.11.20.15.53.21.726.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.726.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.788.0 ]--
r 43                         if (this.con(newNode.p) == null) {
--[ 2018.11.20.15.53.21.804.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.804.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.898.0 ]--
r 43                         if (this.cont(newNode.p) == null) {
--[ 2018.11.20.15.53.21.898.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.21.916.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.064.0 ]--
r 43                         if (this.conta(newNode.p) == null) {
--[ 2018.11.20.15.53.22.070.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.077.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.212.0 ]--
r 43                         if (this.contai(newNode.p) == null) {
--[ 2018.11.20.15.53.22.212.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.212.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.243.0 ]--
r 43                         if (this.contain(newNode.p) == null) {
--[ 2018.11.20.15.53.22.258.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.258.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.337.0 ]--
r 43                         if (this.contains(newNode.p) == null) {
--[ 2018.11.20.15.53.22.337.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.22.352.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.937.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.28.985.0 ]--
r 132 
--[ 2018.11.20.15.53.29.000.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.29.000.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.30.964.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.580.0 ]--
r 43                         if (this.contains(newNode.p) == nul) {
--[ 2018.11.20.15.53.35.580.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.580.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.836.0 ]--
r 43                         if (this.contains(newNode.p) == nu) {
--[ 2018.11.20.15.53.35.852.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.35.852.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.102.0 ]--
r 43                         if (this.contains(newNode.p) == n) {
--[ 2018.11.20.15.53.36.102.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.117.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.599.0 ]--
r 43                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.36.599.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.614.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.614.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.917.0 ]--
r 43                         if (this.contains(newNode.p) == f) {
--[ 2018.11.20.15.53.36.917.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.932.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.932.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.948.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.36.948.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.026.0 ]--
r 43                         if (this.contains(newNode.p) == fa) {
--[ 2018.11.20.15.53.37.026.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.026.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.213.0 ]--
r 43                         if (this.contains(newNode.p) == fal) {
--[ 2018.11.20.15.53.37.213.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.229.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.276.0 ]--
r 43                         if (this.contains(newNode.p) == fals) {
--[ 2018.11.20.15.53.37.276.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.276.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.385.0 ]--
r 43                         if (this.contains(newNode.p) == false) {
--[ 2018.11.20.15.53.37.385.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.37.401.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.619.0 ]--
r 43                         if (this.contains(newNode.p) == fals) {
--[ 2018.11.20.15.53.38.635.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.635.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.835.0 ]--
r 43                         if (this.contains(newNode.p) == fal) {
--[ 2018.11.20.15.53.38.851.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.851.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.929.0 ]--
r 43                         if (this.contains(newNode.p) == fa) {
--[ 2018.11.20.15.53.38.929.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.38.929.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.070.0 ]--
r 43                         if (this.contains(newNode.p) == f) {
--[ 2018.11.20.15.53.39.085.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.085.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.148.0 ]--
r 43                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.39.148.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.148.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.164.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.288.0 ]--
r 43                         if (this.contains(newNode.p) ==) {
--[ 2018.11.20.15.53.39.304.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.304.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.320.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.320.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.413.0 ]--
r 43                         if (this.contains(newNode.p) =) {
--[ 2018.11.20.15.53.39.413.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.434.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.527.0 ]--
r 43                         if (this.contains(newNode.p) ) {
--[ 2018.11.20.15.53.39.527.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.543.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.543.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.887.0 ]--
r 43                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.39.902.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.902.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.918.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.39.918.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.46.359.0 ]--
r 43                         if (!this.contains(newNode.p)) {
--[ 2018.11.20.15.53.46.374.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.46.374.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.182.0 ]--
r 54                         if (this.contains(newNode.p) == nul) {
--[ 2018.11.20.15.53.52.182.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.198.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.370.0 ]--
r 54                         if (this.contains(newNode.p) == nu) {
--[ 2018.11.20.15.53.52.385.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.385.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.532.0 ]--
r 54                         if (this.contains(newNode.p) == n) {
--[ 2018.11.20.15.53.52.547.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.547.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.704.0 ]--
r 54                         if (this.contains(newNode.p) == ) {
--[ 2018.11.20.15.53.52.719.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.719.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.735.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.876.0 ]--
r 54                         if (this.contains(newNode.p) ==) {
--[ 2018.11.20.15.53.52.876.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.891.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.891.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.52.907.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.046.0 ]--
r 54                         if (this.contains(newNode.p) =) {
--[ 2018.11.20.15.53.53.062.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.062.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.250.0 ]--
r 54                         if (this.contains(newNode.p) ) {
--[ 2018.11.20.15.53.53.250.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.250.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.265.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.477.0 ]--
r 54                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.53.477.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.493.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.493.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.509.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.715.0 ]--
r 54                         if (this.contains(newNode.p) {
--[ 2018.11.20.15.53.53.718.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.718.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.734.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.734.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.53.747.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.050.0 ]--
r 54                         if (this.contains(newNode.p)) {
--[ 2018.11.20.15.53.55.065.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.065.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.065.2 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.081.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.53.55.081.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.00.158.0 ]--
r 54                         if (!this.contains(newNode.p)) {
--[ 2018.11.20.15.54.00.173.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.00.173.1 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.06.345.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.06.361.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.08.448.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree$1.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.15.54.08.448.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.55.34.246.0 ]--
r 42                         StdOut.println("hey"+this.ge(newNode.p));
--[ 2018.11.20.15.55.34.442.0 ]--
r 42                         StdOut.println("hey"+this.g(newNode.p));
--[ 2018.11.20.15.55.34.608.0 ]--
r 42                         StdOut.println("hey"+this.(newNode.p));
--[ 2018.11.20.15.55.35.172.0 ]--
r 42                         StdOut.println("hey"+this.c(newNode.p));
--[ 2018.11.20.15.55.35.447.0 ]--
r 42                         StdOut.println("hey"+this.co(newNode.p));
--[ 2018.11.20.15.55.35.560.0 ]--
r 42                         StdOut.println("hey"+this.con(newNode.p));
--[ 2018.11.20.15.55.35.767.0 ]--
r 42                         StdOut.println("hey"+this.cont(newNode.p));
--[ 2018.11.20.15.55.36.202.0 ]--
r 42                         StdOut.println("hey"+this.conta(newNode.p));
--[ 2018.11.20.15.55.36.847.0 ]--
r 42                         StdOut.println("hey"+this.contains(newNode.p));
--[ 2018.11.20.15.55.46.306.0 ]--
r 42                         StdOut.println("hey "+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.215.0 ]--
r 42                         StdOut.println("hey"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.356.0 ]--
r 42                         StdOut.println("he"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.524.0 ]--
r 42                         StdOut.println("h"+this.contains(newNode.p));
--[ 2018.11.20.15.55.47.836.0 ]--
r 42                         StdOut.println(""+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.219.0 ]--
r 42                         StdOut.println("C"+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.409.0 ]--
r 42                         StdOut.println("Co"+this.contains(newNode.p));
--[ 2018.11.20.15.55.48.921.0 ]--
r 42                         StdOut.println("Con"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.287.0 ]--
r 42                         StdOut.println("Cont"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.561.0 ]--
r 42                         StdOut.println("Conta"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.702.0 ]--
r 42                         StdOut.println("Contai"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.811.0 ]--
r 42                         StdOut.println("Contain"+this.contains(newNode.p));
--[ 2018.11.20.15.55.49.920.0 ]--
r 42                         StdOut.println("Contains"+this.contains(newNode.p));
--[ 2018.11.20.15.55.50.514.0 ]--
r 42                         StdOut.println("Contains:"+this.contains(newNode.p));
--[ 2018.11.20.15.55.50.702.0 ]--
r 42                         StdOut.println("Contains: "+this.contains(newNode.p));
--[ 2018.11.20.15.55.54.059.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.15.57.05.524.0 ]--
- 42
+ 46                         StdOut.println("Contains: "+this.contains(newNode.p));
--[ 2018.11.20.15.57.05.899.0 ]--
- 41
+ 45                         finger.left = newNode;
--[ 2018.11.20.15.57.06.341.0 ]--
- 40
+ 44                     if (finger.left == null) {
--[ 2018.11.20.15.57.07.166.0 ]--
+ 40                     if (finger.left == null) {
- 45
--[ 2018.11.20.15.57.16.853.0 ]--
- 46
--[ 2018.11.20.15.57.23.906.0 ]--
- 52
+ 56                         finger.right = newNode;
--[ 2018.11.20.15.57.24.347.0 ]--
- 51
+ 55                     if (finger.right == null) {
--[ 2018.11.20.15.57.25.079.0 ]--
+ 51                     if (finger.right == null) {
- 56
--[ 2018.11.20.15.57.34.077.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.45.57.094.0 ]--
NewLogger: P05_KDTrees
Version: 1.2
--[ 2018.11.20.18.45.57.124.0 ]--
InitTree:
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/master
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/master
/.git/logs/HEAD
/.git/refs/heads/master
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/master
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/6dc5ddfef5b3957b300c3084667ad162a308fb
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/03/0fdffe7ad2b4fa7ffba4b445b357bb11815f10
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/08/a9f02c7e3874710c0814eb9bbcff2c6d514041
/.git/objects/0a/ca4fb304501912746d83918bf9617507e49d2c
/.git/objects/0b/cb1ae2a966f7111b04ea0e920d0c8aec8d394b
/.git/objects/20/cc877669b4582f0ca99f8069928c89b7eba068
/.git/objects/24/1896b6ab1db70b89f5a07626397bc96430d912
/.git/objects/25/82cf4e84d60b07e179d99dccfe58672bfe84a8
/.git/objects/27/ef7cead6236bd6044116aa0447c8c0b46892f1
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/35/519081ac5f53e95bdf8016cad63b2894861688
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/45/87405e88145db9ac3df821688a584fb99b94d2
/.git/objects/45/fe5f4622d4bcfce09f915a052da0832b06deb9
/.git/objects/47/b741f8ac969a6f29b52d882c67dad075facb3e
/.git/objects/47/ea390db7413f9f14dfeebee9356c66046a9126
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4d/3b7e9b600cf8616e1c3bb9adb4340e06674e20
/.git/objects/4d/828aa88fc0953092223af87b5ca6ddaefc6931
/.git/objects/54/8e2ffc84bc4a94a384752713f10e01490c024d
/.git/objects/54/b37f17e70ec4b3c24cf6e6a402bf8e4faefc51
/.git/objects/55/348824c11a0b9d0e28aabf24f6c0b547f752d1
/.git/objects/55/7569dde5cab073eb6e371295eaf8b1908c5bee
/.git/objects/5d/191dd443e7f971f83983aa52238dc13ff63baf
/.git/objects/5d/ba5bf5a0f3132828af66511a85e1412816ef5f
/.git/objects/60/898cc9e038dd792d3ecec4d43f9db9cf5d99bb
/.git/objects/60/b079551c1ae0c5071d96c875663b0a0a60287e
/.git/objects/65/64d52db279c4ae8d882aacf5aa89a85e7a04de
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6f/cc24bfdb55009cc2634fa4baece3496212e6c6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/7d/3af14f39a1d8bb8b60795f2191d41ed950645d
/.git/objects/86/2b7eaa17840121ace1a93b7b67f6722d2efbc5
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/4fc1b94f6be829b0272be4921f5bb6b4d515ee
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a2/ffa17b91d6b6ddcc862798c60330d0113280a0
/.git/objects/aa/13cb9b967d67b0a39e56e35946ed7b7627f5c5
/.git/objects/aa/4a1a5d9cbc725042a565876f18e2d545715867
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/92cb0eee9bedddf80fcea0d765dddf82d44a24
/.git/objects/af/1e00febdd431c0957975c378a58600e71bda5a
/.git/objects/b0/d850e715a6f640b0a3256d04a1ad59f48c464e
/.git/objects/b1/41b5d294b30187b31a630e340a42a252487c62
/.git/objects/b1/a69ba0a6fc553f8d7c316c09b8ec88dc3b7c46
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b8/738733d008d5727dbf83dc5c458148e81f53d8
/.git/objects/bb/de676847e0c8f47afaa33492d4ac7d5b2614f6
/.git/objects/c2/98f615108f45225e2c9307c738ac9e2faa631e
/.git/objects/c3/4e4355b18e53a341f21bb028fa14238ccb5d89
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/cb/f53fd63eac8ebf4cfc3c8fa0ba72fd711eef98
/.git/objects/d6/15b718458243d665a0fe9c1df00f013d7b642e
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824
/.git/objects/d6/eee9957cee477f2040b4aa7a1513c727c0adcb
/.git/objects/d7/85e36030c693cc2668d881498096fb3cbfa0a8
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e7/4b39a669c95d10c63221b70c445ebb5a427865
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ea/e17d1788935d46b044cd7d9f12c93776847737
/.git/objects/ee/6de65c1aa55a350e46ebe1d38ff8503d7bcaaf
/.git/objects/ee/93c493f29d79bb54f7f1ff457185cd2772c4e8
/.git/objects/ef/4489f375f69581099bbf11ce1ac8fb6901c763
/.git/objects/f0/4ec327764f5180068a195efeb8bc3d760ce43d
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f4/d9ef35a1b9917cda091913db97905126c8fe01
/.git/objects/f5/489e2eed1055c7ec7a1d7337f6d6a18b92e498
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/objects/fc/ffaccf82b628f54bac5ba392691067050e5dff
/.git/objects/fe/86b7d30276d409463a9786906238815afa4617
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/.idea/P05_KDTrees.iml
/.gitignore
/readme.html
/P05_KDTrees.iml

--[ 2018.11.20.18.45.57.124.1 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2018.11.20.18.45.57.125.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2018.11.20.18.45.57.125.1 ]--
InitFile: /readme.html
<meta charset="utf-8" lang="en">

                    **P05_KDTrees**

General
========

For each of your team's implementations, explain the following (where appropriate and applicable):

- details on calling conventions, input and output data formats, limitations, bugs, and special features.
- negative aspects of your program (limitations, known bugs)
- positive aspects (extensions, special features)
- describe your choice of modularization (abstractions), data structures, and algorithms
- explain anything you did that is likely to be different from what other students may have done
- justify any design decisions for which the rationale isn't immediately clear

Feel free to modify the structure of this `readme.html` file to fit the current assignment and to fit how you wish to present your findings.



Submission
-----------

Create a zip file that contains all of your code, this `readme.html` document, and any additional files of evidence (ex: screenshots, scenes).

If helpful, use folders to divide up the subparts of your submission.



Student Info
=============

Your name:

Operating system:

Lab computer or your own computer:

Approx hours to complete assignment:

Partner's name (if applicable):

TA's or Tutor's name (if received help):

Did you receive help from your instructor?



Assignment Details
===================


Describe the `Node` data type you used to implement the 2d tree data structure.

<!-- Details and screenshots here -->


Describe your method for nearest neighbor search in a kd tree.

<!-- Details and screenshots here -->


Using the 64-bit memory cost model from the textbook and lecture, give the total memory usage in bytes of your 2d tree data structure as a function of the number of points $N$.
Use tilde notation to simplify your answer (i.e., keep the leading coefficient and discard lower-order terms).
Include the memory for all referenced objects (including `Node` and `Point` objects) except for `Value` objects (because the type is unknown and the object is owned by the client).
Also, include the memory for all referenced objects, including any references to the `Direction` enum.

bytes per `Point`:

bytes per `PSKDTree` of $N$ points: $\sim N$

<!-- Details and screenshots here -->


How many nearest neighbor calculations can your brute-force implementation perform per second for `input100K.txt` (100,000 points) and `input1M.txt` (1 million points), where the query points are random points in the unit square?
Explain how you determined the operations per second.
(Do not count the time to read in the points from file or to build the data structure.)

Repeat the question but with the 2d tree implementation.

file            | brute force | 2d tree
----------------|-------------|---------
`input100K.txt` |         $0$ |     $0$
`input1M.txt`   |         $0$ |     $0$

<!-- Details and screenshots here -->



Known bugs / limitations
-------------------------

<!-- Details and screenshots here -->


Reflection
===========

Describe whatever help (if any) that you received.
Don't include readings, lectures, but do include any help from people (including course staff, lab TAs, classmates, and friends)  and attribute them by name.

<!-- Details and screenshots here -->


Since this is an individual assignment, if you worked with a partner, assert below that the work you are turning in is your own work, and that you only did "whiteboard" work as a group.
Give one sentence explaining what each of you contributed.
If you used the code from the lab challenge, explain what is shared between you and your lab partner.

<!-- Details and screenshots here -->



Describe any serious problems you encountered.

<!-- Details and screenshots here -->


List any other comments here.
Feel free to provide any feedback on how much you learned from doing the assignment, and whether you enjoyed doing it.

<!-- Details and screenshots here -->





<!--

Leave the following, as this will format your text above to look nice in a wed browser.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2018.11.20.18.45.57.126.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2018.11.20.18.45.57.126.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2018.11.20.18.45.57.126.2 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2018.11.20.18.45.57.143.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2018.11.20.18.45.57.146.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2018.11.20.18.45.57.146.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    private RedBlackBST<Point,Value> tree;
    private MinPQ<PointDist> q;
    private MinPQ<PointDist> pq;
    private PointDist pd;
    private double dist;

    public PSBruteForce() {
        tree = new RedBlackBST<>();

    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        tree.put(p,v);
    }
    public Value get(Point p) {
        return tree.get(p);
    }
    public boolean contains(Point p) {
        return tree.contains(p);
    }
    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return tree.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        pq = new MinPQ<>();
        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            pq.insert(pd);
        }
        if(pq.isEmpty()){
            return null;
        } else {
            return pq.delMin().p(); //stack would be fine too - you just want all at once I think
        }
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return tree.get(nearest(p));
    }
    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return tree.min(); }
    public Point max() { return tree.max(); }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {

        // uses the points() method and returns the min
        // PointDist.compareTo()
        //Iterable<Point> maxPQ = new <>();
        q = new MinPQ<>();

        for (Point pt : this.points()) { // will be a linear search because we look through everything
            dist = pt.dist(p.x(), p.y()); //the distance between Point p and the Point from the iterable of Points, pt
            pd = new PointDist(pt, dist); // pt with a distance from p
            q.insert(pd);

        }

        Stack<Point> s = new Stack<>();
        while(s.size() < k) {
           // System.out.printf("q.size: %d \n",s.size());
            if(q.isEmpty()){return null;}
            s.push(q.delMin().p());
        }
        if(s.isEmpty()){
            return null;
        } else {
            return s; //stack would be fine too - you just want all at once I think*/
        }

    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return tree.size(); }
    // return whether the KDTree is empty
    public boolean isEmpty() { return tree.isEmpty(); }

    private void test(){

    }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2018.11.20.18.45.57.146.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2018.11.20.18.45.57.147.0 ]--
InitFile: /src/PSKDTree.java
import java.util.ArrayList;
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    private Node root;
    private ArrayList<Point> listOfPoints; //stackOfPoints;
    // constructor makes empty kD-tree
    public PSKDTree() {
        listOfPoints = new ArrayList<Point>();
    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
        Node newNode = new Node();
        newNode.p = p;
        newNode.v = v;
        Node finger;
        if(this.isEmpty()){
            newNode.dir = Partition.Direction.LEFTRIGHT;
            root = newNode;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double newNodeValue = newNode.p.xy(finger.dir);
                if (newNodeValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.left = newNode;
                        break; //baby
                    } else {
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        if (!this.contains(newNode.p)) {
                            listOfPoints.add(newNode.p);
                            StdOut.println(newNode.p);
                        }
                        finger.right = newNode;
                        break; //baby
                    } else {
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value get(Point p) {
        Node finger;
        if(this.isEmpty()){
            return null;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return null;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return null;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return finger.v;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public boolean contains(Point p) {
        Node finger;
        if (this.isEmpty()) {
            return false;
        } else {
            finger = root;
            while (true) {
                //comparing x's
                double fingerValue = finger.p.xy(finger.dir);
                double pValue = p.xy(finger.dir);
                if (pValue < fingerValue) { //go down the left
                    if (finger.left == null) {
                        return false;
                    } else {
                        if (finger.left.p.equals(p)) {
                            return true;
                        }
                        finger = finger.left;
                    }
                } else { //go down the right
                    if (finger.right == null) {
                        return false;
                    } else {
                        if (finger.right.p.equals(p)) {
                            return true;
                        }
                        finger = finger.right;
                    }
                }
            }
        }
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return listOfPoints; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() {
        return root==null; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2018.11.20.18.45.57.147.1 ]--
InitFile: /.gitignore
/tests/
/.idea/
/out/

--[ 2018.11.20.18.45.57.148.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2018.11.20.18.45.57.152.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2018.11.20.18.47.20.757.0 ]--
:/src/PSKDTree.java
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; 
--[ 2018.11.20.18.47.20.776.0 ]--
UpdateTree (AD): 0 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2018.11.20.18.47.20.784.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.860.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; /
--[ 2018.11.20.18.47.20.864.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.875.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.883.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.892.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.20.980.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //
--[ 2018.11.20.18.47.20.986.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.003.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.010.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.018.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.21.025.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.147.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //o
--[ 2018.11.20.18.47.23.150.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.159.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.445.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our
--[ 2018.11.20.18.47.23.448.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.457.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.677.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our 
--[ 2018.11.20.18.47.23.680.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.687.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.777.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our r
--[ 2018.11.20.18.47.23.781.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.787.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.863.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our ro
--[ 2018.11.20.18.47.23.866.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.872.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.945.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our roo
--[ 2018.11.20.18.47.23.948.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.23.956.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.259.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root
--[ 2018.11.20.18.47.24.263.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.269.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.397.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root 
--[ 2018.11.20.18.47.24.402.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.24.409.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.444.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root w
--[ 2018.11.20.18.47.25.447.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.453.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.541.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root wi
--[ 2018.11.20.18.47.25.546.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.553.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.912.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root wil
--[ 2018.11.20.18.47.25.916.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.25.922.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.026.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will
--[ 2018.11.20.18.47.26.030.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.035.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.176.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will 
--[ 2018.11.20.18.47.26.180.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.187.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.346.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will a
--[ 2018.11.20.18.47.26.351.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.358.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.451.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will al
--[ 2018.11.20.18.47.26.455.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.462.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.580.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alw
--[ 2018.11.20.18.47.26.583.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.589.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.705.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alwa
--[ 2018.11.20.18.47.26.708.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.715.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.897.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will alway
--[ 2018.11.20.18.47.26.900.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.26.905.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.104.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always
--[ 2018.11.20.18.47.27.109.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.116.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.215.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always 
--[ 2018.11.20.18.47.27.219.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.225.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.396.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always s
--[ 2018.11.20.18.47.27.399.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.404.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.539.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always st
--[ 2018.11.20.18.47.27.542.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.548.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.611.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always sta
--[ 2018.11.20.18.47.27.614.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.620.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.692.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always star
--[ 2018.11.20.18.47.27.695.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.701.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.856.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start
--[ 2018.11.20.18.47.27.859.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.27.866.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.080.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start 
--[ 2018.11.20.18.47.28.084.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.090.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.345.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start o
--[ 2018.11.20.18.47.28.348.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.353.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.431.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start ou
--[ 2018.11.20.18.47.28.435.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.440.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.847.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out
--[ 2018.11.20.18.47.28.851.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.28.856.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.226.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out 
--[ 2018.11.20.18.47.29.229.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.235.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.556.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out L
--[ 2018.11.20.18.47.29.559.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.564.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.669.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LE
--[ 2018.11.20.18.47.29.671.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.677.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.970.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEF
--[ 2018.11.20.18.47.29.973.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.29.979.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.164.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFT
--[ 2018.11.20.18.47.30.168.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.174.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.473.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTR
--[ 2018.11.20.18.47.30.476.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.482.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.585.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRI
--[ 2018.11.20.18.47.30.588.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.594.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.685.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIG
--[ 2018.11.20.18.47.30.689.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.695.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.770.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIGH
--[ 2018.11.20.18.47.30.774.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.780.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.867.0 ]--
r 31             newNode.dir = Partition.Direction.LEFTRIGHT; //our root will always start out LEFTRIGHT
--[ 2018.11.20.18.47.30.871.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.47.30.878.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.00.970.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.00.979.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.048.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.052.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.01.057.0 ]--
UpdateTree (AD): 17 17
- /out/production/P05_KDTrees/KeyPress.class
- /out/production/P05_KDTrees/Partition.class
- /out/production/P05_KDTrees/Point$3.class
- /out/production/P05_KDTrees/Point.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/Visualizer.class
- /out/production/P05_KDTrees/Point$1.class
- /out/production/P05_KDTrees/FastFoodVisualizer.class
- /out/production/P05_KDTrees/Mouse.class
- /out/production/P05_KDTrees/Point$2.class
- /out/production/P05_KDTrees/PointSearch.class
- /out/production/P05_KDTrees/Partition$Direction.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
- /out/production/P05_KDTrees/Point$4.class
- /out/production/P05_KDTrees/PointDist.class
- /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.06.232.0 ]--
UpdateTree (AD): 17 0
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2018.11.20.18.48.06.233.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.48.30.875.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P05_KDTrees/PSKDTree$1.class

--[ 2018.11.20.18.48.56.475.0 ]--
r 43                             StdOut.printl(newNode.p);
--[ 2018.11.20.18.48.56.536.0 ]--
r 43                             StdOut.print(newNode.p);
--[ 2018.11.20.18.48.57.132.0 ]--
r 43                             StdOut.printf(newNode.p);
--[ 2018.11.20.18.48.58.781.0 ]--
r 43                             StdOut.printf("newNode.p);
--[ 2018.11.20.18.48.59.231.0 ]--
r 43                             StdOut.printf(""newNode.p);
--[ 2018.11.20.18.48.59.895.0 ]--
r 43                             StdOut.printf("",newNode.p);
--[ 2018.11.20.18.49.05.078.0 ]--
r 43                             StdOut.printf("n",newNode.p);
--[ 2018.11.20.18.49.05.249.0 ]--
r 43                             StdOut.printf("ne",newNode.p);
--[ 2018.11.20.18.49.05.381.0 ]--
r 43                             StdOut.printf("new",newNode.p);
--[ 2018.11.20.18.49.05.763.0 ]--
r 43                             StdOut.printf("newN",newNode.p);
--[ 2018.11.20.18.49.05.910.0 ]--
r 43                             StdOut.printf("newNo",newNode.p);
--[ 2018.11.20.18.49.06.006.0 ]--
r 43                             StdOut.printf("newNod",newNode.p);
--[ 2018.11.20.18.49.06.172.0 ]--
r 43                             StdOut.printf("newNode",newNode.p);
--[ 2018.11.20.18.49.06.326.0 ]--
r 43                             StdOut.printf("newNode.",newNode.p);
--[ 2018.11.20.18.49.06.742.0 ]--
r 43                             StdOut.printf("newNode.p",newNode.p);
--[ 2018.11.20.18.49.08.105.0 ]--
r 43                             StdOut.printf("newNode.p:",newNode.p);
--[ 2018.11.20.18.49.08.401.0 ]--
r 43                             StdOut.printf("newNode.p: ",newNode.p);
--[ 2018.11.20.18.49.09.829.0 ]--
r 43                             StdOut.printf("newNode.p: /",newNode.p);
--[ 2018.11.20.18.49.10.490.0 ]--
r 43                             StdOut.printf("newNode.p: ",newNode.p);
--[ 2018.11.20.18.49.10.873.0 ]--
r 43                             StdOut.printf("newNode.p: \",newNode.p);
--[ 2018.11.20.18.49.11.316.0 ]--
r 43                             StdOut.printf("newNode.p: \n",newNode.p);
--[ 2018.11.20.18.49.17.767.0 ]--
r 54                             StdOut.printf("newNode.p: \n",newNode.p);
--[ 2018.11.20.18.49.24.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.49.34.806.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.35.140.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.49.37.710.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.37.981.0 ]--
r 54                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.49.42.568.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.49.51.928.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.52.329.0 ]--
r 54                             StdOut.printf("newNode.p: %i\n",newNode.p);
--[ 2018.11.20.18.49.55.398.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.49.56.080.0 ]--
r 43                             StdOut.printf("newNode.p: %i\n",newNode.p);
--[ 2018.11.20.18.49.58.685.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.50.23.216.0 ]--
r 43                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.50.23.327.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.25.201.0 ]--
r 54                             StdOut.printf("newNode.p: %\n",newNode.p);
--[ 2018.11.20.18.50.25.342.0 ]--
r 54                             StdOut.printf("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.30.502.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.50.49.867.0 ]--
r 43                             StdOut.printf("newNode.p: %f\n"newNode.p);
--[ 2018.11.20.18.50.50.127.0 ]--
r 43                             StdOut.printf("newNode.p: %f\nnewNode.p);
--[ 2018.11.20.18.50.50.182.0 ]--
r 43                             StdOut.printf("newNode.p: %f\newNode.p);
--[ 2018.11.20.18.50.50.201.0 ]--
r 43                             StdOut.printf("newNode.p: %fnewNode.p);
--[ 2018.11.20.18.50.50.233.0 ]--
r 43                             StdOut.printf("newNode.p: %newNode.p);
--[ 2018.11.20.18.50.50.267.0 ]--
r 43                             StdOut.printf("newNode.p: newNode.p);
--[ 2018.11.20.18.50.50.322.0 ]--
r 43                             StdOut.printf("newNode.p:newNode.p);
--[ 2018.11.20.18.50.50.357.0 ]--
r 43                             StdOut.printf("newNode.pnewNode.p);
--[ 2018.11.20.18.50.50.414.0 ]--
r 43                             StdOut.printf("newNode.newNode.p);
--[ 2018.11.20.18.50.50.463.0 ]--
r 43                             StdOut.printf("newNodnewNode.p);
--[ 2018.11.20.18.50.50.486.0 ]--
r 43                             StdOut.printf("newNonewNode.p);
--[ 2018.11.20.18.50.50.518.0 ]--
r 43                             StdOut.printf("newNnewNode.p);
--[ 2018.11.20.18.50.50.579.0 ]--
r 43                             StdOut.printf("newnewNode.p);
--[ 2018.11.20.18.50.50.640.0 ]--
r 43                             StdOut.printf("nnewNode.p);
--[ 2018.11.20.18.50.50.927.0 ]--
r 43                             StdOut.printf("newNode.p);
--[ 2018.11.20.18.50.51.213.0 ]--
r 43                             StdOut.printf(newNode.p);
--[ 2018.11.20.18.50.52.520.0 ]--
r 43                             StdOut.print(newNode.p);
--[ 2018.11.20.18.50.52.949.0 ]--
r 43                             StdOut.printl(newNode.p);
--[ 2018.11.20.18.50.53.160.0 ]--
r 43                             StdOut.println(newNode.p);
--[ 2018.11.20.18.50.56.842.0 ]--
r 54                             StdOut.print("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.56.976.0 ]--
r 54                             StdOut.prin("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.646.0 ]--
r 54                             StdOut.print("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.879.0 ]--
r 54                             StdOut.printl("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.50.57.962.0 ]--
r 54                             StdOut.println("newNode.p: %f\n",newNode.p);
--[ 2018.11.20.18.51.00.362.0 ]--
r 54                             StdOut.println("newNode.p: %f\n"newNode.p);
--[ 2018.11.20.18.51.00.616.0 ]--
r 54                             StdOut.println("newNode.p: %f\nnewNode.p);
--[ 2018.11.20.18.51.00.683.0 ]--
r 54                             StdOut.println("newNode.p: %f\newNode.p);
--[ 2018.11.20.18.51.00.734.0 ]--
r 54                             StdOut.println("newNode.p: %fnewNode.p);
--[ 2018.11.20.18.51.00.792.0 ]--
r 54                             StdOut.println("newNode.p: newNode.p);
--[ 2018.11.20.18.51.00.843.0 ]--
r 54                             StdOut.println("newNode.p:newNode.p);
--[ 2018.11.20.18.51.00.887.0 ]--
r 54                             StdOut.println("newNode.newNode.p);
--[ 2018.11.20.18.51.00.919.0 ]--
r 54                             StdOut.println("newNodenewNode.p);
--[ 2018.11.20.18.51.00.968.0 ]--
r 54                             StdOut.println("newNodnewNode.p);
--[ 2018.11.20.18.51.01.007.0 ]--
r 54                             StdOut.println("newNonewNode.p);
--[ 2018.11.20.18.51.01.063.0 ]--
r 54                             StdOut.println("newNnewNode.p);
--[ 2018.11.20.18.51.01.098.0 ]--
r 54                             StdOut.println("nenewNode.p);
--[ 2018.11.20.18.51.01.126.0 ]--
r 54                             StdOut.println("nnewNode.p);
--[ 2018.11.20.18.51.01.167.0 ]--
r 54                             StdOut.println("newNode.p);
--[ 2018.11.20.18.51.01.569.0 ]--
r 54                             StdOut.println(newNode.p);
--[ 2018.11.20.18.51.04.729.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.18.52.47.027.0 ]--
+ 19     
--[ 2018.11.20.18.52.48.159.0 ]--
r 19     p
--[ 2018.11.20.18.52.48.292.0 ]--
r 19     pr
--[ 2018.11.20.18.52.48.395.0 ]--
r 19     pri
--[ 2018.11.20.18.52.48.644.0 ]--
r 19     priv
--[ 2018.11.20.18.52.48.695.0 ]--
r 19     priva
--[ 2018.11.20.18.52.48.778.0 ]--
r 19     privat
--[ 2018.11.20.18.52.48.864.0 ]--
r 19     private
--[ 2018.11.20.18.52.50.232.0 ]--
r 19     private 
--[ 2018.11.20.18.52.50.382.0 ]--
r 19     private i
--[ 2018.11.20.18.52.50.481.0 ]--
r 19     private in
--[ 2018.11.20.18.52.50.599.0 ]--
r 19     private int
--[ 2018.11.20.18.52.51.369.0 ]--
r 19     private int 
--[ 2018.11.20.18.52.54.946.0 ]--
r 19     private int t
--[ 2018.11.20.18.52.55.127.0 ]--
r 19     private int tr
--[ 2018.11.20.18.52.55.376.0 ]--
r 19     private int tre
--[ 2018.11.20.18.52.55.446.0 ]--
r 19     private int tree
--[ 2018.11.20.18.52.56.192.0 ]--
r 19     private int treeS
--[ 2018.11.20.18.52.56.660.0 ]--
r 19     private int treeSi
--[ 2018.11.20.18.52.56.762.0 ]--
r 19     private int treeSiz
--[ 2018.11.20.18.52.56.830.0 ]--
r 19     private int treeSize
--[ 2018.11.20.18.52.57.014.0 ]--
r 19     private int treeSize;
--[ 2018.11.20.18.53.04.571.0 ]--
+ 23         
--[ 2018.11.20.18.53.04.972.0 ]--
r 23         t
--[ 2018.11.20.18.53.05.084.0 ]--
r 23         tr
--[ 2018.11.20.18.53.05.357.0 ]--
r 23         tre
--[ 2018.11.20.18.53.05.514.0 ]--
r 23         tree
--[ 2018.11.20.18.53.06.263.0 ]--
r 23         tre
--[ 2018.11.20.18.53.06.375.0 ]--
r 23         tr
--[ 2018.11.20.18.53.06.473.0 ]--
r 23         t
--[ 2018.11.20.18.53.06.599.0 ]--
r 23         
--[ 2018.11.20.18.53.16.200.0 ]--
+ 48                         
--[ 2018.11.20.18.53.17.138.0 ]--
r 48                         t
--[ 2018.11.20.18.53.17.373.0 ]--
r 48                         tr
--[ 2018.11.20.18.53.17.923.0 ]--
r 48                         treeSize
--[ 2018.11.20.18.53.18.811.0 ]--
r 48                         treeSize+
--[ 2018.11.20.18.53.18.953.0 ]--
r 48                         treeSize++
--[ 2018.11.20.18.53.19.292.0 ]--
r 48                         treeSize++;
--[ 2018.11.20.18.53.23.493.0 ]--
+ 60                         
--[ 2018.11.20.18.53.23.842.0 ]--
r 60                         t
--[ 2018.11.20.18.53.24.051.0 ]--
r 60                         tr
--[ 2018.11.20.18.53.24.190.0 ]--
r 60                         tre
--[ 2018.11.20.18.53.24.685.0 ]--
r 60                         treeSize
--[ 2018.11.20.18.53.25.354.0 ]--
r 60                         treeSize+
--[ 2018.11.20.18.53.25.469.0 ]--
r 60                         treeSize++
--[ 2018.11.20.18.53.25.693.0 ]--
r 60                         treeSize++;
--[ 2018.11.20.18.53.41.511.0 ]--
r 165     public int size() { return ; }
--[ 2018.11.20.18.53.42.004.0 ]--
r 165     public int size() { return t; }
--[ 2018.11.20.18.53.42.212.0 ]--
r 165     public int size() { return tr; }
--[ 2018.11.20.18.53.42.460.0 ]--
r 165     public int size() { return tre; }
--[ 2018.11.20.18.53.42.604.0 ]--
r 165     public int size() { return tree; }
--[ 2018.11.20.18.53.43.062.0 ]--
r 165     public int size() { return treeS; }
--[ 2018.11.20.18.53.43.214.0 ]--
r 165     public int size() { return treeSi; }
--[ 2018.11.20.18.53.43.308.0 ]--
r 165     public int size() { return treeSiz; }
--[ 2018.11.20.18.53.43.379.0 ]--
r 165     public int size() { return treeSize; }
--[ 2018.11.20.18.53.58.441.0 ]--
r 165     public int size() { return treeSize; } 
--[ 2018.11.20.18.53.58.524.0 ]--
r 165     public int size() { return treeSize; } /
--[ 2018.11.20.18.53.58.644.0 ]--
r 165     public int size() { return treeSize; } //
--[ 2018.11.20.18.53.59.011.0 ]--
r 165     public int size() { return treeSize; } //i
--[ 2018.11.20.18.53.59.078.0 ]--
r 165     public int size() { return treeSize; } //in
--[ 2018.11.20.18.53.59.142.0 ]--
r 165     public int size() { return treeSize; } //inc
--[ 2018.11.20.18.53.59.327.0 ]--
r 165     public int size() { return treeSize; } //incr
--[ 2018.11.20.18.53.59.395.0 ]--
r 165     public int size() { return treeSize; } //incre
--[ 2018.11.20.18.53.59.611.0 ]--
r 165     public int size() { return treeSize; } //increm
--[ 2018.11.20.18.53.59.729.0 ]--
r 165     public int size() { return treeSize; } //increme
--[ 2018.11.20.18.53.59.870.0 ]--
r 165     public int size() { return treeSize; } //incremen
--[ 2018.11.20.18.53.59.979.0 ]--
r 165     public int size() { return treeSize; } //increment
--[ 2018.11.20.18.54.00.078.0 ]--
r 165     public int size() { return treeSize; } //incremente
--[ 2018.11.20.18.54.00.260.0 ]--
r 165     public int size() { return treeSize; } //incremented
--[ 2018.11.20.18.54.00.363.0 ]--
r 165     public int size() { return treeSize; } //incremented 
--[ 2018.11.20.18.54.00.462.0 ]--
r 165     public int size() { return treeSize; } //incremented i
--[ 2018.11.20.18.54.00.515.0 ]--
r 165     public int size() { return treeSize; } //incremented in
--[ 2018.11.20.18.54.00.630.0 ]--
r 165     public int size() { return treeSize; } //incremented in 
--[ 2018.11.20.18.54.00.812.0 ]--
r 165     public int size() { return treeSize; } //incremented in p
--[ 2018.11.20.18.54.00.937.0 ]--
r 165     public int size() { return treeSize; } //incremented in pu
--[ 2018.11.20.18.54.01.063.0 ]--
r 165     public int size() { return treeSize; } //incremented in put
--[ 2018.11.20.18.54.02.559.0 ]--
r 165     public int size() { return treeSize; } //incremented in put,
--[ 2018.11.20.18.54.02.700.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, 
--[ 2018.11.20.18.54.02.764.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, w
--[ 2018.11.20.18.54.02.952.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, wh
--[ 2018.11.20.18.54.03.007.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, whi
--[ 2018.11.20.18.54.03.070.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, whic
--[ 2018.11.20.18.54.03.150.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which
--[ 2018.11.20.18.54.03.287.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which 
--[ 2018.11.20.18.54.03.374.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which i
--[ 2018.11.20.18.54.03.485.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is
--[ 2018.11.20.18.54.03.567.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is 
--[ 2018.11.20.18.54.03.702.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is f
--[ 2018.11.20.18.54.03.760.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fi
--[ 2018.11.20.18.54.03.837.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fin
--[ 2018.11.20.18.54.03.874.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine
--[ 2018.11.20.18.54.04.256.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine 
--[ 2018.11.20.18.54.04.384.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine s
--[ 2018.11.20.18.54.04.502.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine si
--[ 2018.11.20.18.54.04.620.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine sin
--[ 2018.11.20.18.54.04.688.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine sinc
--[ 2018.11.20.18.54.04.770.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since
--[ 2018.11.20.18.54.04.826.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since 
--[ 2018.11.20.18.54.05.023.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since w
--[ 2018.11.20.18.54.05.090.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we
--[ 2018.11.20.18.54.05.191.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we 
--[ 2018.11.20.18.54.05.336.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we h
--[ 2018.11.20.18.54.05.393.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we ha
--[ 2018.11.20.18.54.05.460.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we hav
--[ 2018.11.20.18.54.05.626.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have
--[ 2018.11.20.18.54.05.729.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have 
--[ 2018.11.20.18.54.06.059.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have n
--[ 2018.11.20.18.54.06.274.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no
--[ 2018.11.20.18.54.06.856.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no 
--[ 2018.11.20.18.54.07.486.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "
--[ 2018.11.20.18.54.09.603.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "d
--[ 2018.11.20.18.54.09.815.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "de
--[ 2018.11.20.18.54.09.936.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "del
--[ 2018.11.20.18.54.10.014.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "dele
--[ 2018.11.20.18.54.10.202.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delet
--[ 2018.11.20.18.54.10.417.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delete
--[ 2018.11.20.18.54.10.696.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "delet
--[ 2018.11.20.18.54.10.776.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "dele
--[ 2018.11.20.18.54.10.886.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "del
--[ 2018.11.20.18.54.11.020.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "de
--[ 2018.11.20.18.54.11.113.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "d
--[ 2018.11.20.18.54.11.219.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no "
--[ 2018.11.20.18.54.11.616.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no 
--[ 2018.11.20.18.54.11.717.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no d
--[ 2018.11.20.18.54.11.901.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no de
--[ 2018.11.20.18.54.11.963.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no del
--[ 2018.11.20.18.54.12.106.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no dele
--[ 2018.11.20.18.54.12.189.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delet
--[ 2018.11.20.18.54.12.315.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete
--[ 2018.11.20.18.54.14.293.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete 
--[ 2018.11.20.18.54.14.409.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete f
--[ 2018.11.20.18.54.14.525.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete fo
--[ 2018.11.20.18.54.14.623.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for
--[ 2018.11.20.18.54.14.690.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for 
--[ 2018.11.20.18.54.14.793.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for o
--[ 2018.11.20.18.54.14.862.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for ou
--[ 2018.11.20.18.54.14.928.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our
--[ 2018.11.20.18.54.15.027.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our 
--[ 2018.11.20.18.54.15.366.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K
--[ 2018.11.20.18.54.15.947.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K_
--[ 2018.11.20.18.54.16.566.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K
--[ 2018.11.20.18.54.16.745.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-
--[ 2018.11.20.18.54.17.097.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D
--[ 2018.11.20.18.54.17.533.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D 
--[ 2018.11.20.18.54.18.182.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D T
--[ 2018.11.20.18.54.18.352.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tr
--[ 2018.11.20.18.54.18.550.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tre
--[ 2018.11.20.18.54.18.685.0 ]--
r 165     public int size() { return treeSize; } //incremented in put, which is fine since we have no delete for our K-D Tree
--[ 2018.11.20.18.54.47.032.0 ]--
r 23 
--[ 2018.11.20.19.01.00.884.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); 
--[ 2018.11.20.19.01.01.468.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); /
--[ 2018.11.20.19.01.01.569.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); //
--[ 2018.11.20.19.01.01.888.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // 
--[ 2018.11.20.19.01.01.999.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // a
--[ 2018.11.20.19.01.02.104.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an
--[ 2018.11.20.19.01.02.255.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an 
--[ 2018.11.20.19.01.02.395.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an i
--[ 2018.11.20.19.01.02.531.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an it
--[ 2018.11.20.19.01.02.670.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an ite
--[ 2018.11.20.19.01.02.721.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iter
--[ 2018.11.20.19.01.02.808.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an itera
--[ 2018.11.20.19.01.03.022.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterab
--[ 2018.11.20.19.01.03.091.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterabl
--[ 2018.11.20.19.01.03.185.0 ]--
r 22         listOfPoints = new ArrayList<Point>(); // an iterable
--[ 2018.11.20.19.02.43.240.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.19.05.23.855.0 ]--
r 145         return nul;
--[ 2018.11.20.19.05.24.022.0 ]--
r 145         return nu;
--[ 2018.11.20.19.05.24.110.0 ]--
r 145         return n;
--[ 2018.11.20.19.05.24.225.0 ]--
r 145         return ;
--[ 2018.11.20.19.05.24.728.0 ]--
r 145         return l;
--[ 2018.11.20.19.05.24.849.0 ]--
r 145         return li;
--[ 2018.11.20.19.05.24.970.0 ]--
r 145         return lis;
--[ 2018.11.20.19.05.25.182.0 ]--
r 145         return list;
--[ 2018.11.20.19.05.25.527.0 ]--
r 145         return listO;
--[ 2018.11.20.19.05.25.838.0 ]--
r 145         return listOf;
--[ 2018.11.20.19.05.26.189.0 ]--
r 145         return listOfPoints;
--[ 2018.11.20.19.06.54.794.0 ]--
r 145         return listOfPoint;
--[ 2018.11.20.19.06.55.067.0 ]--
r 145         return listOfPoin;
--[ 2018.11.20.19.06.55.106.0 ]--
r 145         return listOfPoi;
--[ 2018.11.20.19.06.55.139.0 ]--
r 145         return listOfPo;
--[ 2018.11.20.19.06.55.183.0 ]--
r 145         return listOfP;
--[ 2018.11.20.19.06.55.244.0 ]--
r 145         return listO;
--[ 2018.11.20.19.06.55.267.0 ]--
r 145         return list;
--[ 2018.11.20.19.06.55.322.0 ]--
r 145         return lis;
--[ 2018.11.20.19.06.55.368.0 ]--
r 145         return li;
--[ 2018.11.20.19.06.55.537.0 ]--
r 145         return l;
--[ 2018.11.20.19.06.56.095.0 ]--
r 145         return ;
--[ 2018.11.20.19.06.56.819.0 ]--
r 145         return n;
--[ 2018.11.20.19.06.57.053.0 ]--
r 145         return nu;
--[ 2018.11.20.19.06.57.239.0 ]--
r 145         return nul;
--[ 2018.11.20.19.06.57.333.0 ]--
r 145         return null;
--[ 2018.11.20.19.09.08.256.0 ]--
+ 145         
--[ 2018.11.20.19.09.08.410.0 ]--
+ 145         
--[ 2018.11.20.19.09.20.509.0 ]--
r 145         f
--[ 2018.11.20.19.09.20.606.0 ]--
r 145         fo
--[ 2018.11.20.19.09.20.722.0 ]--
r 145         for
--[ 2018.11.20.19.09.24.231.0 ]--
r 145         for()
--[ 2018.11.20.19.09.25.538.0 ]--
r 145         for(){
--[ 2018.11.20.19.09.25.772.0 ]--
+ 146 
+ 147 }
--[ 2018.11.20.19.09.25.846.0 ]--
r 147         }
--[ 2018.11.20.19.09.25.887.0 ]--
r 146             
--[ 2018.11.20.19.09.28.977.0 ]--
r 145         for(P){
--[ 2018.11.20.19.09.29.624.0 ]--
r 145         for(Po){
--[ 2018.11.20.19.09.29.725.0 ]--
r 145         for(Poi){
--[ 2018.11.20.19.09.29.810.0 ]--
r 145         for(Poin){
--[ 2018.11.20.19.09.29.949.0 ]--
r 145         for(Point){
--[ 2018.11.20.19.09.30.369.0 ]--
r 145         for(Point ){
--[ 2018.11.20.19.09.30.560.0 ]--
r 145         for(Point p){
--[ 2018.11.20.19.09.31.353.0 ]--
r 145         for(Point pt){
--[ 2018.11.20.19.09.32.200.0 ]--
r 145         for(Point pt:){
--[ 2018.11.20.19.09.34.054.0 ]--
r 145         for(Point pt: ){
--[ 2018.11.20.19.09.34.485.0 ]--
r 145         for(Point pt:){
--[ 2018.11.20.19.09.34.634.0 ]--
r 145         for(Point pt){
--[ 2018.11.20.19.09.34.757.0 ]--
r 145         for(Point pt ){
--[ 2018.11.20.19.09.35.060.0 ]--
r 145         for(Point pt :){
--[ 2018.11.20.19.09.35.261.0 ]--
r 145         for(Point pt : ){
--[ 2018.11.20.19.09.35.447.0 ]--
r 145         for(Point pt : l){
--[ 2018.11.20.19.09.35.564.0 ]--
r 145         for(Point pt : li){
--[ 2018.11.20.19.09.35.652.0 ]--
r 145         for(Point pt : lis){
--[ 2018.11.20.19.09.35.751.0 ]--
r 145         for(Point pt : list){
--[ 2018.11.20.19.09.36.119.0 ]--
r 145         for(Point pt : listo){
--[ 2018.11.20.19.09.36.653.0 ]--
r 145         for(Point pt : listOfPoints){
--[ 2018.11.20.19.11.54.572.0 ]--
+ 145         
--[ 2018.11.20.19.11.55.090.0 ]--
r 145         l
--[ 2018.11.20.19.11.55.235.0 ]--
r 145         li
--[ 2018.11.20.19.11.55.330.0 ]--
r 145         lis
--[ 2018.11.20.19.11.55.513.0 ]--
r 145         list
--[ 2018.11.20.19.11.55.676.0 ]--
r 145         listo
--[ 2018.11.20.19.11.56.046.0 ]--
r 145         listOfPoints
--[ 2018.11.20.19.11.56.479.0 ]--
r 145         listOfPoints.
--[ 2018.11.20.19.12.41.893.0 ]--
r 145         listOfPoints
--[ 2018.11.20.19.12.42.139.0 ]--
r 145         listOfPoint
--[ 2018.11.20.19.12.42.192.0 ]--
r 145         listOfPoin
--[ 2018.11.20.19.12.42.212.0 ]--
r 145         listOfPoi
--[ 2018.11.20.19.12.42.237.0 ]--
r 145         listOfPo
--[ 2018.11.20.19.12.42.310.0 ]--
r 145         listOfP
--[ 2018.11.20.19.12.42.345.0 ]--
r 145         listOf
--[ 2018.11.20.19.12.42.395.0 ]--
r 145         listO
--[ 2018.11.20.19.12.42.696.0 ]--
r 145         list
--[ 2018.11.20.19.12.42.822.0 ]--
r 145         lis
--[ 2018.11.20.19.12.43.032.0 ]--
r 145         li
--[ 2018.11.20.19.12.43.225.0 ]--
r 145         l
--[ 2018.11.20.19.12.43.669.0 ]--
r 145         
--[ 2018.11.20.19.13.33.577.0 ]--
- 145
--[ 2018.11.20.19.13.48.574.0 ]--
+ 148         
--[ 2018.11.20.19.13.49.148.0 ]--
r 148         Q
--[ 2018.11.20.19.13.49.481.0 ]--
r 148         Qu
--[ 2018.11.20.19.13.49.583.0 ]--
r 148         Que
--[ 2018.11.20.19.13.49.688.0 ]--
r 148         Queu
--[ 2018.11.20.19.13.49.835.0 ]--
r 148         Queue
--[ 2018.11.20.19.13.51.416.0 ]--
r 148         Queue<>
--[ 2018.11.20.19.13.51.943.0 ]--
r 148         Queue<P>
--[ 2018.11.20.19.13.52.171.0 ]--
r 148         Queue<Pa>
--[ 2018.11.20.19.13.52.227.0 ]--
r 148         Queue<Par>
--[ 2018.11.20.19.13.52.381.0 ]--
r 148         Queue<Part>
--[ 2018.11.20.19.13.52.484.0 ]--
r 148         Queue<Parti>
--[ 2018.11.20.19.13.52.690.0 ]--
r 148         Queue<Partit>
--[ 2018.11.20.19.13.52.735.0 ]--
r 148         Queue<Partiti>
--[ 2018.11.20.19.13.52.799.0 ]--
r 148         Queue<Partitio>
--[ 2018.11.20.19.13.52.854.0 ]--
r 148         Queue<Partition>
--[ 2018.11.20.19.13.54.592.0 ]--
r 148         Queue<Partition> 
--[ 2018.11.20.19.13.54.863.0 ]--
r 148         Queue<Partition> q
--[ 2018.11.20.19.13.55.716.0 ]--
r 148         Queue<Partition> q 
--[ 2018.11.20.19.13.55.832.0 ]--
r 148         Queue<Partition> q =
--[ 2018.11.20.19.13.55.930.0 ]--
r 148         Queue<Partition> q = 
--[ 2018.11.20.19.13.56.123.0 ]--
r 148         Queue<Partition> q = n
--[ 2018.11.20.19.13.56.172.0 ]--
r 148         Queue<Partition> q = ne
--[ 2018.11.20.19.13.56.270.0 ]--
r 148         Queue<Partition> q = new
--[ 2018.11.20.19.13.56.905.0 ]--
r 148         Queue<Partition> q = new 
--[ 2018.11.20.19.13.57.186.0 ]--
r 148         Queue<Partition> q = new Q
--[ 2018.11.20.19.13.57.341.0 ]--
r 148         Queue<Partition> q = new Qu
--[ 2018.11.20.19.13.57.443.0 ]--
r 148         Queue<Partition> q = new Que
--[ 2018.11.20.19.13.57.587.0 ]--
r 148         Queue<Partition> q = new Queu
--[ 2018.11.20.19.13.57.690.0 ]--
r 148         Queue<Partition> q = new Queue
--[ 2018.11.20.19.13.59.036.0 ]--
r 148         Queue<Partition> q = new QueueM
--[ 2018.11.20.19.13.59.554.0 ]--
r 148         Queue<Partition> q = new Queue
--[ 2018.11.20.19.13.59.988.0 ]--
r 148         Queue<Partition> q = new Queue<>
--[ 2018.11.20.19.14.00.800.0 ]--
r 148         Queue<Partition> q = new Queue<>()
--[ 2018.11.20.19.14.01.128.0 ]--
r 148         Queue<Partition> q = new Queue<>();
--[ 2018.11.20.19.14.17.942.0 ]--
r 150         return nul;
--[ 2018.11.20.19.14.18.103.0 ]--
r 150         return nu;
--[ 2018.11.20.19.14.18.244.0 ]--
r 150         return n;
--[ 2018.11.20.19.14.18.628.0 ]--
r 150         return ;
--[ 2018.11.20.19.14.18.711.0 ]--
r 150         return q;
--[ 2018.11.20.19.14.21.414.0 ]--
- 148
--[ 2018.11.20.19.14.23.096.0 ]--
+ 145         
--[ 2018.11.20.19.14.23.391.0 ]--
+ 145                 Queue<Partition> q = new Queue<>();
r 146 
--[ 2018.11.20.19.14.23.414.0 ]--
r 145         Queue<Partition> q = new Queue<>();
--[ 2018.11.20.19.14.27.051.0 ]--
r 148             q
--[ 2018.11.20.19.14.27.253.0 ]--
r 148             q.
--[ 2018.11.20.19.14.27.566.0 ]--
r 148             q.e
--[ 2018.11.20.19.14.28.232.0 ]--
r 148             q.en
--[ 2018.11.20.19.14.29.333.0 ]--
r 148             q.enqueue
--[ 2018.11.20.19.14.29.346.0 ]--
r 148             q.enqueue()
--[ 2018.11.20.19.14.29.355.0 ]--
r 148             q.enqueue();
--[ 2018.11.20.19.14.33.378.0 ]--
r 148             q.enqueue(p);
--[ 2018.11.20.19.14.33.472.0 ]--
r 148             q.enqueue(pa);
--[ 2018.11.20.19.14.33.558.0 ]--
r 148             q.enqueue(par);
--[ 2018.11.20.19.14.33.771.0 ]--
r 148             q.enqueue(part);
--[ 2018.11.20.19.14.34.534.0 ]--
r 148             q.enqueue(parti);
--[ 2018.11.20.19.14.34.882.0 ]--
r 148             q.enqueue(partit);
--[ 2018.11.20.19.14.34.948.0 ]--
r 148             q.enqueue(partiti);
--[ 2018.11.20.19.14.35.047.0 ]--
r 148             q.enqueue(partitio);
--[ 2018.11.20.19.14.35.133.0 ]--
r 148             q.enqueue(partition);
--[ 2018.11.20.19.14.40.040.0 ]--
+ 148             
--[ 2018.11.20.19.14.41.463.0 ]--
r 148             P
--[ 2018.11.20.19.14.41.626.0 ]--
r 148             Pa
--[ 2018.11.20.19.14.41.679.0 ]--
r 148             Par
--[ 2018.11.20.19.14.41.812.0 ]--
r 148             Part
--[ 2018.11.20.19.14.42.274.0 ]--
r 148             Par
--[ 2018.11.20.19.14.42.362.0 ]--
r 148             Pa
--[ 2018.11.20.19.14.42.469.0 ]--
r 148             P
--[ 2018.11.20.19.14.42.897.0 ]--
r 148             
--[ 2018.11.20.19.14.52.163.0 ]--
+ 146         
--[ 2018.11.20.19.14.52.655.0 ]--
r 146         P
--[ 2018.11.20.19.14.52.793.0 ]--
r 146         Pa
--[ 2018.11.20.19.14.52.889.0 ]--
r 146         Par
--[ 2018.11.20.19.14.53.093.0 ]--
r 146         Part
--[ 2018.11.20.19.14.53.166.0 ]--
r 146         Parti
--[ 2018.11.20.19.14.53.402.0 ]--
r 146         Partit
--[ 2018.11.20.19.14.53.502.0 ]--
r 146         Partiti
--[ 2018.11.20.19.14.53.569.0 ]--
r 146         Partitio
--[ 2018.11.20.19.14.53.638.0 ]--
r 146         Partition
--[ 2018.11.20.19.14.53.890.0 ]--
r 146         Partition 
--[ 2018.11.20.19.14.54.024.0 ]--
r 146         Partition p
--[ 2018.11.20.19.14.54.151.0 ]--
r 146         Partition pa
--[ 2018.11.20.19.14.54.204.0 ]--
r 146         Partition par
--[ 2018.11.20.19.14.54.326.0 ]--
r 146         Partition part
--[ 2018.11.20.19.14.54.471.0 ]--
r 146         Partition parti
--[ 2018.11.20.19.14.54.602.0 ]--
r 146         Partition partit
--[ 2018.11.20.19.14.54.629.0 ]--
r 146         Partition partiti
--[ 2018.11.20.19.14.54.713.0 ]--
r 146         Partition partitio
--[ 2018.11.20.19.14.54.802.0 ]--
r 146         Partition partition
--[ 2018.11.20.19.14.55.024.0 ]--
r 146         Partition partition;
--[ 2018.11.20.19.15.01.005.0 ]--
+ 149             
--[ 2018.11.20.19.15.09.018.0 ]--
r 149             p
--[ 2018.11.20.19.15.09.255.0 ]--
r 149             pa
--[ 2018.11.20.19.15.09.325.0 ]--
r 149             par
--[ 2018.11.20.19.15.09.535.0 ]--
r 149             part
--[ 2018.11.20.19.15.09.627.0 ]--
r 149             parti
--[ 2018.11.20.19.15.09.818.0 ]--
r 149             partit
--[ 2018.11.20.19.15.09.920.0 ]--
r 149             partiti
--[ 2018.11.20.19.15.09.961.0 ]--
r 149             partitio
--[ 2018.11.20.19.15.10.055.0 ]--
r 149             partition
--[ 2018.11.20.19.15.10.874.0 ]--
r 149             partition 
--[ 2018.11.20.19.15.10.974.0 ]--
r 149             partition =
--[ 2018.11.20.19.15.11.088.0 ]--
r 149             partition = 
--[ 2018.11.20.19.15.16.553.0 ]--
r 149             partition = n
--[ 2018.11.20.19.15.16.626.0 ]--
r 149             partition = ne
--[ 2018.11.20.19.15.16.739.0 ]--
r 149             partition = new
--[ 2018.11.20.19.15.17.023.0 ]--
r 149             partition = new 
--[ 2018.11.20.19.15.17.747.0 ]--
r 149             partition = new P
--[ 2018.11.20.19.15.17.934.0 ]--
r 149             partition = new Pa
--[ 2018.11.20.19.15.18.038.0 ]--
r 149             partition = new Par
--[ 2018.11.20.19.15.18.213.0 ]--
r 149             partition = new Part
--[ 2018.11.20.19.15.18.353.0 ]--
r 149             partition = new Parti
--[ 2018.11.20.19.15.18.503.0 ]--
r 149             partition = new Partit
--[ 2018.11.20.19.15.18.575.0 ]--
r 149             partition = new Partiti
--[ 2018.11.20.19.15.18.654.0 ]--
r 149             partition = new Partitio
--[ 2018.11.20.19.15.18.715.0 ]--
r 149             partition = new Partition
--[ 2018.11.20.19.15.18.827.0 ]--
r 149             partition = new Partition;
--[ 2018.11.20.19.15.19.805.0 ]--
+ 150             
--[ 2018.11.20.19.15.20.047.0 ]--
r 150             p
--[ 2018.11.20.19.15.20.145.0 ]--
r 150             pa
--[ 2018.11.20.19.15.20.245.0 ]--
r 150             par
--[ 2018.11.20.19.15.20.347.0 ]--
r 150             part
--[ 2018.11.20.19.15.20.490.0 ]--
r 150             parti
--[ 2018.11.20.19.15.20.658.0 ]--
r 150             partit
--[ 2018.11.20.19.15.20.805.0 ]--
r 150             partitio
--[ 2018.11.20.19.15.20.880.0 ]--
r 150             partition
--[ 2018.11.20.19.15.21.032.0 ]--
r 150             partition.
--[ 2018.11.20.19.15.24.133.0 ]--
r 150             partition.dir
--[ 2018.11.20.19.15.24.150.0 ]--
r 150             partition.dir()
--[ 2018.11.20.19.15.25.620.0 ]--
r 150             partition.dir() 
--[ 2018.11.20.19.15.25.784.0 ]--
r 150             partition.dir() =
--[ 2018.11.20.19.15.25.884.0 ]--
r 150             partition.dir() = 
--[ 2018.11.20.19.15.31.030.0 ]--
r 147     
--[ 2018.11.20.19.15.31.386.0 ]--
r 147         
--[ 2018.11.20.19.15.32.081.0 ]--
r 147         l
--[ 2018.11.20.19.15.32.305.0 ]--
r 147         li
--[ 2018.11.20.19.15.32.435.0 ]--
r 147         lis
--[ 2018.11.20.19.15.32.603.0 ]--
r 147         list
--[ 2018.11.20.19.15.33.776.0 ]--
r 147         lis
--[ 2018.11.20.19.15.33.884.0 ]--
r 147         li
--[ 2018.11.20.19.15.33.999.0 ]--
r 147         l
--[ 2018.11.20.19.15.34.103.0 ]--
r 147         
--[ 2018.11.20.19.15.40.167.0 ]--
- 149
r 149           
--[ 2018.11.20.19.15.41.657.0 ]--
+ 147         
--[ 2018.11.20.19.15.45.511.0 ]--
r 146         Partition partition ;
--[ 2018.11.20.19.15.45.728.0 ]--
r 146         Partition partition =;
--[ 2018.11.20.19.15.45.950.0 ]--
r 146         Partition partition = ;
--[ 2018.11.20.19.15.46.787.0 ]--
r 146         Partition partition = n;
--[ 2018.11.20.19.15.47.063.0 ]--
r 146         Partition partition = ne;
--[ 2018.11.20.19.15.47.158.0 ]--
r 146         Partition partition = new;
--[ 2018.11.20.19.15.47.550.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.47.764.0 ]--
r 146         Partition partition = new p;
--[ 2018.11.20.19.15.47.867.0 ]--
r 146         Partition partition = new pa;
--[ 2018.11.20.19.15.47.972.0 ]--
r 146         Partition partition = new par;
--[ 2018.11.20.19.15.48.956.0 ]--
r 146         Partition partition = new part;
--[ 2018.11.20.19.15.49.191.0 ]--
r 146         Partition partition = new parti;
--[ 2018.11.20.19.15.49.342.0 ]--
r 146         Partition partition = new partit;
--[ 2018.11.20.19.15.49.389.0 ]--
r 146         Partition partition = new partiti;
--[ 2018.11.20.19.15.49.443.0 ]--
r 146         Partition partition = new partitio;
--[ 2018.11.20.19.15.49.531.0 ]--
r 146         Partition partition = new partition;
--[ 2018.11.20.19.15.50.326.0 ]--
r 146         Partition partition = new partitio;
--[ 2018.11.20.19.15.50.619.0 ]--
r 146         Partition partition = new partiti;
--[ 2018.11.20.19.15.50.689.0 ]--
r 146         Partition partition = new partit;
--[ 2018.11.20.19.15.50.731.0 ]--
r 146         Partition partition = new part;
--[ 2018.11.20.19.15.50.790.0 ]--
r 146         Partition partition = new par;
--[ 2018.11.20.19.15.50.862.0 ]--
r 146         Partition partition = new p;
--[ 2018.11.20.19.15.50.895.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.51.035.0 ]--
r 146         Partition partition = new;
--[ 2018.11.20.19.15.51.382.0 ]--
r 146         Partition partition = new ;
--[ 2018.11.20.19.15.51.591.0 ]--
r 146         Partition partition = new P;
--[ 2018.11.20.19.15.51.808.0 ]--
r 146         Partition partition = new Pa;
--[ 2018.11.20.19.15.51.844.0 ]--
r 146         Partition partition = new Par;
--[ 2018.11.20.19.15.51.989.0 ]--
r 146         Partition partition = new Part;
--[ 2018.11.20.19.15.52.525.0 ]--
r 146         Partition partition = new Partition;
--[ 2018.11.20.19.15.52.544.0 ]--
r 146         Partition partition = new Partition();
--[ 2018.11.20.19.15.54.124.0 ]--
+ 147         
--[ 2018.11.20.19.15.54.566.0 ]--
+ 147         
--[ 2018.11.20.19.15.55.097.0 ]--
r 148         p
--[ 2018.11.20.19.15.55.168.0 ]--
r 148         pa
--[ 2018.11.20.19.15.55.268.0 ]--
r 148         par
--[ 2018.11.20.19.15.55.916.0 ]--
r 148         part
--[ 2018.11.20.19.15.56.041.0 ]--
r 148         parti
--[ 2018.11.20.19.15.56.217.0 ]--
r 148         partit
--[ 2018.11.20.19.15.56.317.0 ]--
r 148         partiti
--[ 2018.11.20.19.15.56.388.0 ]--
r 148         partitio
--[ 2018.11.20.19.15.56.485.0 ]--
r 148         partition
--[ 2018.11.20.19.15.56.608.0 ]--
r 148         partition.
--[ 2018.11.20.19.15.56.817.0 ]--
r 148         partition.d
--[ 2018.11.20.19.15.56.984.0 ]--
r 148         partition.di
--[ 2018.11.20.19.15.57.152.0 ]--
r 148         partition.dir
--[ 2018.11.20.19.16.00.107.0 ]--
r 148         partition.dir 
--[ 2018.11.20.19.16.00.257.0 ]--
r 148         partition.dir =
--[ 2018.11.20.19.16.00.355.0 ]--
r 148         partition.dir = 
--[ 2018.11.20.19.16.02.519.0 ]--
r 148         partition.dir =
--[ 2018.11.20.19.16.02.800.0 ]--
r 148         partition.dir 
--[ 2018.11.20.19.16.03.470.0 ]--
r 148         partition.dir
--[ 2018.11.20.19.16.06.185.0 ]--
r 148         partition.di
--[ 2018.11.20.19.16.06.368.0 ]--
r 148         partition.d
--[ 2018.11.20.19.16.06.665.0 ]--
r 148         partition.
--[ 2018.11.20.19.16.07.475.0 ]--
r 148         partition.p
--[ 2018.11.20.19.16.09.672.0 ]--
r 148         partition.
--[ 2018.11.20.19.16.11.031.0 ]--
r 148         partition
--[ 2018.11.20.19.16.41.192.0 ]--
r 148         partitio
--[ 2018.11.20.19.16.41.479.0 ]--
r 148         partiti
--[ 2018.11.20.19.16.41.500.0 ]--
r 148         partit
--[ 2018.11.20.19.16.41.564.0 ]--
r 148         parti
--[ 2018.11.20.19.16.41.602.0 ]--
r 148         part
--[ 2018.11.20.19.16.41.638.0 ]--
r 148         pa
--[ 2018.11.20.19.16.41.940.0 ]--
r 148         p
--[ 2018.11.20.19.16.42.078.0 ]--
r 148         
--[ 2018.11.20.19.16.47.339.0 ]--
r 146         Partition partition = new Partition(a);
--[ 2018.11.20.19.16.47.763.0 ]--
r 146         Partition partition = new Partition(ar);
--[ 2018.11.20.19.16.47.897.0 ]--
r 146         Partition partition = new Partition(arr);
--[ 2018.11.20.19.16.48.636.0 ]--
r 146         Partition partition = new Partition(ar);
--[ 2018.11.20.19.16.48.760.0 ]--
r 146         Partition partition = new Partition(a);
--[ 2018.11.20.19.16.49.328.0 ]--
r 146         Partition partition = new Partition();
--[ 2018.11.20.19.16.49.531.0 ]--
r 146         Partition partition = new Partition(l);
--[ 2018.11.20.19.16.49.707.0 ]--
r 146         Partition partition = new Partition(li);
--[ 2018.11.20.19.16.49.754.0 ]--
r 146         Partition partition = new Partition(lis);
--[ 2018.11.20.19.16.49.900.0 ]--
r 146         Partition partition = new Partition(list);
--[ 2018.11.20.19.16.50.297.0 ]--
r 146         Partition partition = new Partition(listOfPoints);
--[ 2018.11.20.19.16.51.507.0 ]--
r 146         Partition partition = new Partition(listOfPoints[]);
--[ 2018.11.20.19.16.52.348.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0]);
--[ 2018.11.20.19.16.54.497.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],);
--[ 2018.11.20.19.17.12.612.0 ]--
r 146         Partition partition = new Partition(c);
--[ 2018.11.20.19.17.14.670.0 ]--
r 146         Partition partition = new Partition(c)z;
--[ 2018.11.20.19.17.15.676.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],);
--[ 2018.11.20.19.17.19.641.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[0],);
--[ 2018.11.20.19.17.20.675.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[0],,);
--[ 2018.11.20.19.17.21.957.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[],,);
--[ 2018.11.20.19.17.22.067.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],,);
--[ 2018.11.20.19.17.23.798.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],);
--[ 2018.11.20.19.17.26.339.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],l);
--[ 2018.11.20.19.17.26.558.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],li);
--[ 2018.11.20.19.17.27.374.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints);
--[ 2018.11.20.19.17.28.464.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[]);
--[ 2018.11.20.19.17.28.746.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[0]);
--[ 2018.11.20.19.17.29.745.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0],listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.18.04.985.0 ]--
r 147 
r 148 
r 149 
r 150 
r 152 
r 153 
r 156 
--[ 2018.11.20.19.31.49.527.0 ]--
r 146         Partition partition = new Partition(listOfPoints[0,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.49.711.0 ]--
r 146         Partition partition = new Partition(listOfPoints[,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.49.971.0 ]--
r 146         Partition partition = new Partition(listOfPoints,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.645.0 ]--
r 146         Partition partition = new Partition(listOfPoints.,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.788.0 ]--
r 146         Partition partition = new Partition(listOfPoints.g,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.50.972.0 ]--
r 146         Partition partition = new Partition(listOfPoints.ge,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.51.047.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get,listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.51.335.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(),listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.52.034.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[1],listOfPoints[0].);
--[ 2018.11.20.19.31.54.671.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[1,listOfPoints[0].);
--[ 2018.11.20.19.31.54.857.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints[,listOfPoints[0].);
--[ 2018.11.20.19.31.54.995.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints,listOfPoints[0].);
--[ 2018.11.20.19.31.55.590.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.,listOfPoints[0].);
--[ 2018.11.20.19.31.55.712.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.g,listOfPoints[0].);
--[ 2018.11.20.19.31.55.869.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.ge,listOfPoints[0].);
--[ 2018.11.20.19.31.55.982.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get,listOfPoints[0].);
--[ 2018.11.20.19.31.56.215.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(),listOfPoints[0].);
--[ 2018.11.20.19.31.56.486.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0].);
--[ 2018.11.20.19.32.01.534.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0]);
--[ 2018.11.20.19.32.01.805.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[0);
--[ 2018.11.20.19.32.01.823.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoints[);
--[ 2018.11.20.19.32.01.944.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoint);
--[ 2018.11.20.19.32.01.990.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPoi);
--[ 2018.11.20.19.32.02.017.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfPo);
--[ 2018.11.20.19.32.02.068.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOfP);
--[ 2018.11.20.19.32.02.114.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),listOf);
--[ 2018.11.20.19.32.02.158.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),list);
--[ 2018.11.20.19.32.02.226.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),lis);
--[ 2018.11.20.19.32.02.503.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),li);
--[ 2018.11.20.19.32.02.567.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),l);
--[ 2018.11.20.19.32.02.724.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),);
--[ 2018.11.20.19.32.07.202.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),L);
--[ 2018.11.20.19.32.07.560.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LE);
--[ 2018.11.20.19.32.07.832.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LEF);
--[ 2018.11.20.19.32.10.610.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.626.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),LEFTRIGHT);
--[ 2018.11.20.19.32.10.637.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),.LEFTRIGHT);
--[ 2018.11.20.19.32.10.650.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.668.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1),Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.10.724.0 ]--
r 146         Partition partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.22.077.0 ]--
r 146         Partition partition; = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.22.349.0 ]--
+ 146         Partition partition;
r 147         = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.065.0 ]--
r 147         p= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.206.0 ]--
r 147         pa= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.293.0 ]--
r 147         par= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.499.0 ]--
r 147         part= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.682.0 ]--
r 147         parti= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.885.0 ]--
r 147         partit= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.23.959.0 ]--
r 147         partiti= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.033.0 ]--
r 147         partitio= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.071.0 ]--
r 147         partition= new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.32.24.384.0 ]--
r 147         partition = new Partition(listOfPoints.get(0),listOfPoints.get(1), Partition.Direction.LEFTRIGHT);
--[ 2018.11.20.19.33.53.606.0 ]--
r 148     
--[ 2018.11.20.19.33.53.847.0 ]--
r 148         
--[ 2018.11.20.19.33.54.697.0 ]--
r 148         q
--[ 2018.11.20.19.33.54.894.0 ]--
r 148         q.
--[ 2018.11.20.19.33.55.380.0 ]--
r 148         q.e
--[ 2018.11.20.19.33.55.515.0 ]--
r 148         q.en
--[ 2018.11.20.19.33.55.764.0 ]--
r 148         q.enq
--[ 2018.11.20.19.33.56.004.0 ]--
r 148         q.enqu
--[ 2018.11.20.19.33.56.529.0 ]--
r 148         q.enque
--[ 2018.11.20.19.33.56.745.0 ]--
r 148         q.enqueu
--[ 2018.11.20.19.33.56.846.0 ]--
r 148         q.enqueue
--[ 2018.11.20.19.33.57.288.0 ]--
r 148         q.enqueue()
--[ 2018.11.20.19.33.57.557.0 ]--
r 148         q.enqueue(p)
--[ 2018.11.20.19.33.57.702.0 ]--
r 148         q.enqueue(pa)
--[ 2018.11.20.19.33.57.759.0 ]--
r 148         q.enqueue(par)
--[ 2018.11.20.19.33.58.016.0 ]--
r 148         q.enqueue(pari)
--[ 2018.11.20.19.33.58.396.0 ]--
r 148         q.enqueue(par)
--[ 2018.11.20.19.33.58.468.0 ]--
r 148         q.enqueue(part)
--[ 2018.11.20.19.33.58.632.0 ]--
r 148         q.enqueue(parti)
--[ 2018.11.20.19.33.58.747.0 ]--
r 148         q.enqueue(partit)
--[ 2018.11.20.19.33.58.852.0 ]--
r 148         q.enqueue(partiti)
--[ 2018.11.20.19.33.58.899.0 ]--
r 148         q.enqueue(partitio)
--[ 2018.11.20.19.33.58.984.0 ]--
r 148         q.enqueue(partition)
--[ 2018.11.20.19.34.00.959.0 ]--
r 148         q.enqueue(partition);
--[ 2018.11.20.19.35.53.250.0 ]--
+ 147         
--[ 2018.11.20.19.38.41.428.0 ]--
r 147 
--[ 2018.11.20.20.12.09.187.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.di);
--[ 2018.11.20.20.12.09.315.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.d);
--[ 2018.11.20.20.12.09.398.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.10.079.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.n);
--[ 2018.11.20.20.12.10.298.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.ne);
--[ 2018.11.20.20.12.10.374.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.nex);
--[ 2018.11.20.20.12.10.572.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.next);
--[ 2018.11.20.20.12.11.686.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.nex);
--[ 2018.11.20.20.12.11.977.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.ne);
--[ 2018.11.20.20.12.12.113.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.n);
--[ 2018.11.20.20.12.12.421.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.12.602.0 ]--
r 39                 double fingerValue = finger.p.xy(finger);
--[ 2018.11.20.20.12.12.982.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.);
--[ 2018.11.20.20.12.17.494.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.d);
--[ 2018.11.20.20.12.17.683.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.di);
--[ 2018.11.20.20.12.17.795.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.20.12.18.370.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir.);
--[ 2018.11.20.20.12.21.827.0 ]--
r 39                 double fingerValue = finger.p.xy(finger.dir);
--[ 2018.11.20.20.12.30.762.0 ]--
+ 34             
--[ 2018.11.20.20.12.31.100.0 ]--
r 34             f
--[ 2018.11.20.20.12.31.163.0 ]--
r 34             fi
--[ 2018.11.20.20.12.31.265.0 ]--
r 34             fin
--[ 2018.11.20.20.12.31.350.0 ]--
r 34             find
--[ 2018.11.20.20.12.31.784.0 ]--
r 34             fin
--[ 2018.11.20.20.12.31.857.0 ]--
r 34             fing
--[ 2018.11.20.20.12.31.967.0 ]--
r 34             finge
--[ 2018.11.20.20.12.32.087.0 ]--
r 34             finger
--[ 2018.11.20.20.12.32.164.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.32.549.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.33.000.0 ]--
r 34             finger.p.
--[ 2018.11.20.20.12.37.516.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.37.692.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.37.873.0 ]--
r 34             finger
--[ 2018.11.20.20.12.38.145.0 ]--
r 34             finge
--[ 2018.11.20.20.12.39.466.0 ]--
r 34             finger
--[ 2018.11.20.20.12.39.605.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.39.895.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.40.195.0 ]--
r 34             finger.pa
--[ 2018.11.20.20.12.40.323.0 ]--
r 34             finger.par
--[ 2018.11.20.20.12.40.697.0 ]--
r 34             finger.part
--[ 2018.11.20.20.12.40.829.0 ]--
r 34             finger.parti
--[ 2018.11.20.20.12.41.285.0 ]--
r 34             finger.part
--[ 2018.11.20.20.12.41.438.0 ]--
r 34             finger.par
--[ 2018.11.20.20.12.42.310.0 ]--
r 34             finger.pa
--[ 2018.11.20.20.12.42.654.0 ]--
r 34             finger.p
--[ 2018.11.20.20.12.43.051.0 ]--
r 34             finger.
--[ 2018.11.20.20.12.43.562.0 ]--
r 34             finger
--[ 2018.11.20.20.12.43.852.0 ]--
r 34             finge
--[ 2018.11.20.20.12.43.876.0 ]--
r 34             fing
--[ 2018.11.20.20.12.43.935.0 ]--
r 34             fin
--[ 2018.11.20.20.12.44.008.0 ]--
r 34             f
--[ 2018.11.20.20.12.44.052.0 ]--
r 34             
--[ 2018.11.20.20.12.44.351.0 ]--
- 34
--[ 2018.11.20.20.28.12.968.0 ]--
+ 37             
--[ 2018.11.20.20.28.13.525.0 ]--
r 37             f
--[ 2018.11.20.20.28.13.738.0 ]--
r 37             fi
--[ 2018.11.20.20.28.13.800.0 ]--
r 37             fin
--[ 2018.11.20.20.28.13.900.0 ]--
r 37             fing
--[ 2018.11.20.20.28.14.051.0 ]--
r 37             finge
--[ 2018.11.20.20.28.14.163.0 ]--
r 37             finger
--[ 2018.11.20.20.28.14.323.0 ]--
r 37             finger.
--[ 2018.11.20.20.28.15.342.0 ]--
r 37             finger.d
--[ 2018.11.20.20.28.15.494.0 ]--
r 37             finger.di
--[ 2018.11.20.20.28.15.660.0 ]--
r 37             finger.dir
--[ 2018.11.20.20.28.15.878.0 ]--
r 37             finger.dir 
--[ 2018.11.20.20.28.16.557.0 ]--
r 37             finger.dir =
--[ 2018.11.20.20.28.17.061.0 ]--
r 37             finger.dir = 
--[ 2018.11.20.20.28.17.337.0 ]--
r 37             finger.dir = P
--[ 2018.11.20.20.28.17.468.0 ]--
r 37             finger.dir = Pa
--[ 2018.11.20.20.28.17.568.0 ]--
r 37             finger.dir = Par
--[ 2018.11.20.20.28.17.716.0 ]--
r 37             finger.dir = Part
--[ 2018.11.20.20.28.17.850.0 ]--
r 37             finger.dir = Parti
--[ 2018.11.20.20.28.18.203.0 ]--
r 37             finger.dir = Partit
--[ 2018.11.20.20.28.18.308.0 ]--
r 37             finger.dir = Partiti
--[ 2018.11.20.20.28.18.416.0 ]--
r 37             finger.dir = Partitio
--[ 2018.11.20.20.28.18.456.0 ]--
r 37             finger.dir = Partition
--[ 2018.11.20.20.28.18.667.0 ]--
r 37             finger.dir = Partition.
--[ 2018.11.20.20.28.19.832.0 ]--
r 37             finger.dir = Partition.nextDirection
--[ 2018.11.20.20.28.19.843.0 ]--
r 37             finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.28.26.050.0 ]--
r 37             finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.28.33.716.0 ]--
r 37            / finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.28.33.845.0 ]--
r 37            // finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.29.55.659.0 ]--
r 37            / finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.29.56.174.0 ]--
r 37             finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.01.615.0 ]--
r 37             ifinger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.01.766.0 ]--
r 37             iffinger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.03.813.0 ]--
r 37             if(finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.04.210.0 ]--
r 37             if()finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.04.864.0 ]--
r 37             if(){finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.05.079.0 ]--
+ 37             if(){
+ 38 finger.dir = Partition.nextDirection();
r 39 }
--[ 2018.11.20.20.30.05.100.0 ]--
r 38                 finger.dir = Partition.nextDirection();
r 39             }
--[ 2018.11.20.20.30.20.314.0 ]--
r 39             
--[ 2018.11.20.20.30.20.549.0 ]--
- 39
--[ 2018.11.20.20.30.20.625.0 ]--
r 38                 finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.30.20.688.0 ]--
r 38                 finger.dir = Partition.nextDirection(
--[ 2018.11.20.20.30.20.761.0 ]--
r 38                 finger.dir = Partition.nextDirection
--[ 2018.11.20.20.30.22.368.0 ]--
r 38                 finger.dir = Partition.nextDirection()
--[ 2018.11.20.20.30.22.847.0 ]--
r 38                 finger.dir = Partition.nextDirection();
--[ 2018.11.20.20.30.23.882.0 ]--
r 37             if()
--[ 2018.11.20.20.30.24.055.0 ]--
r 37             if(
--[ 2018.11.20.20.30.24.124.0 ]--
r 37             if
--[ 2018.11.20.20.30.24.283.0 ]--
r 37             i
--[ 2018.11.20.20.30.24.403.0 ]--
r 37             
--[ 2018.11.20.20.30.44.188.0 ]--
+ 26     
--[ 2018.11.20.20.30.44.472.0 ]--
r 26     /
--[ 2018.11.20.20.30.44.658.0 ]--
r 26     //
--[ 2018.11.20.20.30.45.649.0 ]--
r 26     //T
--[ 2018.11.20.20.30.46.318.0 ]--
r 26     //To
--[ 2018.11.20.20.30.47.079.0 ]--
r 26     //T
--[ 2018.11.20.20.30.47.171.0 ]--
r 26     //
--[ 2018.11.20.20.30.47.280.0 ]--
r 26     // 
--[ 2018.11.20.20.30.47.611.0 ]--
r 26     // t
--[ 2018.11.20.20.30.48.116.0 ]--
r 26     // to
--[ 2018.11.20.20.30.48.359.0 ]--
r 26     // tod
--[ 2018.11.20.20.30.48.457.0 ]--
r 26     // todo
--[ 2018.11.20.20.30.48.571.0 ]--
r 26     // todo 
--[ 2018.11.20.20.30.49.928.0 ]--
r 26     // todo s
--[ 2018.11.20.20.30.50.105.0 ]--
r 26     // todo sadlkfj
--[ 2018.11.20.20.30.50.254.0 ]--
r 26     // todo sadlkfjls
--[ 2018.11.20.20.30.50.342.0 ]--
r 26     // todo sadlkfjlsfj
--[ 2018.11.20.20.30.51.109.0 ]--
r 26     // todo sadlkfjlsf
--[ 2018.11.20.20.30.51.344.0 ]--
r 26     // todo sadlkfjls
--[ 2018.11.20.20.30.51.436.0 ]--
r 26     // todo sadlkfj
--[ 2018.11.20.20.30.51.500.0 ]--
r 26     // todo sadlk
--[ 2018.11.20.20.30.51.567.0 ]--
r 26     // todo sad
--[ 2018.11.20.20.30.51.591.0 ]--
r 26     // todo sa
--[ 2018.11.20.20.30.51.656.0 ]--
r 26     // todo s
--[ 2018.11.20.20.30.52.071.0 ]--
r 26     // todo 
--[ 2018.11.20.20.30.53.073.0 ]--
r 26     // todo u
--[ 2018.11.20.20.30.53.219.0 ]--
r 26     // todo up
--[ 2018.11.20.20.30.53.403.0 ]--
r 26     // todo upd
--[ 2018.11.20.20.30.53.508.0 ]--
r 26     // todo upda
--[ 2018.11.20.20.30.53.692.0 ]--
r 26     // todo updat
--[ 2018.11.20.20.30.53.730.0 ]--
r 26     // todo update
--[ 2018.11.20.20.30.53.913.0 ]--
r 26     // todo update 
--[ 2018.11.20.20.30.54.084.0 ]--
r 26     // todo update t
--[ 2018.11.20.20.30.54.359.0 ]--
r 26     // todo update 
--[ 2018.11.20.20.30.54.618.0 ]--
r 26     // todo update
--[ 2018.11.20.20.30.54.692.0 ]--
r 26     // todo updat
--[ 2018.11.20.20.30.54.761.0 ]--
r 26     // todo upd
--[ 2018.11.20.20.30.54.826.0 ]--
r 26     // todo u
--[ 2018.11.20.20.30.54.845.0 ]--
r 26     // todo
--[ 2018.11.20.20.30.55.074.0 ]--
r 26     // tod
--[ 2018.11.20.20.30.55.246.0 ]--
r 26     // to
--[ 2018.11.20.20.30.55.324.0 ]--
r 26     // t
--[ 2018.11.20.20.30.55.797.0 ]--
r 26     // 
--[ 2018.11.20.20.30.55.980.0 ]--
r 26     // T
--[ 2018.11.20.20.30.56.054.0 ]--
r 26     // TO
--[ 2018.11.20.20.30.56.648.0 ]--
r 26     // TOD
--[ 2018.11.20.20.30.56.799.0 ]--
r 26     // TODO
--[ 2018.11.20.20.30.56.982.0 ]--
r 26     // TODO 
--[ 2018.11.20.20.30.57.400.0 ]--
r 26     // TODO u
--[ 2018.11.20.20.30.57.498.0 ]--
r 26     // TODO up
--[ 2018.11.20.20.30.57.553.0 ]--
r 26     // TODO upd
--[ 2018.11.20.20.30.57.708.0 ]--
r 26     // TODO upda
--[ 2018.11.20.20.30.57.868.0 ]--
r 26     // TODO updat
--[ 2018.11.20.20.30.58.162.0 ]--
r 26     // TODO update
--[ 2018.11.20.20.30.58.269.0 ]--
r 26     // TODO update 
--[ 2018.11.20.20.30.58.435.0 ]--
r 26     // TODO update t
--[ 2018.11.20.20.30.58.520.0 ]--
r 26     // TODO update th
--[ 2018.11.20.20.30.58.622.0 ]--
r 26     // TODO update the
--[ 2018.11.20.20.30.58.710.0 ]--
r 26     // TODO update the 
--[ 2018.11.20.20.31.00.425.0 ]--
r 26     // TODO update the d
--[ 2018.11.20.20.31.00.564.0 ]--
r 26     // TODO update the di
--[ 2018.11.20.20.31.00.627.0 ]--
r 26     // TODO update the dir
--[ 2018.11.20.20.31.00.808.0 ]--
r 26     // TODO update the dire
--[ 2018.11.20.20.31.00.991.0 ]--
r 26     // TODO update the direc
--[ 2018.11.20.20.31.01.175.0 ]--
r 26     // TODO update the direct
--[ 2018.11.20.20.31.01.259.0 ]--
r 26     // TODO update the directi
--[ 2018.11.20.20.31.01.315.0 ]--
r 26     // TODO update the directio
--[ 2018.11.20.20.31.01.390.0 ]--
r 26     // TODO update the direction
--[ 2018.11.20.20.31.01.643.0 ]--
r 26     // TODO update the direction.
--[ 2018.11.20.20.31.01.812.0 ]--
r 26     // TODO update the direction. 
--[ 2018.11.20.20.31.02.076.0 ]--
r 26     // TODO update the direction. C
--[ 2018.11.20.20.31.02.187.0 ]--
r 26     // TODO update the direction. Cu
--[ 2018.11.20.20.31.02.309.0 ]--
r 26     // TODO update the direction. Cur
--[ 2018.11.20.20.31.02.415.0 ]--
r 26     // TODO update the direction. Curr
--[ 2018.11.20.20.31.02.496.0 ]--
r 26     // TODO update the direction. Curre
--[ 2018.11.20.20.31.02.659.0 ]--
r 26     // TODO update the direction. Curren
--[ 2018.11.20.20.31.02.802.0 ]--
r 26     // TODO update the direction. Current
--[ 2018.11.20.20.31.02.885.0 ]--
r 26     // TODO update the direction. Currentl
--[ 2018.11.20.20.31.03.196.0 ]--
r 26     // TODO update the direction. Currently
--[ 2018.11.20.20.31.03.475.0 ]--
r 26     // TODO update the direction. Currently 
--[ 2018.11.20.20.31.03.688.0 ]--
r 26     // TODO update the direction. Currently u
--[ 2018.11.20.20.31.03.980.0 ]--
r 26     // TODO update the direction. Currently 
--[ 2018.11.20.20.31.04.093.0 ]--
r 26     // TODO update the direction. Currently i
--[ 2018.11.20.20.31.04.152.0 ]--
r 26     // TODO update the direction. Currently it
--[ 2018.11.20.20.31.04.298.0 ]--
r 26     // TODO update the direction. Currently it 
--[ 2018.11.20.20.31.04.483.0 ]--
r 26     // TODO update the direction. Currently it j
--[ 2018.11.20.20.31.04.618.0 ]--
r 26     // TODO update the direction. Currently it ju
--[ 2018.11.20.20.31.04.698.0 ]--
r 26     // TODO update the direction. Currently it jus
--[ 2018.11.20.20.31.04.765.0 ]--
r 26     // TODO update the direction. Currently it just
--[ 2018.11.20.20.31.04.865.0 ]--
r 26     // TODO update the direction. Currently it just 
--[ 2018.11.20.20.31.06.471.0 ]--
r 26     // TODO update the direction. Currently it just s
--[ 2018.11.20.20.31.06.639.0 ]--
r 26     // TODO update the direction. Currently it just st
--[ 2018.11.20.20.31.06.747.0 ]--
r 26     // TODO update the direction. Currently it just sti
--[ 2018.11.20.20.31.06.903.0 ]--
r 26     // TODO update the direction. Currently it just stic
--[ 2018.11.20.20.31.06.959.0 ]--
r 26     // TODO update the direction. Currently it just stick
--[ 2018.11.20.20.31.07.088.0 ]--
r 26     // TODO update the direction. Currently it just sticks
--[ 2018.11.20.20.31.07.177.0 ]--
r 26     // TODO update the direction. Currently it just sticks 
--[ 2018.11.20.20.31.07.246.0 ]--
r 26     // TODO update the direction. Currently it just sticks t
--[ 2018.11.20.20.31.07.370.0 ]--
r 26     // TODO update the direction. Currently it just sticks to
--[ 2018.11.20.20.31.07.438.0 ]--
r 26     // TODO update the direction. Currently it just sticks to 
--[ 2018.11.20.20.31.07.655.0 ]--
r 26     // TODO update the direction. Currently it just sticks to l
--[ 2018.11.20.20.31.08.232.0 ]--
r 26     // TODO update the direction. Currently it just sticks to 
--[ 2018.11.20.20.31.08.488.0 ]--
r 26     // TODO update the direction. Currently it just sticks to L
--[ 2018.11.20.20.31.09.201.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Le
--[ 2018.11.20.20.31.09.329.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Lef
--[ 2018.11.20.20.31.09.533.0 ]--
r 26     // TODO update the direction. Currently it just sticks to Left
--[ 2018.11.20.20.31.09.909.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftR
--[ 2018.11.20.20.31.09.980.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRi
--[ 2018.11.20.20.31.10.067.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRig
--[ 2018.11.20.20.31.10.191.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRigh
--[ 2018.11.20.20.31.10.312.0 ]--
r 26     // TODO update the direction. Currently it just sticks to LeftRight
--[ 2018.11.20.20.31.11.543.0 ]--
+ 27     
--[ 2018.11.20.20.31.35.072.0 ]--
+ 35             
--[ 2018.11.20.20.31.35.815.0 ]--
r 35             r
--[ 2018.11.20.20.31.36.432.0 ]--
r 35             ro
--[ 2018.11.20.20.31.36.944.0 ]--
r 35             roo
--[ 2018.11.20.20.31.37.299.0 ]--
r 35             root
--[ 2018.11.20.20.31.37.471.0 ]--
r 35             root.
--[ 2018.11.20.20.31.38.206.0 ]--
r 35             root.d
--[ 2018.11.20.20.31.38.511.0 ]--
r 35             root.di
--[ 2018.11.20.20.31.38.627.0 ]--
r 35             root.dir
--[ 2018.11.20.20.31.38.888.0 ]--
r 35             root.dir 
--[ 2018.11.20.20.31.39.673.0 ]--
r 35             root.dir =
--[ 2018.11.20.20.31.43.557.0 ]--
r 35             root.dir 
--[ 2018.11.20.20.31.43.800.0 ]--
r 35             root.dir
--[ 2018.11.20.20.31.43.902.0 ]--
r 35             root.d
--[ 2018.11.20.20.31.43.916.0 ]--
r 35             root.
--[ 2018.11.20.20.31.43.953.0 ]--
r 35             root
--[ 2018.11.20.20.31.44.069.0 ]--
r 35             ro
--[ 2018.11.20.20.31.44.330.0 ]--
r 35             r
--[ 2018.11.20.20.31.44.640.0 ]--
r 35             
--[ 2018.11.20.20.31.45.018.0 ]--
- 35
--[ 2018.11.20.20.32.28.852.0 ]--
r 27 
r 39 
--[ 2018.11.20.20.33.59.874.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); 
--[ 2018.11.20.20.34.00.107.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); /
--[ 2018.11.20.20.34.00.192.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //
--[ 2018.11.20.20.34.00.846.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //p
--[ 2018.11.20.20.34.01.009.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pu
--[ 2018.11.20.20.34.01.262.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pul
--[ 2018.11.20.20.34.01.327.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull
--[ 2018.11.20.20.34.01.526.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull 
--[ 2018.11.20.20.34.01.613.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull t
--[ 2018.11.20.20.34.01.675.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull th
--[ 2018.11.20.20.34.01.764.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the
--[ 2018.11.20.20.34.01.857.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the 
--[ 2018.11.20.20.34.01.978.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the v
--[ 2018.11.20.20.34.02.062.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the va
--[ 2018.11.20.20.34.02.180.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the val
--[ 2018.11.20.20.34.02.310.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the valu
--[ 2018.11.20.20.34.02.395.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value
--[ 2018.11.20.20.34.02.541.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value 
--[ 2018.11.20.20.34.02.711.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value o
--[ 2018.11.20.20.34.02.784.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of
--[ 2018.11.20.20.34.02.863.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of 
--[ 2018.11.20.20.34.03.344.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of f
--[ 2018.11.20.20.34.03.518.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fi
--[ 2018.11.20.20.34.03.747.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fin
--[ 2018.11.20.20.34.03.847.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of fing
--[ 2018.11.20.20.34.03.985.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finge
--[ 2018.11.20.20.34.04.147.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger
--[ 2018.11.20.20.34.04.231.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger 
--[ 2018.11.20.20.34.04.815.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger b
--[ 2018.11.20.20.34.04.921.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger ba
--[ 2018.11.20.20.34.05.018.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger bas
--[ 2018.11.20.20.34.05.185.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger base
--[ 2018.11.20.20.34.05.374.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based
--[ 2018.11.20.20.34.05.500.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based 
--[ 2018.11.20.20.34.05.636.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based o
--[ 2018.11.20.20.34.05.721.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on
--[ 2018.11.20.20.34.06.758.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on 
--[ 2018.11.20.20.34.07.390.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on t
--[ 2018.11.20.20.34.08.014.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on th
--[ 2018.11.20.20.34.08.173.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the
--[ 2018.11.20.20.34.08.270.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the 
--[ 2018.11.20.20.34.08.598.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the d
--[ 2018.11.20.20.34.08.728.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the di
--[ 2018.11.20.20.34.08.825.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the dir
--[ 2018.11.20.20.34.08.925.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the dire
--[ 2018.11.20.20.34.09.096.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direc
--[ 2018.11.20.20.34.09.283.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direct
--[ 2018.11.20.20.34.09.375.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the directi
--[ 2018.11.20.20.34.09.441.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the directio
--[ 2018.11.20.20.34.09.503.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction
--[ 2018.11.20.20.34.09.611.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction 
--[ 2018.11.20.20.34.09.758.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction w
--[ 2018.11.20.20.34.09.828.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we
--[ 2018.11.20.20.34.09.925.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we 
--[ 2018.11.20.20.34.09.994.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we a
--[ 2018.11.20.20.34.10.090.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we ar
--[ 2018.11.20.20.34.10.147.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are
--[ 2018.11.20.20.34.10.255.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are 
--[ 2018.11.20.20.34.10.850.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are o
--[ 2018.11.20.20.34.10.947.0 ]--
r 43                 double fingerValue = finger.p.xy(finger.dir); //pull the value of finger based on the direction we are on
--[ 2018.11.20.20.37.48.659.0 ]--
r 40                 finger.dir = Partition.nextDirection(f);
--[ 2018.11.20.20.37.48.757.0 ]--
r 40                 finger.dir = Partition.nextDirection(fi);
--[ 2018.11.20.20.37.48.867.0 ]--
r 40                 finger.dir = Partition.nextDirection(fin);
--[ 2018.11.20.20.37.48.884.0 ]--
r 40                 finger.dir = Partition.nextDirection(fing);
--[ 2018.11.20.20.37.49.060.0 ]--
r 40                 finger.dir = Partition.nextDirection(finge);
--[ 2018.11.20.20.37.49.143.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger);
--[ 2018.11.20.20.37.49.194.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.);
--[ 2018.11.20.20.37.49.390.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.d);
--[ 2018.11.20.20.37.49.587.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.di);
--[ 2018.11.20.20.37.49.722.0 ]--
r 40                 finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.37.52.726.0 ]--
r 40                / finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.37.52.846.0 ]--
r 40                // finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.07.180.0 ]--
r 40                
--[ 2018.11.20.20.38.08.945.0 ]--
+ 27     
--[ 2018.11.20.20.38.09.598.0 ]--
r 27     /
--[ 2018.11.20.20.38.10.015.0 ]--
r 27     //
--[ 2018.11.20.20.38.10.142.0 ]--
r 27     // 
--[ 2018.11.20.20.38.10.333.0 ]--
r 27     // u
--[ 2018.11.20.20.38.10.466.0 ]--
r 27     // us
--[ 2018.11.20.20.38.10.567.0 ]--
r 27     // usi
--[ 2018.11.20.20.38.10.641.0 ]--
r 27     // usin
--[ 2018.11.20.20.38.10.720.0 ]--
r 27     // using
--[ 2018.11.20.20.38.10.834.0 ]--
r 27     // using 
--[ 2018.11.20.20.38.10.966.0 ]--
r 27     // using s
--[ 2018.11.20.20.38.10.992.0 ]--
r 27     // using so
--[ 2018.11.20.20.38.11.117.0 ]--
r 27     // using som
--[ 2018.11.20.20.38.11.184.0 ]--
r 27     // using some
--[ 2018.11.20.20.38.11.268.0 ]--
r 27     // using somet
--[ 2018.11.20.20.38.11.392.0 ]--
r 27     // using someth
--[ 2018.11.20.20.38.11.492.0 ]--
r 27     // using somethi
--[ 2018.11.20.20.38.11.585.0 ]--
r 27     // using somethin
--[ 2018.11.20.20.38.11.671.0 ]--
r 27     // using something
--[ 2018.11.20.20.38.11.766.0 ]--
r 27     // using something 
--[ 2018.11.20.20.38.11.842.0 ]--
r 27     // using something l
--[ 2018.11.20.20.38.11.960.0 ]--
r 27     // using something li
--[ 2018.11.20.20.38.12.115.0 ]--
r 27     // using something lik
--[ 2018.11.20.20.38.12.157.0 ]--
r 27     // using something like
--[ 2018.11.20.20.38.12.321.0 ]--
r 27     // using something like 
--[ 2018.11.20.20.38.12.900.0 ]--
r 27     // using something like :
--[ 2018.11.20.20.38.13.366.0 ]--
r 27     // using something like :// finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.406.0 ]--
r 27     // using something like ://finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.538.0 ]--
r 27     // using something like :/finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.644.0 ]--
r 27     // using something like :finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.15.776.0 ]--
r 27     // using something like finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.126.0 ]--
r 27     // using something likefinger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.606.0 ]--
r 27     // using something like:finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.16.797.0 ]--
r 27     // using something like: finger.dir = Partition.nextDirection(finger.dir);
--[ 2018.11.20.20.38.19.570.0 ]--
+ 28     
--[ 2018.11.20.20.38.20.597.0 ]--
r 28     /
--[ 2018.11.20.20.38.20.758.0 ]--
r 28     //
--[ 2018.11.20.20.38.21.089.0 ]--
r 28     // 
--[ 2018.11.20.20.38.21.255.0 ]--
r 28     // I
--[ 2018.11.20.20.38.21.383.0 ]--
r 28     // I'
--[ 2018.11.20.20.38.21.556.0 ]--
r 28     // I'm
--[ 2018.11.20.20.38.21.739.0 ]--
r 28     // I'm 
--[ 2018.11.20.20.38.22.919.0 ]--
r 28     // I'm c
--[ 2018.11.20.20.38.23.022.0 ]--
r 28     // I'm co
--[ 2018.11.20.20.38.23.095.0 ]--
r 28     // I'm con
--[ 2018.11.20.20.38.23.208.0 ]--
r 28     // I'm conf
--[ 2018.11.20.20.38.23.325.0 ]--
r 28     // I'm confu
--[ 2018.11.20.20.38.23.403.0 ]--
r 28     // I'm confus
--[ 2018.11.20.20.38.23.449.0 ]--
r 28     // I'm confuse
--[ 2018.11.20.20.38.23.709.0 ]--
r 28     // I'm confused
--[ 2018.11.20.20.38.24.197.0 ]--
r 28     // I'm confused 
--[ 2018.11.20.20.38.24.341.0 ]--
r 28     // I'm confused a
--[ 2018.11.20.20.38.24.456.0 ]--
r 28     // I'm confused ab
--[ 2018.11.20.20.38.24.532.0 ]--
r 28     // I'm confused abo
--[ 2018.11.20.20.38.24.695.0 ]--
r 28     // I'm confused abou
--[ 2018.11.20.20.38.24.754.0 ]--
r 28     // I'm confused about
--[ 2018.11.20.20.38.24.911.0 ]--
r 28     // I'm confused about 
--[ 2018.11.20.20.38.25.157.0 ]--
r 28     // I'm confused about h
--[ 2018.11.20.20.38.25.297.0 ]--
r 28     // I'm confused about ho
--[ 2018.11.20.20.38.25.338.0 ]--
r 28     // I'm confused about how
--[ 2018.11.20.20.38.25.466.0 ]--
r 28     // I'm confused about how 
--[ 2018.11.20.20.38.25.582.0 ]--
r 28     // I'm confused about how t
--[ 2018.11.20.20.38.25.660.0 ]--
r 28     // I'm confused about how th
--[ 2018.11.20.20.38.25.738.0 ]--
r 28     // I'm confused about how thi
--[ 2018.11.20.20.38.25.833.0 ]--
r 28     // I'm confused about how this
--[ 2018.11.20.20.38.25.853.0 ]--
r 28     // I'm confused about how this 
--[ 2018.11.20.20.38.25.999.0 ]--
r 28     // I'm confused about how this w
--[ 2018.11.20.20.38.26.086.0 ]--
r 28     // I'm confused about how this wo
--[ 2018.11.20.20.38.26.164.0 ]--
r 28     // I'm confused about how this wor
--[ 2018.11.20.20.38.26.256.0 ]--
r 28     // I'm confused about how this work
--[ 2018.11.20.20.38.26.342.0 ]--
r 28     // I'm confused about how this works
--[ 2018.11.20.20.38.26.466.0 ]--
r 28     // I'm confused about how this works 
--[ 2018.11.20.20.38.26.599.0 ]--
r 28     // I'm confused about how this works t
--[ 2018.11.20.20.38.26.665.0 ]--
r 28     // I'm confused about how this works th
--[ 2018.11.20.20.38.26.751.0 ]--
r 28     // I'm confused about how this works tho
--[ 2018.11.20.20.38.26.842.0 ]--
r 28     // I'm confused about how this works thou
--[ 2018.11.20.20.38.26.919.0 ]--
r 28     // I'm confused about how this works thoug
--[ 2018.11.20.20.38.27.019.0 ]--
r 28     // I'm confused about how this works though
--[ 2018.11.20.20.38.27.235.0 ]--
r 28     // I'm confused about how this works though.
--[ 2018.11.20.20.38.27.325.0 ]--
r 28     // I'm confused about how this works though..
--[ 2018.11.20.20.38.27.409.0 ]--
r 28     // I'm confused about how this works though...
--[ 2018.11.20.20.38.33.441.0 ]--
r 28     // I'm confused about how this works though...I
--[ 2018.11.20.20.38.33.573.0 ]--
r 28     // I'm confused about how this works though...I 
--[ 2018.11.20.20.38.33.749.0 ]--
r 28     // I'm confused about how this works though...I a
--[ 2018.11.20.20.38.33.894.0 ]--
r 28     // I'm confused about how this works though...I as
--[ 2018.11.20.20.38.34.032.0 ]--
r 28     // I'm confused about how this works though...I ask
--[ 2018.11.20.20.38.34.074.0 ]--
r 28     // I'm confused about how this works though...I aske
--[ 2018.11.20.20.38.34.278.0 ]--
r 28     // I'm confused about how this works though...I asked
--[ 2018.11.20.20.38.34.404.0 ]--
r 28     // I'm confused about how this works though...I asked 
--[ 2018.11.20.20.38.34.535.0 ]--
r 28     // I'm confused about how this works though...I asked a
--[ 2018.11.20.20.38.34.619.0 ]--
r 28     // I'm confused about how this works though...I asked a 
--[ 2018.11.20.20.38.35.001.0 ]--
r 28     // I'm confused about how this works though...I asked a q
--[ 2018.11.20.20.38.35.213.0 ]--
r 28     // I'm confused about how this works though...I asked a qu
--[ 2018.11.20.20.38.35.401.0 ]--
r 28     // I'm confused about how this works though...I asked a que
--[ 2018.11.20.20.38.35.483.0 ]--
r 28     // I'm confused about how this works though...I asked a ques
--[ 2018.11.20.20.38.35.553.0 ]--
r 28     // I'm confused about how this works though...I asked a quest
--[ 2018.11.20.20.38.35.594.0 ]--
r 28     // I'm confused about how this works though...I asked a questi
--[ 2018.11.20.20.38.35.697.0 ]--
r 28     // I'm confused about how this works though...I asked a questio
--[ 2018.11.20.20.38.35.891.0 ]--
r 28     // I'm confused about how this works though...I asked a question 
--[ 2018.11.20.20.38.35.978.0 ]--
r 28     // I'm confused about how this works though...I asked a question o
--[ 2018.11.20.20.38.36.055.0 ]--
r 28     // I'm confused about how this works though...I asked a question on
--[ 2018.11.20.20.38.36.153.0 ]--
r 28     // I'm confused about how this works though...I asked a question on 
--[ 2018.11.20.20.38.36.404.0 ]--
r 28     // I'm confused about how this works though...I asked a question on P
--[ 2018.11.20.20.38.36.538.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Pi
--[ 2018.11.20.20.38.36.962.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Pia
--[ 2018.11.20.20.38.37.256.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piaz
--[ 2018.11.20.20.38.37.360.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazz
--[ 2018.11.20.20.38.37.551.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazza
--[ 2018.11.20.20.38.38.120.0 ]--
r 28     // I'm confused about how this works though...I asked a question on Piazza!
--[ 2018.11.20.20.38.40.812.0 ]--
r 42             
--[ 2018.11.20.20.38.41.206.0 ]--
- 41
--[ 2018.11.20.20.38.41.942.0 ]--
- 41
--[ 2018.11.20.20.38.46.559.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2018.11.20.20.39.01.756.0 ]--
+ 29     
--[ 2018.11.20.20.39.02.597.0 ]--
r 29     /
--[ 2018.11.20.20.39.02.728.0 ]--
r 29     //
--[ 2018.11.20.20.39.03.065.0 ]--
r 29     // 
--[ 2018.11.20.20.39.03.155.0 ]--
r 29     // e
--[ 2018.11.20.20.39.03.349.0 ]--
r 29     // en
--[ 2018.11.20.20.39.03.401.0 ]--
r 29     // end
--[ 2018.11.20.20.39.03.545.0 ]--
r 29     // end 
--[ 2018.11.20.20.39.03.800.0 ]--
r 29     // end T
--[ 2018.11.20.20.39.03.867.0 ]--
r 29     // end TO
--[ 2018.11.20.20.39.04.016.0 ]--
r 29     // end TOD
--[ 2018.11.20.20.39.04.230.0 ]--
r 29     // end TODO
--[ 2018.11.20.20.39.12.207.0 ]--
r 29     // endTODO
--[ 2018.11.20.20.39.12.382.0 ]--
r 29     // enTODO
--[ 2018.11.20.20.39.12.495.0 ]--
r 29     // eTODO
--[ 2018.11.20.20.39.12.836.0 ]--
r 29     // TODO
--[ 2018.11.20.20.39.14.971.0 ]--
r 29     // TODO 
--[ 2018.11.20.20.39.15.207.0 ]--
r 29     // TODO (
--[ 2018.11.20.20.39.15.463.0 ]--
r 29     // TODO (l
--[ 2018.11.20.20.39.15.620.0 ]--
r 29     // TODO (li
--[ 2018.11.20.20.39.15.772.0 ]--
r 29     // TODO (lik
--[ 2018.11.20.20.39.15.876.0 ]--
r 29     // TODO (like
--[ 2018.11.20.20.39.15.970.0 ]--
r 29     // TODO (like 
--[ 2018.11.20.20.39.16.073.0 ]--
r 29     // TODO (like t
--[ 2018.11.20.20.39.16.141.0 ]--
r 29     // TODO (like th
--[ 2018.11.20.20.39.16.217.0 ]--
r 29     // TODO (like the
--[ 2018.11.20.20.39.16.287.0 ]--
r 29     // TODO (like the 
--[ 2018.11.20.20.39.16.576.0 ]--
r 29     // TODO (like the d
--[ 2018.11.20.20.39.16.713.0 ]--
r 29     // TODO (like the do
--[ 2018.11.20.20.39.16.896.0 ]--
r 29     // TODO (like the dog
--[ 2018.11.20.20.39.17.131.0 ]--
r 29     // TODO (like the dog,
--[ 2018.11.20.20.39.17.242.0 ]--
r 29     // TODO (like the dog, 
--[ 2018.11.20.20.39.17.374.0 ]--
r 29     // TODO (like the dog, e
--[ 2018.11.20.20.39.17.532.0 ]--
r 29     // TODO (like the dog, ex
--[ 2018.11.20.20.39.18.302.0 ]--
r 29     // TODO (like the dog, exc
--[ 2018.11.20.20.39.18.412.0 ]--
r 29     // TODO (like the dog, exce
--[ 2018.11.20.20.39.18.554.0 ]--
r 29     // TODO (like the dog, excep
--[ 2018.11.20.20.39.18.685.0 ]--
r 29     // TODO (like the dog, except
--[ 2018.11.20.20.39.18.817.0 ]--
r 29     // TODO (like the dog, except 
--[ 2018.11.20.20.39.19.235.0 ]--
r 29     // TODO (like the dog, except s
--[ 2018.11.20.20.39.19.413.0 ]--
r 29     // TODO (like the dog, except sp
--[ 2018.11.20.20.39.19.513.0 ]--
r 29     // TODO (like the dog, except spe
--[ 2018.11.20.20.39.19.663.0 ]--
r 29     // TODO (like the dog, except spee
--[ 2018.11.20.20.39.19.764.0 ]--
r 29     // TODO (like the dog, except speel
--[ 2018.11.20.20.39.20.164.0 ]--
r 29     // TODO (like the dog, except spee
--[ 2018.11.20.20.39.20.264.0 ]--
r 29     // TODO (like the dog, except spe
--[ 2018.11.20.20.39.20.436.0 ]--
r 29     // TODO (like the dog, except spel
--[ 2018.11.20.20.39.20.599.0 ]--
r 29     // TODO (like the dog, except spele
--[ 2018.11.20.20.39.20.719.0 ]--
r 29     // TODO (like the dog, except spelee
--[ 2018.11.20.20.39.20.888.0 ]--
r 29     // TODO (like the dog, except speleed
--[ 2018.11.20.20.39.21.006.0 ]--
r 29     // TODO (like the dog, except speleed 
--[ 2018.11.20.20.39.21.381.0 ]--
r 29     // TODO (like the dog, except speleed
--[ 2018.11.20.20.39.21.482.0 ]--
r 29     // TODO (like the dog, except spelee
--[ 2018.11.20.20.39.21.610.0 ]--
r 29     // TODO (like the dog, except spele
--[ 2018.11.20.20.39.21.702.0 ]--
r 29     // TODO (like the dog, except spel
--[ 2018.11.20.20.39.22.025.0 ]--
r 29     // TODO (like the dog, except spell
--[ 2018.11.20.20.39.22.145.0 ]--
r 29     // TODO (like the dog, except spelle
--[ 2018.11.20.20.39.22.719.0 ]--
r 29     // TODO (like the dog, except spelled
--[ 2018.11.20.20.39.22.820.0 ]--
r 29     // TODO (like the dog, except spelled 
--[ 2018.11.20.20.39.22.898.0 ]--
r 29     // TODO (like the dog, except spelled a
--[ 2018.11.20.20.39.22.985.0 ]--
r 29     // TODO (like the dog, except spelled a 
--[ 2018.11.20.20.39.23.072.0 ]--
r 29     // TODO (like the dog, except spelled a l
--[ 2018.11.20.20.39.23.162.0 ]--
r 29     // TODO (like the dog, except spelled a li
--[ 2018.11.20.20.39.23.259.0 ]--
r 29     // TODO (like the dog, except spelled a lit
--[ 2018.11.20.20.39.23.437.0 ]--
r 29     // TODO (like the dog, except spelled a litt
--[ 2018.11.20.20.39.23.503.0 ]--
r 29     // TODO (like the dog, except spelled a littl
--[ 2018.11.20.20.39.23.572.0 ]--
r 29     // TODO (like the dog, except spelled a little
--[ 2018.11.20.20.39.23.636.0 ]--
r 29     // TODO (like the dog, except spelled a little 
--[ 2018.11.20.20.39.23.749.0 ]--
r 29     // TODO (like the dog, except spelled a little d
--[ 2018.11.20.20.39.23.856.0 ]--
r 29     // TODO (like the dog, except spelled a little di
--[ 2018.11.20.20.39.23.972.0 ]--
r 29     // TODO (like the dog, except spelled a little dif
--[ 2018.11.20.20.39.24.168.0 ]--
r 29     // TODO (like the dog, except spelled a little diff
--[ 2018.11.20.20.39.24.191.0 ]--
r 29     // TODO (like the dog, except spelled a little diffe
--[ 2018.11.20.20.39.24.317.0 ]--
r 29     // TODO (like the dog, except spelled a little differ
--[ 2018.11.20.20.39.24.380.0 ]--
r 29     // TODO (like the dog, except spelled a little differe
--[ 2018.11.20.20.39.24.574.0 ]--
r 29     // TODO (like the dog, except spelled a little differen
--[ 2018.11.20.20.39.24.614.0 ]--
r 29     // TODO (like the dog, except spelled a little different
--[ 2018.11.20.20.39.24.907.0 ]--
r 29     // TODO (like the dog, except spelled a little different!
--[ 2018.11.20.20.39.25.524.0 ]--
r 29     // TODO (like the dog, except spelled a little different!)
